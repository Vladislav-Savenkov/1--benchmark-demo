
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Функция рассчитывает общие площади здания или подъезда по размерам 
// общих площадей помещений, входящих в состав здания или подъезда.
Функция РассчитатьПлощадиЗдания(Объект, СписокВидовПомещений = Неопределено) Экспорт
	
	ДанныеПоПлощадямЗдания = Новый Структура();
	
	ПлощадьЖилыхНежилыхПомещений              = 0;
	ПлощадьМестОбщегоПользования              = 0;
	ПлощадьОбщая                              = 0;
	ПлощадьЖилыхПомещений                     = 0;
	ПлощадьПомещенийСИндивидуальнымОтоплением = 0;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Объект,
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект.ВидПомещения КАК ВидПомещения,
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект.ВидПомещения.ОтноситсяКМОП КАК ОтноситсяКМОП,
	|	ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0) КАК Площадь
	|ПОМЕСТИТЬ ВрТаблицаПлощадей
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&Период,
	|			Объект.Владелец = &Объект
	|				И ВидПлощади = &ВидПлощади) КАК КВП_ПлощадьПомещенияСрезПоследних
	|ГДЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект.Родитель = ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Объект,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь КАК Площадь
	|ПОМЕСТИТЬ врПлощадьПомещенийСИндивидуальнымОтоплением
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&Период,
	|			Объект.Владелец = &Объект
	|				И ВидПлощади = &ВидПлощади
	|				И Объект.ПроектПомещения.ИндивидуальноеОтопление) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ТаблицаПлощадей.ОтноситсяКМОП
	|				ТОГДА ЕСТЬNULL(ТаблицаПлощадей.Площадь, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПлощадьЖилыхНежилыхПомещений,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаПлощадей.ОтноситсяКМОП
	|				ТОГДА ЕСТЬNULL(ТаблицаПлощадей.Площадь, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПлощадьМестОбщегоПользования,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаПлощадей.ВидПомещения В (&СписокВидовПомещений)
	|				ТОГДА ЕСТЬNULL(ТаблицаПлощадей.Площадь, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПлощадьЖилыхПомещений,
	|	СУММА(врПлощадьЗданияСИндивидуальнымОтоплением.Площадь) КАК ПлощадьПомещенийСИндивидуальнымОтоплением
	|ИЗ
	|	ВрТаблицаПлощадей КАК ТаблицаПлощадей
	|		ЛЕВОЕ СОЕДИНЕНИЕ врПлощадьПомещенийСИндивидуальнымОтоплением КАК врПлощадьЗданияСИндивидуальнымОтоплением
	|		ПО ТаблицаПлощадей.Объект = врПлощадьЗданияСИндивидуальнымОтоплением.Объект";
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.КВП_Подъезды") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст , "Объект.Владелец", "Объект.Подъезд");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Объект",     Объект);
	Запрос.УстановитьПараметр("Период",     УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	Запрос.УстановитьПараметр("ВидПлощади", Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь);
	
	Если СписокВидовПомещений = Неопределено Тогда
		Запрос.УстановитьПараметр("СписокВидовПомещений", Новый Массив);
	Иначе
		Запрос.УстановитьПараметр("СписокВидовПомещений", СписокВидовПомещений);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ПлощадьЖилыхНежилыхПомещений = ?(Выборка.ПлощадьЖилыхНежилыхПомещений = NULL, 0, Выборка.ПлощадьЖилыхНежилыхПомещений);
		ПлощадьМестОбщегоПользования = ?(Выборка.ПлощадьМестОбщегоПользования = NULL, 0, Выборка.ПлощадьМестОбщегоПользования);
		ПлощадьЖилыхПомещений        = ?(Выборка.ПлощадьЖилыхПомещений = NULL,        0, Выборка.ПлощадьЖилыхПомещений);
		
		ПлощадьПомещенийСИндивидуальнымОтоплением = ?(Выборка.ПлощадьПомещенийСИндивидуальнымОтоплением = NULL, 0, Выборка.ПлощадьПомещенийСИндивидуальнымОтоплением);
		
	КонецЕсли;
	
	ДанныеПоПлощадямЗдания.Вставить("ПлощадьЖилыхНежилыхПомещений",     ПлощадьЖилыхНежилыхПомещений);
	ДанныеПоПлощадямЗдания.Вставить("ПлощадьМестОбщегоПользования",     ПлощадьМестОбщегоПользования);
	ДанныеПоПлощадямЗдания.Вставить("ПлощадьОбщая",                     ПлощадьЖилыхНежилыхПомещений +
																		ПлощадьМестОбщегоПользования);
	ДанныеПоПлощадямЗдания.Вставить("ПлощадьЖилыхПомещений",            ПлощадьЖилыхПомещений);
	ДанныеПоПлощадямЗдания.Вставить("ПлощадьСИндивидуальнымОтоплением", ПлощадьПомещенийСИндивидуальнымОтоплением);
	
	Возврат ДанныеПоПлощадямЗдания;
	
КонецФункции //РассчитатьПлощадиЗдания()

// Функция определяет общую площадь всех помещений, включая помещения, входящие в состав общего имущества.
//
// Параметры:
//  Объект      - Ссылка на справочник - здание, подъезд.
//  ВидПлощади  - Строка - Возможные значения: 
//							"ПлощадьОбщая"                 – общая площадь всех помещений, в т.ч. входящих в состав общего имущества;
//							"ПлощадьЖилыхНежилыхПомещений" – общая площадь всех жилых и нежилых помещений;
//							"ПлощадьМестОбщегоПользования" - общая площадь помещений (мест общего пользования, подсобных помещений),
//																	входящих в состав общего имущества.
//
Функция ОпределитьОбщуюПлощадьПомещений(Объект, ВидПлощади) Экспорт

	ВидОбъекта = ТипЗнч(Объект);
	МетаданныеОбъекта = Объект.Метаданные();
	
	Если ВидОбъекта = Тип("СправочникСсылка.КВП_Здания") Тогда
		
		// Данные о размере площади берем из реквизитов справочника.
		ИмяВидаПлощади = СтрЗаменить(ВидПлощади, "Площадь", "ПлощадьЗдания");
		Если НЕ МетаданныеОбъекта.Реквизиты.Найти(ИмяВидаПлощади) = Неопределено Тогда
			Возврат Объект[ИмяВидаПлощади];
		КонецЕсли;
		
	ИначеЕсли ВидОбъекта = Тип("СправочникСсылка.КВП_Подъезды") Тогда
		
		// Данные о размере площади рассчитываем по размерам 
		// общих площадей помещений, входящих в состав подъезда.
		ДанныеПоПлощадямПодъезда = РассчитатьПлощадиЗдания(Объект);
		Возврат ДанныеПоПлощадямПодъезда[ВидПлощади];
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции  //ОпределитьОбщуюПлощадьВсехПомещений()

// Функция возвращает признак вывода предупреждения о наименованиях зданий.
//
Функция ПолучитьНастройкуВыводаПредупрежденияОНаименованияхЗданий() Экспорт
	
	// Значение по умолчанию.
	ПоказыватьПредупреждения = Ложь;
	
	// Получение настройки.
	ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить("ФормаПредупрежденияОНаименованияхЗданий", "ПоказыватьПредупреждение");
	Если ЗначениеНастройки = Неопределено Тогда
		
		// Если настройка не задана, определим ее.
		ХранилищеОбщихНастроек.Сохранить("ФормаПредупрежденияОНаименованияхЗданий", "ПоказыватьПредупреждение", Истина);
		ЗначениеНастройки = Истина;
		// Снова настройку.
		//ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить("ФормаПредупрежденияОНаименованияхЗданий", "ПоказыватьПредупреждение");
		
	КонецЕсли;
	
	// Установим значение результата, если настройка получена.
	Если ЗначениеНастройки = Истина Тогда
		ПоказыватьПредупреждения = Истина;
	КонецЕсли;
	
	Возврат ПоказыватьПредупреждения;
	
КонецФункции

// Процедура дополняет представление адреса строкой.
Процедура ДополнитьПредставлениеАдреса(ТекущееПредставление, Дополнение, СтрокаКонкатенации)

	Если Дополнение <> "" Тогда
		ТекущееПредставление = ТекущееПредставление + СтрокаКонкатенации + Дополнение;
	КонецЕсли;

КонецПроцедуры

// Возвращает представление адреса здания.
//
// Параметры
//  Здание  – СправочникСсылка.КВП_Здания – здание, для которого ищется адрес.
//
// Возвращаемое значение:
//  Строка – наименование здания.
//
Функция ПолучитьПредставлениеЗдания(Здание) Экспорт
	
	// Важно: 
	//  Для зданий берется представление адреса из наименования самого здания. 
	//  Для каждого здания доступна установка произвольного наименования
	//  с возможностью его заполнения на основании введенного адреса по различным форматам.
	//
	// Для информации:
	//  Ранее адрес здания получали всегда из контактной информации,
	//  а формат представления (СоставПредставленияАдреса) получался из учетной политики.
	
	Возврат Здание.Наименование;
	
КонецФункции // ПолучитьПредставлениеЗдания()

// Формирует строковое представление адреса согласно указанному составу.
//
// Параметры:
//  СтруктураАдреса           - Структура - Адрес в виде структуры. Описание структур см. в функциях
//                                           СведенияОбАдресе и ПредыдущаяСтруктураКонтактнойИнформацииXML ОМ.
//  СоставПредставленияАдреса - Строка - Определяет порядок формирования адреса.
//                                        ПРИМЕР: "Индекс,Регион,Район,Город,НаселенныйПункт,Улица,Дом,Корпус".
//  ПредставлениеКорпуса      - Строка - Разделитель номера дома и корпуса.
//
// Возвращаемое значение:
//  Строка – представление адреса объекта согласно настройкам.
//
Функция ПолучитьПредставлениеАдресаЗданияПоСтруктуре(СтруктураАдреса, СоставПредставленияАдреса, ПредставлениеКорпуса = "/") Экспорт
	
	ТекПредставление = "";
	
	Если ПустаяСтрока(СоставПредставленияАдреса) Тогда
		Возврат ТекПредставление;
	КонецЕсли;
	
	Список = СоставПредставленияАдреса;
	Список = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	
	Для Счетчик = 1 по ЧислоПараметров Цикл
		
		ПозЗапятой = Найти(Список, ",");
		
		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			ИмяПараметра = СокрЛП(ИмяПараметра);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));
			СтрокаКонкатенации = ", ";
			
			Если ИмяПараметра = "Дом" Тогда
				СтрокаКонкатенации = ", " + НРег(СтруктураАдреса.ТипДома) + " № ";
			ИначеЕсли ИмяПараметра = "Корпус" Тогда
				СтрокаКонкатенации = ", " + НРег(СтруктураАдреса.ТипКорпуса) + " ";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураАдреса.Корпус) Тогда
				СтруктураАдреса.Вставить("НомерДома", СтруктураАдреса.Дом + ПредставлениеКорпуса + СтруктураАдреса.Корпус);
			КонецЕсли;
			
			Если СтруктураАдреса.Свойство(ИмяПараметра) Тогда
				ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса[ИмяПараметра]), СтрокаКонкатенации);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрДлина(ТекПредставление) > 2 Тогда
		ТекПредставление = Сред(ТекПредставление, 3);
	КонецЕсли;
	
	Возврат ТекПредставление;
	
КонецФункции // ПолучитьПредставлениеАдресаЗданияПоСтруктуре()

#КонецОбласти

//////////////////////////////////////////////////////////////////////
// МЕХАНИЗМ АВТОМАТИЧЕСКОГО ОБНОВЛЕНИЯ ОБЩИХ ПЛОЩАДЕЙ ЗДАНИЯ

#Область МеханизмАвтоматическогоОбновленияОбщихПлощадейЗдания

// Функция возвращает значение настройки автоматического пересчета общих площадей здания.
//
Функция ПолучитьНастройкуАвтоматическогоПересчетаПлощадейЗданий() Экспорт
	
	Возврат Константы.УПЖКХ_АвтоматическиПересчитыватьПлощадиЗданий.Получить();
	
КонецФункции

// Функция определяет необходимость пересчета площадей помещения в случае изменения "Общей площади".
//
// Параметры:
//  Объект       - ссылка на объект проверки;
//  ПлощадиПомещения - таблица значений площадей помещений.
//
// Возвращаемое значение:
//  Истина       - установлена необходимость пересчета площадей помещений;
//  Ложь         - не требуется пересчет площадей помещений.
//
Функция ПроверитьИзменениеОбщейПлощади(Объект, ПлощадиПомещения) Экспорт
	
	НеобходимоОбновитьДанныеПоПлощадямЗдания  = Ложь;
	
	// Проверяем, нужно ли обновлять площадь здания.
	НеобходимоПересчитыватьОбщиеПлощадиЗдания = ПолучитьНастройкуАвтоматическогоПересчетаПлощадейЗданий();
	Если НеобходимоПересчитыватьОбщиеПлощадиЗдания Тогда
		
		ТекущаяПлощадь  = 0;
		ИсходнаяПлощадь = 0;
		
		СтруктураПоискаОбщейПлощади = Новый Структура("ВидПлощади", Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь);
		врОбщаяПлощадь = ПлощадиПомещения.Скопировать(ПлощадиПомещения.НайтиСтроки(СтруктураПоискаОбщейПлощади), "Период, Площадь");
		
		врОбщаяПлощадь.Сортировать("Период Убыв");
		
		Если врОбщаяПлощадь.Количество() > 0 Тогда
			ТекущаяПлощадь = врОбщаяПлощадь[0].Площадь;
		КонецЕсли;
		
		// Определим исходную площадь.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0) КАК Площадь
		|ИЗ
		|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
		|			,
		|			Объект = &Объект
		|				И ВидПлощади = &ВидПлощади) КАК КВП_ПлощадьПомещенияСрезПоследних";
		
		Запрос.УстановитьПараметр("Объект",     Объект.Ссылка);
		Запрос.УстановитьПараметр("ВидПлощади", Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь);
		
		ВыборкаПлощади = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаПлощади.Следующий() Тогда
			ИсходнаяПлощадь = ВыборкаПлощади.Площадь;
		КонецЕсли;
		
		// Установим необходимость обновления площадей здания.
		НеобходимоОбновитьДанныеПоПлощадямЗдания = НЕ (ТекущаяПлощадь = ИсходнаяПлощадь);
		
	КонецЕсли;
	
	Возврат НеобходимоОбновитьДанныеПоПлощадямЗдания;
	
КонецФункции //ПроверитьИзменениеОбщейПлощади()

// Функция выполняет обновление общих площадей здания, если это необходимо.
//
// Параметр:
//  Здание - ссылка на здание.
//
// Возвращаемое значение:
//  ИСТИНА       - значение пересчитано;
//  ЛОЖЬ         - значение не пересчитано.
//
Функция ОбновитьОбщиеПлощадиЗданияПриНеобходимости(Здание) Экспорт
	
	ПлощадьПересчитана = Ложь;
	
	ДанныеПоПлощадям = РассчитатьПлощадиЗдания(Здание);
	
	ЗданиеОбъект = Здание.ПолучитьОбъект();
	
	Если НЕ ЗданиеОбъект.ПлощадьЗданияОбщая = ДанныеПоПлощадям.ПлощадьОбщая Тогда
		
		ЗданиеОбъект.ПлощадьЗданияОбщая                 = ДанныеПоПлощадям.ПлощадьОбщая;
		ЗданиеОбъект.ПлощадьЗданияЖилыхНежилыхПомещений = ДанныеПоПлощадям.ПлощадьЖилыхНежилыхПомещений;
		ЗданиеОбъект.ПлощадьЗданияМестОбщегоПользования = ДанныеПоПлощадям.ПлощадьМестОбщегоПользования;
		
		КВП_ЗаписатьОбъект(ЗданиеОбъект);
		
		ПлощадьПересчитана = Истина;
		
	КонецЕсли;
	
	Возврат ПлощадьПересчитана;
	
КонецФункции // ПроверитьИзменениеОбщейПлощади()

#КонецОбласти

#КонецЕсли