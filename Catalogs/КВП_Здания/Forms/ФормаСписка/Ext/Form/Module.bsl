#Область ПроцедурыИФункцииДляРаботыСДанными

&НаКлиенте
// Обновляет отображение подчиненных таблиц и отчетов в зависимости
// от текущего элемента.
Процедура ОбновитьПодчиненныеТаблицы()
	
	// Если не определена текущая строка, ничего не делаем.
	Если ТекущееЗдание = Неопределено ИЛИ ТекущееЗдание.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоГруппа = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущееЗдание, "ЭтоГруппа");
	
	Многоквартирное = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущееЗдание, "Многоквартирное");
	ЖилойДомБлокированнойЗастройки = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущееЗдание, "ЖилойДомБлокированнойЗастройки");
	
	// У жилых домов НЕ может быть подъездов. Для жилых домов блокированной застройки имеет место понятие "Блок",
	// но оно не идентично "Подъезду".
	Элементы.СтраницаПодъезды.Видимость   = НЕ (Многоквартирное = Ложь);
	Элементы.КвартирыПодъезд.Видимость    = НЕ (Многоквартирное = Ложь);
	Элементы.КвартирыНомерБлока.Видимость = (ЖилойДомБлокированнойЗастройки = Истина);
	
	// Если это не многоквартирный дом, то страница "Подъезды" должна быть недоступна.
	// Поэтому для не многоквартирного дома переключаемся на страницу "Помещения", если текущая - "Подъезды".
	Если Многоквартирное = Ложь
	   И Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница = Элементы.СтраницаПодъезды Тогда
		Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница = Элементы.СтраницаПомещения;
	КонецЕсли;
	
	// Обработка текущего элемента.
	ТекСтраница = Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница;
	
	Если ТекСтраница = Элементы.СтраницаПомещения Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(Квартиры, "Владелец", ТекущееЗдание);
		
	ИначеЕсли ТекСтраница = Элементы.СтраницаПодъезды Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(Подъезды, "Владелец", ТекущееЗдание);
		
	ИначеЕсли ТекСтраница = Элементы.СтраницаСчетчики Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСчетчиков, "Дата",
																				КонецДня(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату()));
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСчетчиков, "Объект", ТекущееЗдание);
		
		Если ВыводитьГрафики Тогда
			Если НЕ ЭтоГруппа Тогда
				Графики_УстановитьВидимостьТабличногоДокументаСГрафиками(ТекСтраница, "ФОРМИРОВАНИЕОТЧЕТА");
				ПодключитьОбработчикОжидания("Графики_ОбновитьГрафикиПоЗданиям", 0.2, Истина);
			Иначе
				ГрафикиТабличныйДокумент = Новый ТабличныйДокумент;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТекСтраница = Элементы.СтраницаЭлектронныйПаспортДома Тогда
		
		ЭлектронныйПаспортДома = Новый ТабличныйДокумент;
		
		ЭлектронныйПаспортДома = ПодготовитьДанныеНаСервере(ТекущееЗдание);
		
	ИначеЕсли ТекСтраница = Элементы.СтраницаВзаиморасчеты Тогда
		
		Если ВыводитьГрафики Тогда
			Графики_УстановитьВидимостьТабличногоДокументаСГрафиками(ТекСтраница, "ФОРМИРОВАНИЕОТЧЕТА");
			ПодключитьОбработчикОжидания("Графики_ОбновитьГрафикиПоЗданиям", 0.2, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПодчиненныеТаблицы()

&НаСервере
// Функция подготавливает табличный документ, содержащий электронный паспорт дома.
Функция ПодготовитьДанныеНаСервере(ТекущееЗдание)
	
	// Запрос на отбор последнего документа сведений о здании.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.Ссылка КАК Документ,
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.Дата КАК Дата,
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.ПериодСбораДанных КАК ПериодСбораДанных
	|ПОМЕСТИТЬ втВсеДокументыЗдания
	|ИЗ
	|	Документ.УПЖКХ_ПодготовкаЭлектронныхПаспортов КАК УПЖКХ_ПодготовкаЭлектронныхПаспортов
	|ГДЕ
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.Здание = &Здание
	|	И НЕ УПЖКХ_ПодготовкаЭлектронныхПаспортов.ПометкаУдаления
	|	И УПЖКХ_ПодготовкаЭлектронныхПаспортов.ПаспортЗаполнен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(втВсеДокументыЗдания.ПериодСбораДанных) КАК ПоследнийПериод
	|ПОМЕСТИТЬ втПоследнийУчтенныйПериод
	|ИЗ
	|	втВсеДокументыЗдания КАК втВсеДокументыЗдания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПоследнийУчтенныйПериод.ПоследнийПериод КАК ПоследнийПериод,
	|	МАКСИМУМ(втВсеДокументыЗдания.Дата) КАК ПоследняяДата
	|ПОМЕСТИТЬ втДанныеДляОтбораДокумента
	|ИЗ
	|	втПоследнийУчтенныйПериод КАК втПоследнийУчтенныйПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВсеДокументыЗдания КАК втВсеДокументыЗдания
	|		ПО втПоследнийУчтенныйПериод.ПоследнийПериод = втВсеДокументыЗдания.ПериодСбораДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	втПоследнийУчтенныйПериод.ПоследнийПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеДокументыЗдания.Документ КАК Документ
	|ИЗ
	|	втДанныеДляОтбораДокумента КАК втДанныеДляОтбораДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВсеДокументыЗдания КАК втВсеДокументыЗдания
	|		ПО втДанныеДляОтбораДокумента.ПоследнийПериод = втВсеДокументыЗдания.ПериодСбораДанных
	|			И втДанныеДляОтбораДокумента.ПоследняяДата = втВсеДокументыЗдания.Дата";
	
	Запрос.УстановитьПараметр("Здание", ТекущееЗдание);
	
	// В таблице результата может быть только 1 строка.
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Если НЕ ТаблицаДокументов.Количество() = 0 Тогда
		
		// Массив, необходимый для передачи в функцию формирования сведений о здании,
		// расположенную в менеджере документа "Подготовка данных для раскрытия".
		МассивДокументовДляПередачи = Новый Массив;
		МассивДокументовДляПередачи.Добавить(ТаблицаДокументов[0].Документ);
		
		// Формирование и вывод табличного документа на форму.
		Возврат Документы.УПЖКХ_ПодготовкаЭлектронныхПаспортов.ПечатьЭлектронныхПаспортов(МассивДокументовДляПередачи, );
		
	КонецЕсли;
	
	Возврат Новый ТабличныйДокумент;
	
КонецФункции

&НаКлиенте
// Процедура открывает форму предупреждения.
//
Процедура ПоказатьФормуПредупрежденияОНаименованияхЗданий()
	
	ОткрытьФорму("Справочник.КВП_Здания.Форма.ФормаПредупрежденияОНаименованияхЗданий",, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установим пустые значения параметров динамических списков.
	
	// Таблица помещений
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(Квартиры, "Владелец", Неопределено);
	
	// Таблица подъездов
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(Подъезды, "Владелец", Неопределено);
	
	// Таблица счетчиков
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСчетчиков, "Дата",
																			КонецДня(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату()));
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСчетчиков, "Объект", Неопределено);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьСписокВыбораВидПериода(Перечисления.ДоступныеПериодыОтчета.Месяц,
																	Элементы.ВидПериода.СписокВыбора, ВидПериода);
	
	// Переменную РабочаяДата создавать нельзя, в толстом клиенте это вызовет ошибку.
	мРабочаяДата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	
	ДатаНачала     = НачалоМесяца(ДобавитьМесяц(мРабочаяДата, -3));
	ДатаОкончания  = КонецМесяца(мРабочаяДата);
	
	Обработки.УПЖКХ_ФормированиеАналитическихГрафиковПоДаннымУчета.Графики_ПриСозданииНаСервере("КВП_Здания", ВыводитьГрафики);
	
	// Определим необходимость вывода предупреждения о наименовании зданий.
	ПоказыватьПредупреждения = Справочники.КВП_Здания.ПолучитьНастройкуВыводаПредупрежденияОНаименованияхЗданий();
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	Графики_УстановитьВидимостьТабличногоДокументаСГрафиками(Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница);
	
	// Открываем форму предупреждения, если требуется.
	Если ПоказыватьПредупреждения Тогда
		ПодключитьОбработчикОжидания("ПоказатьФормуПредупрежденияОНаименованияхЗданий", 2, Истина);
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ОтборОрганизация".
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриСменеСтраницы" панели "ПанельДополнительнойИнформации".
Процедура ПанельДополнительнойИнформацииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОтключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы");
	ОтключитьОбработчикОжидания("Графики_ОбновитьГрафикиПоЗданиям");
	
	ГрафикиТабличныйДокумент = Новый ТабличныйДокумент;
	
	Графики_УстановитьВидимостьТабличногоДокументаСГрафиками(Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница);
	
	ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" поля "Список".
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущееЗдание = Элемент.ТекущаяСтрока;
	
	Если ТекущееЗдание <> ПредыдущееЗдание Тогда
		ПредыдущееЗдание = ТекущееЗдание;
		ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры // СписокПриАктивизацииСтроки()

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" поля "Квартиры".
Процедура КвартирыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущееЗдание, "ЭтоГруппа") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Для создания помещения необходимо выбрать одно здание.";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если Не ТекущееЗдание = Неопределено Тогда
		ФормаПомещения = ПолучитьФорму("Справочник.УПЖКХ_Помещения.ФормаОбъекта", Новый Структура("Владелец", ТекущееЗдание));
		ФормаПомещения.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" поля "Подъезды".
Процедура ПодъездыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если Не ТекущееЗдание = Неопределено Тогда
		ФормаПомещения = ПолучитьФорму("Справочник.КВП_Подъезды.ФормаОбъекта", Новый Структура("Владелец", ТекущееЗдание));
		ФормаПомещения.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Выбор" поля "ТаблицаСчетчиков".
Процедура ТаблицаСчетчиковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не Элемент.ТекущиеДанные = Неопределено Тогда
		
		Если Поле.Имя = "ТаблицаСчетчиковСчетчик" Тогда
			ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Счетчик);
		КонецЕсли;
		Если Поле.Имя = "ТаблицаСчетчиковУслуга" Тогда
			ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Услуга);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТаблицаСчетчиковВыбор()

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" поля "ТаблицаСчетчиков".
Процедура ТаблицаСчетчиковПриАктивизацииСтроки(Элемент)
	
	Если ВыводитьГрафики Тогда
		МетодВыводаУслугВДиаграммах = Графики_ПолучитьЗначениеМетодаВыводаУслугВДиаграммах();
		Если Элемент.ТекущиеДанные <> Неопределено
		   И НЕ Элемент.ТекущиеДанные.Услуга.Пустая()
		   И МетодВыводаУслугВДиаграммах = 0
		   И ТекущаяУслугаТаблицыГрафиков <> Элемент.ТекущиеДанные.Услуга Тогда
			ТекущаяУслугаТаблицыГрафиков = Элемент.ТекущиеДанные.Услуга;
			Графики_УстановитьВидимостьТабличногоДокументаСГрафиками(Элементы.ТаблицаСчетчиков, "ФОРМИРОВАНИЕОТЧЕТА");
			ПодключитьОбработчикОжидания("Графики_ОбновитьГрафикиПоЗданиям", 0.2, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаСчетчиковПриАктивизацииСтроки()

&НаКлиенте
// Обработчик команды "ОткрытьМастерУстановкиНаименованийЗданий".
Процедура ОткрытьГрупповуюУстановкуНаименованийЗданий(Команда)
	
	ОткрытьФорму("Справочник.КВП_Здания.Форма.ФормаГрупповойУстановкиНаименованийЗданий",, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОткрытьОтчетПоЗданиям".
Процедура ОткрытьОтчетПоЗданиям(Команда)
	
	Если ТекущееЗдание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаОтчета = ПолучитьФорму("Отчет.КВП_ОтчетПоЗданиям.Форма", Новый Структура("Здание", ТекущееЗдание));
	ФормаОтчета.СформироватьПриОткрытии = Истина;
	
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОткрытьОтчетСписокПомещений".
Процедура ОткрытьОтчетСписокПомещений(Команда)
	
	Если ТекущееЗдание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаОтчета = ПолучитьФорму("Отчет.КВП_ОтчетПоПомещениям.Форма", Новый Структура("Здание", ТекущееЗдание));
	ФормаОтчета.СформироватьПриОткрытии = Истина;
	
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ЗаполнитьНормыПотребления".
Процедура ЗаполнитьНормыПотребления(Команда)
	
	Если ТекущееЗдание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаЗаполненияНорм = 
		ПолучитьФорму("Обработка.КВП_ЗаполнениеНормПотребленияУслуг.Форма", Новый Структура("НормаНаЛицевойСчет", Ложь));
	НоваяСтрока = ФормаЗаполненияНорм.Объект.Объекты.Добавить();
	НоваяСтрока.Объект = ТекущееЗдание;
	ФормаЗаполненияНорм.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОткрытьЛС".
Процедура ОткрытьЛС(Команда)
	
	Если ТекущееЗдание = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УПЖКХ_РаботаСЛицевымиСчетамиКлиент.ОткрытиеЛицевогоСчета(Новый Структура("Здание", ТекущееЗдание), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "ВидПериода".
Процедура ВидПериодаПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВидПериодаПриИзменении(Элемент, ВидПериода, ДатаНачала, ДатаОкончания, Период);
	
	ПараметрыСтраниц = Новый Структура;
	ПараметрыСтраниц.Вставить("ПроизвольныйПериод", "ГруппаПроизвольныйПериод");
	ПараметрыСтраниц.Вставить("ПериодПоВидам"     , "ГруппаПериодПоВидам");
	ПараметрыСтраниц.Вставить("День"              , "ГруппаДень");
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(ВидПериода, Элементы.ГруппаПоляВводаПериода,
																			ПараметрыСтраниц);
	
	ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "НачалоПериода".
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "НачалоПериодаДень".
Процедура НачалоПериодаДеньПриИзменении(Элемент)
	
	ДатаОкончания = КонецДня(ДатаНачала);
	
	ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "Период".
Процедура ПериодПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодПриИзменении(Элемент, Период, ДатаНачала, ДатаОкончания);
	
	ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля "Период".
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодНачалоВыбораЗавершение", ЭтотОбъект);
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, 
		ВидПериода, ДатаНачала, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Процедура окончания асинхроного выбора периода.
Процедура ПериодНачалоВыбораЗавершение(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	// Установим полученный период
	Если СтруктураПериода <> Неопределено Тогда
		ВидПериода    = СтруктураПериода.ВидПериода;
		Период        = СтруктураПериода.Период;
		ДатаНачала    = СтруктураПериода.НачалоПериода;
		ДатаОкончания = СтруктураПериода.КонецПериода;
		
		ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" поля "Период".
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОбработкаВыбора(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		ВидПериода, Период, ДатаНачала, ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "АвтоПодбор" поля "Период".
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка,
		ВидПериода, Период, ДатаНачала, ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОкончаниеВводаТекста" поля "Период".
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
		ВидПериода, Период, ДатаНачала, ДатаОкончания);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

#КонецОбласти

#Область РаботаСГрафиками

&НаКлиенте
// Процедура устанавливает начальные параемтры графиков.
Процедура Графики_ОткрытьНастройкиГрафиков(Команда)
	
	ТекущаяВкладка = Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница.Заголовок;
	ОписаниеОповещения = Новый ОписаниеОповещения("Графики_ОбработатьРезультатЗакрытияФормыНастроекГрафиков", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ФормированиеАналитическихГрафиковПоДаннымУчета.Форма.ФормаНастройкиГрафиков",
					Новый Структура("ИмяОбъекта,ВидГрафика", "КВП_Здания", ТекущаяВкладка), ЭтаФорма,,,,
					ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // Графики_ОткрытьНастройкиГрафиков()

&НаСервереБезКонтекста
// Возвращает значение параметра "МетодВыводаУслугВДиаграммах" из настроек графиков.
//
Функция Графики_ПолучитьЗначениеМетодаВыводаУслугВДиаграммах()
	
	Возврат Обработки.УПЖКХ_ФормированиеАналитическихГрафиковПоДаннымУчета.Графики_ПолучитьЗначениеМетодаВыводаУслугВДиаграммах("КВП_Здания");
	
КонецФункции // Графики_ПолучитьЗначениеМетодаВыводаУслугВДиаграммах()

&НаКлиенте
// Вызывает серверный механизм формирования графиков.
Процедура Графики_ОбновитьГрафикиПоЗданиям()
	
	Попытка
		
		ОтключитьОбработчикОжидания("Графики_ОбновитьГрафикиПоЗданиям");
		
		ГрафикиТабличныйДокумент = Новый ТабличныйДокумент;
		
		Графики_ОбновитьГрафикиНаСервере();
		
		Графики_УстановитьВидимостьТабличногоДокументаСГрафиками(Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница, "НеИспользовать");
		
		ГрафикиТабличныйДокумент.ФиксацияСверху = 1;
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		
		ОтключитьОбработчикОжидания("Графики_ОбновитьГрафикиПоЗданиям");
	КонецПопытки;
	
КонецПроцедуры // Графики_ОбновитьГрафикиПоЗданиям()

&НаКлиенте
// Процедура устанавливает состояние табличных документов с графиками на форме.
Процедура Графики_УстановитьВидимостьТабличногоДокументаСГрафиками(ТекущаяСтраница, СостояниеПоля = "")
	
	ТабличныйДокумент = Неопределено;
	
	Если ТекущаяСтраница = Элементы.СтраницаВзаиморасчеты Тогда
		
		ТабличныйДокумент = Элементы.ГрафикиВзаиморасчетыТабличныйДокумент;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСчетчики Тогда
		
		ТабличныйДокумент = Элементы.ГрафикиРасходПоПУТабличныйДокумент;
		
	КонецЕсли;
	
	Элементы.ГруппаГрафикиПоВзаиморасчетам.Видимость            = ВыводитьГрафики;
	Элементы.ГруппаГрафикиРасходПоПУТабличныйДокумент.Видимость = ВыводитьГрафики;
	
	Если НЕ ТабличныйДокумент = Неопределено И ВыводитьГрафики И Не ПустаяСтрока(СостояниеПоля) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ТабличныйДокумент, СостояниеПоля);
	КонецЕсли;
	
КонецПроцедуры // Графики_УстановитьВидимостьТабличногоДокументаСГрафиками()

&НаКлиенте
// Обработчик действий после закрытия формы настроек графиков.
Процедура Графики_ОбработатьРезультатЗакрытияФормыНастроекГрафиков(Результат, ДопПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		Результат.Свойство("ВыводитьГрафики", ВыводитьГрафики);
		Графики_УстановитьВидимостьТабличногоДокументаСГрафиками(Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница, "НеИспользовать");
		
		ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры // Графики_ОбработатьРезультатЗакрытияФормыНастроекГрафиков()

&НаСервере
// Заполняет табличный документ формы.
Процедура Графики_ОбновитьГрафикиНаСервере()
	
	// Параметры из формы объекта для передачи в обработку формирования графиков.
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ОбъектОтчета",                 Элементы.Список.ТекущаяСтрока);
	ПараметрыОтчета.Вставить("ИмяОбластиВыводаГрафика",      Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница.Имя);
	ПараметрыОтчета.Вставить("ИмяОбъекта",                   "КВП_Здания");
	ПараметрыОтчета.Вставить("ДатаНачала",                   ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаОкончания",                ДатаОкончания);
	ПараметрыОтчета.Вставить("ТекущаяУслугаТаблицыГраФиков", ТекущаяУслугаТаблицыГрафиков);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Обработки.УПЖКХ_ФормированиеАналитическихГрафиковПоДаннымУчета.Графики_ОбновитьГрафикиНаСервере(ТабличныйДокумент, ПараметрыОтчета);
	
	ГрафикиТабличныйДокумент.АвтоМасштаб         = Истина;
	ГрафикиТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ГрафикиТабличныйДокумент.ИмяПараметровПечати = "КВП_Здания_Графики";
	
	ГрафикиТабличныйДокумент.Вывести(ТабличныйДокумент);
	
КонецПроцедуры // Графики_ОбновитьГрафикиНаСервере()

#КонецОбласти // РаботаСГрафиками
