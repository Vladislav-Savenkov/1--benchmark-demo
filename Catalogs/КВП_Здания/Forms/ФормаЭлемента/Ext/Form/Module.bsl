
#Область СлужебныеПроцедурыИФункции

&НаКлиенте
// Устанавливает отбор списка норм.
Процедура УстановитьОтборНормНаКлиенте(ОтборСтрок, ПоказатьВсе)
	
	Если ПоказатьВсе Тогда
		ОтборСтрок = Новый ФиксированнаяСтруктура("Актуальность", Истина);
	Иначе
		ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Копирует записи регистров сведений "Адреса" и "Благоустройство объектов".
//
// Параметры:
//  ОбъектКопирования - элемент справочника здания, c которого копируются данные.
//
Процедура СкопироватьЗаписиРегистров(ОбъектКопирования)
	
	// Копирование данных по благоустройству здания.
	НаборЗаписейИсточник = РегистрыСведений.КВП_БлагоустройствоОбъектов.СоздатьНаборЗаписей();
	НаборЗаписейИсточник.Отбор.Объект.Установить(ОбъектКопирования.Ссылка);
	НаборЗаписейИсточник.Прочитать();
	
	Если Не НаборЗаписейИсточник.Количество() = 0 Тогда
		ТаблицаЗаписей = НаборЗаписейИсточник.Выгрузить();
		ТаблицаЗаписей.ЗаполнитьЗначения(Объект.Ссылка, "Объект");
		
		НаборЗаписейПриемник = РегистрыСведений.КВП_БлагоустройствоОбъектов.СоздатьНаборЗаписей();
		НаборЗаписейПриемник.Отбор.Объект.Установить(Объект.Ссылка);
		НаборЗаписейПриемник.Загрузить(ТаблицаЗаписей);
		
		НаборЗаписейПриемник.Записать();
	КонецЕсли;
	
	ПрочитатьВидыБлагоустройства();
	
КонецПроцедуры // СкопироватьЗаписиРегистров()

&НаКлиентеНаСервереБезКонтекста
// Устанавливает видимость поля ввода "Количество подземных этажей".
//
// Параметры:
//  Форма - УправляемаяФорма - текущая форма.
//
Процедура УстановитьВидимостьКоличестваПодземныхЭтажейПодъездовИТипаДома(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.КоличествоПодземныхЭтажей.Видимость = Объект.Многоквартирное;
	Элементы.ЖилойДомБлокированнойЗастройки.Видимость = НЕ Объект.Многоквартирное;
	Элементы.Подъездов.Видимость                      = Объект.Многоквартирное;
	Элементы.Многоквартирное.Доступность              = НЕ Объект.ЖилойДомБлокированнойЗастройки;
	
КонецПроцедуры // УстановитьВидимостьКоличестваПодземныхЭтажейПодъездовИТипаДома()

&НаКлиентеНаСервереБезКонтекста
// Устанавливает заголовок группы КИ.
//
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Представление адреса здания.
	ПредставлениеАдреса = "";
	
	// Источник информации об адресах здания.
	ВсеСтрокиКИ = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	// Получение почтового адреса здания.
	НайденныйАдрес = ВсеСтрокиКИ.НайтиСтроки(Новый Структура("Тип, Вид", 
												ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"),
												ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания")));
	Если НайденныйАдрес.Количество() > 0 Тогда
		ПредставлениеАдреса = НайденныйАдрес[0].Представление;
	КонецЕсли;
	
	// Если почтовый адрес не задан, то получим строительный адрес здания.
	Если ПустаяСтрока(ПредставлениеАдреса) Тогда
		
		НайденныйАдрес = ВсеСтрокиКИ.НайтиСтроки(Новый Структура("Тип, Вид", 
													ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"),
													ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.УПЖКХ_СтроительныйАдресЗдания")));
		Если НайденныйАдрес.Количество() > 0 Тогда
			ПредставлениеАдреса = НайденныйАдрес[0].Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	// Установка заголовка группы адресов здания.
	Элементы.ГруппаКонтактнаяИнформация.ЗаголовокСвернутогоОтображения = НСтр("ru='Адрес'") + ?(ПустаяСтрока(ПредставлениеАдреса), "",  ": " + ПредставлениеАдреса);
	
	// Установка заголовка поля номера дома.
	Элементы.НомерДома.Заголовок = ?(Объект.ТипСооружения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ТипСооружения.Здание"), "Номер дома", "Номер");
	
	// Установка видимости кнопки "Получить кадастровый номер".
	Элементы.ПолучитьКадастровыйНомер.Видимость = УПЖКХ_ОбщегоНазначенияСервер.ОпределитьНаличиеПравНаРедактированиеОбъектовЖКХ();
	
	// Установка видимости кнопки "Получить код по ФИАС".
	Элементы.ПолучитьКодПоФИАС.Видимость = УПЖКХ_ОбщегоНазначенияСервер.ОпределитьНаличиеПравНаРедактированиеОбъектовЖКХ();
	
КонецПроцедуры

// Формирует таблицу норм потребления.
&НаСервере
Процедура ОбновитьТаблицуНорм()
	
	НормыПотребленияУслуг.Загрузить(УПЖКХ_РаботаСОбъектамиУчетаСервер.ЗаполнитьТаблицуНормативовУслуг(Объект.Ссылка));
	
КонецПроцедуры

&НаСервереБезКонтекста
// Возвращает ключ записи регистра "КВП_ПлощадиЗдания" по переданному объекту и типу площади.
Функция ПолучитьКлючЗаписиРегистраПлощадиЗдания(Объект, Тип)
	
	Возврат РегистрыСведений.КВП_ПлощадиЗдания.СоздатьКлючЗаписи(Новый Структура("Объект, Тип", Объект, Тип));
	
КонецФункции

&НаСервереБезКонтекста
// Возвращает ключ записи регистра "КВП_БлагоустройствоОбъектов" по переданному объекту и виду благоустройства.
Функция ПолучитьКлючЗаписиРегистраБлагоустройствоОбъектов(Объект, ВидБлагоустройства)
	
	Возврат РегистрыСведений.КВП_БлагоустройствоОбъектов.СоздатьКлючЗаписи(Новый Структура("Объект, ВидБлагоустройства", Объект, ВидБлагоустройства));
	
КонецФункции

&НаСервереБезКонтекста
// Возвращает ключ записи регистра "КВП_ПрилегающаяТерриторияЗдания" по переданному объекту и типу прилегающей территории.
Функция ПолучитьКлючЗаписиРегистраПрилегающаяТерритория(Объект, Тип)
	
	Возврат РегистрыСведений.КВП_ПрилегающаяТерриторияЗдания.СоздатьКлючЗаписи(Новый Структура("Объект, Тип", Объект, Тип));
	
КонецФункции

&НаСервереБезКонтекста
// Возвращает ключ записи регистра "КВП_ОбслуживающиеМастера" по переданному объекту и виду мастера.
Функция ПолучитьКлючЗаписиРегистраОбслуживающиеМастера(Период, Объект, ВидМастера)
	
	Возврат РегистрыСведений.КВП_ОбслуживающиеМастера.СоздатьКлючЗаписи(Новый Структура("Период, Объект, ВидМастера",Период, Объект, ВидМастера));
	
КонецФункции

&НаСервере
// Удаляет запись регистра "КВП_ПлощадиЗдания".
Процедура УдалитьПлощадьИзРегистраСведений(Объект, Тип)
	
	МенеджерЗаписи = РегистрыСведений.КВП_ПлощадиЗдания.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Объект;
	МенеджерЗаписи.Тип = Тип;
	
	Попытка
		МенеджерЗаписи.Удалить();
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Площадь не удалена: " + ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

&НаСервере
// Удаляет запись регистра "КВП_БлагоустройствоОбъектов".
Процедура УдалитьБлагоустройствоИзРегистраСведений(Объект, ВидБлагоустройства)
	
	МенеджерЗаписи = РегистрыСведений.КВП_БлагоустройствоОбъектов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Объект;
	МенеджерЗаписи.ВидБлагоустройства = ВидБлагоустройства;
	
	Попытка
		МенеджерЗаписи.Удалить();
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Благоустройство не удалено: " + ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

&НаСервере
// Удаляет запись регистра "КВП_ПрилегающаяТерриторияЗдания".
Процедура УдалитьПрилегающаяТерриторияИзРегистраСведений(Объект, Тип)
	
	МенеджерЗаписи = РегистрыСведений.КВП_ПрилегающаяТерриторияЗдания.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Объект;
	МенеджерЗаписи.Тип = Тип;
	
	Попытка
		МенеджерЗаписи.Удалить();
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Прилегающая территория не удалена: " + ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

&НаСервере
// Удаляет запись регистра "КВП_ОбслуживающиеМастера".
Процедура УдалитьОбслуживающийМастерИзРегистраСведений(Период, Объект, ВидМастера)
	
	МенеджерЗаписи = РегистрыСведений.КВП_ОбслуживающиеМастера.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = Период;
	МенеджерЗаписи.Объект = Объект;
	МенеджерЗаписи.ВидМастера = ВидМастера;
	
	Попытка
		МенеджерЗаписи.Удалить();
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Обслуживающий мастер не удален: " + ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область РаботаСАдресами

&НаКлиенте
// Получает данные адреса здания для автоматического заполнения полей "Наименование" и "Номер дома".
Процедура ЗаполнитьПоДаннымАдреса(ЗаполняемНомерДома = Ложь)
	
	// Если заполнен почтовый адрес, то анализируем только его.
	// Если нет, то все остальные адреса.
	ВсеСтрокиКИ     = ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	НайденныеАдреса = ВсеСтрокиКИ.НайтиСтроки(Новый Структура("Тип, Вид", 
												ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"),
												ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания")));
	
	ЗначенияПолейДляАнализа = ЗаполнитьМассивАдресов(НайденныеАдреса);
	
	Если ЗначенияПолейДляАнализа.Количество() = 0 Тогда
		НайденныеАдреса = ВсеСтрокиКИ.НайтиСтроки(Новый Структура("Тип", 
												ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес")));
		ЗначенияПолейДляАнализа = ЗаполнитьМассивАдресов(НайденныеАдреса);
	КонецЕсли;
	
	АдресаДляЗаполнения = ДоступныеЗначенияАдреса(ЗначенияПолейДляАнализа, ЗаполняемНомерДома);
	Если АдресаДляЗаполнения.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для того чтобы заполнить автоматически наименование и номер дома здания, необходимо сначала 
			|задать почтовый или строительный адрес.'"),, НСтр("ru = 'Автоматическое заполнение полей'"));
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ЗаполняемНомерДома", ЗаполняемНомерДома);
	
	Если АдресаДляЗаполнения.Количество() = 1 Тогда
		// Если доступен только один вариант, то не предоставляем выбор, а сразу заполняем поле.
		ЗаполнитьАдресЗавершение(АдресаДляЗаполнения[0], ДополнительныеПараметры);
	Иначе
		ЭтаФорма.ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ЗаполнитьАдресЗавершение", ЭтотОбъект, ДополнительныеПараметры),
										АдресаДляЗаполнения, 
										?(ЗаполняемНомерДома, 
											ЭтаФорма.Элементы.КнопкаЗаполнитьНомерДома, 
											ЭтаФорма.Элементы.КнопкаЗаполнитьНаименование));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Заполняет массив адресов для последующего анализа.
Функция ЗаполнитьМассивАдресов(НайденныеАдреса)
	
	ЗначенияПолейДляАнализа = Новый Массив;
	Для Каждого Адрес Из НайденныеАдреса Цикл
		Если ПустаяСтрока(Адрес.Представление) Тогда
			Продолжить;
		КонецЕсли;
		ЗначенияПолейДляАнализа.Добавить(Новый Структура("Идентификатор, Представление, Значение, ВидАдреса",
											Адрес.ПолучитьИдентификатор(), 
											Адрес.Представление, 
											Адрес.Значение, 
											Адрес.Вид));
	КонецЦикла;
	
	Возврат ЗначенияПолейДляАнализа;
	
КонецФункции

&НаСервере
// Возвращает список возможных значений для автоматического заполнения 
// полей "Наименование" и "Номер дома".
Функция ДоступныеЗначенияАдреса(Знач ЗначенияПолейДляАнализа, ЗаполняемНомерДома)
	
	Результат = Новый СписокЗначений;
	
	Для Каждого Адрес Из ЗначенияПолейДляАнализа Цикл
		
		Если УПЖКХ_ТиповыеМетодыСервер.АдресВведенВСвободнойФорме(Адрес.Значение) Тогда
			
			Если ЗаполняемНомерДома Тогда
				Результат.Добавить("");
			Иначе
				// Если адрес введен в свободной форме, то предоставим на выбор только его.
				Результат.Добавить(Адрес.Представление);
			КонецЕсли;
			
		Иначе
			СтруктАдрес = ПолучитьАдрес(Объект.Ссылка, Перечисления.КВП_ВидыАдресов.Здание, , , Адрес.Значение);
			
			Если ЗаполняемНомерДома Тогда
				
				ДобавитьАдресВСписок(Результат, Адрес, СтруктАдрес, "НомерДома", "/");
				ДобавитьАдресВСписок(Результат, Адрес, СтруктАдрес, "НомерДома", ", ");
				
			Иначе
				
				// Если адрес введен по форме, то предоставим выбор из следующих вариантов адреса:
				// - полный адрес
				// - город, населенный пункт и т.д.
				// - улица и т.д.
				// - номер дома, корпус
				
				// Результат.Добавить(Адрес.Идентификатор, Строка(Адрес.ВидАдреса) + ": " + Представление);
				
				ДобавитьАдресВСписок(Результат, Адрес, СтруктАдрес, "Индекс,Регион,Район,Город,НаселенныйПункт,Улица,Дом,Корпус");
				ДобавитьАдресВСписок(Результат, Адрес, СтруктАдрес, "Регион,Район,Город,НаселенныйПункт,Улица,Дом,Корпус");
				ДобавитьАдресВСписок(Результат, Адрес, СтруктАдрес, "Район,Город,НаселенныйПункт,Улица,Дом,Корпус");
				ДобавитьАдресВСписок(Результат, Адрес, СтруктАдрес, "Город,НаселенныйПункт,Улица,Дом,Корпус");
				ДобавитьАдресВСписок(Результат, Адрес, СтруктАдрес, "Улица,Дом,Корпус");
				ДобавитьАдресВСписок(Результат, Адрес, СтруктАдрес, "Дом,Корпус");
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
// Получает представление адреса и добавляет полученное значение в список значений.
Процедура ДобавитьАдресВСписок(Знач Результат, Адрес, СтруктАдрес, СоставАдреса, ПредставлениеКорпуса = "/")
	
	ТекПредставление = Справочники.КВП_Здания.ПолучитьПредставлениеАдресаЗданияПоСтруктуре(СтруктАдрес, СоставАдреса, 
																							ПредставлениеКорпуса);
	Если НЕ ПустаяСтрока(ТекПредставление)
	   И Результат.НайтиПоЗначению(ТекПредставление) = Неопределено Тогда
		Результат.Добавить(ТекПредставление);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события, вызванная из процедуры "ЗаполнитьПоДаннымАдреса()".
// Обрабатывает выбор из меню варианта адреса для заполнения полей "Наименование" и "Номер дома".
//
// Параметры:
//  ВыбранныйЭлемент		 - 	Элемент списка значений - результат выбора пользователя.
//  ДополнительныеПараметры	 - 	Структура - дополнительные данные.
//
Процедура ЗаполнитьАдресЗавершение(Знач ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗаполняемНомерДома Тогда
		Объект.НомерДома    = ВыбранныйЭлемент.Значение;
	Иначе
		Объект.Наименование = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
// Заполняет поля "Наименование" и "Номер дома" после изменения адреса здания.
Процедура ЗаполнитьНаименованиеИНомерДома(СтрокаАдреса)
	
	Если УПЖКХ_ТиповыеМетодыСервер.АдресВведенВСвободнойФорме(СтрокаАдреса.Значение) Тогда
		Объект.Наименование = СтрокаАдреса.Представление;
		Объект.НомерДома    = "";
	Иначе
		СтруктАдрес = ПолучитьАдрес(Объект.Ссылка, Перечисления.КВП_ВидыАдресов.Здание, , , СтрокаАдреса.Значение);
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СформироватьПредставлениеАдреса(СтруктАдрес, Объект.Наименование);
		Объект.НомерДома    = СтруктАдрес.Дом + ?(ПустаяСтрока(СтруктАдрес.Корпус), "", "/" + СтруктАдрес.Корпус);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПлощадямиСБлагоустройствамиСПрилегающейТерриториейСОбслуживающимиМастерами

&НаСервереБезКонтекста
// Функция рассчитывает площади здания на сервере.
Функция РассчитатьПлощадиЗданияНаСервере(Ссылка)
	
	Возврат Справочники.КВП_Здания.РассчитатьПлощадиЗдания(Ссылка);
	
КонецФункции

&НаСервере
// Процедура заполняет табличное поле ПлощадиЗдания.
Процедура ПрочитатьПлощади()
	
	НаборЗаписей = РегистрыСведений.КВП_ПлощадиЗдания.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка, Истина);
	НаборЗаписей.Прочитать();
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	ТаблицаЗаписей.Сортировать("Тип");
	
	// Получим все типы площадей здания из справочника.
	ЗапросПлощадейЗдания = Новый Запрос;
	ЗапросПлощадейЗдания.Текст =
	"ВЫБРАТЬ
	|	КВП_ТипыПлощадейЗдания.Ссылка КАК Тип
	|ИЗ
	|	Справочник.КВП_ТипыПлощадейЗдания КАК КВП_ТипыПлощадейЗдания
	|ГДЕ
	|	КВП_ТипыПлощадейЗдания.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КВП_ТипыПлощадейЗдания.Наименование";
	ТаблицаПлощадейЗдания = ЗапросПлощадейЗдания.Выполнить().Выгрузить();
	
	// Добавим в табличное поле ПлощадиЗдания остальные типы площадей, полученные из справочника.
	Для Каждого ТекСтрока Из ТаблицаПлощадейЗдания Цикл
		НайдСтрока = ТаблицаЗаписей.Найти(ТекСтрока.Тип, "Тип");
		Если НайдСтрока = Неопределено Тогда
			НоваяСтрока = ТаблицаЗаписей.Добавить();
			НоваяСтрока.Объект = Объект.Ссылка;
			НоваяСтрока.Тип = ТекСтрока.Тип;
		КонецЕсли;
	КонецЦикла;
	
	ПлощадиЗдания.Загрузить(ТаблицаЗаписей);
	
КонецПроцедуры //ПрочитатьПлощади()

&НаСервере
// Процедура заполняет табличное поле БлагоустройствоЗдания
Процедура ПрочитатьВидыБлагоустройства()

	НаборЗаписей = РегистрыСведений.КВП_БлагоустройствоОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка, Истина);
	НаборЗаписей.Прочитать();
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	ТаблицаЗаписей.Сортировать("ВидБлагоустройства");
	
	// Получим все виды благоустройства здания из справочника.
	ЗапросВидовБлагоустройства = Новый Запрос;
	ЗапросВидовБлагоустройства.Текст =
	"ВЫБРАТЬ
	|	КВП_ВидыБлагоустройстваОбъектов.Ссылка КАК ВидБлагоустройства
	|ИЗ
	|	Справочник.КВП_ВидыБлагоустройстваОбъектов КАК КВП_ВидыБлагоустройстваОбъектов
	|ГДЕ
	|	КВП_ВидыБлагоустройстваОбъектов.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КВП_ВидыБлагоустройстваОбъектов.Наименование";
	ТаблицаВидовБлагоустройства = ЗапросВидовБлагоустройства.Выполнить().Выгрузить();
	
	// Добавим в табличное поле БлагоустройствоЗдания остальные виды благоустройства, полученные из справочника.
	Для Каждого ТекСтрока Из ТаблицаВидовБлагоустройства Цикл
		НайдСтрока = ТаблицаЗаписей.Найти(ТекСтрока.ВидБлагоустройства, "ВидБлагоустройства");
		Если НайдСтрока = Неопределено Тогда
			НоваяСтрока = ТаблицаЗаписей.Добавить();
			НоваяСтрока.Объект = Объект.Ссылка;
			НоваяСтрока.ВидБлагоустройства = ТекСтрока.ВидБлагоустройства;
		КонецЕсли;
	КонецЦикла;
	
	БлагоустройствоЗдания.Загрузить(ТаблицаЗаписей);
	
КонецПроцедуры  //ПрочитатьВидыБлагоустройства()

&НаСервере
// Процедура заполняет табличное поле ПрилегающаяТерритория
Процедура ПрочитатьПрилегающаяТерритория()
	
	НаборЗаписей = РегистрыСведений.КВП_ПрилегающаяТерриторияЗдания.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка, Истина);
	НаборЗаписей.Прочитать();
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	ТаблицаЗаписей.Сортировать("Тип");
	
	// Получим все виды характеристик прилегающей территории здания из справочника.
	ЗапросПрилегающейТерритории = Новый Запрос;
	ЗапросПрилегающейТерритории.Текст =
	"ВЫБРАТЬ
	|	КВП_ПрилегающаяТерритория.Ссылка КАК Тип
	|ИЗ
	|	Справочник.КВП_ПрилегающаяТерритория КАК КВП_ПрилегающаяТерритория
	|ГДЕ
	|	КВП_ПрилегающаяТерритория.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КВП_ПрилегающаяТерритория.Наименование";
	ТаблицаПрилегающейТерритории = ЗапросПрилегающейТерритории.Выполнить().Выгрузить();
	
	// Добавим в табличное поле ПрилегающаяТерритория остальные виды 
	// характеристик прилегающей территории, полученные из справочника.
	Для Каждого ТекСтрока Из ТаблицаПрилегающейТерритории Цикл
		НайдСтрока = ТаблицаЗаписей.Найти(ТекСтрока.Тип, "Тип");
		Если НайдСтрока = Неопределено Тогда
			НоваяСтрока = ТаблицаЗаписей.Добавить();
			НоваяСтрока.Объект = Объект.Ссылка;
			НоваяСтрока.Тип = ТекСтрока.Тип;
		КонецЕсли;
	КонецЦикла;
	
	ПрилегающаяТерритория.Загрузить(ТаблицаЗаписей);
	
КонецПроцедуры //ПрочитатьПрилегающаяТерритория()

&НаСервере
// Процедура заполняет табличное поле ОбслуживающиеМастера
Процедура ПрочитатьОбслуживающиеМастера()
	
	НаборЗаписей = РегистрыСведений.КВП_ОбслуживающиеМастера.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка, Истина);
	НаборЗаписей.Прочитать();
	ОбслуживающиеМастера.Загрузить(НаборЗаписей.Выгрузить());
	
КонецПроцедуры  //ПрочитатьОбслуживающиеМастера()

&НаСервере
// Функция возвращает массив типов значений видов благоустройства
// из регистра сведений КВП_БлагоустройствоОбъектов.
функция ПолучитьМассивТиповБлагоустройства()
	
	Возврат Метаданные.РегистрыСведений.КВП_БлагоустройствоОбъектов.Ресурсы.Значение.Тип.Типы();
	
КонецФункции

#КонецОбласти

#Область РаботаСУстановленнымОборудованием

&НаСервереБезКонтекста
// Функция возвращает ключ записи регистра сведений по структуре ключа.
//
Функция ПолучитьКлючЗаписиРегистраВзаимосвязиОбъектовУчетаИОборудования(СтруктураКлюча)
	
	Возврат РегистрыСведений.УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.СоздатьКлючЗаписи(СтруктураКлюча);
	
КонецФункции

&НаСервере
// Процедура обновляет список связанного оборудования / объектов учета для текущего здания.
Процедура ОбновитьТаблицуСвязанныхОбъектовУчетаНаСервере()
	
	УстановленноеОборудование.Загрузить(УПЖКХ_УчетОборудованияНаОбъектахУчетаСервер.ПолучитьОборудованиеУстановленноеНаОбъектУчета(Объект.Ссылка));
	
КонецПроцедуры // ОбновитьТаблицуСвязанныхОбъектовУчетаНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ЗначениеКопирования", ОбъектКопирования);
	
	НеобходимаПроверкаНаименования = Истина;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Многоквартирное = Истина;
		Объект.ТипСооружения = Перечисления.УПЖКХ_ТипСооружения.Здание;
		
		Элементы.ГруппаКонтактнаяИнформация.Поведение = ПоведениеОбычнойГруппы.Обычное;
		
		// Вид собственности здания определяется по виду собственности помещений данного здания:
		// если в квартирах здания все квартиры муниципальные – дом муниципальный;
		// если в квартирах здания все квартиры государственные – дом государственный;
		// в противном случае дом общий.
		// При создании нового здания, сооружения устанавливаем вид собственности в значение "Общая".
		ВидСобственности = "Общая";
		
	Иначе
		ВидСобственности = ПолучитьДанныеОСобственностиЗдания(Объект.Ссылка);
	КонецЕсли;
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УПЖКХ_ТиповыеМетодыСервер.ДополнительныйРеквизитПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	ПрочитатьПлощади();
	ПрочитатьВидыБлагоустройства();
	ПрочитатьПрилегающаяТерритория();
	ПрочитатьОбслуживающиеМастера();
	
	УстановитьВидимостьКоличестваПодземныхЭтажейПодъездовИТипаДома(ЭтаФорма);
	
	// Устанавливаем отбор по зданию для сведений об обслуживающих организациях.
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(СведенияОбОбслуживающихЗданияОрганизациях.Отбор, "Здание", Объект.Ссылка, ВидСравненияКомпоновкиДанных.Равно);
	
	ОбновитьТаблицуСвязанныхОбъектовУчетаНаСервере();
	
	ОбновитьТаблицуНорм();
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ИсключаемыеВидыКИ = Новый Массив;
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_СтроительныйАдресЗдания);
	
	ПараметрыРазмещенияКонтактнойИнформации = УПЖКХ_ТиповыеМетодыСервер.ПараметрыКонтактнойИнформации();
	ПараметрыРазмещенияКонтактнойИнформации.ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация";
	ПараметрыРазмещенияКонтактнойИнформации.ИсключаемыеВиды = ИсключаемыеВидыКИ;
	УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияПриСозданииНаСервере(ЭтотОбъект, Объект, ПараметрыРазмещенияКонтактнойИнформации);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ЗаполнитьСписокВыбораПоляСостояниеГИС();
	
	УправлениеФормой(ЭтаФорма);
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
	// Реклама
	ОТР_РекламаКлиентСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец Реклама
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	УстановитьОтборНормНаКлиенте(Элементы.НормыПотребленияУслуг.ОтборСтрок,
									Не Элементы.КнопкаПоказатьВсеНормы.Пометка);
	
	// Если это новый элемент
	Если Объект.Ссылка.Пустая() Тогда
		// Скопируем записи регистров, если элемент был скопирован.
		Если Не ОбъектКопирования.Пустая() Тогда
		
			Оповещение   = Новый ОписаниеОповещения("ВопросСкопироватьЗаписиРегистров", ЭтаФорма);
			ТекстВопроса = "Скопировать данные по адресам и благоустройству объекта? Для этого элемент будет записан.";
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСведенияОбУстановленномОборудовании" Тогда
		Если Источник = Объект.Ссылка Тогда
			ОбновитьТаблицуСвязанныхОбъектовУчетаНаСервере();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбновитьСведенияОКадастровыхНомерах" ИЛИ ИмяСобытия = "ОбновитьСведенияОКодахПоФИАС" Тогда
		ЭтаФорма.Прочитать();
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьТаблицуНорм" Тогда
		ОбновитьТаблицуНорм();
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьТаблицуПлощадей" Тогда
		ПрочитатьПлощади();
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьТаблицуБлагоустройствоОбъектов" Тогда
		ПрочитатьВидыБлагоустройства();
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьТаблицуПрилегающаяТерритория" Тогда
		ПрочитатьПрилегающаяТерритория();
	КонецЕсли;
	
	 Если ИмяСобытия = "ОбновитьТаблицуОбслуживающиеМастера" Тогда
		ПрочитатьОбслуживающиеМастера();
	КонецЕсли;


КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПустаяСтрока(Объект.Наименование) И НеобходимаПроверкаНаименования Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено наименование здания!'"), ,
															"Наименование", "Объект", Отказ);
	ИначеЕсли ПустаяСтрока(Объект.НомерДома) И НеобходимаПроверкаНаименования Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен номер здания!'"), ,
															"НомерДома", "Объект", Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПередЗаписьюНаСервере" формы.
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Контактная информация"
	УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, Отказ);
	
	// Обработчик подсистемы "Свойства"
	УПЖКХ_ТиповыеМетодыСервер.ДополнительныйРеквизитПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПриЗаписиНаСервере" формы.
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Устанавливаем отбор по зданию для сведений об обслуживающих организациях.
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(СведенияОбОбслуживающихЗданияОрганизациях.Отбор, "Здание", ТекущийОбъект.Ссылка, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Обработка проверки заполнения формы на сервере.
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" списка норм потребления услуг.
Процедура НормыПотребленияУслугПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаписатьЭлемент", ЭтаФорма),
					   "Перед добавлением норм потребления элемент необходимо записать. Продолжить?",
					   РежимДиалогаВопрос.ДаНет);
	Иначе
		
		ПараметрыФормы = Новый Структура("ОтборОбъект", Объект.Ссылка);
		
		Если Копирование Тогда
			ПараметрыФормы.Вставить("Услуга",           Элемент.ТекущиеДанные.Услуга);
			ПараметрыФормы.Вставить("НормаПотребления", Элемент.ТекущиеДанные.НормаПотребления);
		КонецЕсли;
		
		ОткрытьФорму("РегистрСведений.КВП_НормыПотребленияУслугЛС.ФормаЗаписи", ПараметрыФормы);
		
	КонецЕсли;

КонецПроцедуры // НормыПотребленияУслугУслугиПередНачаломДобавления()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "НормыПотребленияУслугУслугиПередНачаломДобавления()".
Процедура ОбработатьРезультатВопросаЗаписатьЭлемент(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
		ОткрытьФорму("РегистрСведений.КВП_НормыПотребленияУслугЛС.ФормаЗаписи", Новый Структура("ОтборОбъект", Объект.Ссылка));
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаЗаписатьЭлемент()

// Обработчик события "ПередУдалением" списка норм потребления услуг.
&НаКлиенте
Процедура НормыПотребленияУслугПередУдалением(Элемент, Отказ)
	
	УПЖКХ_РаботаСОбъектамиУчетаСервер.УдалитьНормуИзРегистраСведений(Элемент.ТекущиеДанные.Период, Объект.Ссылка, Элемент.ТекущиеДанные.Услуга);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеУдаления"  списка норм потребления услуг.
Процедура НормыПотребленияУслугПослеУдаления(Элемент)
	
	Оповестить("ОбновитьТаблицуНорм");
	
КонецПроцедуры

// Обработчик события "Выбор" списка норм потребления услуг.
&НаКлиенте
Процедура НормыПотребленияУслугВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("Ключ, ОтборОбъект", УПЖКХ_РаботаСОбъектамиУчетаСервер.ПолучитьКлючЗаписиРегистраНормыПотребленияЛС(Элемент.ТекущиеДанные.Период, Объект.Ссылка, Элемент.ТекущиеДанные.Услуга), Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.КВП_НормыПотребленияУслугЛС.ФормаЗаписи", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик оповещения копирования данных регистров "Адреса" и "Благоустройство объектов".
//
Процедура ВопросСкопироватьЗаписиРегистров(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Попытка
			Если Записать() Тогда
				СкопироватьЗаписиРегистров(ОбъектКопирования);
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры // ВопросСкопироватьЗаписиРегистров()

&НаКлиенте
// Обработчик события "ПриИзменении" флага "Многоквартирное".
Процедура МногоквартирноеПриИзменении(Элемент)
	
	УстановитьВидимостьКоличестваПодземныхЭтажейПодъездовИТипаДома(ЭтаФорма);
	
КонецПроцедуры // МногоквартирноеПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Тип сооружения".
Процедура ТипСооруженияПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" списка площадей здания.
Процедура ПлощадиЗданияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ПараметрыФормы = Новый Структура("ОтборОбъект", Объект.Ссылка);
	
	Если Копирование Тогда
		ПараметрыФормы.Вставить("Тип", Элемент.ТекущиеДанные.Тип);
		ПараметрыФормы.Вставить("Площадь", Элемент.ТекущиеДанные.Площадь);
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.КВП_ПлощадиЗдания.ФормаЗаписи", ПараметрыФормы);
	

КонецПроцедуры

&НаКлиенте
// Обработчик события "Выбор" списка площадей здания.
Процедура ПлощадиЗданияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Площадь) Тогда  
		ПараметрыФормы = Новый Структура("ОтборОбъект, Тип", Объект.Ссылка, Элемент.ТекущиеДанные.Тип);
		ОткрытьФорму("РегистрСведений.КВП_ПлощадиЗдания.ФормаЗаписи", ПараметрыФормы, ЭтаФорма);
	Иначе
		ПараметрыФормы = Новый Структура("Ключ, ОтборОбъект", ПолучитьКлючЗаписиРегистраПлощадиЗдания(Объект.Ссылка, Элемент.ТекущиеДанные.Тип), Объект.Ссылка);
		ОткрытьФорму("РегистрСведений.КВП_ПлощадиЗдания.ФормаЗаписи", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" списка площадей здания.
Процедура ПлощадиЗданияПередУдалением(Элемент, Отказ)
	
	УдалитьПлощадьИзРегистраСведений( Объект.Ссылка, Элемент.ТекущиеДанные.Тип);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеУдаления" списка площадей здания.
Процедура ПлощадиЗданияПослеУдаления(Элемент)
	
	Оповестить("ОбновитьТаблицуПлощадей");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" списка благоустройства.
Процедура БлагоустройствоЗданияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ПараметрыФормы = Новый Структура("ОтборОбъект", Объект.Ссылка);
	
	Если Копирование Тогда
		ПараметрыФормы.Вставить("ВидБлагоустройства", Элемент.ТекущиеДанные.ВидБлагоустройства);
		ПараметрыФормы.Вставить("Значение", Элемент.ТекущиеДанные.Значение);
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.КВП_БлагоустройствоОбъектов.ФормаЗаписи", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Выбор" списка благоустройства.
Процедура БлагоустройствоЗданияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Значение) Тогда  
		ПараметрыФормы = Новый Структура("ОтборОбъект, ВидБлагоустройства", Объект.Ссылка, Элемент.ТекущиеДанные.ВидБлагоустройства);
		ОткрытьФорму("РегистрСведений.КВП_БлагоустройствоОбъектов.ФормаЗаписи", ПараметрыФормы, ЭтаФорма);
	Иначе
		ПараметрыФормы = Новый Структура("Ключ, ОтборОбъект", ПолучитьКлючЗаписиРегистраБлагоустройствоОбъектов(Объект.Ссылка, Элемент.ТекущиеДанные.ВидБлагоустройства), Объект.Ссылка);
		ОткрытьФорму("РегистрСведений.КВП_БлагоустройствоОбъектов.ФормаЗаписи", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" списка благоустройства.
Процедура БлагоустройствоЗданияПередУдалением(Элемент, Отказ)
	
	УдалитьБлагоустройствоИзРегистраСведений(Объект.Ссылка, Элемент.ТекущиеДанные.ВидБлагоустройства);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеУдаления" списка благоустройства.
Процедура БлагоустройствоЗданияПослеУдаления(Элемент)
	
	Оповестить("ОбновитьТаблицуБлагоустройствоОбъектов");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Начало выбора" поля ТЧ "Значение".
// В зависимости от заполенности поля предлагает выбрать тип или значение.
//
Процедура БлагоустройствоЗданияЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.БлагоустройствоЗдания.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Значение) Тогда
		
		Массив = Новый Массив();
		ТекущийТип = ТипЗнч(ТекущиеДанные.Значение);
		Массив.Добавить(ТекущийТип);
		НашеОписание = Новый ОписаниеТипов(Массив);
		Элемент.ОграничениеТипа = НашеОписание;
		
	Иначе
		
		Массив = ПолучитьМассивТиповБлагоустройства();
		НашеОписание = Новый ОписаниеТипов(Массив);
		Элемент.ОграничениеТипа = НашеОписание;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" прилегающей территории здания.
Процедура ПрилегающаяТерриторияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ПараметрыФормы = Новый Структура("ОтборОбъект", Объект.Ссылка);
	
	Если Копирование Тогда
		ПараметрыФормы.Вставить("Тип", Элемент.ТекущиеДанные.Тип);
		ПараметрыФормы.Вставить("Значение", Элемент.ТекущиеДанные.Значение);
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.КВП_ПрилегающаяТерриторияЗдания.ФормаЗаписи", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Выбор" списка прилегающей территории здания.
Процедура ПрилегающаяТерриторияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Значение) Тогда  
		ПараметрыФормы = Новый Структура("ОтборОбъект, Тип", Объект.Ссылка, Элемент.ТекущиеДанные.Тип);
		ОткрытьФорму("РегистрСведений.КВП_ПрилегающаяТерриторияЗдания.ФормаЗаписи", ПараметрыФормы, ЭтаФорма);
	Иначе
		ПараметрыФормы = Новый Структура("Ключ, ОтборОбъект", ПолучитьКлючЗаписиРегистраПрилегающаяТерритория(Объект.Ссылка, Элемент.ТекущиеДанные.Тип), Объект.Ссылка);
		ОткрытьФорму("РегистрСведений.КВП_ПрилегающаяТерриторияЗдания.ФормаЗаписи", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеУдаления" списка прилегающей территории здания.
Процедура ПрилегающаяТерриторияПослеУдаления(Элемент)
	
	Оповестить("ОбновитьТаблицуПрилегающаяТерритория");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" списка прилегающей территории здания.
Процедура ПрилегающаяТерриторияПередУдалением(Элемент, Отказ)
	
	УдалитьПрилегающаяТерриторияИзРегистраСведений(Объект.Ссылка, Элемент.ТекущиеДанные.Тип);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" списка обслуживающих мастеров.
Процедура ОбслуживающиеМастераПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ПараметрыФормы = Новый Структура("Объект", Объект.Ссылка);
	
	Если Копирование Тогда
		ПараметрыФормы.Вставить("ВидМастера", Элемент.ТекущиеДанные.ВидМастера);
		ПараметрыФормы.Вставить("Мастер", Элемент.ТекущиеДанные.Мастер);
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.КВП_ОбслуживающиеМастера.ФормаЗаписи", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Выбор" списка обслуживающих мастеров.
Процедура ОбслуживающиеМастераВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("Ключ, ОтборОбъект", ПолучитьКлючЗаписиРегистраОбслуживающиеМастера(Элемент.ТекущиеДанные.Период, Объект.Ссылка, Элемент.ТекущиеДанные.ВидМастера), Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.КВП_ОбслуживающиеМастера.ФормаЗаписи", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" списка обслуживающих мастеров.
Процедура ОбслуживающиеМастераПередУдалением(Элемент, Отказ)
	
	УдалитьОбслуживающийМастерИзРегистраСведений( Элемент.ТекущиеДанные.Период, Объект.Ссылка, Элемент.ТекущиеДанные.ВидМастера);

КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеУдаления" списка обслуживающих мастеров.
Процедура ОбслуживающиеМастераПослеУдаления(Элемент)
	
	Оповестить("ОбновитьТаблицуОбслуживающиеМастера");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "РассчитатьПлощадиЗдания".
Процедура РассчитатьПлощадиЗдания(Команда)
	
	ДанныеПоПлощадямЗдания = РассчитатьПлощадиЗданияНаСервере(Объект.Ссылка);
	ДанныеПоПлощадямЗдания.Свойство("ПлощадьЖилыхНежилыхПомещений",     Объект.ПлощадьЗданияЖилыхНежилыхПомещений);
	ДанныеПоПлощадямЗдания.Свойство("ПлощадьМестОбщегоПользования",     Объект.ПлощадьЗданияМестОбщегоПользования);
	ДанныеПоПлощадямЗдания.Свойство("ПлощадьСИндивидуальнымОтоплением", Объект.ПлощадьЗданияСИндивидуальнымОтоплением);
	ДанныеПоПлощадямЗдания.Свойство("ПлощадьОбщая",                     Объект.ПлощадьЗданияОбщая);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ПоказатьВсеНормы".
Процедура ПоказатьВсеНормы(Команда)
	
	Кнопка = Элементы.КнопкаПоказатьВсеНормы;
	Кнопка.Пометка = Не Кнопка.Пометка;
	
	УстановитьОтборНормНаКлиенте(Элементы.НормыПотребленияУслуг.ОтборСтрок, Не Кнопка.Пометка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "УстановитьОборудования".
//
Процедура УстановитьОборудования(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Период",          УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	СтруктураЗаполнения.Вставить("ОбъектУстановки", Объект.Ссылка);
	СтруктураЗаполнения.Вставить("Установлено",     Истина);
	
	ОткрытьФорму("РегистрСведений.УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.ФормаЗаписи", Новый Структура("ЗначенияЗаполнения", СтруктураЗаполнения));
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ВвестиАктуальныеСведения".
//
Процедура ВвестиАктуальныеСведения(Команда)
	
	ТекущиеДанные = Элементы.УстановленноеОборудование.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("Период",          УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
		СтруктураЗаполнения.Вставить("ОбъектУстановки", Объект.Ссылка);
		СтруктураЗаполнения.Вставить("Оборудование",    ТекущиеДанные.Оборудование);
		СтруктураЗаполнения.Вставить("Количество",      ТекущиеДанные.Количество);
		СтруктураЗаполнения.Вставить("Установлено",     Истина);
		
		ОткрытьФорму("РегистрСведений.УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.ФормаЗаписи", Новый Структура("ЗначенияЗаполнения", СтруктураЗаполнения));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ЗаполнитьНаименование".
//
Процедура ЗаполнитьНаименование(Команда)
	
	ЗаполнитьПоДаннымАдреса();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ЗаполнитьНомерДома".
//
Процедура ЗаполнитьНомерДома(Команда)
	
	ЗаполнитьПоДаннымАдреса(Истина);
	
КонецПроцедуры

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

#Область Реклама

&НаКлиенте
// Процедура - обработчик нажатия на картинку баннера.
Процедура Подключаемый_РекламаОткрытьСтраницуСайта(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОТР_РекламаКлиент.Подключаемый_РекламаОткрытьСтраницуСайта(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

&НаКлиенте
// Процедура - обработчик нажатия на картинку закрытия баннера.
Процедура Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОТР_РекламаКлиент.Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

#КонецОбласти // Реклама

&НаКлиенте
// Обработчик команды "УстановитьРазмерыПлощадейМОП".
Процедура УстановитьРазмерыПлощадейМОП(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(, "Сначала необходимо записать элемент справочника!");
	Иначе
		СтруктураОтбора = Новый Структура("Здание", Объект.Ссылка);
		ОткрытьФорму("РегистрСведений.УПЖКХ_НастройкиПлощадейМОП.ФормаСписка", Новый Структура("Отбор", СтруктураОтбора), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды  "ПолучитьКадастровыйНомер".
//
Процедура ПолучитьКадастровыйНомер(Команда)
	
	Если ПустаяСтрока(Объект.КадастровыйНомер) Тогда
		
		ПолучитьКадастровыйНомерНаКлиенте();
		
	Иначе
		
		ТекстВопроса = "Кадастровый номер уже заполнен. Продолжить получение кадастрового номера?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветОбОбновленииКадастровогоНомера", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Получить код по ФИАС".
//
Процедура ПолучитьКодПоФИАС(Команда)
	
	Если ПустаяСтрока(Объект.КодДомаПоФИАС) Тогда
		
		ПолучитьКодПоФИАСНаКлиенте();
		
	Иначе
		
		ТекстВопроса       = "Код дома по ФИАС уже заполнен. Продолжить получение кода по ФИАС?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветОбОбновленииКодаПоФИАС", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыПодсистемыКонтактнаяИнформация

&НаКлиенте
// Обработчик события ПриИзменении поля формы контактной информации.
//
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияПриИзменении(ЭтаФорма, Элемент);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события ПриНажатии поля формы контактной информации.
//
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура("Элемент", Элемент);
		ОписаниеОповещения      = Новый ОписаниеОповещения("ОбработатьОтветПользователя", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса            = "Перед изменением адресных данных необходимо записать элемент.
								  |Записать?";
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Сохранить изменения");
		Возврат;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияНачалоВыбора(ЭтаФорма, Элемент, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события Очистка поля формы контактной информации.
//
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияОчистка(ЭтаФорма, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды, связанной с контактной информации (написать письмо, открыть адрес, и т.п.).
//
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияВыполнитьКоманду(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаСервере
// Процедура обновляет данные контактной информации.
//
Функция Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияОбновитьКонтактнуюИнформацию(ЭтаФорма, Объект, Результат);
	
	Если Не Результат = Неопределено Тогда
		
		Отбор = Новый Структура();
		Отбор.Вставить("ИмяРеквизита", ЭтаФорма.ТекущийЭлемент.Имя);
		СтрокиДопРеквизитовЭлемента = ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		Если СтрокиДопРеквизитовЭлемента.Количество() > 0 Тогда
			ВидАдреса = СтрокиДопРеквизитовЭлемента[0].Вид;
			Если ВидАдреса = Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания Тогда
				ЗаполнитьНаименованиеИНомерДома(СтрокиДопРеквизитовЭлемента[0]);
			Иначе
				Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
					ЗаполнитьНаименованиеИНомерДома(СтрокиДопРеквизитовЭлемента[0]);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецФункции // Подключаемый_ОбновитьКонтактнуюИнформацию()


&НаКлиенте
// Процедура-обработчик событий после ответа пользователем на вопрос, вызванный
// из процедуры "ДобавитьНовыйАдрес()".
// При положительном результате вопроса процедура записывает элемент справочника.
//
// Параметры:
//  РезультатВопроса		 - 	КодВозвратаДиалога - результат ответа пользователя.
//  ДополнительныеПараметры	 - 	Структура - дополнительные данные.
//
Процедура ОбработатьОтветПользователя(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	НеобходимаПроверкаНаименования = Ложь;
	Записать();
	НеобходимаПроверкаНаименования = Истина;
	
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияНачалоВыбора(ЭтаФорма, ДополнительныеПараметры.Элемент);
	
КонецПроцедуры // ОбработатьОтветПользователя()

#КонецОбласти

#Область ПроцедурыСтраницы_ОбслуживающиеОрганизации

&НаКлиенте
// Процедура-обработчик события "ПередНачаломДобавления" таблицы "СведенияОбОбслуживающихЗданияОрганизациях".
//
Процедура СведенияОбОбслуживающихЗданияОрганизацияхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаписатьЭлемент", ЭтаФорма),
					   "Перед добавлением сведений об обслуживающих здание организациях элемент необходимо записать. Продолжить?",
					   РежимДиалогаВопрос.ДаНет);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыСтраницы_ОбъектыУчетаИОборудование

&НаКлиенте
// Обработчик события "Выбор" поля "УстановленноеОборудование".
//
Процедура УстановленноеОборудованиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("Период",          ТекущиеДанные.Период);
		СтруктураКлюча.Вставить("ОбъектУстановки", Объект.Ссылка);
		СтруктураКлюча.Вставить("Оборудование",    ТекущиеДанные.Оборудование);
		
		СтруктураПараметров = Новый Структура("Ключ", ПолучитьКлючЗаписиРегистраВзаимосвязиОбъектовУчетаИОборудования(СтруктураКлюча));
		ОткрытьФорму("РегистрСведений.УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.ФормаЗаписи", СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыСтраницы_СведенияДляГИСЖКХ

&НаСервере
// Процедура очищает и заполняет список выбора поля "Состояние" на закладке "Сведения для ГИС ЖКХ".
// Это нужно для того, чтобы исключить отображение помеченного на удаление значения перечисления "Не выбран".
Процедура ЗаполнитьСписокВыбораПоляСостояниеГИС()
	
	Элементы.Состояние.СписокВыбора.Очистить();
	Элементы.Состояние.СписокВыбора.Добавить(Перечисления.УПЖКХ_СостоянияДомов.Аварийный);
	Элементы.Состояние.СписокВыбора.Добавить(Перечисления.УПЖКХ_СостоянияДомов.Исправный);
	Элементы.Состояние.СписокВыбора.Добавить(Перечисления.УПЖКХ_СостоянияДомов.Ветхий);
	
	Если Элементы.Состояние.СписокВыбора.НайтиПоЗначению(Объект.Состояние) = Неопределено Тогда
		Объект.Состояние = Перечисления.УПЖКХ_СостоянияДомов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСписокВыбораПоляСостояниеГИС()

&НаКлиенте
// Обрабатывает ответ на вопрос об обновлении имеющегося кадастрового номера.
//
Процедура ОбработатьОтветОбОбновленииКадастровогоНомера(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьКадастровыйНомерНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
// Обрабатывает ответ на вопрос об обновлении имеющегося кода по ФИАС.
//
Процедура ОбработатьОтветОбОбновленииКодаПоФИАС(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьКодПоФИАСНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
// Управляет получением кадастрового номера с сервиса Росреестра.
//
Процедура ПолучитьКадастровыйНомерНаКлиенте()
	
	СсылкаНаОбъект      = Объект.Ссылка;
	СтруктураРезультата = ПолучитьКадастровыйНомерНаСервере(СсылкаНаОбъект);
	
	Если СтруктураРезультата.ВыполненоУспешно Тогда
		
		Объект.КадастровыйНомер = СтруктураРезультата.КадастровыйНомер;
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Объект", СсылкаНаОбъект);
		
		ОткрытьФорму("Обработка.УПЖКХ_ЗагрузкаКадастровыхНомеров.Форма", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Выполняет получение кадастрового номера с сервиса Росреестра.
//
Функция ПолучитьКадастровыйНомерНаСервере(СсылкаНаОбъект)
	
	Возврат Обработки.УПЖКХ_ЗагрузкаКадастровыхНомеров.ПолучитьКадастровыйНомерПоОбъекту(Объект.Ссылка);
	
КонецФункции

&НаКлиенте
// Управляет получением кода по ФИАС с сервиса dadata.ru.
//
Процедура ПолучитьКодПоФИАСНаКлиенте()
	
	СсылкаНаОбъект      = Объект.Ссылка;
	СтруктураРезультата = ПолучитьКодПоФИАСНаСервере(СсылкаНаОбъект);
	
	Если СтруктураРезультата.ВыполненоУспешно Тогда
		
		Объект.КодДомаПоФИАС = СтруктураРезультата.КодДомаПоФИАС;
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Объект", СсылкаНаОбъект);
		
		ОткрытьФорму("Обработка.УПЖКХ_ЗагрузкаКодовЗданийПоФИАС.Форма", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Выполняет получение кода по ФИАС с сервиса dadata.ru.
//
Функция ПолучитьКодПоФИАСНаСервере(СсылкаНаОбъект)
	
	Возврат Обработки.УПЖКХ_ЗагрузкаКодовЗданийПоФИАС.ПолучитьКодДомаПоФИАСПоОбъекту(Объект.Ссылка);
	
КонецФункции

#КонецОбласти
