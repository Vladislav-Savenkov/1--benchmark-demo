
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ГрафикОбслуживания = Параметры.ГрафикОбслуживания;
	
	Если НЕ ЗначениеЗаполнено(ГрафикОбслуживания) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сначала запишите этот график обслуживания!";
		Сообщение.Сообщить();		
		Отказ = Истина;
		Возврат;
	Иначе
		ТаблицаЗанятости.Загрузить(ГрафикОбслуживания.ТаблицаЗанятости.Выгрузить());	
	КонецЕсли;
	
	ЗаполнитьДаннымиИзРегистра();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		Элементы.ВыборПериода.Видимость = Ложь;
	#КонецЕсли

КонецПроцедуры


#Область ОбработчикиЭлементовФормы 

&НаКлиенте
Процедура ПериодСПриИзменении(Элемент)
	
	ЗаполнитьДаннымиИзРегистра();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПоПриИзменении(Элемент)
	
	ЗаполнитьДаннымиИзРегистра();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеВремяПриИзменении(Элемент)
	
	мТекущиеДанные = Элементы.ТабличноеПолеВремяПоГрафикамОбслуживания.ТекущиеДанные;
	Если Не мТекущиеДанные = Неопределено Тогда
		ПроверкаВведеногоВремени(мТекущиеДанные);		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область КомандыФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	Отказ = Ложь;
	Если ТаблицаЗанятости.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "В справочнике не задан график работы компании!";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПериодС) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнена дата начала периода!";
		Сообщение.Поле = "ПериодС";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПериодПо) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнена дата окончания периода!";
		Сообщение.Поле = "ПериодПо";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;

	Если ПериодС > ПериодПо Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Дата начала периода не может быть больше даты окончания!";		
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
		
	мОповещение = Новый ОписаниеОповещения("ЗаполнитьОповещение", ЭтотОбъект);
	ПоказатьВопрос(мОповещение, "Табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериода(Команда)
	
	ПеременнаяТипаСтандартныйПериод = Новый СтандартныйПериод; 

	Диалог = Новый ДиалогРедактированияСтандартногоПериода(); 
	Диалог.Период.ДатаНачала = ПериодС; 
	Диалог.Период.ДатаОкончания = ПериодПо; 
	Если Диалог.Редактировать() Тогда 
		ПеременнаяТипаСтандартныйПериод = Диалог.Период;
		ПериодС = ПеременнаяТипаСтандартныйПериод.ДатаНачала;
		ПериодПо = ПеременнаяТипаСтандартныйПериод.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьНаСервере();
	Закрыть();
	
КонецПроцедуры

#КонецОбласти


#Область ПрочиеПроцедурыИФункии

&НаСервере
Процедура ЗаполнитьДаннымиИзРегистра()
	
	Данные.Очистить();
	
	Если ЗначениеЗаполнено(ПериодС) И ЗначениеЗаполнено(ПериодПо) И ПериодПо < ПериодС Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ГрафикОбслуживания) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = ПолучитьРезультатЗапросаПоГрафику();
	Данные.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРезультатЗапросаПоГрафику()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	атл_ВремяПоГрафикамОбслуживания.Дата,
	|	атл_ВремяПоГрафикамОбслуживания.ВремяС,
	|	атл_ВремяПоГрафикамОбслуживания.ВремяПо
	|ИЗ
	|	РегистрСведений.атл_ВремяПоГрафикамОбслуживания КАК атл_ВремяПоГрафикамОбслуживания
	|ГДЕ
	|	атл_ВремяПоГрафикамОбслуживания.ГрафикОбслуживания = &ГрафикОбслуживания
	|	И атл_ВремяПоГрафикамОбслуживания.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца";
	Запрос.УстановитьПараметр("ГрафикОбслуживания", ГрафикОбслуживания);
	Запрос.УстановитьПараметр("НачалоМесяца", ?(НЕ ЗначениеЗаполнено(ПериодС),Дата('00010101000000'),НачалоДня(ПериодС)));
	Запрос.УстановитьПараметр("КонецМесяца", ?(НЕ ЗначениеЗаполнено(ПериодПо),КонецДня(ТекущаяДата()),КонецДня(ПериодПо)));
	
	Возврат Запрос.Выполнить();
	
КонецФункции

&НаСервере
Функция ПолучитьДеньНеделиПоДате(ТекДата) 
	
	ДеньНеделиЧисло = ДеньНедели(ТекДата);
	
	Если ДеньНеделиЧисло = 1 Тогда
		Возврат Перечисления.ДниНедели.Понедельник;
	ИначеЕсли ДеньНеделиЧисло = 2 Тогда
		Возврат Перечисления.ДниНедели.Вторник;
	ИначеЕсли ДеньНеделиЧисло = 3 Тогда
		Возврат Перечисления.ДниНедели.Среда;
	ИначеЕсли ДеньНеделиЧисло = 4 Тогда
		Возврат Перечисления.ДниНедели.Четверг;
	ИначеЕсли ДеньНеделиЧисло = 5 Тогда
		Возврат Перечисления.ДниНедели.Пятница;
	ИначеЕсли ДеньНеделиЧисло = 6 Тогда
		Возврат Перечисления.ДниНедели.Суббота;
	ИначеЕсли ДеньНеделиЧисло = 7 Тогда
		Возврат Перечисления.ДниНедели.Воскресенье;
	КонецЕсли;
	
	Возврат Перечисления.ДниНедели.ПустаяСсылка();
	
КонецФункции

&НаСервере
Функция ПолучитьПроизводственныйКалендарьЗаПериод()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.Пятидневка,
	|	РегламентированныйПроизводственныйКалендарь.Шестидневка,
	|	РегламентированныйПроизводственныйКалендарь.КалендарныеДни,
	|	РегламентированныйПроизводственныйКалендарь.ВидДня,
	|	РегламентированныйПроизводственныйКалендарь.Год,
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &Дата1 И &Дата2";
	Запрос.УстановитьПараметр("Дата1", ?(НЕ ЗначениеЗаполнено(ПериодС),Дата('00010101000000'),НачалоДня(ПериодС)));
	Запрос.УстановитьПараметр("Дата2", ?(НЕ ЗначениеЗаполнено(ПериодПо),КонецДня(ТекущаяДата()),КонецДня(ПериодПо)));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Данные.Очистить();
	
	мТекущийДень 	= НачалоДня(ПериодС);
	мКонецПериода  	= КонецДня(ПериодПо);
	
	//ПроизводcтвенныйКалендарь = ПолучитьПроизводственныйКалендарьЗаПериод();	
	
	СтруктураОтбора = Новый Структура("ДеньНедели");
	Пока мТекущийДень < мКонецПериода Цикл
		
		//СтрокаКалендаря = ПроизводcтвенныйКалендарь.Найти(мТекущийДень,"ДатаКалендаря");
		//Если ГрафикОбслуживания.НеВключатьВыходныеПриРасчете ИЛИ (Не ГрафикОбслуживания.НеВключатьВыходныеПриРасчете И Не ?(СтрокаКалендаря<>Неопределено,
		//		НЕ (СтрокаКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий ИЛИ
		//		 СтрокаКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный),ЛОЖЬ)) Тогда
		//	
		//	СтруктураОтбора.ДеньНедели = ПолучитьДеньНеделиПоДате(мТекущийДень);
		//	СтрокиШаблона = ТаблицаЗанятости.НайтиСтроки(СтруктураОтбора);
		//	Для каждого СтрокаДанных ИЗ СтрокиШаблона Цикл
		//		НоваяСтрока = Данные.Добавить();
		//		НоваяСтрока.Дата = мТекущийДень;
		//		НоваяСтрока.ВремяС = СтрокаДанных.ВремяС;
		//		НоваяСтрока.ВремяПо = СтрокаДанных.ВремяПо;				
		//	КонецЦикла;
		//	
		//КонецЕсли;
		
		СтруктураОтбора.ДеньНедели = ПолучитьДеньНеделиПоДате(мТекущийДень);
		СтрокиШаблона = ТаблицаЗанятости.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаДанных ИЗ СтрокиШаблона Цикл
			НоваяСтрока = Данные.Добавить();
			НоваяСтрока.Дата = мТекущийДень;
			НоваяСтрока.ВремяС = СтрокаДанных.ВремяС;
			НоваяСтрока.ВремяПо = СтрокаДанных.ВремяПо;				
		КонецЦикла;					
		
		мТекущийДень = мТекущийДень + 86400; 
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	РезультатЗапроса = ПолучитьРезультатЗапросаПоГрафику();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.атл_ВремяПоГрафикамОбслуживания.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Дата = Выборка.Дата;
		МенеджерЗаписи.ВремяС = Выборка.ВремяС;
		МенеджерЗаписи.ВремяПо = Выборка.ВремяПо;
		МенеджерЗаписи.ГрафикОбслуживания = ГрафикОбслуживания;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
	// Дописываем данные в регистр...
	НаборЗаписей = РегистрыСведений.атл_ВремяПоГрафикамОбслуживания.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для каждого СтрокаДанных ИЗ Данные Цикл
		
		НоваяСтрока = НаборЗаписей.Добавить();
		
		НоваяСтрока.Дата = СтрокаДанных.Дата;
		НоваяСтрока.ВремяС = СтрокаДанных.ВремяС;
		НоваяСтрока.ВремяПо = СтрокаДанных.ВремяПо;
		НоваяСтрока.ГрафикОбслуживания = ГрафикОбслуживания;
		
		НоваяСтрока.Количество = ВыполнитьРассчетКоличестваМинут(СтрокаДанных.ВремяС, СтрокаДанных.ВремяПо);
		
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка при записи данных: " + ОписаниеОшибки();
		Сообщение.Сообщить();		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВведеногоВремени(ТекущиеДанные)
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ВремяС) И ЗначениеЗаполнено(ТекущиеДанные.ВремяПо) Тогда
		Если ТекущиеДанные.ВремяС >= ТекущиеДанные.ВремяПо Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не правильно введено время!";
			Сообщение.Сообщить();			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьРассчетКоличестваМинут(ВремяС, ВремяПо) 
	
	РазностьДат = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РАЗНОСТЬДАТ(&ДатаНачала, &ДатаОкончания, МИНУТА) КАК РазностьДат";
	Запрос.УстановитьПараметр("ДатаНачала", 	ВремяС);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ВремяПо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РазностьДат = Выборка.РазностьДат;
	КонецЕсли;
	
	Возврат РазностьДат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьОповещение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНаСервере();
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти


