
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	УстановитьОтборВремяПоГрафикамОбслуживания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Для каждого стрЗанятость ИЗ Объект.ТаблицаЗанятости Цикл
		
		Если НЕ ЗначениеЗаполнено(стрЗанятость.ДеньНедели) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "В строке №" + стрЗанятость.НомерСтроки + " не заполнен день недели!";
			Сообщение.Поле = "Объект.ТаблицаЗанятости[" + стрЗанятость.ПолучитьИдентификатор() + "].ДеньНедели"; 
			Сообщение.Сообщить();			
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(стрЗанятость.ВремяС) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "В строке №" + стрЗанятость.НомерСтроки + " не заполнено время начала рабочего дня!";
			Сообщение.Поле = "Объект.ТаблицаЗанятости[" + стрЗанятость.ПолучитьИдентификатор() + "].ВремяС";
			Сообщение.Сообщить();			
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(стрЗанятость.ВремяПо) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "В строке №" + стрЗанятость.НомерСтроки + " не заполнено время окончания рабочего дня!";
			Сообщение.Поле = "Объект.ТаблицаЗанятости[" + стрЗанятость.ПолучитьИдентификатор() + "].ВремяПо";
			Сообщение.Сообщить();			
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Набор = РеквизитФормыВЗначение("ТабличноеПолеВремяПоГрафикамОбслуживания", Тип("РегистрСведенийНаборЗаписей.атл_ВремяПоГрафикамОбслуживания"));	
	Набор.Отбор.ГрафикОбслуживания.Установить(Объект.Ссылка);
	Набор.Заполнить(Новый Структура("ГрафикОбслуживания",Объект.Ссылка));
	Набор.Записать();
	ЗначениеВРеквизитФормы(Набор,"ТабличноеПолеВремяПоГрафикамОбслуживания");
	
	УстановитьОтборВремяПоГрафикамОбслуживания();
	
КонецПроцедуры



#Область ОбработчикиЭлементовФормы

&НаКлиенте
Процедура ТабличноеПолеВремяПоГрафикамОбслуживанияПриИзменении(Элемент)
	
	Элементы.ТабличноеПолеВремяПоГрафикамОбслуживания.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеВремяПоГрафикамОбслуживанияВремяПриИзменении(Элемент)
	
	мТекущиеДанные = Элементы.ТабличноеПолеВремяПоГрафикамОбслуживания.ТекущиеДанные;
	Если Не мТекущиеДанные = Неопределено Тогда
		ПроверкаВведеногоВремени(мТекущиеДанные);
		мТекущиеДанные.Количество = ВыполнитьРассчетКоличестваМинут(мТекущиеДанные.ВремяС, мТекущиеДанные.ВремяПо);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗанятостиВремяПриИзменении(Элемент)
	
	мТекущиеДанные = Элементы.ТабличноеПолеВремяПоГрафикамОбслуживания.ТекущиеДанные;
	Если Не мТекущиеДанные = Неопределено Тогда
		ПроверкаВведеногоВремени(мТекущиеДанные);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеВремяПоГрафикамОбслуживанияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТабличноеПолеВремяПоГрафикамОбслуживания.Сортировать("Дата Возр");
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеВремяПоГрафикамОбслуживанияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сначала запишите этот график обслуживания!";
		Сообщение.Сообщить();		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗанятостиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	мТекущиеДанные = Элементы.ТаблицаЗанятости.ТекущиеДанные;
	Если НЕ мТекущиеДанные = Неопределено Тогда
		мТекущиеДанные.Порядок = ПолучитьИндексСтроки(мТекущиеДанные.ДеньНедели);	
	КонецЕсли;
	
	Объект.ТаблицаЗанятости.Сортировать("Порядок Возр,ВремяС Возр");	
	
КонецПроцедуры

#КонецОбласти


#Область КомандыФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)ИЛИ Модифицированность = Истина Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сначала запишите этот график обслуживания!";
		Сообщение.Сообщить();		
		Возврат;
	КонецЕсли;
	
	мПараметрыФормы = Новый Структура("ГрафикОбслуживания", Объект.Ссылка);
	мОповещение = Новый ОписаниеОповещения("ЗаполнитьОповещение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.атл_ГрафикиОбслуживания.Форма.ФормаЗаполнения", мПараметрыФормы,ЭтаФорма,,,,мОповещение);	
	
КонецПроцедуры

#КонецОбласти



#Область ПрочиеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтборВремяПоГрафикамОбслуживания() 	
	
	Набор = РеквизитФормыВЗначение("ТабличноеПолеВремяПоГрафикамОбслуживания", Тип("РегистрСведенийНаборЗаписей.атл_ВремяПоГрафикамОбслуживания"));	
	Набор.Отбор.ГрафикОбслуживания.Установить(Объект.Ссылка);
	Набор.Прочитать();
	ЗначениеВРеквизитФормы(Набор, "ТабличноеПолеВремяПоГрафикамОбслуживания");
	
	ТабличноеПолеВремяПоГрафикамОбслуживания.Сортировать("Дата Возр");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВведеногоВремени(ТекущиеДанные)
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ВремяС) И ЗначениеЗаполнено(ТекущиеДанные.ВремяПо) Тогда
		Если ТекущиеДанные.ВремяС >= ТекущиеДанные.ВремяПо Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Обращаем внимание, что время окончания меньше времени начала";
			Сообщение.Сообщить();			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьРассчетКоличестваМинут(ВремяС, ВремяПо) 
	
	РазностьДат = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РАЗНОСТЬДАТ(&ДатаНачала, &ДатаОкончания, МИНУТА) КАК РазностьДат";
	Запрос.УстановитьПараметр("ДатаНачала", 	ВремяС);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ВремяПо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РазностьДат = Выборка.РазностьДат;
	КонецЕсли;
	
	Возврат РазностьДат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИндексСтроки(ДеньНедели)
	
	Если ДеньНедели = Перечисления.ДниНедели.Понедельник Тогда
		Возврат 1;
	ИначеЕсли ДеньНедели = Перечисления.ДниНедели.Вторник Тогда
		Возврат 2;
	ИначеЕсли ДеньНедели = Перечисления.ДниНедели.Среда Тогда
		Возврат 3;
	ИначеЕсли ДеньНедели = Перечисления.ДниНедели.Четверг Тогда
		Возврат 4;
	ИначеЕсли ДеньНедели = Перечисления.ДниНедели.Пятница Тогда
		Возврат 5;
	ИначеЕсли ДеньНедели = Перечисления.ДниНедели.Суббота Тогда
		Возврат 6;
	ИначеЕсли ДеньНедели = Перечисления.ДниНедели.Воскресенье Тогда
		Возврат 7;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьОповещение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	УстановитьОтборВремяПоГрафикамОбслуживания();		
	
КонецПроцедуры

#КонецОбласти


