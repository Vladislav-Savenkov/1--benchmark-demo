
// Длительная операция возвращает адрес хранилища текстового документа, содержащего настройки программы
// Возвращаемое значение:
//	 АдресВременногоХранилища - Строка - Адрес хранилища сформированного документа
//
Функция ПолучитьДанныеДляОбращенияВТехническуюПоддержку(Параметры, АдресРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкиПрограммы = ИнформацияДляТехническойПоддержкиЖКХ(Параметры.Организация, Параметры.ВидПриложения);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПоместитьВоВременноеХранилище(НастройкиПрограммы, АдресРезультата);
	
КонецФункции

// Возвращает текстовый документ, содержащий настройки программы.
//
Функция ИнформацияДляТехническойПоддержкиЖКХ(Организация, ВидПриложения) Экспорт
	
	НастройкиПрограммы = Новый ТекстовыйДокумент;
	
	ДобавитьСекциюТехническаяИнформация(НастройкиПрограммы, ВидПриложения);
	ДобавитьСекциюСтатистикаВеденияУчета(НастройкиПрограммы);
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Приоритет");
	ТаблицаЗначений.Колонки.Добавить("Секция");
	ТаблицаЗначений.Колонки.Добавить("Имя");
	ТаблицаЗначений.Колонки.Добавить("Синоним");
	ТаблицаЗначений.Колонки.Добавить("Значение");
	
	Приоритет = 0; // используется для установки порядка секций
	ДобавитьКонстантыВТаблицуЗначений(ТаблицаЗначений, Приоритет);
	
	Приоритет = Приоритет + 1;
	ДобавитьСправочникиВТаблицуЗначений(Организация, ТаблицаЗначений, Приоритет);
	
	Приоритет = Приоритет + 1;
	ДобавитьРегистрыВТаблицуЗначений(Организация, ТаблицаЗначений, Приоритет);
	
	ПорядокСекций = ТаблицаЗначений.Скопировать(,"Приоритет, Секция");
	ПорядокСекций.Свернуть("Приоритет, Секция");
	ПорядокСекций.Сортировать("Приоритет, Секция");
	
	Для Каждого СтрокаСекция Из ПорядокСекций Цикл
		
		Секция = СтрокаСекция.Секция;
		Строки = ТаблицаЗначений.НайтиСтроки(Новый Структура("Секция", Секция));
		ДобавитьСекцию(НастройкиПрограммы, Секция, Строки);
		
	КонецЦикла;
	
	Возврат НастройкиПрограммы;
	
КонецФункции

#Область ТаблицаЗначений
// Добавляет в переданную таблицу значений константы с префиксами КВП_, УПЖКХ_, ОТР_ и без ключевого слова Удалить.
//
Процедура ДобавитьКонстантыВТаблицуЗначений(ТаблицаЗначений, Приоритет)
	
	НаборКонстант = Константы.СоздатьНабор();
	НаборКонстант.Прочитать();
	
	// Отбираем только "наши" константы, которые не помечены на удаление. 
	Для Каждого Константа Из Метаданные.Константы Цикл
		Если (СтрНайти(Константа.Имя, "КВП_") <> 0 ИЛИ СтрНайти(Константа.Имя, "УПЖКХ_") <> 0
			ИЛИ СтрНайти(Константа.Имя, "ОТР_")) <> 0 И Не СтрНайти(Константа.Имя, "Удалить") <> 0 Тогда
			
			Если Не Константа.Пояснение = "" Тогда
				Строка = ТаблицаЗначений.Добавить();
				Строка.Приоритет = Приоритет;
				Строка.Секция    = Константа.Пояснение;
				Строка.Имя       = Константа.Имя;
				Строка.Синоним   = ?(Константа.Комментарий = "", Константа.Синоним, Константа.Комментарий);
				Строка.Значение  = Константы[Константа.Имя].Получить();
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в переданную таблицу значений конкретные справочники в порядке метаданных.
//
Процедура ДобавитьСправочникиВТаблицуЗначений(Организация, ТаблицаЗначений, Приоритет)
	
	УПЖКХ_НастройкиУчетаКапремонта(Организация, Приоритет, ТаблицаЗначений);
	
КонецПроцедуры

// Добавляет в переданную таблицу значений справочник УПЖКХ_НастройкиУчетаКапремонта в порядке метаданных.
//
Процедура УПЖКХ_НастройкиУчетаКапремонта(Организация, Приоритет, ТаблицаЗначений)
	
	Выборка = Справочники.УПЖКХ_НастройкиУчетаКапремонта.Выбрать( , Организация);
	
	Если Выборка.Следующий() Тогда
		
		СправочникМетаданные = Выборка.Ссылка.Метаданные();
		
		Строка          = ТаблицаЗначений.Добавить();
		Строка.Секция   = СправочникМетаданные.Пояснение;
		Строка.Приоритет = Приоритет;
		Строка.Синоним  = "Организация";
		Строка.Имя      = "Организация";
		Строка.Значение = Выборка["Владелец"];
		
		Строка          = ТаблицаЗначений.Добавить();
		Строка.Приоритет = Приоритет;
		Строка.Секция   = СправочникМетаданные.Пояснение;
		Строка.Синоним  = "Пометка удаления";
		Строка.Имя      = "ПометкаУдаления";
		Строка.Значение = Выборка.ПометкаУдаления;
		
		Для каждого Реквизит Из СправочникМетаданные.Реквизиты Цикл
			Если Не СтрНайти(Реквизит.Имя, "Удалить") <> 0 Тогда
				Строка           = ТаблицаЗначений.Добавить();
				Строка.Приоритет = Приоритет;
				Строка.Секция    = СправочникМетаданные.Пояснение;
				Строка.Имя       = Реквизит.Имя;
				Строка.Синоним   = ?(Реквизит.Комментарий = "", Реквизит.Синоним, Реквизит.Комментарий);
				Строка.Значение  = Выборка[Реквизит.Имя];
				
				Если Строка.Имя = "НастройкаРасчетаПени" И Не Строка.Значение.Пустая() Тогда
					УПЖКХ_НастройкиРасчетаПени(ТаблицаЗначений, Приоритет, Строка.Значение, Строка.Секция);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТабличнаяЧасть Из СправочникМетаданные.ТабличныеЧасти Цикл
			Если Не СтрНайти(ТабличнаяЧасть.Имя, "Удалить") <> 0 Тогда
				Строка           = ТаблицаЗначений.Добавить();
				Строка.Приоритет = Приоритет;
				Строка.Секция    = СправочникМетаданные.Пояснение;
				Строка.Имя       = ТабличнаяЧасть.Имя;
				Строка.Синоним   = ?(ТабличнаяЧасть.Комментарий = "", ТабличнаяЧасть.Синоним, ТабличнаяЧасть.Комментарий);
				Строка.Значение  = Выборка[ТабличнаяЧасть.Имя].Выгрузить();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в переданную таблицу значений справочник УПЖКХ_НастройкиРасчетаПени в порядке метаданных.
//
Процедура УПЖКХ_НастройкиРасчетаПени(ТаблицаЗначений, Приоритет, НастройкаРасчетаПени, Секция)
	
	Выборка = Справочники.УПЖКХ_НастройкиРасчетаПени.Выбрать( , , Новый Структура("Наименование", Строка(НастройкаРасчетаПени)));
	
	Если Выборка.Следующий() Тогда
		
		СправочникМетаданные = Выборка.Ссылка.Метаданные();
		
		Для каждого Реквизит Из СправочникМетаданные.Реквизиты Цикл
			Если Не СтрНайти(Реквизит.Имя, "Удалить") <> 0 Тогда
				Строка           = ТаблицаЗначений.Добавить();
				Строка.Приоритет = Приоритет;
				Строка.Секция    = Секция;
				Строка.Имя       = Реквизит.Имя;
				Строка.Синоним   = ?(Реквизит.Комментарий = "", Реквизит.Синоним, Реквизит.Комментарий);
				Строка.Значение  = Выборка[Реквизит.Имя];
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТабличнаяЧасть Из СправочникМетаданные.ТабличныеЧасти Цикл
			Если Не СтрНайти(ТабличнаяЧасть.Имя, "Удалить") <> 0 Тогда
				Строка           = ТаблицаЗначений.Добавить();
				Строка.Приоритет = Приоритет;
				Строка.Секция    = Секция;
				Строка.Имя       = ТабличнаяЧасть.Имя;
				Строка.Синоним   = ?(ТабличнаяЧасть.Комментарий = "", ТабличнаяЧасть.Синоним, ТабличнаяЧасть.Комментарий);
				Строка.Значение  = Выборка[ТабличнаяЧасть.Имя].Выгрузить();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в переданную таблицу значений конкретные регистры в порядке метаданных.
//
Процедура ДобавитьРегистрыВТаблицуЗначений(Организация, ТаблицаЗначений, Приоритет)
	
	СведенияОРегистре = Новый Структура;
	СведенияОРегистре.Вставить("ИмяРегистра", "УПЖКХ_НастройкиФормированияПлатежногоДокумента");
	СведенияОРегистре.Вставить("Периодический", Ложь);
	ДобавитьРегистрСведений(ТаблицаЗначений, Приоритет, Организация, СведенияОРегистре);
	
	Приоритет = Приоритет + 1;
	
	СведенияОРегистре = Новый Структура;
	СведенияОРегистре.Вставить("ИмяРегистра", "КВП_УчетнаяПолитикаТСЖ");
	СведенияОРегистре.Вставить("Периодический", Истина);
	ДобавитьРегистрСведений(ТаблицаЗначений, Приоритет, Организация, СведенияОРегистре);
	
КонецПроцедуры

// Добавляет в переданную таблицу значений конкретный регистр в порядке метаданных.
//
Процедура ДобавитьРегистрСведений(ТаблицаЗначений, Приоритет, Организация, СведенияОРегистре)
	
	Если СведенияОРегистре = Неопределено Тогда
		СведенияОРегистре = Новый Структура;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если СведенияОРегистре.Свойство("Периодический") И СведенияОРегистре.Периодический Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений." + СведенияОРегистре.ИмяРегистра + ".СрезПоследних(, Организация = &Организация)";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений." + СведенияОРегистре.ИмяРегистра + " КАК Регистр
		|ГДЕ
		|	Регистр.Организация = &Организация";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		МетаданныеРегистра = Метаданные.РегистрыСведений[СведенияОРегистре.ИмяРегистра];
		Секция             = МетаданныеРегистра.Пояснение;
		
		Для каждого СтандартныйРеквизит Из МетаданныеРегистра.СтандартныеРеквизиты Цикл
			Строка           = ТаблицаЗначений.Добавить();
			Строка.Приоритет = Приоритет;
			Строка.Секция    = Секция;
			Строка.Имя       = СтандартныйРеквизит.Имя;
			Строка.Синоним   = СтандартныйРеквизит.Имя;
			Строка.Значение  = Выборка[СтандартныйРеквизит.Имя];
		КонецЦикла;
		
		Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
			Если Не СтрНайти(Измерение.Имя, "Удалить") <> 0 Тогда
				Строка           = ТаблицаЗначений.Добавить();
				Строка.Приоритет = Приоритет;
				Строка.Секция    = Секция;
				Строка.Имя       = Измерение.Имя;
				Строка.Синоним   = ?(Измерение.Комментарий = "", Измерение.Синоним, Измерение.Комментарий);
				Строка.Значение  = Выборка[Измерение.Имя];
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
			Если Не СтрНайти(Ресурс.Имя, "Удалить") <> 0 Тогда
				
				Строка           = ТаблицаЗначений.Добавить();
				Строка.Приоритет = Приоритет;
				Строка.Секция    = Секция;
				Строка.Имя       = Ресурс.Имя;
				Строка.Синоним   = ?(Ресурс.Комментарий = "", Ресурс.Синоним, Ресурс.Комментарий);
				Строка.Значение  = Выборка[Ресурс.Имя];
				
				Если Строка.Имя = "КоличествоПериодовНачисления" Тогда
					ПолучитьТаблицуИзРегистраСведений("КВП_ПорядокУслугДляРаспределенияОплат", ТаблицаЗначений, Приоритет, Новый Структура("ПолеСортировки, Секция", "Порядок", Строка.Секция));
				КонецЕсли;
				
				Если Строка.Имя = "НастройкаРасчетаПени" И Не Строка.Значение.Пустая() Тогда
					УПЖКХ_НастройкиРасчетаПени(ТаблицаЗначений, Приоритет, Строка.Значение, Строка.Секция);
				КонецЕсли;
				
				Если Строка.Имя = "ИспользоватьУслугиИсключенияПриРасчетеПени" И Строка.Значение Тогда
					ПолучитьТаблицуИзРегистраСведений("КВП_УслугиИсключенияДляНачисленияПени", ТаблицаЗначений, Приоритет, Новый Структура("Организация, Секция", Организация, Строка.Секция));
				КонецЕсли;
				
				Если Строка.Имя = "ИспользоватьЛьготныйТариф" Тогда
					ПолучитьТаблицуИзРегистраСведений("УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот", ТаблицаЗначений, Приоритет, Новый Структура("Организация, Секция", Организация, Строка.Секция));
				КонецЕсли;
				
				Если Строка.Имя = "СчетаУчетаДляОтраженияПени" И Строка.Значение = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета Тогда
					ПолучитьТаблицуИзРегистраСведений("УПЖКХ_СчетаУчетаРасчетовПоПени", ТаблицаЗначений, Приоритет, Новый Структура("Организация, ЭтоКапремонт, Секция", Организация, Ложь, Строка.Секция));
				КонецЕсли;
				
				Если Строка.Имя = "СчетаУчетаДляОтраженияПениКапремонт" И Строка.Значение = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета Тогда
					ПолучитьТаблицуИзРегистраСведений("УПЖКХ_СчетаУчетаРасчетовПоПени", ТаблицаЗначений, Приоритет, Новый Структура("Организация, ЭтоКапремонт, Секция", Организация, Истина, Строка.Секция));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в переданную таблицу значений конкретный регистр в виде таблицы значений.
//
Процедура ПолучитьТаблицуИзРегистраСведений(Регистр, ТаблицаЗначений, Приоритет, ДопПараметры = Неопределено)
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[Регистр];
	Ресурсы = МетаданныеРегистра.Ресурсы;
	Измерения = МетаданныеРегистра.Измерения;
	
	НаборЗаписей = РегистрыСведений[Регистр].СоздатьНаборЗаписей();
	Если ДопПараметры.Свойство("Организация") Тогда
		НаборЗаписей.Отбор.Организация.Установить(ДопПараметры.Организация);
	КонецЕсли;
	Если ДопПараметры.Свойство("ЭтоКапремонт") Тогда
		НаборЗаписей.Отбор.ЭтоСчетаДляКапРемонта.Установить(ДопПараметры.ЭтоКапремонт);
	КонецЕсли;
	НаборЗаписей.Прочитать();
	
	Строка           = ТаблицаЗначений.Добавить();
	Строка.Приоритет = Приоритет;
	Строка.Секция    = ?(ДопПараметры.Свойство("Секция"), ДопПараметры.Секция, МетаданныеРегистра.Пояснение);
	Строка.Имя       = МетаданныеРегистра.Имя;
	Строка.Синоним   = ?(МетаданныеРегистра.Комментарий = "", МетаданныеРегистра.Синоним, МетаданныеРегистра.Комментарий);
	Строка.Значение  = НаборЗаписей.Выгрузить();
	
	МассивУдаляемыхКолонок = Новый Массив;
	
	Для каждого Колонка Из Строка.Значение.Колонки Цикл
		// Не выводим помеченные на удаление реквизиты, а для остальных устанавливаем заголовок колонки, который будет отображаться пользователю.
		Если СтрНайти(Колонка.Имя, "Удалить") <> 0 Тогда
			МассивУдаляемыхКолонок.Добавить(Колонка);
		ИначеЕсли Ресурсы.Найти(Колонка.Имя) <> Неопределено Тогда
			Колонка.Заголовок = ?(Ресурсы[Колонка.Имя].Комментарий = "", Ресурсы[Колонка.Имя].Синоним, Ресурсы[Колонка.Имя].Комментарий);
		ИначеЕсли Измерения.Найти(Колонка.Имя) <> Неопределено Тогда
			Колонка.Заголовок = ?(Измерения[Колонка.Имя].Комментарий = "", Измерения[Колонка.Имя].Синоним, Измерения[Колонка.Имя].Комментарий);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Колонка Из МассивУдаляемыхКолонок Цикл
		Строка.Значение.Колонки.Удалить(Колонка);
	КонецЦикла;
	
	Если ДопПараметры.Свойство("ПолеСортировки") Тогда
		Строка.Значение.Сортировать(ДопПараметры.ПолеСортировки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область НастройкиПрограммы
// Добавляет секцию с технической информацией в переданный табличный документ.
//
Процедура ДобавитьСекциюТехническаяИнформация(НастройкиПрограммы, ВидПриложения)
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ЭтоФайловаяИБ = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ОбщийМодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
	РазделениеПоОбластямДанныхВключено = ОбщийМодульРаботаВМоделиСервиса.РазделениеВключено();
	
	НастройкиПрограммы.ДобавитьСтроку("<Cекция Техническая информация>");
	
	НастройкиПрограммы.ДобавитьСтроку(СкомпоноватьРезультат("Название программы", Метаданные.Синоним));
	НастройкиПрограммы.ДобавитьСтроку(СкомпоноватьРезультат("Имя программы", Метаданные.Имя));
	НастройкиПрограммы.ДобавитьСтроку(СкомпоноватьРезультат("Поставщик", Метаданные.Поставщик));
	НастройкиПрограммы.ДобавитьСтроку(СкомпоноватьРезультат("Релиз", Метаданные.Версия));
	НастройкиПрограммы.ДобавитьСтроку(СкомпоноватьРезультат("Платформа", СистемнаяИнформация.ВерсияПриложения));
	НастройкиПрограммы.ДобавитьСтроку(СкомпоноватьРезультат("Версия Бухгалтерия предприятия", ОбновлениеИнформационнойБазы.ВерсияИБ("БухгалтерияПредприятия")));
	НастройкиПрограммы.ДобавитьСтроку(СкомпоноватьРезультат("Режим работы", ?(ЭтоФайловаяИБ, НСтр("ru = 'Файловый'"), НСтр("ru = 'Серверный'")))); // тут только файловый/серверный 
	НастройкиПрограммы.ДобавитьСтроку(СкомпоноватьРезультат("Приложение", ВидПриложения)); // а тут 'Веб-клиент'/'Толстый клиент, обычное приложение'/'Толстый клиент, управляемое приложение'/'Тонкий клиент'/''
	НастройкиПрограммы.ДобавитьСтроку(СкомпоноватьРезультат("Полные права", ?(Пользователи.ЭтоПолноправныйПользователь(, Ложь, Ложь), НСтр("ru = 'Есть'"), НСтр("ru = 'Нет'"))));
	НастройкиПрограммы.ДобавитьСтроку(СкомпоноватьРезультат("Права администратора", ?(Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь), НСтр("ru = 'Есть'"), НСтр("ru = 'Нет'"))));
	НастройкиПрограммы.ДобавитьСтроку(СкомпоноватьРезультат("Используется РИБ", ОбщегоНазначенияБП.ИспользуютсяПланыОбмена(Истина)));
	НастройкиПрограммы.ДобавитьСтроку(СкомпоноватьРезультат("Используется обмен с другими конфигурациями", ОбщегоНазначенияБП.ИспользуютсяПланыОбмена(Ложь)));
	НастройкиПрограммы.ДобавитьСтроку(СкомпоноватьРезультат("Настройка параметров системы лицензирования", Константы.СЗК_ПараметрыСвязи.Получить()));
	НастройкиПрограммы.ДобавитьСтроку(СкомпоноватьРезультат("Разделение по областям данных", ?(РазделениеПоОбластямДанныхВключено, "Используется", "Не используется")));
	
	НастройкиПрограммы.ДобавитьСтроку("<КонецCекции>");
	НастройкиПрограммы.ДобавитьСтроку("");
	
КонецПроцедуры

// Добавляет секцию со статистикой ведения учета в переданный табличный документ.
//
Процедура ДобавитьСекциюСтатистикаВеденияУчета(НастройкиПрограммы)
	
	НастройкиПрограммы.ДобавитьСтроку("<Cекция Статистика ведения учета>");
	
	НастройкиПрограммы.ДобавитьСтроку(СкомпоноватьРезультат("Количество помещений в ИБ всего", УПЖКХ_ОбщегоНазначенияСервер.ПолучитьКоличествоПомещенийВБазе()));
	НастройкиПрограммы.ДобавитьСтроку(СкомпоноватьРезультат("Количество открытых лицевых счетов в ИБ всего", УПЖКХ_ОбщегоНазначенияСервер.ПолучитьКоличествоЛСВБазе()));
	
	НастройкиПрограммы.ДобавитьСтроку("<КонецCекции>");
	НастройкиПрограммы.ДобавитьСтроку("");
	
КонецПроцедуры

// Добавляет секцию с найденными строками в переданный табличный документ.
//
Процедура ДобавитьСекцию(НастройкиПрограммы, Секция, Строки)
	
	НастройкиПрограммы.ДобавитьСтроку("<Секция " + Секция + ">");
	
	Для каждого Строка Из Строки Цикл
		
		НастройкиПрограммы.ДобавитьСтроку(ОбработатьЗначение(Строка.Синоним, Строка.Значение, Строка.Имя));
		
	КонецЦикла;
	
	НастройкиПрограммы.ДобавитьСтроку("<КонецCекции>");
	НастройкиПрограммы.ДобавитьСтроку("");
	
КонецПроцедуры

// Обработывает значение перед добавлением в табличный документ.
//
Функция ОбработатьЗначение(Наименование, Значение, Имя = "")
	
	Результат = "";
	
	// Блок с особым представлением значения.
	Если Имя = "УПЖКХ_РасчетСреднегоРасходаПоПУСУчетомДатыВводаПоследнихПоказаний" Тогда
		Результат = СкомпоноватьРезультат(Наименование, ?(Значение, "Месяцу ввода последних показаний", "Расчетному месяцу"));
	ИначеЕсли Имя = "УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами" Тогда
		Результат = СкомпоноватьРезультат(Наименование, ?(Значение, "Готовыми числами", "Пофамильно"));
	ИначеЕсли Имя = "УПЖКХ_УпрощенныйВариантУчетаСобственников" Тогда
		Результат = СкомпоноватьРезультат(Наименование, ?(Значение, "Упрощенный", "Подробный"));
	ИначеЕсли Имя = "УПЖКХ_НачислятьЗависимуюУслугуПоСобственномуНормативу" Тогда
		Результат = СкомпоноватьРезультат(Наименование, ?(Значение, "По собственному нормативу зависимой услуги", "В соответствии с объемами начисления услуг-оснований"));
	ИначеЕсли Имя = "УПЖКХ_СторнироватьНачисленияПоАктуальномуТарифу" Тогда
		Результат = СкомпоноватьРезультат(Наименование, ?(Значение, "По актуальному тарифу", "По тарифу, действовавшему на момент начисления"));
	ИначеЕсли Имя = "УПЖКХ_УчитыватьСторноИндивидуальныхНачисленийПриРасчетеОДНСразу" Тогда
		Результат = СкомпоноватьРезультат(Наименование, ?(Значение, "Сразу в полном объеме", "В пределах объема текущего начисления"));
	ИначеЕсли Имя = "УПЖКХ_ПечататьЧекиИзРегистрацииОплаты" Тогда
		Результат = СкомпоноватьРезультат(Наименование, ?(Значение, "Из документа ""Регистрация оплаты""", "Из документов ""Поступление наличных"", ""Выдача наличных"", ""Операция по платежной карте"""));
	ИначеЕсли Имя = "ИспользоватьПроцентнуюСтавку" Тогда
		Результат = СкомпоноватьРезультат(Наименование, ?(Значение, "Процентная ставка", "Ключевая ставка ЦБ РФ"));
	ИначеЕсли Имя = "ВариантОграниченияПериодаВводаПоказаний" Тогда
		Результат = СкомпоноватьРезультат(Наименование, ?(Значение = 0, "В указанный период", "В любой момент"));
	ИначеЕсли Имя = "РаспределятьАвансПропорциональноНачислениям" Тогда
		Результат = СкомпоноватьРезультат(Наименование, ?(Значение, "Пропорционально начислениям", "Поровну по действующим услугам"));
	ИначеЕсли Имя = "ОбнулятьДоходыВсего" Тогда
		Результат = СкомпоноватьРезультат(Наименование, ?(Значение, "Обнулять", "Считать автоматически"));
	ИначеЕсли Имя = "ОбнулятьДоходыПринимаемые" Тогда
		Результат = СкомпоноватьРезультат(Наименование, ?(Значение, "Обнулять", "Считать автоматически"));
	ИначеЕсли Имя = "ВидСчетаУчетаУслугиДляОтраженияВРеглУчете" Тогда
		Результат = СкомпоноватьРезультат(Наименование, ?(Значение = Перечисления.КВП_ВидыСчетовУчетаУслугДляОтраженияВРеглУчете.СчетУчета, "Счет учета номенклатуры", 
													 ?(Значение = Перечисления.КВП_ВидыСчетовУчетаУслугДляОтраженияВРеглУчете.СчетУчетаДоходовОтРеализации, "Считать автоматически", "")));
		
	// Блок с обработкой различных значений
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		
		Результат = СкомпоноватьРезультат(Наименование, ?(Значение, "Используется", "Не используется"));
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Неопределено") Тогда
		
		Результат = СкомпоноватьРезультат(Наименование, "Не установлено") ;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		
		Результат = СкомпоноватьРезультат(Наименование, Значение) ;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ХранилищеЗначения") Тогда
		
		Результат = ОбработатьЗначение(Наименование, Значение.Получить());
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
		
		Если Значение.Количество() = 0 Тогда
			Результат = СкомпоноватьРезультат(Наименование, "Не установлено");
		Иначе
			Результат = Результат + Наименование + ":";
			Для каждого ЗначениеСтруктуры Из Значение Цикл
				Результат = Результат + Символы.ПС + СкомпоноватьРезультат(ЗначениеСтруктуры.Ключ, ЗначениеСтруктуры.Значение);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
		
		Если Значение.Количество() = 0 Тогда
			Результат = СкомпоноватьРезультат(Наименование, "Не установлено");
		Иначе
			Результат = Результат + Наименование + ":";
			
			НазванияКолонок = "";
			Для каждого Колонка Из Значение.Колонки Цикл
				НазванияКолонок = НазванияКолонок + Колонка.Заголовок + ";";
			КонецЦикла;
			
			Результат = Результат + Символы.ПС + СкомпоноватьРезультат("", НазванияКолонок);
			
			Для каждого СтрокаТаблицы Из Значение Цикл
				
				Строка = "";
				Для каждого Колонка Из Значение.Колонки Цикл
					Строка = Строка + СтрокаТаблицы[Колонка.Имя] + ";";
				КонецЦикла;
				Результат = Результат + Символы.ПС + СкомпоноватьРезультат("", Строка);
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		
		Если Значение.Количество() = 0 Тогда
			Результат = СкомпоноватьРезультат(Наименование, "Не установлено");
		Иначе
			Результат = Результат + Наименование + ":";
			Для Индекс = 0 по Значение.ВГраница() Цикл
				Результат = Результат + Символы.ПС + СкомпоноватьРезультат(Строка(Индекс + 1), Значение[Индекс]);
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		Результат = СкомпоноватьРезультат(Наименование, Значение);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Компанует строку в нужном формате.
//
Функция СкомпоноватьРезультат(Наименование, Значение)
	
	Возврат ?(Наименование = "", "", Наименование + " = ") + ?(Строка(Значение) = "", """""", Значение);
	
КонецФункции

#КонецОбласти 
