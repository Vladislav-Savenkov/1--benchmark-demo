

// Функция по имени ищет пользователя ИБ, если не находит - создает нового и его возвращает
//
// Параметры:
//  ИмяПользователя                 - строка по которой ищется пользователь ИБ
//
// Возвращаемое значение:
//   Признак того, удалось ли найти пользователя
//
Функция НайтиПользователяИБ(ИмяПользователя) Экспорт
	
	Если ИмяПользователя = "Не определен" Тогда
		ПользовательИБ = Неопределено
	Иначе
		// ищем пользователя ИБ по имени
		Попытка
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
		Исключение
			ПользовательИБ = Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ПользовательИБ;
КонецФункции

// Функция по формирует список кодов пользователей, для которых есть запись об их активности
//
// Параметры:
//  ПользовательДляОтбора           - пользователь для отбора в ситуациях, когде необходимо узнать об активности одного пользователя 
//
// Возвращаемое значение:
//   СписокЗначений - список кодов пользователей
//
Функция ПолучитьСписокИменПользователейПоАктивности(ПользовательДляОтбора = Неопределено) Экспорт
	
	СписокИмен = Новый СписокЗначений();
	
	Запрос = Новый Запрос;
	
	Если ПользовательДляОтбора = Неопределено Тогда //ищем по всему списку пользователей
	   	ДопУсловие = "";
	Иначе //все не нужны, пытаемся определить статус только одного пользователя
	   	ДопУсловие = "
              |	И атл_АктивностьПользователей.Пользователь = &Пользователь";
		Запрос.УстановитьПараметр("Пользователь", ПользовательДляОтбора);
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	атл_АктивностьПользователей.Пользователь,
	               |	атл_АктивностьПользователей.Пользователь.Код КАК ПользовательКод
	               |ИЗ
	               |	РегистрСведений.атл_АктивностьПользователей КАК атл_АктивностьПользователей
	               |ГДЕ
	               |	атл_АктивностьПользователей.МК = ЛОЖЬ"+ДопУсловие;
				   
	Результат = Запрос.Выполнить();
	
	СписокИмен = Результат.Выгрузить().ВыгрузитьКолонку("ПользовательКод");
	
	Возврат СписокИмен;
	
КонецФункции


// Функция формирует дерево пользователей с учетом их активности
//
// Параметры
//  ИерархическийПросмотр - признак формирования запроа в режиме иерархии
//  ТолькоАктивные - признак отображения только активных мобильных сотрудников
//  ПользовательДляОтбора - пользователь, по которому необходимо выполнить отбор
//
// Возвращаемое значение:
//   ДеревоЗначение - сформированное с помощью запроса дерево со списком пользователей
//
Функция ПолучитьДеревоВозможныхПользователей(ИерархическийПросмотр = Ложь, ТолькоАктивные = Ложь, ПользовательДляОтбора = Неопределено) Экспорт
	
	СписокИменПользователейПоАктивности = ПолучитьСписокИменПользователейПоАктивности(ПользовательДляОтбора);
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.ЯвляетсяПользователемБД,
	               |	ВложенныйЗапрос.ЯвляетсяПользователемМК,
	               |	ВложенныйЗапрос.Ссылка КАК Пользователь,
	               |	0 КАК Флаг,
	               |	ВложенныйЗапрос.ПользовательАктивенМК,
	               |	ВложенныйЗапрос.ПользовательАктивен1С,
	               |	ВложенныйЗапрос.ПользовательАктивен,
	               |	ВложенныйЗапрос.ДатаПоследнейАктивности
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Пользователи.Ссылка КАК Ссылка,
	               |		ЕСТЬNULL(ВложенныйЗапросПользователиБД.ЯвляетсяПользователемБД, ЛОЖЬ) КАК ЯвляетсяПользователемБД,
	               |		ЕСТЬNULL(ВложенныйЗапросПользователиМК.ЯвляетсяПользователемМК, ЛОЖЬ) КАК ЯвляетсяПользователемМК,
	               |		ЕСТЬNULL(ВложенныйЗапросАктивныеПользователиМК.ПользовательМКАктивен, ЛОЖЬ) КАК ПользовательАктивенМК,
	               |		ЕСТЬNULL(ВложенныйЗапросАктивныеПользователи1С.Пользователь1САктивен, ЛОЖЬ) КАК ПользовательАктивен1С,
	               |		ВЫБОР
	               |			КОГДА ЕСТЬNULL(ВложенныйЗапросАктивныеПользователиМК.ПользовательМКАктивен, ЛОЖЬ)
	               |					ИЛИ ЕСТЬNULL(ВложенныйЗапросАктивныеПользователи1С.Пользователь1САктивен, ЛОЖЬ)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ КАК ПользовательАктивен,
	               |		ВЫБОР
	               |			КОГДА ЕСТЬNULL(ВложенныйЗапросДатаПоследнейАктивности1С.ДатаПоследнейАктивности, &ПустаяДата) > ЕСТЬNULL(ВложенныйЗапросДатаПоследнейАктивностиМК.ДатаПоследнейАктивности, &ПустаяДата)
	               |				ТОГДА ЕСТЬNULL(ВложенныйЗапросДатаПоследнейАктивности1С.ДатаПоследнейАктивности, &ПустаяДата)
	               |			ИНАЧЕ ЕСТЬNULL(ВложенныйЗапросДатаПоследнейАктивностиМК.ДатаПоследнейАктивности, &ПустаяДата)
	               |		КОНЕЦ КАК ДатаПоследнейАктивности
	               |	ИЗ
	               |		Справочник.Пользователи КАК Пользователи
	               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				ПользователиИБ.Ссылка КАК Пользователь,
	               |				ИСТИНА КАК ЯвляетсяПользователемБД
	               |			ИЗ
	               |				Справочник.Пользователи КАК ПользователиИБ
	               |			ГДЕ
	               |				ПользователиИБ.Код В(&СписокИменПользователейИБ)) КАК ВложенныйЗапросПользователиБД
	               |			ПО Пользователи.Ссылка = ВложенныйЗапросПользователиБД.Пользователь
	               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				атл_НастройкиПодключенияМобильныхСотрудников.Пользователь КАК Пользователь,
	               |				атл_НастройкиПодключенияМобильныхСотрудников.ЯвляетсяПользователемМК КАК ЯвляетсяПользователемМК
	               |			ИЗ
	               |				РегистрСведений.атл_НастройкиПодключенияМобильныхСотрудников КАК атл_НастройкиПодключенияМобильныхСотрудников
	               |			ГДЕ
	               |				атл_НастройкиПодключенияМобильныхСотрудников.ЯвляетсяПользователемМК = ИСТИНА) КАК ВложенныйЗапросПользователиМК
	               |			ПО Пользователи.Ссылка = ВложенныйЗапросПользователиМК.Пользователь
	               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |				атл_АктивностьПользователей.Пользователь КАК Пользователь,
	               |				ИСТИНА КАК ПользовательМКАктивен,
	               |				атл_АктивностьПользователей.ДатаПоследнейАктивности КАК ДатаПоследнейАктивности
	               |			ИЗ
	               |				РегистрСведений.атл_АктивностьПользователей КАК атл_АктивностьПользователей
	               |			ГДЕ
	               |				атл_АктивностьПользователей.ДатаПоследнейАктивности >= &ДатаДопустимойПоследнейАктивности
	               |				И атл_АктивностьПользователей.МК = ИСТИНА) КАК ВложенныйЗапросАктивныеПользователиМК
	               |			ПО Пользователи.Ссылка = ВложенныйЗапросАктивныеПользователиМК.Пользователь
	               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |				атл_АктивностьПользователей.Пользователь КАК Пользователь,
	               |				атл_АктивностьПользователей.ДатаПоследнейАктивности КАК ДатаПоследнейАктивности
	               |			ИЗ
	               |				РегистрСведений.атл_АктивностьПользователей КАК атл_АктивностьПользователей
	               |			ГДЕ
	               |				атл_АктивностьПользователей.МК = ИСТИНА) КАК ВложенныйЗапросДатаПоследнейАктивностиМК
	               |			ПО Пользователи.Ссылка = ВложенныйЗапросДатаПоследнейАктивностиМК.Пользователь
	               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				атл_АктивностьПользователей.Пользователь КАК Пользователь,
	               |				ИСТИНА КАК Пользователь1САктивен,
	               |				атл_АктивностьПользователей.ДатаПоследнейАктивности КАК ДатаПоследнейАктивности
	               |			ИЗ
	               |				РегистрСведений.атл_АктивностьПользователей КАК атл_АктивностьПользователей
	               |			ГДЕ
	               |				атл_АктивностьПользователей.МК = ЛОЖЬ
	               |				И атл_АктивностьПользователей.ДатаПоследнейАктивности >= &ДатаДопустимойПоследнейАктивности) КАК ВложенныйЗапросАктивныеПользователи1С
	               |			ПО Пользователи.Ссылка = ВложенныйЗапросАктивныеПользователи1С.Пользователь
	               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				атл_АктивностьПользователей.Пользователь КАК Пользователь,
	               |				атл_АктивностьПользователей.ДатаПоследнейАктивности КАК ДатаПоследнейАктивности
	               |			ИЗ
	               |				РегистрСведений.атл_АктивностьПользователей КАК атл_АктивностьПользователей
	               |			ГДЕ
	               |				атл_АктивностьПользователей.МК = ЛОЖЬ) КАК ВложенныйЗапросДатаПоследнейАктивности1С
	               |			ПО Пользователи.Ссылка = ВложенныйЗапросДатаПоследнейАктивности1С.Пользователь
	               |	ГДЕ
	               |		Пользователи.Ссылка <> &ТекущийПользователь) КАК ВложенныйЗапрос
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА &ТолькоАктивные
	               |				ТОГДА ВложенныйЗапрос.ПользовательАктивен = ИСТИНА
	               |							И (ВложенныйЗапрос.ЯвляетсяПользователемБД = ИСТИНА
	               |								ИЛИ ВложенныйЗапрос.ЯвляетсяПользователемМК = ИСТИНА)
	               |						ИЛИ ВЫБОР
	               |							КОГДА &ИерархическийПросмотр = ИСТИНА
	               |								ТОГДА ВложенныйЗапрос.Ссылка.ЭтоГруппа = ИСТИНА
	               |							ИНАЧЕ ЛОЖЬ
	               |						КОНЕЦ
	               |			ИНАЧЕ ВложенныйЗапрос.ЯвляетсяПользователемБД = ИСТИНА
	               |					ИЛИ ВложенныйЗапрос.ЯвляетсяПользователемМК = ИСТИНА
	               |					ИЛИ ВЫБОР
	               |						КОГДА &ИерархическийПросмотр = ИСТИНА
	               |							ТОГДА ВложенныйЗапрос.Ссылка.ЭтоГруппа = ИСТИНА
	               |						ИНАЧЕ ЛОЖЬ
	               |					КОНЕЦ
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА &ИерархическийПросмотр = ИСТИНА
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВложенныйЗапрос.Ссылка.ЭтоГруппа = ИСТИНА
	               |							ТОГДА ИСТИНА
	               |						ИНАЧЕ  ВложенныйЗапрос.ЯвляетсяПользователемМК
	               |					КОНЕЦ
	               |			ИНАЧЕ ВложенныйЗапрос.ЯвляетсяПользователемМК
	               |		КОНЕЦ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.ЯвляетсяПользователемБД,
	               |	ВложенныйЗапрос.ЯвляетсяПользователемМК,
	               |	ВложенныйЗапрос.Ссылка,
	               |	ВложенныйЗапрос.ПользовательАктивенМК,
	               |	ВложенныйЗапрос.ПользовательАктивен1С,
	               |	ВложенныйЗапрос.ПользовательАктивен,
	               |	ВложенныйЗапрос.ДатаПоследнейАктивности
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Пользователь"+?(ИерархическийПросмотр," ИЕРАРХИЯ","")+"
				   |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("СписокИменПользователейИБ", СписокИменПользователейПоАктивности);
	Запрос.УстановитьПараметр("ТолькоАктивные", ТолькоАктивные);
	Запрос.УстановитьПараметр("ИерархическийПросмотр", ИерархическийПросмотр);
	Запрос.УстановитьПараметр("ДатаДопустимойПоследнейАктивности", ТекущаяДата() - ?(Константы.атл_ВремяВТечениеКоторогоПользовательОнлайн.Получить() = 0, 300, Константы.атл_ВремяВТечениеКоторогоПользовательОнлайн.Получить()));
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	
	Если ПользовательДляОтбора <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Пользователи.Ссылка <> &ТекущийПользователь) КАК ВложенныйЗапрос", "Пользователи.Ссылка = &ПользовательДляОтбора) КАК ВложенныйЗапрос");
		Запрос.УстановитьПараметр("ПользовательДляОтбора", ПользовательДляОтбора);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
КонецФункции

// Функция формирует список элементов перечисления
//
// Параметры
//  ИмяПеречисления - имя перечисления, как оно задано в конфигураторе
//
// Возвращаемое значение:
//   СписокЗначений - список элементов перечисления
//
Функция ПолучитьСписокЭлементовПеречисления(ИмяПеречисления) Экспорт

	СписокЭлементовПеречисления = Новый СписокЗначений;
	
	Попытка
		КоллекцияЭлементовПеречисления = Перечисления[ИмяПеречисления];
	Исключение
		Возврат СписокЭлементовПеречисления;
	КонецПопытки;
	
	Для каждого ЭлементПеречисления Из КоллекцияЭлементовПеречисления Цикл
		СписокЭлементовПеречисления.Добавить(ЭлементПеречисления, Строка(ЭлементПеречисления));
	КонецЦикла;
	
	Возврат СписокЭлементовПеречисления;

КонецФункции // ПолучитьСписокЭлементовПеречисления()

