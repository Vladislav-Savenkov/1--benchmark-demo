
///////////////////////////////////////////////////////////////////////////////////////////////////
////
//							СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура атл_ОтключитьРегистрациюСобытийВЖурналеРегистрации() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	//отключение регистрации активности пользователей
  	ОписанияИзменения = Новый Массив;  
    Изменение = Новый ОписаниеИспользованияСобытияДоступЖурналаРегистрации;
    
    Изменение.Объект = "РегистрСведений.атл_АктивностьПользователей";
    ОписанияИзменения.Добавить(Изменение);
    
    ИспользованиеСобытия = Новый ИспользованиеСобытияЖурналаРегистрации;
    ИспользованиеСобытия.Использование = Ложь;
    ИспользованиеСобытия.ОписаниеИспользования = ОписанияИзменения;
    
    УстановитьИспользованиеСобытияЖурналаРегистрации("_$Data$_.Update", ИспользованиеСобытия);	
	
	//отключение регистрации переменные синхронизации с сервером 1С
  	ОписанияИзменения = Новый Массив;  
    Изменение = Новый ОписаниеИспользованияСобытияДоступЖурналаРегистрации;
    
    Изменение.Объект = "РегистрСведений.атл_ПеременныеСинхронизацииССерверомУМС";
    ОписанияИзменения.Добавить(Изменение);
    
    ИспользованиеСобытия = Новый ИспользованиеСобытияЖурналаРегистрации;
    ИспользованиеСобытия.Использование = Ложь;
    ИспользованиеСобытия.ОписаниеИспользования = ОписанияИзменения;
    
    УстановитьИспользованиеСобытияЖурналаРегистрации("_$Data$_.Update", ИспользованиеСобытия);	
	
	//отключение регистрации изменений с полученными пакетами 
  	ОписанияИзменения = Новый Массив;  
    Изменение = Новый ОписаниеИспользованияСобытияДоступЖурналаРегистрации;
    
    Изменение.Объект = "РегистрСведений.атл_ПолученныеПакетыСДаннымиУМС";
    ОписанияИзменения.Добавить(Изменение);
    
    ИспользованиеСобытия = Новый ИспользованиеСобытияЖурналаРегистрации;
    ИспользованиеСобытия.Использование = Ложь;
    ИспользованиеСобытия.ОписаниеИспользования = ОписанияИзменения;
    
    УстановитьИспользованиеСобытияЖурналаРегистрации("_$Data$_.Update", ИспользованиеСобытия);	
	
	//отключение регистрации изменений по статистике обменов
  	ОписанияИзменения = Новый Массив;  
    Изменение = Новый ОписаниеИспользованияСобытияДоступЖурналаРегистрации;
    
    Изменение.Объект = "РегистрСведений.атл_СтатистикаОбменовДаннымиССерверомУМС";
    ОписанияИзменения.Добавить(Изменение);
    
    ИспользованиеСобытия = Новый ИспользованиеСобытияЖурналаРегистрации;
    ИспользованиеСобытия.Использование = Ложь;
    ИспользованиеСобытия.ОписаниеИспользования = ОписанияИзменения;
    
    УстановитьИспользованиеСобытияЖурналаРегистрации("_$Data$_.Update", ИспользованиеСобытия);	
	
	//отключение регистрации изменений по координатам трека
  	ОписанияИзменения = Новый Массив;  
    Изменение = Новый ОписаниеИспользованияСобытияДоступЖурналаРегистрации;
    
    Изменение.Объект = "РегистрСведений.атл_КоординатыТрека";
    ОписанияИзменения.Добавить(Изменение);
    
    ИспользованиеСобытия = Новый ИспользованиеСобытияЖурналаРегистрации;
    ИспользованиеСобытия.Использование = Ложь;
    ИспользованиеСобытия.ОписаниеИспользования = ОписанияИзменения;
    
    УстановитьИспользованиеСобытияЖурналаРегистрации("_$Data$_.Update", ИспользованиеСобытия);	
	
	
	//отключение регистрации изменений по информации об устройстве
  	ОписанияИзменения = Новый Массив;  
    Изменение = Новый ОписаниеИспользованияСобытияДоступЖурналаРегистрации;
    
    Изменение.Объект = "РегистрСведений.атл_ИнформацияОбУстройстве";
    ОписанияИзменения.Добавить(Изменение);
    
    ИспользованиеСобытия = Новый ИспользованиеСобытияЖурналаРегистрации;
    ИспользованиеСобытия.Использование = Ложь;
    ИспользованиеСобытия.ОписаниеИспользования = ОписанияИзменения;
    
    УстановитьИспользованиеСобытияЖурналаРегистрации("_$Data$_.Update", ИспользованиеСобытия);	
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Функция ЕстьСоединенияСИнформационнойБазойПодПользователем(УникальныйИдентификаторПользователя, ТекущийНомерСоединения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	УжеЕстьСоединенияСБазой = Ложь;
	
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
	
	Для Каждого ТекСоединение Из МассивСоединений Цикл
		Если (ТекСоединение.ИмяПриложения = "1CV8" ИЛИ ТекСоединение.ИмяПриложения = "1CV8C") 
			И (НЕ ТекСоединение.НомерСоединения = ТекущийНомерСоединения)
			И (НЕ ТекСоединение.Пользователь = неопределено)
			И (ТекСоединение.Пользователь.УникальныйИдентификатор = УникальныйИдентификаторПользователя) Тогда
			
			УжеЕстьСоединенияСБазой = Истина;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат УжеЕстьСоединенияСБазой;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////////////////////////
////
//							ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАСЧЕТА ИНТЕРВАЛА ПО ГРАФИКУ РАБОТЫ

// Возвращает количество секунд между двумя датами по графику обслуживания - с учетом рабочего времени
//
// Параметры:
// ДатаНачала - дата начала интервала;
// ДатаОкончания - дата окончания интервала;
// мГрафикОбслуживания - график, по которому необходимо рассчитать длительность;
// Расшифровка - таблица значений с расшифровкой расчета интервала;
//
// Возвращаемое значение:
// Количество секунд
//
Функция КоличествоСекундМеждуДатамиПоГрафикуОбслуживания(ДатаНачала, ДатаОкончания, мГрафикОбслуживания, Расшифровка = Неопределено) Экспорт
	
	КоличествоСекундМеждуДнями = 0;	
	ГраницаНачалоПоДням = НачалоДня(ДатаНачала + 86400);
	ГраницаКонецПоДням  = НачалоДня(ДатаОкончания - 86400);
	
	// по целым дням, попавшим в период количество минут
	// берем из регистра.
	// интервал: с начала следущего дня с даты установки состояния по предыдущий день включительно
	
	Если ГраницаКонецПоДням >= ГраницаНачалоПоДням Тогда
		ВыборкаСекунд = ПолучитьВыборкуСекундМеждуДнями(Расшифровка, ГраницаНачалоПоДням, ГраницаКонецПоДням, мГрафикОбслуживания);
		Пока ВыборкаСекунд.Следующий() Цикл
			КоличествоСекундМеждуДнями = КоличествоСекундМеждуДнями + ВыборкаСекунд.Количество;
			Если Расшифровка <> Неопределено Тогда
				ДобавитьРасшифровку(Расшифровка, ВыборкаСекунд.Количество, ВыборкаСекунд.Дата, ВыборкаСекунд.ВремяС, ВыборкаСекунд.ВремяПо);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
				
	// определяем время для граничных участков...от даты установки состояния до начала следующего дня
	// и от начала текущего дня до текущей даты. Время определяем по графику компании...
	
	// 1. Интервал от даты установки состояния до конца текущего дня.
	
	Интервал1 = 0;
	Если НачалоДня(ДатаОкончания) <> НачалоДня(ДатаНачала) Тогда
		
		ВыборкаИнтервалыДня = ПолучитьВыборкуИнтерваловПоДатеВСекундах(НачалоДня(ДатаНачала), мГрафикОбслуживания);
		Пока ВыборкаИнтервалыДня.Следующий() Цикл 
			
			ДатаВремяС 	= НачалоДня(ВыборкаИнтервалыДня.Дата) + Час(ВыборкаИнтервалыДня.ВремяС) * 3600 + Минута(ВыборкаИнтервалыДня.ВремяС)*60;
			ДатаВремяПо = НачалоДня(ВыборкаИнтервалыДня.Дата) + Час(ВыборкаИнтервалыДня.ВремяПо)* 3600 + Минута(ВыборкаИнтервалыДня.ВремяПо)*60;
			
			Если ДатаНачала >= ДатаВремяПо Тогда
				
				// данный интервал нас не интересует, т.к. мы в него не попали
				
			ИначеЕсли ДатаВремяС < ДатаНачала И ДатаНачала < ДатаВремяПо Тогда
				
				ДатаНачалаПериода = ДатаНачала;
				ДатаКонцаПериода  = ДатаВремяПо;
				
				Интервал1 = Интервал1 + (ДатаКонцаПериода - ДатаНачалаПериода);

				ДобавитьРасшифровку(Расшифровка, Интервал1, ВыборкаИнтервалыДня.Дата, ДатаНачала, ДатаВремяПо);
				
			ИначеЕсли ДатаНачала <= ДатаВремяС Тогда
				
				Интервал1 = Интервал1 + ВыборкаИнтервалыДня.Количество;
				
				ДобавитьРасшифровку(Расшифровка, Интервал1, ВыборкаИнтервалыДня.Дата, ВыборкаИнтервалыДня.ВремяС, ВыборкаИнтервалыДня.ВремяПо);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// 2. Интервал от начала текущего дня, до даты установки состояний...
				
	// Интервал от начала дня до текущей даты, с учетом времени работы компании...
	Интервал2 = 0;
	
	ВыборкаИнтервалыДня = ПолучитьВыборкуИнтерваловПоДатеВСекундах(НачалоДня(ДатаОкончания), мГрафикОбслуживания);
	Пока ВыборкаИнтервалыДня.Следующий() Цикл
		
		ДатаВремяС 	= НачалоДня(ВыборкаИнтервалыДня.Дата) + Час(ВыборкаИнтервалыДня.ВремяС) * 3600 + Минута(ВыборкаИнтервалыДня.ВремяС)*60;
		ДатаВремяПо = НачалоДня(ВыборкаИнтервалыДня.Дата) + Час(ВыборкаИнтервалыДня.ВремяПо)* 3600 + Минута(ВыборкаИнтервалыДня.ВремяПо)*60;
		
		Если ДатаОкончания <= ДатаВремяС Тогда
			
			// этот отрезок не интересен, т.к. он еще не наступил
			
		ИначеЕсли ДатаОкончания > ДатаВремяС И ДатаОкончания < ДатаВремяПо Тогда
			
			ДатаНачалаПериода = Макс(ДатаВремяС, ДатаНачала);
			ДатаКонцаПериода = ДатаОкончания;
			
			Интервал2 = Интервал2 + (ДатаКонцаПериода - ДатаНачалаПериода);
			
			ДобавитьРасшифровку(Расшифровка, Интервал2, ВыборкаИнтервалыДня.Дата, ДатаНачалаПериода, ДатаКонцаПериода);
			
		ИначеЕсли ДатаОкончания >= ДатаВремяПо Тогда
			
			Если ДатаНачала <= ДатаВремяС Тогда
				
				// берем весь интервал
				Интервал2 = Интервал2 + ВыборкаИнтервалыДня.Количество;
				
				ДобавитьРасшифровку(Расшифровка, Интервал2, ВыборкаИнтервалыДня.Дата, ВыборкаИнтервалыДня.ВремяС, ВыборкаИнтервалыДня.ВремяПо);
				
			ИначеЕсли ДатаНачала > ДатаВремяС И ДатаНачала < ДатаВремяПо Тогда
				
				ДатаНачалаПериода = ДатаНачала;
				ДатаКонцаПериода = ДатаВремяПо;
				
				Интервал2 = Интервал2 + (ДатаКонцаПериода - ДатаНачалаПериода);
				
				ДобавитьРасшифровку(Расшифровка, Интервал2, ВыборкаИнтервалыДня.Дата, ДатаНачалаПериода, ДатаКонцаПериода);
				
			ИначеЕсли ДатаНачала >= ДатаВремяПо Тогда
				
				// не попали в интервал
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Интервал1 + КоличествоСекундМеждуДнями + Интервал2;
	
КонецФункции

// Формирует и возвращает выборку, по которой будет рассчитано количество секунд между двумя датами по графику обслуживания - с учетом рабочего времени
//
// Параметры:
// ГраницаНачалоПоДням - дата начала интервала;
// ГраницаКонецПоДням - дата окончания интервала;
// ГрафикОбслуживания - график, по которому необходимо рассчитать длительность;
// Расшифровка - таблица значений с расшифровкой расчета интервала;
//
// Возвращаемое значение:
// выборку регистра "атл_ВремяПоГрафикамОбслуживания"
//
Функция ПолучитьВыборкуСекундМеждуДнями(Расшифровка,ГраницаНачалоПоДням,ГраницаКонецПоДням, ГрафикОбслуживания)
	
	Если Расшифровка <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	атл_ВремяПоГрафикамОбслуживания.Количество * 60 КАК Количество,
		|	атл_ВремяПоГрафикамОбслуживания.Дата,
		|	атл_ВремяПоГрафикамОбслуживания.ВремяС,
		|	атл_ВремяПоГрафикамОбслуживания.ВремяПо
		|ИЗ
		|	РегистрСведений.атл_ВремяПоГрафикамОбслуживания КАК атл_ВремяПоГрафикамОбслуживания
		|ГДЕ
		|	атл_ВремяПоГрафикамОбслуживания.Дата >= &ДатаНач
		|	И атл_ВремяПоГрафикамОбслуживания.Дата <= &ДатаКон
		|	И атл_ВремяПоГрафикамОбслуживания.ГрафикОбслуживания = &ГрафикОбслуживания
		|	И атл_ВремяПоГрафикамОбслуживания.Количество > 0";
		Запрос.УстановитьПараметр("ДатаНач", ГраницаНачалоПоДням);
		Запрос.УстановитьПараметр("ДатаКон", ГраницаКонецПоДням);
		Запрос.УстановитьПараметр("ГрафикОбслуживания", ГрафикОбслуживания);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(атл_ВремяПоГрафикамОбслуживания.Количество), 0) * 60 КАК Количество
		|ИЗ
		|	РегистрСведений.атл_ВремяПоГрафикамОбслуживания КАК атл_ВремяПоГрафикамОбслуживания
		|ГДЕ
		|	атл_ВремяПоГрафикамОбслуживания.Дата >= &ДатаНач
		|	И атл_ВремяПоГрафикамОбслуживания.Дата <= &ДатаКон
		|	И атл_ВремяПоГрафикамОбслуживания.ГрафикОбслуживания = &ГрафикОбслуживания
		|	И атл_ВремяПоГрафикамОбслуживания.Количество > 0";
		Запрос.УстановитьПараметр("ДатаНач", ГраницаНачалоПоДням);
		Запрос.УстановитьПараметр("ДатаКон", ГраницаКонецПоДням);
		Запрос.УстановитьПараметр("ГрафикОбслуживания", ГрафикОбслуживания);
	КонецЕсли;

	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Формирует и возвращает выборку, по которой будет рассчитано количество секунд в конкретный день по графику обслуживания - с учетом рабочего времени
//
// Параметры:
// Дата - дата, интервалы которой нас интересуют;
// ГрафикОбслуживания - график, по которому необходимо рассчитать длительность;
//
// Возвращаемое значение:
// выборку регистра "атл_ВремяПоГрафикамОбслуживания"
//
Функция ПолучитьВыборкуИнтерваловПоДатеВСекундах(Дата, ГрафикОбслуживания)
	
	ЗапросГрафикРаботыДень = Новый Запрос;
	ЗапросГрафикРаботыДень.Текст = 
	"ВЫБРАТЬ
	|	атл_ВремяПоГрафикамОбслуживания.ВремяС КАК ВремяС,
	|	атл_ВремяПоГрафикамОбслуживания.ВремяПо,
	|	атл_ВремяПоГрафикамОбслуживания.Количество * 60 КАК Количество,
	|	атл_ВремяПоГрафикамОбслуживания.Дата
	|ИЗ
	|	РегистрСведений.атл_ВремяПоГрафикамОбслуживания КАК атл_ВремяПоГрафикамОбслуживания
	|ГДЕ
	|	атл_ВремяПоГрафикамОбслуживания.Дата = &Дата
	|	И атл_ВремяПоГрафикамОбслуживания.ГрафикОбслуживания = &ГрафикОбслуживания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремяС";
	
	ЗапросГрафикРаботыДень.УстановитьПараметр("Дата", Дата);
	ЗапросГрафикРаботыДень.УстановитьПараметр("ГрафикОбслуживания", ГрафикОбслуживания);
	Возврат ЗапросГрафикРаботыДень.Выполнить().Выбрать();
	
КонецФункции

// Добавляет в таблицу расшифровки интервалов одну строку
//
// Параметры:
// Расшифровка - таблица знчений с расшифровками;
// Интервал - количество секунд интервала;
// ВремяС - дата начала интервала;
// ВремяС - дата окончания интервала;
// Дата - дата интервала;
//
Процедура ДобавитьРасшифровку(Расшифровка, Интервал, Дата, ВремяС, ВремяПо)
	Если Расшифровка <> Неопределено Тогда
		Если Интервал > 0 Тогда
			НоваяСтрока 			= Расшифровка.Добавить();
			НоваяСтрока.Дата 		= Дата;
			НоваяСтрока.ВремяС 		= ВремяС;
			НоваяСтрока.ВремяПо 	= ВремяПо;
			НоваяСтрока.Количество	= Интервал;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьТекстШаблона(Шаблон, Результат, Форма, ЗадачаИсполнителя, ДокументЗанятостиРесурса) Экспорт
	
	Выполнить(Шаблон.ТекстУсловия);
	
КонецПроцедуры //ВыполнитьТекстШаблона()

