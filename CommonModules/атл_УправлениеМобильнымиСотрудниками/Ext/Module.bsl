
//////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с задачами
//

// Возвращает статус задачи УМС в соотвествии с реквизитами документа
//
// Параметры:
// ЗадачаМобильномуСотруднику - ссылка на документ атл_ЗадачаМобильномуСотруднику, для которого необходимо определить текущий статус;
//
// Возвращаемое значение:
// ТекущийСтатус с типом Перечисление.атл_СтатусыЗадачМобильнымСотрудникам
//
Функция ПолучитьТекущийСтатусЗадачиУМС(ЗадачаМобильномуСотруднику) Экспорт
	
	Если ЗначениеЗаполнено(ЗадачаМобильномуСотруднику.ПринялОтклонилДата) и Не ЗадачаМобильномуСотруднику.Принял Тогда //т.е. задач была отклонена
		ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Отклонил;
	Иначе
		Если ЗначениеЗаполнено(ЗадачаМобильномуСотруднику.ЗавершилДата) Тогда
			Если ЗадачаМобильномуСотруднику.ТребуетсяПроверкаДанныхОВыполненныхРаботах и ЗначениеЗаполнено(ЗадачаМобильномуСотруднику.ПриехалДата) Тогда
				КоличествоСобытийПоСогласованию = ЗадачаМобильномуСотруднику.СогласованиеРезультатовВыполненияЗадачи.Количество();
				Если КоличествоСобытийПоСогласованию = 0 Тогда
					//согласование еще не проводилось
					ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.ЗавершилНаПроверке;
				Иначе
					ПоследнийВидСобытияПоСогласованию = ЗадачаМобильномуСотруднику.СогласованиеРезультатовВыполненияЗадачи[КоличествоСобытийПоСогласованию-1].ВидСобытияСогласования;
					Если ПоследнийВидСобытияПоСогласованию = Перечисления.атл_ВидыСобытийСогласованияВыполненияРабот.ПередачаНаРассмотрение Тогда
						ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.ЗавершилНаПроверке;
					ИначеЕсли ПоследнийВидСобытияПоСогласованию = Перечисления.атл_ВидыСобытийСогласованияВыполненияРабот.Отклонение Тогда
						ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.ЗавершилНаДоработке;
					ИначеЕсли ПоследнийВидСобытияПоСогласованию = Перечисления.атл_ВидыСобытийСогласованияВыполненияРабот.Принятие Тогда
						ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Завершил;
					КонецЕсли;				
				КонецЕсли;
			Иначе
				ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Завершил;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ЗадачаМобильномуСотруднику.ПриехалДата) Тогда
			ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Приехал;
		ИначеЕсли ЗначениеЗаполнено(ЗадачаМобильномуСотруднику.ВыехалДата) Тогда
			ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Выехал;
		ИначеЕсли ЗначениеЗаполнено(ЗадачаМобильномуСотруднику.ПринялОтклонилДата) Тогда
			//здесь уже не может быть отклонил, поэтому не проверяем
			ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Принял;
		ИначеЕсли ЗначениеЗаполнено(ЗадачаМобильномуСотруднику.ПрочиталДата) Тогда
			ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Прочитал;
		ИначеЕсли ЗначениеЗаполнено(ЗадачаМобильномуСотруднику.ПолучилДата) Тогда
			ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Получил;
		ИначеЕсли ЗначениеЗаполнено(ЗадачаМобильномуСотруднику.ОтправленаДата) Тогда
			ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Отправлена;
		Иначе
			Если ЗадачаМобильномуСотруднику.ТребуетсяОтправкаНаСервер и ЗадачаМобильномуСотруднику.Проведен Тогда
				ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.ГотоваКОтправке;
			Иначе
				ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Черновик;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущийСтатус;
	
КонецФункции

// Возвращает цвет по статусу
//
// Параметры:
// ТекущийСтатус - Перечисление.атл_СтатусыЗадачМобильнымСотрудникам, для которого необходимо вернуть цвет;
//
// Возвращаемое значение:
// Цвет с типом Цвет
//
Функция ОпределитьЦветПоСтатусуЗадачаМобильномуСотруднику(ТекущийСтатус) Экспорт
	
	мЦвет = Новый Цвет(255, 255, 255);
	
	Если ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.ПустаяСсылка() или 
		ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Черновик Тогда
		мЦвет = Новый Цвет(255, 255, 255);
		
	ИначеЕсли ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.ГотоваКОтправке Тогда
		мЦвет = Новый Цвет(255, 255, 35);
		
	ИначеЕсли ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Отправлена Тогда
		мЦвет = Новый Цвет(255, 167, 30);
		
	ИначеЕсли ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Получил Тогда
		мЦвет = Новый Цвет(1, 204, 255);
		
	ИначеЕсли ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Прочитал Тогда
		мЦвет = Новый Цвет(190, 253, 253);
		
	ИначеЕсли ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Принял Тогда
		мЦвет = Новый Цвет(204, 153, 255);
		
	ИначеЕсли ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Выехал Тогда
		мЦвет = Новый Цвет(2, 253, 253);
		
	ИначеЕсли ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Приехал Тогда
		мЦвет = Новый Цвет(239, 20, 249);
		
	ИначеЕсли ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Отклонил Тогда
		мЦвет = Новый Цвет(245, 245, 245);
		
	ИначеЕсли ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.ЗавершилНаПроверке Тогда
		мЦвет = Новый Цвет(255, 102, 0);
		
	ИначеЕсли ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.ЗавершилНаДоработке Тогда
		мЦвет = Новый Цвет(255, 153, 204);
		
	ИначеЕсли ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Завершил Тогда
		мЦвет = Новый Цвет(103, 255, 37);
		
	КонецЕсли;
	
	Возврат мЦвет;

КонецФункции



//////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для обмена данными
//

// Возвращает идентификатор, который нужно присвоить новому пакету на отправку данных на сервер обмена
//
// Параметры:
//
// Возвращаемое значение:
// Идентификатор нового пакета на отправку, тип Число
//
Функция ПолучитьИдентификаторНовогоПакетаНаОтправку() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	атл_ПакетыНаОтправку.ВнутреннийИдентификаторПакета КАК ВнутреннийИдентификаторПакета
	|ИЗ
	|	РегистрСведений.атл_ПакетыНаОтправку КАК атл_ПакетыНаОтправку
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВнутреннийИдентификаторПакета УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ВнутреннийИдентификаторПакета = Выборка.ВнутреннийИдентификаторПакета + 1;
	Иначе
		ВнутреннийИдентификаторПакета = 1;
	КонецЕсли;
	
	Возврат	ВнутреннийИдентификаторПакета; 
	
КонецФункции

// Возвращает идентификатор, который нужно присвоить новому уведомлению
//
// Параметры:
//
// Возвращаемое значение:
// Идентификатор нового уведомления, тип Число
//
Функция ПолучитьИдентификаторНовогоУведомления() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	атл_Уведомления.ИдентификаторУведомления КАК ИдентификаторУведомления
	               |ИЗ
	               |	РегистрСведений.атл_Уведомления КАК атл_Уведомления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ИдентификаторУведомления УБЫВ
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ИдентификаторУведомления = Выборка.ИдентификаторУведомления + 1;
	Иначе
		ИдентификаторУведомления = 1;
	КонецЕсли;
	
	Возврат	ИдентификаторУведомления; 
	
КонецФункции

// Возвращает идентификатор, который нужно присвоить новой записи пакета с данными
//
// Параметры:
//
// Возвращаемое значение:
// Идентификатор новой записи, тип Число
//
Функция ПолучитьИдентификаторНовойЗаписиПакетаСДанными() Экспорт
	
	//получить последний внутренний идентификатор
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	атл_ПолученныеПакетыСДаннымиУМС.ИдентификаторЗаписи КАК ИдентификаторЗаписи
	               |ИЗ
	               |	РегистрСведений.атл_ПолученныеПакетыСДаннымиУМС КАК атл_ПолученныеПакетыСДаннымиУМС
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ИдентификаторЗаписи УБЫВ
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ИдентификаторЗаписи = Выборка.ИдентификаторЗаписи + 1;
	Иначе
		ИдентификаторЗаписи = 1;
	КонецЕсли;
	
	Возврат	ИдентификаторЗаписи; 
	
КонецФункции

// Возвращает идентификатор, который нужно присвоить новой записи в логах
//
// Параметры:
//
// Возвращаемое значение:
// Идентификатор новой записи, тип Число
//
Функция ПолучитьИдентификаторНовогоЛога() Экспорт
	
	//получить последний внутренний идентификатор
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	атл_ЛогиОбменаУМС.ИдентификаторЛога КАК ИдентификаторЛога
	               |ИЗ
	               |	РегистрСведений.атл_ЛогиОбменаУМС КАК атл_ЛогиОбменаУМС
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ИдентификаторЛога УБЫВ
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ИдентификаторЛога = Выборка.ИдентификаторЛога + 1;
	Иначе
		ИдентификаторЛога = 1;
	КонецЕсли;
	
	Возврат	ИдентификаторЛога; 
	
КонецФункции

// Возвращает идентификатор, который нужно присвоить новому комментарию
//
// Параметры:
//
// Возвращаемое значение:
// Идентификатор нового комментария, тип Число
//
Функция ПолучитьИдентификаторНовогоКомментария() Экспорт
	
	//получить последний внутренний идентификатор
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	атл_КомментарииКОбъектамУМС.ИдентификаторКомментария КАК ИдентификаторКомментария
	               |ИЗ
	               |	РегистрСведений.атл_КомментарииКОбъектамУМС КАК атл_КомментарииКОбъектамУМС
	               |ГДЕ
	               |	атл_КомментарииКОбъектамУМС.ИдентификаторИнформационнойБазы = &ИдентификаторИнформационнойБазы
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ИдентификаторКомментария УБЫВ
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	Запрос.УстановитьПараметр("ИдентификаторИнформационнойБазы", 0);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ИдентификаторКомментария = Выборка.ИдентификаторКомментария + 1;
	Иначе
		ИдентификаторКомментария = 1;
	КонецЕсли;
	
	Возврат	ИдентификаторКомментария; 
	
КонецФункции

// Формирует запись в регистре сведений "атл_ПакетыНаОтправку" о необходимости отправки комментария
//
// Параметры:
// Объект - ссылка на документ атл_ЗадачаМобильномуСотруднику, для которого необходимо отправить комментарий;
// ИдентификаторКомментария - идентификатор отправляемого комментария
//
Процедура ОтправитьКомментарий(Объект, ИдентификаторКомментария, ВидПакета = "Комментарий по задаче") Экспорт
	
		НоваяЗапись = РегистрыСведений.атл_ПакетыНаОтправку.СоздатьМенеджерЗаписи();
		НоваяЗапись.ВнутреннийИдентификаторПакета = ПолучитьИдентификаторНовогоПакетаНаОтправку();
		НоваяЗапись.Объект = Объект;
		НоваяЗапись.ИдентификаторОбъекта = ИдентификаторКомментария;
		НоваяЗапись.ВидДанных = "Комментарий";
		НоваяЗапись.ВидПакета = ВидПакета;
		НоваяЗапись.ДатаСозданияПакета = ТекущаяДата();
		НоваяЗапись.ПолучательПакета = Объект.Исполнитель;
		НоваяЗапись.ТребуетсяПодтверждениеДоставкиДоПолучателя = Истина;
		НоваяЗапись.Записать();
	
КонецПроцедуры

//Формирует новую запись в логах в регистре сведений "атл_ЛогиОбменаУМС"
//
// Параметры:
// ВидЛога - перечисление "атл_ВидыЛогов", вид лога;
// ОписаниеОшибки - текстовое описание ошибки
// ИдентификаторВнешнегоПакета - идентификатор паекта от сервера, в котором содержится ошибка
//
Процедура СформироватьЗаписьВЛогах(ВидЛога, ОписаниеОшибки, ИдентификаторВнешнегоПакета = 0) Экспорт
	
	МаксимальныйСрокХранения = 1209600; //14*86400  //14 суток
	
	МенеджерЗаписи = РегистрыСведений.атл_ЛогиОбменаУМС.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИдентификаторЛога = ПолучитьИдентификаторНовогоЛога();
	МенеджерЗаписи.ДатаСоздания 				= ТекущаяДата();
	МенеджерЗаписи.ВидЛога 						= ВидЛога;
	МенеджерЗаписи.ОписаниеОшибки 				= ОписаниеОшибки;
	МенеджерЗаписи.ИдентификаторВнешнегоПакета 	= ИдентификаторВнешнегоПакета;
	МенеджерЗаписи.Записать();
	
	ЗаписьРегистраСинхронизацииССервером = РегистрыСведений.атл_ПеременныеСинхронизацииССерверомУМС.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСинхронизацииССервером.Прочитать();
	ДатаПервогоЛога = ЗаписьРегистраСинхронизацииССервером.ДатаПервогоЛога;
	Если ДатаПервогоЛога = Дата("00010101") Тогда
		ДатаПервогоЛога = НачалоДня(МенеджерЗаписи.ДатаСоздания) - МаксимальныйСрокХранения;
		ЗаписьРегистраСинхронизацииССервером.ДатаПервогоЛога = ДатаПервогоЛога;
		ЗаписьРегистраСинхронизацииССервером.Записать();
	КонецЕсли;
	
	Если МенеджерЗаписи.ДатаСоздания > ДатаПервогоЛога + МаксимальныйСрокХранения Тогда
		//удаляем логи, которые хранятся более месяца
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	атл_ЛогиОбменаУМС.ИдентификаторЛога
		               |ИЗ
		               |	РегистрСведений.атл_ЛогиОбменаУМС КАК атл_ЛогиОбменаУМС
		               |ГДЕ
		               |	атл_ЛогиОбменаУМС.ДатаСоздания <= &ПериодПо
		               |АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("ПериодПо", 	КонецДня(ДатаПервогоЛога));
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МенеджерУдаляемойЗаписи = РегистрыСведений.атл_ЛогиОбменаУМС.СоздатьМенеджерЗаписи();
			МенеджерУдаляемойЗаписи.ИдентификаторЛога = Выборка.ИдентификаторЛога;
			МенеджерУдаляемойЗаписи.Прочитать();
			МенеджерУдаляемойЗаписи.Удалить();
		КонецЦикла;
		
		ЗаписьРегистраСинхронизацииССервером.ДатаПервогоЛога = НачалоДня(МенеджерЗаписи.ДатаСоздания) - МаксимальныйСрокХранения;
		ЗаписьРегистраСинхронизацииССервером.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура запускает обмен данными с сервером и выводит информацию о 
// ходе обмена на форму окна фонового обмена 
//
// Параметры:
// НадписьТекущееСостояниеОбмена - элемент формы обработки фонового обмена, в который надо вывести информацию о ходе обмена
//
Процедура ВыполнитьОбменУМС(НадписьТекущееСостояниеОбмена = Неопределено) Экспорт
	
	//Если Не НадписьТекущееСостояниеОбмена = Неопределено Тогда
	//	НадписьТекущееСостояниеОбмена.Заголовок = "";
	//КонецЕсли;
	
	//Только для 8.3
	Если Не НадписьТекущееСостояниеОбмена = Неопределено Тогда
		НадписьТекущееСостояниеОбмена = "";
	КонецЕсли;
	
	ЗаписьРегистраНастроек = РегистрыСведений.атл_НастройкиПодсистемыУМС.СоздатьМенеджерЗаписи();
	ЗаписьРегистраНастроек.Прочитать();
	мСохранятьСтатистикуОбменов = ЗаписьРегистраНастроек.СохранятьСтатистикуОбменов;
	
	ДатаНачалаОбмена = ТекущаяДата();
	//Сообщить("Выполняю обмен:
	//|Начало: " + ДатаНачалаОбмена);
	
	//Если Не НадписьТекущееСостояниеОбмена = Неопределено Тогда
	//	НадписьТекущееСостояниеОбмена.Заголовок = "Выполняется обмен
	//	|Начало: " + ДатаНачалаОбмена;
	//КонецЕсли;
	
	//Только для 8.3
	Если Не НадписьТекущееСостояниеОбмена = Неопределено Тогда
		НадписьТекущееСостояниеОбмена = "Выполняется обмен
		|Начало: " + ДатаНачалаОбмена;
	КонецЕсли;
	
	//ОбработкаОбмена = Обработки.атл_НастройкаОбменаДаннымиУМС.Создать();
	
	//Только для 8.3
	ОбработкаОбмена = Обработки.атл_ОбменДаннымиУМС.Создать();
	СтруктураРезультатОбмена = ОбработкаОбмена.ВыполнитьФоновыйОбмен();
	РезультатОбмена 					= СтруктураРезультатОбмена.РезультатОбмена;
	КоличествоЗарегистрированныхОшибок 	= СтруктураРезультатОбмена.КоличествоЗарегистрированныхОшибок;
	КоличествоОтправленныхПакетов 		= СтруктураРезультатОбмена.КоличествоОтправленныхПакетов;
	КоличествоПолученныхПакетов 		= СтруктураРезультатОбмена.КоличествоПолученныхПакетов;
	ИменаФайловПакетовПриОтладке		= СтруктураРезультатОбмена.ИменаФайловПакетовПриОтладке;
	
	ДатаОкончанияОбмена = ТекущаяДата();
	
	ЗаписьРегистраСинхронизацииССервером = РегистрыСведений.атл_ПеременныеСинхронизацииССерверомУМС.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСинхронизацииССервером.Прочитать();
	ДатаПредыдущейПоследнейПопыткиОбмена = ЗаписьРегистраСинхронизацииССервером.ДатаПоследнейПопыткиОбмена;
	ЗаписьРегистраСинхронизацииССервером.ДатаПоследнейПопыткиОбмена = ДатаОкончанияОбмена;
	
	Если РезультатОбмена Тогда
		ЗаписьРегистраСинхронизацииССервером.ДатаПоследнегоУспешногоОбмена = ДатаОкончанияОбмена;
	Иначе
		Сообщить("Обмен не произведен!", СтатусСообщения.Внимание);
	КонецЕсли;
	
	Если мСохранятьСтатистикуОбменов Тогда
		Если НачалоДня(ДатаПредыдущейПоследнейПопыткиОбмена) <> НачалоДня(ДатаОкончанияОбмена) Тогда
			//подчищаем записи...
			УдаляемаяДата = ДатаПредыдущейПоследнейПопыткиОбмена - 7 * 86400;
			ВыборкаУдаляемыхЗаписей = РегистрыСведений.атл_СтатистикаОбменовДаннымиССерверомУМС.Выбрать(НачалоДня(УдаляемаяДата), КонецДня(УдаляемаяДата));
			Пока ВыборкаУдаляемыхЗаписей.Следующий() Цикл
				ВыборкаУдаляемыхЗаписей.ПолучитьМенеджерЗаписи().Удалить();
			КонецЦикла;
		КонецЕсли;
		НоваяЗаписьСтатистикиОбмена = РегистрыСведений.атл_СтатистикаОбменовДаннымиССерверомУМС.СоздатьМенеджерЗаписи();
		НоваяЗаписьСтатистикиОбмена.Период				 				= ДатаОкончанияОбмена;
		НоваяЗаписьСтатистикиОбмена.ДатаНачалаОбмена 					= ДатаНачалаОбмена;
		НоваяЗаписьСтатистикиОбмена.ДлительностьОбменаВСекундах			= ДатаОкончанияОбмена - ДатаНачалаОбмена;
		НоваяЗаписьСтатистикиОбмена.ЗавершилсяУспешно   				= РезультатОбмена;
		НоваяЗаписьСтатистикиОбмена.КоличествоЗарегистрированныхОшибок 	= КоличествоЗарегистрированныхОшибок;
		НоваяЗаписьСтатистикиОбмена.КоличествоОтправленныхПакетов 		= КоличествоОтправленныхПакетов;
		НоваяЗаписьСтатистикиОбмена.КоличествоПолученныхПакетов 		= КоличествоПолученныхПакетов;
		
		Если ТипЗнч(ИменаФайловПакетовПриОтладке) = Тип("СписокЗначений") Тогда
			ИменаФайловПакетовПриОтладкеВСтроку = "";
			Для Каждого Стр из ИменаФайловПакетовПриОтладке Цикл
				Если ИменаФайловПакетовПриОтладкеВСтроку = "" Тогда
					ИменаФайловПакетовПриОтладкеВСтроку = ИменаФайловПакетовПриОтладкеВСтроку + Стр.Значение;
				Иначе
					ИменаФайловПакетовПриОтладкеВСтроку = ИменаФайловПакетовПриОтладкеВСтроку + ":" + Стр.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		НоваяЗаписьСтатистикиОбмена.ИменаФайловПакетов = ИменаФайловПакетовПриОтладкеВСтроку;
		
		НоваяЗаписьСтатистикиОбмена.Записать();
		
	КонецЕсли;
	ЗаписьРегистраСинхронизацииССервером.Записать();
	
	//Сообщить("Окончание: " + ДатаОкончанияОбмена);
	//Если Не НадписьТекущееСостояниеОбмена = Неопределено Тогда
	//	НадписьТекущееСостояниеОбмена.Заголовок = "Выполнен обмен
	//	|Начало:      " + ДатаНачалаОбмена + "
	//	|Окончание: " + ДатаОкончанияОбмена;
	//КонецЕсли;
	
	//Только для 8.3	
	Если Не НадписьТекущееСостояниеОбмена = Неопределено Тогда
		НадписьТекущееСостояниеОбмена = "Выполнен обмен
		|Начало:      " + ДатаНачалаОбмена + "
		|Окончание: " + ДатаОкончанияОбмена;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается из формы фонового обмена и запускает обмен данными с сервером
//
// Параметры:
// НадписьТекущееСостояниеОбмена - элемент формы обработки фонового обмена, в который надо вывести информацию о ходе обмена
//
Процедура ВыполнитьОбменУМСПоРасписаниюИзФормы(НадписьТекущееСостояниеОбмена = Неопределено) Экспорт
	
	ВыполнитьОбменУМС(НадписьТекущееСостояниеОбмена);
	
КонецПроцедуры

// Процедура вызывается из регламентного задания "атл_ОбменДаннымиУМС" и запускает обмен данными с сервером
//
Процедура ВыполнитьОбменУМСПоРасписанию() Экспорт
	
	ЗаписьРегистраНастроек = РегистрыСведений.атл_НастройкиПодсистемыУМС.СоздатьМенеджерЗаписи();
	ЗаписьРегистраНастроек.Прочитать();
	Если ЗаписьРегистраНастроек.ИспользоватьФоновыйРежимОбмена Тогда
		ВыполнитьОбменУМС();
	КонецЕсли;
	
КонецПроцедуры

//	Процедура формирует запись в регистре сведений "атл_ПакетыНаОтправку" о необходимости отправки расписания по сотруднику
Процедура ОтправитьРасписаниеМобильномуСотруднику(Сотрудник) Экспорт
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		ЗаписьПакетаНаОтправку = РегистрыСведений.атл_ПакетыНаОтправку.СоздатьМенеджерЗаписи();
		ЗаписьПакетаНаОтправку.ВнутреннийИдентификаторПакета = атл_УправлениеМобильнымиСотрудниками.ПолучитьИдентификаторНовогоПакетаНаОтправку();
		ЗаписьПакетаНаОтправку.ИдентификаторОбъекта = 0;
		ЗаписьПакетаНаОтправку.ИдентификаторИнформационнойБазы = 0;
		ЗаписьПакетаНаОтправку.ВидДанных = "Расписание работы";
		ЗаписьПакетаНаОтправку.ВидПакета = "";
		ЗаписьПакетаНаОтправку.ДатаСозданияПакета = ТекущаяДата();
		ЗаписьПакетаНаОтправку.ПолучательПакета = Сотрудник;
		ЗаписьПакетаНаОтправку.Записать();
	КонецЕсли;
	
КонецПроцедуры

//	Процедура формирует запрос для получения списка пользователей и дальнейшей отправки расписания сотрудникам МК
Процедура ОтправитьРасписанияМобильнымСотрудникам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	атл_НастройкиПодключенияМобильныхСотрудников.Пользователь
	               |ИЗ
	               |	РегистрСведений.атл_НастройкиПодключенияМобильныхСотрудников КАК атл_НастройкиПодключенияМобильныхСотрудников
	               |ГДЕ
	               |	атл_НастройкиПодключенияМобильныхСотрудников.ЯвляетсяПользователемМК = ИСТИНА
	               |	И атл_НастройкиПодключенияМобильныхСотрудников.Пользователь.ПометкаУдаления = ЛОЖЬ
	               |	И атл_НастройкиПодключенияМобильныхСотрудников.АвторизованНаСервере = ИСТИНА";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОтправитьРасписаниеМобильномуСотруднику(Выборка.Пользователь);	
		
	КонецЦикла;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для формирования уведомлений
//

// Процедура формирует запись в регистре сведений "атл_Уведомления" по сути формирую новое уведомление при изменении статуса Задачи УМС
//
// Параметры:
// ЗадачаМобильномуСотруднику 	- ссылка на документ атл_ЗадачаМобильномуСотруднику, для которого необходимо определить текущий статус;
// СтарыйСтатус - ссылка на старый статус документа Задача УМС;
// НовыйСтатус 	- ссылка на новый статус документа Задача УМС.
//
Процедура СформироватьУведомлениеПоИзменениюСтатуса(СтарыйСтатус, НовыйСтатус, ЗадачаМобильномуСотруднику) Экспорт
	
	НоваяЗапись = РегистрыСведений.атл_Уведомления.СоздатьМенеджерЗаписи();
	НоваяЗапись.ИдентификаторУведомления = ПолучитьИдентификаторНовогоУведомления();
	НоваяЗапись.ЗадачаМобильномуСотруднику = ЗадачаМобильномуСотруднику;
	НоваяЗапись.ВидУведомленияУМС = Перечисления.атл_ВидыУведомлений.ИзменениеСтатусаЗадачиМобильномуСотруднику;
	НоваяЗапись.ДатаСоздания = ТекущаяДата();
	НоваяЗапись.ТекстУведомления = "Изменен статус с '" + СтарыйСтатус + "' на '" + НовыйСтатус + "'";
	НоваяЗапись.Записать();
		
КонецПроцедуры
	
// Процедура формирует запись в регистре сведений "атл_Уведомления" по сути формирую новое уведомление при появлении нового комментария по Задаче УМС
//
// Параметры:
// ЗадачаМобильномуСотруднику 		- ссылка на документ атл_ЗадачаМобильномуСотруднику, для которого необходимо определить текущий статус;
// ТекстКомментария - строка, содержащая текст комментария для вывода в уведомлении.
//
Процедура СформироватьУведомлениеПоНовомуКомментарию(ЗадачаМобильномуСотруднику, ТекстКомментария) Экспорт
	
	НоваяЗапись = РегистрыСведений.атл_Уведомления.СоздатьМенеджерЗаписи();
	НоваяЗапись.ИдентификаторУведомления = ПолучитьИдентификаторНовогоУведомления();
	НоваяЗапись.ЗадачаМобильномуСотруднику = ЗадачаМобильномуСотруднику;
	НоваяЗапись.ВидУведомленияУМС = Перечисления.атл_ВидыУведомлений.НовыйКомментарий;
	НоваяЗапись.ДатаСоздания = ТекущаяДата();
	НоваяЗапись.ТекстУведомления = "Новый комментарий: '" + ТекстКомментария + "'";
	НоваяЗапись.Записать();
		
КонецПроцедуры



//////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для расчета и регистрации времени между двумя датами по задачам УМС
//

// Функция формирует и возвращает массив интервалов, которые необходимо регистрировать по Задачам УМС
//
// Возвращаемое значение:
// МассивИнтервалов - массив ссылок на справочник "атл_ИнтервалыВремениПоЗадачамМобильнымСотрудникам"
//
Функция ПолучитьМассивИнтервалов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	атл_ИнтервалыВремениПоЗадачамМобильнымСотрудникам.Ссылка КАК Интервал
	               |ИЗ
	               |	Справочник.атл_ИнтервалыВремениПоЗадачамМобильнымСотрудникам КАК атл_ИнтервалыВремениПоЗадачамМобильнымСотрудникам
	               |ГДЕ
	               |	атл_ИнтервалыВремениПоЗадачамМобильнымСотрудникам.ПометкаУдаления = ЛОЖЬ";
	
	Результат = Запрос.Выполнить();
	МассивИнтервалов = Результат.Выгрузить().ВыгрузитьКолонку("Интервал");
	
	Возврат МассивИнтервалов;
	
КонецФункции

// Функция рассчитывает количество дней между двумя датами
//
// Параметры:
// ДатаНачала 		- дата начала интервала;
// ДатаОкончания 	- дата окончания интервала.
//
// Возвращаемое значение:
// Количество дней - число
//
Функция КоличествоДнейМеждуДатами(ДатаНачала, ДатаОкончания) Экспорт
	
	Если ДатаОкончания = ДатаНачала Тогда
		КоличествоДней = 1;
	Иначе
		КоличествоДней = Макс(Окр((ДатаОкончания - ДатаНачала) / 86400, 0), 0);
	КонецЕсли;
	
	Возврат КоличествоДней;
	
КонецФункции

// Процедура формирует запись в регистре сведений "атл_ЗатраченноеВремяПоИнтерваламПоЗадачамМобильнымСотрудникам", в котором региструются
// временные интервалы между различными датами
//
// Параметры:
// ЗадачаМобильномуСотруднику 	- ссылка на документ атл_ЗадачаМобильномуСотруднику, для которого необходимо определить текущий статус;
// Интервал 	- ссылка на региструемый интервал.
//
Процедура СформироватьЗаписьВРегистреатл_ЗатраченноеВремяПоИнтерваламПоЗадачамМобильнымСотрудникам(ЗадачаМобильномуСотруднику, Интервал) Экспорт
	
	МенеджерЗаписиРегистра = РегистрыСведений.атл_ЗатраченноеВремяПоИнтерваламПоЗадачамМобильнымСотрудникам.СоздатьМенеджерЗаписи();
 	МенеджерЗаписиРегистра.ЗадачаМобильномуСотруднику = ЗадачаМобильномуСотруднику;
	МенеджерЗаписиРегистра.ИнтервалВремени = Интервал;
	МенеджерЗаписиРегистра.Прочитать();
	
	ДатаНачалаИнтервала = ЗадачаМобильномуСотруднику[Интервал.ИмяРеквизитаДатаНачала];
	ДатаОкончанияИнтервала = ЗадачаМобильномуСотруднику[Интервал.ИмяРеквизитаДатаОкончания];
	
	ОсновнойГрафикОбслуживания = Константы.атл_ОсновнойГрафикОбслуживания.Получить();
	
	Если (ДатаНачалаИнтервала = Дата("00010101") или ДатаОкончанияИнтервала = Дата("00010101")) Тогда
		Если МенеджерЗаписиРегистра.ВремяАбсолютное = 0 и МенеджерЗаписиРегистра.ВремяПоГрафикуКомпании = 0 Тогда
			//перезаписывать не будем
		Иначе
			МенеджерЗаписиРегистра.ЗадачаМобильномуСотруднику = ЗадачаМобильномуСотруднику;
			МенеджерЗаписиРегистра.ИнтервалВремени = Интервал;
			МенеджерЗаписиРегистра.ВремяАбсолютное = 0;
			МенеджерЗаписиРегистра.ВремяПоГрафикуКомпании = 0;
			МенеджерЗаписиРегистра.ДатаНачала = ДатаНачалаИнтервала;
			МенеджерЗаписиРегистра.ДатаОкончания = ДатаОкончанияИнтервала;
			МенеджерЗаписиРегистра.Записать();
		КонецЕсли;
	Иначе
		//пытаемся определить время...
		МенеджерЗаписиРегистра.ЗадачаМобильномуСотруднику = ЗадачаМобильномуСотруднику;
		МенеджерЗаписиРегистра.ИнтервалВремени = Интервал;
		МенеджерЗаписиРегистра.ВремяАбсолютное = Макс(ДатаОкончанияИнтервала - ДатаНачалаИнтервала,0);
			
		Если Не ЗначениеЗаполнено(ОсновнойГрафикОбслуживания) или ДатаОкончанияИнтервала <= ДатаНачалаИнтервала Тогда
			МенеджерЗаписиРегистра.ВремяПоГрафикуКомпании = 0;
		Иначе
			МенеджерЗаписиРегистра.ВремяПоГрафикуКомпании = атл_ДополнительныйМодульСервер.КоличествоСекундМеждуДатамиПоГрафикуОбслуживания(ДатаНачалаИнтервала, ДатаОкончанияИнтервала, ОсновнойГрафикОбслуживания);
		КонецЕсли;
		
		МенеджерЗаписиРегистра.ДатаНачала = ДатаНачалаИнтервала;
		МенеджерЗаписиРегистра.ДатаОкончания = ДатаОкончанияИнтервала;
		
		МенеджерЗаписиРегистра.Записать();
	КонецЕсли;	
	
КонецПроцедуры



//////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для отображения координат и файлов
//

// Процедура вызывает отображение на карте списка пользователей
//
// Параметры:
// СписокПользователейДляПоискаКоординат - список пользователей, которых необходимо отобразить на карте.
// ДатаОкончания 	- дата окончания интервала.
//
Процедура ОтобразитьПользователейНаКарте(СписокПользователейДляПоискаКоординат) Экспорт
	
	ОбработкаОтображения = Обработки.атл_ОтображениеТочекСТрекомНаКарте.Создать();
	ОбработкаОтображения.ПоказыватьТекущееМестонахождение = Истина;
	ОбработкаОтображения.НеИнтерактивноеОткрытие = Истина;
	мТаблица = ОбработкаОтображения.СписокПараметровОткрытия;
	Для Каждого текСтрока Из СписокПользователейДляПоискаКоординат Цикл
		мНоваяСтрока = мТаблица.Добавить();
		мНоваяСтрока.Пользователь = текСтрока.Значение;
	КонецЦикла;
	ОбработкаОтображения.ПолучитьФорму().Открыть();
	
КонецПроцедуры


#Если Клиент Тогда
// Процедура вызывает отображение файла на экране
//
// Параметры:
// ИмяФайла - имя файла, которое необходимо присвоить при записи на диск
// ДанныеФайла 	- хранилище значения с файлом.
//
Процедура ОткрытьФайл(ИмяФайла, ДанныеФайла) Экспорт
	
	ИмяКаталога = КаталогВременныхФайлов();
	Если Не ПустаяСтрока(ИмяФайла) Тогда
		Слэш = "";
		Если (Прав(ИмяКаталога, 1) <> "\") И (Прав(ИмяКаталога, 1) <> "/") Тогда
			Слэш = ?(Найти(ИмяКаталога, "\") = 0, "/", "\");
		КонецЕсли;
		
		ИмяВременногоФайла = ИмяКаталога + Слэш + ИмяФайла;	
	Иначе
		ИмяВременногоФайла = ИмяКаталога;	
	КонецЕсли;
	
	
	ВложенныйФайл = ДанныеФайла.Получить();
	Если ВложенныйФайл <> Неопределено Тогда
		Состояние("Для открытия сохраняется файл: " + ИмяВременногоФайла);
		ВложенныйФайл.Записать(ИмяВременногоФайла);
		
		ЗапуститьПриложение("explorer " + ИмяВременногоФайла);
	Иначе
		Сообщить("Файл не загружен. Повторите попытку открытия позже...", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры
#КонецЕсли



//////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с механизмом шифрования
//

// Функция возвращает строку со списком допустимых для шифрования символов
//
// Возвращаемое значение:
// СтрокаДопустимыхСимволов - строка допустимых символов
//
Функция ПодготовитьСтрокуДопустимыхСимволовШифрования() Экспорт
	
	СтрокаДопустимыхСимволов = "!""""#$%&'()*+-,.:;<>=?@[]\/^_`{}~0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVXYZ";
	Возврат СтрокаДопустимыхСимволов;
	
КонецФункции

// Процедура выводит сообщение со списком допустимых символов
//
Процедура ПоказатьСписокДопустимыхСимволовКлючаШифрования() Экспорт
	
	Сообщить("Список допустимых символов ключа шифрования: " + ПодготовитьСтрокуДопустимыхСимволовШифрования());
	
КонецПроцедуры

// Функция проверяет наличие ошибок в переданном ключе шифрования
//
// Параметры:
// КлючШифрования - строка - введенный ключ шифрования
//
// Возвращаемое значение:
// ЕстьОшибкиВКлюче - булево, возвращает есть ошибка или нет
//
Функция ЕстьОшибкиВКлючеШифрования(КлючШифрования) Экспорт 
	
	ДлинаКлюча = СтрДлина(КлючШифрования);
	ЕстьОшибкиВКлюче = Ложь;
	СтрокаДопустимыхСимволов = ПодготовитьСтрокуДопустимыхСимволовШифрования();
	
	Сч = 1;
	Пока Сч < ДлинаКлюча Цикл
		
		ПроверяемыйСимвол = Сред(КлючШифрования, Сч, 1);
		
		Если Найти(СтрокаДопустимыхСимволов, ПроверяемыйСимвол) = 0 Тогда
			Сообщить("Символ '" + ПроверяемыйСимвол + "' нельзя использовать в ключе!");
			ЕстьОшибкиВКлюче = Истина;
		КонецЕсли;
		
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат ЕстьОшибкиВКлюче;
	
КонецФункции

// Функция проверяет наличие ошибок в переданном ключе шифрования и дополнительно информирует об ошибках
//
// Параметры:
// КлючШифрования - строка - введенный ключ шифрования
//
// Возвращаемое значение:
// КлючШифрованияПравильный - булево, возвращает правильный ключ шифрования или нет
//
Функция ПроверитьКлючШифрования(КлючШифрования) Экспорт
	
	КлючШифрованияПравильный = Ложь;
	
	Если СтрДлина(КлючШифрования) < 10 Тогда
		РезультатПроверкиКлюча = 2;
		КлючШифрованияПравильный = Ложь;
		ТекстСообщения = "Ключ """+КлючШифрования+""" имеет длину менее 10 символов! Ошибка ключа шифрования!";
	ИначеЕсли ЕстьОшибкиВКлючеШифрования(СокрЛП(КлючШифрования)) Тогда
		РезультатПроверкиКлюча = 1;
		КлючШифрованияПравильный = Ложь;
		ТекстСообщения = "Ключ """+КлючШифрования+""" содержит недопустимые символы. Ошибка ключа шифрования!";
	Иначе
		РезультатПроверкиКлюча = 0;
		ТекстСообщения = "";
		КлючШифрованияПравильный = Истина;
	КонецЕсли;
	Если Не ТекстСообщения = "" Тогда
		#Если Клиент Тогда
			Сообщить("" + ТекстСообщения, СтатусСообщения.Важное);
		#КонецЕсли		
	КонецЕсли;
	Возврат КлючШифрованияПравильный;
	
КонецФункции

// Функция проверяет является ли указанный пользователь пользователем мобильного клиента
//
// Параметры:
// Пользователь - ссылка на справочник Пользователи
//
// Возвращаемое значение:
// Булево - является пользователем - истина, нет - ложь
//
Функция ЭтоПользовательМК(Пользователь) Экспорт
	
	Запись = РегистрыСведений.атл_НастройкиПодключенияМобильныхСотрудников.СоздатьМенеджерЗаписи();
	Запись.Пользователь = Пользователь;
	Запись.Прочитать();
	Если Запись.Выбран() Тогда
		возврат Запись.ЯвляетсяПользователемМК;
	КонецЕсли;	
	
	возврат Ложь;
	
КонецФункции