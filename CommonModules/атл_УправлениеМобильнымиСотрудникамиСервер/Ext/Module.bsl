

#Область Пользователи

Функция ПолучитьОсновногоПользователя() Экспорт
		
	Возврат ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	
	
КонецФункции

Функция ПолучитьСсылкаНаПользователя(мИмяПользователя) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                |	Пользователи.Ссылка
	                |ИЗ
	                |	Справочник.Пользователи КАК Пользователи
	                |ГДЕ
	                |	Пользователи.Код = &Код";
	мЗапрос.УстановитьПараметр("Код", мИмяПользователя);
	мВыгрузка = мЗапрос.Выполнить().Выгрузить();
	
	Если мВыгрузка.Количество() > 0 Тогда
		Возврат мВыгрузка[0].Ссылка;	
	Иначе
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	
КонецФункции

Процедура ЗаполнитьПараметрыСеанса(мИмяПользователя) Экспорт
		
	Если мИмяПользователя = "" Тогда
		//Создаем пустого пользователя
		ПользовательНеОпределен = Справочники.Пользователи.НайтиПоНаименованию("", Истина);
		Если НЕ ЗначениеЗаполнено(ПользовательНеОпределен) Тогда
			Если ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
				//Добавим администратора в базу
				ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
				ПользовательИБ.Имя       = "Администратор";
				ПользовательИБ.ПолноеИмя = ПользовательИБ.Имя;
				ПользовательИБ.Роли.Очистить();
				ПользовательИБ.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
				ПользовательИБ.Записать();
				
				НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
				НовыйПользователь.Код = ПользовательИБ.Имя;
				НовыйПользователь.Наименование = ПользовательИБ.Имя;
				НовыйПользователь.Записать();				
			
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Автоматически создан пользователь ""Администратор"" с ролью ""Полные права"".";
				Сообщение.Сообщить();
				
				ПараметрыСеанса.ТекущийПользователь = НовыйПользователь.Ссылка;
			Иначе
				ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
				Возврат;
			КонецЕсли;
		Иначе
			ПараметрыСеанса.ТекущийПользователь = ПользовательНеОпределен;
		КонецЕсли;
	Иначе
		ТекущийПользовательВСправочнике = атл_УправлениеМобильнымиСотрудникамиСервер.ПолучитьСсылкаНаПользователя(мИмяПользователя);
		
		Если Не ЗначениеЗаполнено(ТекущийПользовательВСправочнике) Тогда
			//Создаем нового пользователя
			Если НЕ ПравоДоступа("Добавление", Метаданные.Справочники.Пользователи) Тогда				
				Возврат;
			КонецЕсли;
			НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
			НовыйПользователь.Наименование = ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя;
			НовыйПользователь.Код = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
			НовыйПользователь.Записать();
			ПараметрыСеанса.ТекущийПользователь = НовыйПользователь.Ссылка;
		Иначе			
			ПараметрыСеанса.ТекущийПользователь = ТекущийПользовательВСправочнике;
		КонецЕсли;		
		
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьПараметрСеанса(мИмяПараметра) Экспорт
	
	Возврат ПараметрыСеанса[мИмяПараметра];
	
КонецФункции

#КонецОбласти

Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт
	
	Возврат Константы[ИмяКонстанты].Получить();	
	
КонецФункции

Процедура ОбновитьАктивностьПользователя() Экспорт
	
	Запись = РегистрыСведений.атл_АктивностьПользователей.СоздатьМенеджерЗаписи();		
	ТекущийПользователь 		   = ПараметрыСеанса.ТекущийПользователь;
	Запись.Пользователь            = ТекущийПользователь;
	Запись.МК                      = Ложь;
	Запись.Прочитать();
	Запись.Пользователь            = ТекущийПользователь;
	Запись.МК                      = Ложь;
	Запись.ДатаПоследнейАктивности = ТекущаяДата();
	Запись.Записать();
	
КонецПроцедуры

Функция ПолучитьРезультатЗапросаНеПрочитанныхСообщений() Экспорт
		
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	атл_Сообщения.ИдентификаторСообщения,
	|	атл_Сообщения.ИдентификаторИнформационнойБазы,
	|	атл_Сообщения.ДатаРегистрации КАК ДатаРегистрации,
	|	атл_Сообщения.ДатаСоздания,
	|	атл_Сообщения.Отправитель КАК Пользователь,
	|	атл_Сообщения.Получатель,
	|	атл_Сообщения.ПолучательМК,
	|	атл_Сообщения.ОтправительМК,
	|	атл_Сообщения.Сообщение,
	|	атл_Сообщения.Административное,
	|	атл_Сообщения.ДатаДоставки,
	|	атл_Сообщения.ДатаПрочтения,
	|	атл_Сообщения.ЭтоСсылкаНаОбъект,
	|	атл_Сообщения.ДатаОтправки,
	|	атл_Сообщения.Широта,
	|	атл_Сообщения.Долгота
	|ИЗ
	|	РегистрСведений.атл_Сообщения КАК атл_Сообщения
	|ГДЕ
	|	атл_Сообщения.ДатаПрочтения = &ПустаяДата
	|	И атл_Сообщения.Получатель = &Пользователь
	|	И НЕ атл_Сообщения.УдаленоПолучателем
	|	И НЕ(атл_Сообщения.ПолучательМК
	|				И атл_Сообщения.Получатель = &Пользователь)
	|	И НЕ атл_Сообщения.Получатель = атл_Сообщения.Отправитель
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователь,
	|	атл_Сообщения.ДатаРегистрации";	
	
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	мРезультат = Запрос.Выполнить();
	Возврат мРезультат;
		
КонецФункции

Функция ЕстьНеПрочитанныеСообщения() Экспорт
	
	мРезультат = ПолучитьРезультатЗапросаНеПрочитанныхСообщений();
	мВыборка = мРезультат.Выбрать();
	Если мВыборка.Количество() > 0 Тогда		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьКоличествоНеПрочитанныхСообщений() Экспорт
	
	мРезультат = ПолучитьРезультатЗапросаНеПрочитанныхСообщений();
	мВыборка = мРезультат.Выбрать();
		
	Возврат  мВыборка.Количество();
	
КонецФункции

Функция ПолучитьНастройкиДляОткрытияФормПриЗапускеСистемы() Экспорт
	
	мТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Если ЗначениеЗаполнено(мТекущийПользователь) Тогда
		мНастройки = Новый Структура();
		мНастройки.Вставить("атл_ПоказыватьСписокСобеседниковПриЗапускеПрограммы", мТекущийПользователь.атл_ПоказыватьСписокСобеседниковПриЗапускеПрограммы);
		мНастройки.Вставить("атл_ПоказыватьСписокУведомленийПриЗапускеПрограммы", мТекущийПользователь.атл_ПоказыватьСписокУведомленийПриЗапускеПрограммы);
		мНастройки.Вставить("атл_ПоказыватьМониторРуководителяМобильныхСотрудниковПриЗапускеПрограммы", мТекущийПользователь.атл_ПоказыватьМониторРуководителяМобильныхСотрудниковПриЗапускеПрограммы);
		мНастройки.Вставить("атл_ПоказыватьИнформациюОХодеОбменаССерверомУМС", мТекущийПользователь.атл_ПоказыватьИнформациюОХодеОбменаССерверомУМС);
	Иначе
		мНастройки = Новый Структура();
		мНастройки.Вставить("атл_ПоказыватьСписокСобеседниковПриЗапускеПрограммы", Ложь);
		мНастройки.Вставить("атл_ПоказыватьСписокУведомленийПриЗапускеПрограммы", Ложь);
		мНастройки.Вставить("атл_ПоказыватьМониторРуководителяМобильныхСотрудниковПриЗапускеПрограммы", Ложь);
		мНастройки.Вставить("атл_ПоказыватьИнформациюОХодеОбменаССерверомУМС", Ложь);
	КонецЕсли;			
		
	//проверяем, является ли пользователь тем, под кем должна запускаться обработка обмена данными с сервером	
	МенеджерЗаписиРегистраНастроек = РегистрыСведений.атл_НастройкиПодсистемыУМС.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистраНастроек.Прочитать();
		
	мНастройки.Вставить("РазрешеноИспользованиеОбменаДаннымиУМС", ПравоДоступа("Использование", Метаданные.Обработки.атл_ОбменДаннымиУМС));
	мНастройки.Вставить("УжеЕстьСоединенияСБазой", Ложь);
	мНастройки.Вставить("ЗапускатьОбменДаннымиУМС", Ложь);
	
	Если ЗначениеЗаполнено(МенеджерЗаписиРегистраНастроек.ПользовательДляВыполненияОбменаДанными) 
					И МенеджерЗаписиРегистраНастроек.ПользовательДляВыполненияОбменаДанными = мТекущийПользователь Тогда
		Если НЕ МенеджерЗаписиРегистраНастроек.ИспользоватьФоновыйРежимОбмена Тогда
			//если сейчас единственный, то запустим обработку обмена данными...
			ТекущийНомерСоединения = НомерСоединенияИнформационнойБазы();
			УникальныйИдентификаторПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
			УжеЕстьСоединенияСБазой = атл_ДополнительныйМодульСервер.ЕстьСоединенияСИнформационнойБазойПодПользователем(УникальныйИдентификаторПользователя, ТекущийНомерСоединения);
						
			мНастройки.УжеЕстьСоединенияСБазой = УжеЕстьСоединенияСБазой;
			мНастройки.ЗапускатьОбменДаннымиУМС = Истина;
		КонецЕсли;		
	КонецЕсли;
	
	Возврат мНастройки;
	
КонецФункции

// Процедура проверяет, есть ли необходимость выполнять обновление информационной базы.
// Если необходимо - выполняется обновление.
// Если обновление не удалось выполнить - предлагается завершить работу системы.
// 
//
Процедура ВыполнитьОбновлениеИнформационнойБазы(ПараметрыОбновления) Экспорт

	// Проверка необходимости обновления информационной базы.
	НомерВерсии = Константы.атл_НомерВерсииКонфигурации.Получить();
	ПервыйЗапуск = (НомерВерсии = "");
	
	Если ПервыйЗапуск И (Не РольДоступна("ПолныеПрава") ИЛИ Не ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь)) Тогда
		ПараметрыОбновления.ТекстПредупреждения = "Первый запуск программы должен быть осуществлен пользователем с полными правами!";
		ПараметрыОбновления.НеобходимоЗакрытьПриложение = Истина;
		Возврат;
	КонецЕсли;

	Если НЕ ПустаяСтрока(Метаданные.Версия) И НомерВерсии <> Метаданные.Версия Тогда
		Если Не ПервыйЗапуск Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Изменился номер версии конфигурации. Будет выполнено обновление информационной базы.";
			Сообщение.Сообщить();
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
		
	//Проверка наличия прав для обновления информационной базы.
	Если НЕ ПравоДоступа("МонопольныйРежим", Метаданные) 
	 ИЛИ НЕ ПравоДоступа("Использование",    Метаданные.Обработки.атл_ОбновлениеИнформационнойБазы) 
	 ИЛИ НЕ ПравоДоступа("Просмотр",         Метаданные.Обработки.атл_ОбновлениеИнформационнойБазы) Тогда

		ПараметрыОбновления.ТекстПредупреждения = "Недостаточно прав для выполнения обновления. Работа системы будет завершена.";		
		ПараметрыОбновления.НеобходимоЗакрытьПриложение = Истина;
		Возврат;
	КонецЕсли;

	// Установка монопольного режима для обновления информационной базы.
	Попытка
		УстановитьМонопольныйРежим(Истина);		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		
		ПараметрыОбновления.ТекстПредупреждения = "Не удалось установить монопольный режим. Работа системы будет завершена.";		
		ПараметрыОбновления.НеобходимоЗакрытьПриложение = Истина;
		Возврат;
	КонецПопытки;

	// Обновление информационной базы.
	Обработки.атл_ОбновлениеИнформационнойБазы.Создать().ВыполнитьОбновление(ПараметрыОбновления);

	// Откючение монопольного режима.
	УстановитьМонопольныйРежим(Ложь);

КонецПроцедуры

Функция ЗапрашиватьПодтверждениеПриЗакрытии() Экспорт
		
	Если ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь) Тогда
		Возврат ПараметрыСеанса.ТекущийПользователь.атл_ЗапрашиватьПодтверждениеПриЗакрытии;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

Функция СформироватьТаблицуСписокПараметровОткрытияДляОткрытияКарты() Экспорт
	
	ТаблицаПараметров = Новый ТаблицаЗначений;	
	                                    
	ТаблицаПараметров.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаПараметров.Колонки.Добавить("Объект");
	ТаблицаПараметров.Колонки.Добавить("ВидОбъекта", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	ТаблицаПараметров.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10)));
	ТаблицаПараметров.Колонки.Добавить("ИдентификаторИнформационнойБазы", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15)));
	ТаблицаПараметров.Колонки.Добавить("Долгота", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(20)));
	ТаблицаПараметров.Колонки.Добавить("Широта", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(20)));
	ТаблицаПараметров.Колонки.Добавить("ДатаТочки", Новый ОписаниеТипов("Дата",,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаПараметров.Колонки.Добавить("ИсточникКоординат", Новый ОписаниеТипов("ПеречислениеСсылка.атл_ВидыИсточниковКоординат"));
	ТаблицаПараметров.Колонки.Добавить("Точность", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10)));
	ТаблицаПараметров.Колонки.Добавить("Примечание", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(1023)));
	
	Возврат ТаблицаПараметров;
	
КонецФункции

Процедура ВыполнитьТекстШаблона(Шаблон, Результат, Объект, ЗадачаИсполнителя, ДокументЗанятостиРесурса) Экспорт
	
	Выполнить(Шаблон.ТекстУсловия);
	
КонецПроцедуры //ВыполнитьТекстШаблона()

Функция ПреобразованиеДанныхОКоорднатеВСтруктуру(ИсходноеЗначение) Экспорт
		
	СтруктураЗначений = Новый Структура;
	МассивПодстрок = Новый Массив;
	Стр = ИсходноеЗначение;
	
	МассивПодстрок = СтрРазделить(ИсходноеЗначение, ",");
	//Пока Истина Цикл
	//	Поз = Найти(Стр,",");
	//	Если Поз = 0 Тогда
	//		МассивПодстрок.Добавить(Стр);
	//		Прервать;
	//	КонецЕсли;
	//	МассивПодстрок.Добавить(Лев(Стр, Поз-1));
	//	Стр = Сред(Стр, Поз + 1);
	//КонецЦикла;
	
	Если МассивПодстрок.Количество() > 0 Тогда
		Поз = Найти(МассивПодстрок[0], ":");
		стрЗначение = СокрЛП(Сред(МассивПодстрок[0], Поз+1));
		Попытка
			текЧисло = Число(стрЗначение);
		Исключение
			текЧисло = 0;
		КонецПопытки;
		СтруктураЗначений.Вставить("КоличествоПопыток", текЧисло);
		
		НаименованиеПопыток = "Попытки получения координат";
		Если Найти(ИсходноеЗначение, НаименованиеПопыток) > 0 Тогда						
			ТаблицаОшибок = Новый ТаблицаЗначений;
			ТаблицаОшибок.Колонки.Добавить("Дата");
			ТаблицаОшибок.Колонки.Добавить("КодОшибки");
			ТаблицаОшибок.Колонки.Добавить("ДоступенGPS");
			ТаблицаОшибок.Колонки.Добавить("ДоступныСети");
			
			стрПредварительная = Сред(ИсходноеЗначение, Найти(ИсходноеЗначение, НаименованиеПопыток) + СтрДлина(НаименованиеПопыток)+1);
			МассивПодстрок = СтрРазделить(стрПредварительная, ";");
			Для Каждого текСтрока Из МассивПодстрок Цикл
				Поз = Найти(текСтрока, ") ");
				Если Поз = 0 Тогда
					Продолжить;	
				КонецЕсли;
				стрДанных = Сред(текСтрока, Поз+1);				
				МассивПодстрок2 = СтрРазделить(стрДанных, ",");
				
				НовСтрока = ТаблицаОшибок.Добавить();
				Для Каждого текЗначение Из МассивПодстрок2 Цикл
					текЗначение = СокрЛП(текЗначение);
					Поз = Найти(текЗначение, ":");
					Если Поз > 0 Тогда
						ИмяКлюча = Лев(текЗначение, Поз-1);
						Если ИмяКлюча = "Дата" Тогда
							стрЗначение = СокрЛП(Сред(текЗначение, Поз+1));
							Поз = Найти(стрЗначение, " ");
							ПерваяПоловина = СокрЛП(Лев(стрЗначение, Поз-1));
							ВтораяПоловина = СокрЛП(Сред(стрЗначение, Поз+1));
																	
							текДата = Дата("00010101");
							Попытка
								текДата = Дата(Сред(ПерваяПоловина,7,4) 
												+ Сред(ПерваяПоловина,4,2)
												+ Сред(ПерваяПоловина,1,2)
												+ СтрЗаменить(ВтораяПоловина, ":", ""));
							Исключение
							КонецПопытки;
							НовСтрока.Дата = текДата;
							
						ИначеЕсли ИмяКлюча = "Код ошибки" Тогда
							НовСтрока.КодОшибки = СокрЛП(Сред(текЗначение, Поз+1));
							
						ИначеЕсли ИмяКлюча = "Доступен GPS" Тогда
							стрЗначение = СокрЛП(Сред(текЗначение, Поз+1));
							НовСтрока.ДоступенGPS = ?(стрЗначение = "Да", Перечисления.атл_ДаНет.Да,Перечисления.атл_ДаНет.Нет); 
							
						ИначеЕсли ИмяКлюча = "Доступна моб. сеть" Тогда
							стрЗначение = СокрЛП(Сред(текЗначение, Поз+1));
							НовСтрока.ДоступныСети = ?(стрЗначение = "Да", Перечисления.атл_ДаНет.Да,Перечисления.атл_ДаНет.Нет);	
						КонецЕсли;	
						
					КонецЕсли;
				КонецЦикла;
								
			КонецЦикла;
			
			СтруктураЗначений.Вставить("АдресТаблицыОшибок", ПоместитьВоВременноеХранилище(ТаблицаОшибок));
			
		Иначе			
			
			Для Сч = 1 По МассивПодстрок.Количество() - 1 Цикл
				текЗначение = МассивПодстрок[Сч];
				Поз = Найти(текЗначение, ":");
				Если Поз > 0 Тогда
					ИмяКлюча = СтрЗаменить(Лев(текЗначение, Поз-1), " ", "");
					Если ИмяКлюча = "Источниккоординат" Тогда
						стрЗначение = СокрЛП(Сред(текЗначение, Поз+1));
						Если стрЗначение = "GPS" Тогда
							СтруктураЗначений.Вставить("ИсточникКоординат", Перечисления.атл_ВидыИсточниковКоординат.GPS);
						ИначеЕсли стрЗначение = "Сеть" Тогда
							СтруктураЗначений.Вставить("ИсточникКоординат", Перечисления.атл_ВидыИсточниковКоординат.Сеть);
						КонецЕсли;
						
					ИначеЕсли ИмяКлюча = "Дата" Тогда
						стрЗначение = СокрЛП(Сред(текЗначение, Поз+1));
						Поз = Найти(стрЗначение, " ");
						ПерваяПоловина = СокрЛП(Лев(стрЗначение, Поз-1));
						ВтораяПоловина = СокрЛП(Сред(стрЗначение, Поз+1));
																
						текДата = Дата("00010101");
						Попытка
							текДата = Дата(Сред(ПерваяПоловина,7,4) 
											+ Сред(ПерваяПоловина,4,2)
											+ Сред(ПерваяПоловина,1,2)
											+ СтрЗаменить(ВтораяПоловина, ":", ""));
						Исключение
						КонецПопытки;
						СтруктураЗначений.Вставить("МоментЗаписиКоординат", текДата);
						
					ИначеЕсли ИмяКлюча = "Точность" Тогда
						стрЗначение = СокрЛП(Сред(текЗначение, Поз+1));
						Попытка
							текЧисло = Число(стрЗначение);
						Исключение
							текЧисло = 0;
						КонецПопытки;
						СтруктураЗначений.Вставить("Точность", текЧисло);
						
					Иначе
						СтруктураЗначений.Вставить(ИмяКлюча, СокрЛП(Сред(текЗначение, Поз+1))); 
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
						
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураЗначений;
		
КонецФункции

