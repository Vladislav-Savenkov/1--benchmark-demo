
//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

// Помещает таблицу услуг во временное хранилище.
//
// Возвращаемое значение:
//  Строка - адрес настроек во временном хранилище.
//
//
&НаСервере
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИдентификацияЛС",        Объект.ИдентификацияЛС);
	СтруктураПараметров.Вставить("ВидОтапливаемойПлощади", ВидОтапливаемойПлощади);
	СтруктураПараметров.Вставить("тзСоответствияУслуг",    тзСоответствияУслуг.Выгрузить());
	СтруктураПараметров.Вставить("УслугиВОСЗН",            Объект.ОренбурскаяОбласть_УслугиВОСЗН.Выгрузить());
	СтруктураПараметров.Вставить("УслугиВБазе",            Объект.ОренбургскаяОбласть_УслугиВБазе.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураПараметров, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьНастройкиВХранилище()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

// Обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получаем настройки из хранилища.
	Если Параметры.Свойство("АдресНастроекВХранилище") И НЕ Параметры.АдресНастроекВХранилище = Неопределено Тогда
		
		СтруктураНастроек = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			врПеременная = Неопределено;
			врТаблица = Неопределено;
			
			// Идентификация данных.
			Если СтруктураНастроек.Свойство("ИдентификацияЛС", врПеременная) Тогда
				Объект.ИдентификацияЛС = врПеременная;
			КонецЕсли;
			
			// Вид отапливаемой площади.
			Если СтруктураНастроек.Свойство("ВидОтапливаемойПлощади", врПеременная) Тогда
				ВидОтапливаемойПлощади = врПеременная;
			КонецЕсли;
			
			// Соответствия услуг.
			Если СтруктураНастроек.Свойство("тзСоответствияУслуг", врТаблица) Тогда
				Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
					тзСоответствияУслуг.Загрузить(врТаблица);
				КонецЕсли;
			КонецЕсли;
			
			// Услуги в ОСЗН.
			Если СтруктураНастроек.Свойство("УслугиВОСЗН", врТаблица) Тогда
				Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
					Объект.ОренбурскаяОбласть_УслугиВОСЗН.Загрузить(врТаблица);
				КонецЕсли;
			КонецЕсли;
			
			// Услуги в базе.
			Если СтруктураНастроек.Свойство("УслугиВБазе", врТаблица) Тогда
				Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
					Объект.ОренбургскаяОбласть_УслугиВБазе.Загрузить(врТаблица);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

// Сохраняет настроки перед закрытием формы.
//
&НаКлиенте
Процедура СохранитьДанные(Команда)
	
	Закрыть(ПоместитьНастройкиВХранилище());
	
КонецПроцедуры // СохранитьДанные()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

// При активации строки, загружает соответствия услуг в базе.
//
&НаКлиенте
Процедура тзУслугиВОСЗНПриАктивизацииСтроки(Элемент)
	
	Объект.ОренбургскаяОбласть_УслугиВБазе.Очистить();
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("ИдентификаторУслуги", Элемент.ТекущиеДанные.ИдентификаторУслуги);
		
		НайденныеСтроки = тзСоответствияУслуг.НайтиСтроки(Отбор);
		
		Для Каждого ТекСтрока из НайденныеСтроки Цикл
			
			НоваяСтрока = Объект.ОренбургскаяОбласть_УслугиВБазе.Добавить();
			
			НоваяСтрока.УслугаВБазе                 = ТекСтрока.УслугаВБазе;
			НоваяСтрока.ИдентификаторУслуги         = ТекСтрока.ИдентификаторУслуги;
			НоваяСтрока.СпособОпределенияНачислений = ТекСтрока.СпособОпределенияНачислений;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // тзУслугиВОСЗНПриАктивизацииСтроки()

// Удаляет соответствия из "тзУслугиВБазе" для удаляемой строки.
//
&НаКлиенте
Процедура тзУслугиВОСЗНПередУдалением(Элемент, Отказ)
	
	Отбор = Новый Структура("ИдентификаторУслуги", Элемент.ТекущиеДанные.ИдентификаторУслуги);
	СтрокиУдаления = тзСоответствияУслуг.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
		тзСоответствияУслуг.Удалить(СтрокаУдаления);
	КонецЦикла
	
КонецПроцедуры // тзУслугиВОСЗНПередУдалением()

// Устанавливает доступность добавления услуг из базы для соответствия.
//
&НаКлиенте
Процедура тзУслугиВОСЗНПослеУдаления(Элемент)
	
	// Если в левой колонке пользователем удалены все колонки, то блокируем возможность добавления соответствий.
	Если Объект.ОренбурскаяОбласть_УслугиВОСЗН.Количество() = 0 Тогда
		Элементы.тзУслугиВБазе.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // тзУслугиВОСЗНПослеУдаления()

// Устанавливаем запрет на добавление строк копированием.
//
&НаКлиенте
Процедура тзУслугиВОСЗНПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // тзУслугиВОСЗНПередНачаломДобавления()

// Запоминает старый идентификатор с целью обновить сведения о соответствии услуг в таблице "тзСоответствияУслуг".
//
&НаКлиенте
Процедура тзУслугиВОСЗНПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не НоваяСтрока Тогда
		ПредыдущийИдентификаторУслуги = Элемент.ТекущиеДанные.ИдентификаторУслуги;
	КонецЕсли;
	
КонецПроцедуры // тзУслугиВОСЗНПриНачалеРедактирования()

// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "тзУслугиВОСЗН".
//
&НаКлиенте
Процедура тзУслугиВОСЗНПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	КодОшибки = 0;
	
	// Проверяем на наличие и уникальность код услуги.
	ТекущийИдентификаторУслуги = Элемент.ТекущиеДанные.ИдентификаторУслуги;
	Если ЗначениеЗаполнено(ТекущийИдентификаторУслуги) Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ИдентификаторУслуги", ТекущийИдентификаторУслуги);
		
		СтрокиСовпаденияКод = Объект.ОренбурскаяОбласть_УслугиВОСЗН.НайтиСтроки(Отбор);
		Если СтрокиСовпаденияКод.Количество() > 1 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Идентификатор услуги в ОСЗН не уникален!");
			КодОшибки = КодОшибки + 1;
		КонецЕсли;
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Идентификатор услуги в ОСЗН не заполнен!");
		КодОшибки = КодОшибки + 1;
	КонецЕсли;
	
	// Проверяем на наличие и уникальность услуги.
	ТекущаяУслугаВОСЗН = Элемент.ТекущиеДанные.УслугаВОСЗН;
	Если ЗначениеЗаполнено(ТекущаяУслугаВОСЗН) Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("УслугаВОСЗН", ТекущаяУслугаВОСЗН);
		
		СтрокиСовпаденияУслуга = Объект.ОренбурскаяОбласть_УслугиВОСЗН.НайтиСтроки(Отбор);
		Если СтрокиСовпаденияУслуга.Количество() > 1 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Услуга в ОСЗН не уникальна!");
			КодОшибки = КодОшибки + 1;
		КонецЕсли;
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Услуга в ОСЗН не заполнена!");
		КодОшибки = КодОшибки + 1;
	КонецЕсли;
	
	// Проверяем заполнение реквизита "СпособСверткиТарифа".
	СпособСверткиТарифа = Элемент.ТекущиеДанные.СпособСверткиТарифа;
	Если Не ЗначениеЗаполнено(СпособСверткиТарифа) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Способ свертки тарифа не заполнен!");
		КодОшибки = КодОшибки + 1;
	КонецЕсли;
	
	// Проверяем заполнение реквизита "ЕдиницаИзмерения".
	ЕдиницаИзмерения = Элемент.ТекущиеДанные.ЕдиницаИзмерения;
	Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Единица измерения не выбрана!");
		КодОшибки = КодОшибки + 1;
	КонецЕсли;
	
	// При наличии незаполненных полей или дубликатов опрашиваем пользователя.
	Если КодОшибки > 0 Тогда
		Объект.ОренбурскаяОбласть_УслугиВОСЗН.Удалить(Элементы.тзУслугиВОСЗН.ТекущиеДанные);
	КонецЕсли;
	
	// Разблокируем кнопку добавления табличного поля "тзУслугиВБазе".
	Если Не Объект.ОренбурскаяОбласть_УслугиВОСЗН.Количество() = 0 Тогда
		Элементы.тзУслугиВБазе.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // тзУслугиВОСЗНПередОкончаниемРедактирования()

// Обновляет соответствия услуг в таблице "тзСоответствияУслуг".
//
&НаКлиенте
Процедура тзУслугиВОСЗНПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не Элемент.ТекущиеДанные = Неопределено И Не ОтменаРедактирования Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("ИдентификаторУслуги", ПредыдущийИдентификаторУслуги);
		
		НайденныеСтроки = тзСоответствияУслуг.НайтиСтроки(Отбор);
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			Строка.ИдентификаторУслуги = Элемент.ТекущиеДанные.ИдентификаторУслуги;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // тзУслугиВОСЗНПриОкончанииРедактирования()

// Если не выбрана строка в левой колоке или добавление строк копированием.
//
&НаКлиенте
Процедура тзУслугиВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.тзУслугиВОСЗН.ТекущиеДанные = Неопределено ИЛИ Копирование Тогда
		Отказ = Истина;
	КонецЕсли
	
КонецПроцедуры // тзУслугиВБазеПередНачаломДобавления()

// Запоминает старое значение услуги.
//
&НаКлиенте
Процедура тзУслугиВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не НоваяСтрока Тогда
		ПредыдущаяУслугаВБазе = Элемент.ТекущиеДанные.УслугаВБазе;
	КонецЕсли;
	
КонецПроцедуры // тзУслугиВБазеПриНачалеРедактирования()

// Контролирует уникальность и осуществляет проверку корректности заполнения строк соответствия.
//
&НаКлиенте
Процедура тзУслугиВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущаяУслуга                  = Элементы.тзУслугиВБазе.ТекущиеДанные.УслугаВБазе;
	ТекСпособОпределенияНачислений = Элементы.тзУслугиВБазе.ТекущиеДанные.СпособОпределенияНачислений;
	
	Если ТекущаяУслуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка")
		Или ПустаяСтрока(ТекСпособОпределенияНачислений) Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Добавление незаполненных полей недопустимо!");
		ПризнакУдаления = Истина;
		Объект.ОренбургскаяОбласть_УслугиВБазе.Удалить(Элементы.тзУслугиВБазе.ТекущиеДанные);
		
	КонецЕсли;
	
	// Контроль дублирования услуг в  табличной части "тзУслугиВБазе".
	Отбор = Новый Структура;
	Отбор.Вставить("УслугаВБазе", ТекущаяУслуга);
	
	СтрокиСовпаденияУслуга = Объект.ОренбургскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
	Если СтрокиСовпаденияУслуга.Количество() > 1 Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Услуга в базе не уникальна!");
		Объект.ОренбургскаяОбласть_УслугиВБазе.Удалить(Элементы.тзУслугиВБазе.ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры // тзУслугиВБазеПередОкончаниемРедактирования()

// Добавляет новую строку в таблицу соответствия "тзСоответствияУслуг", 
// а также обновляет старые строки.
//
&НаКлиенте
Процедура тзУслугиВБазеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не Элемент.ТекущиеДанные = Неопределено И Не ОтменаРедактирования
		И Не Элементы.тзУслугиВОСЗН.ТекущиеДанные = Неопределено Тогда
		
		// При редактировании, старые строки удаляем для последующего добавления,
		// с целью обновить данные в таблице "тзСоответствияУслуг".
		Отбор = Новый Структура;
		Отбор.Вставить("УслугаВБазе",         ПредыдущаяУслугаВБазе);
		Отбор.Вставить("ИдентификаторУслуги", Элементы.тзУслугиВОСЗН.ТекущиеДанные.ИдентификаторУслуги);
		
		СтрокиУдаления = тзСоответствияУслуг.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
			тзСоответствияУслуг.Удалить(СтрокаУдаления);
		КонецЦикла;
		
		// Добавляем новую строку.
		НоваяСтрока = тзСоответствияУслуг.Добавить();
		
		НоваяСтрока.УслугаВБазе                 = Элемент.ТекущиеДанные.УслугаВБазе;
		НоваяСтрока.СпособОпределенияНачислений = Элемент.ТекущиеДанные.СпособОпределенияНачислений;
		НоваяСтрока.УслугаВОСЗН                 = Элементы.тзУслугиВОСЗН.ТекущиеДанные.УслугаВОСЗН;
		НоваяСтрока.ИдентификаторУслуги         = Элементы.тзУслугиВОСЗН.ТекущиеДанные.ИдентификаторУслуги;
		НоваяСтрока.СпособСверткиТарифа         = Элементы.тзУслугиВОСЗН.ТекущиеДанные.СпособСверткиТарифа;
		НоваяСтрока.ЕдиницаИзмерения            = Элементы.тзУслугиВОСЗН.ТекущиеДанные.ЕдиницаИзмерения;
		
	КонецЕсли;
	
КонецПроцедуры // тзУслугиВБазеПриОкончанииРедактирования()

// Удаляет соответствующие записи в "тзУслугиВОСЗН" при удалении строки в "тзУслугиВБазе".
//
&НаКлиенте
Процедура тзУслугиВБазеПередУдалением(Элемент, Отказ)
	
	Отбор = Новый Структура;
	Отбор.Вставить("УслугаВБазе",         Элемент.ТекущиеДанные.УслугаВБазе);
	Отбор.Вставить("ИдентификаторУслуги", Элементы.тзУслугиВОСЗН.ТекущиеДанные.ИдентификаторУслуги);
	
	СтрокиУдаления = тзСоответствияУслуг.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
		тзСоответствияУслуг.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры // тзУслугиВБазеПередУдалением()

&НаКлиенте
Процедура ОчиститьТаблицуСоответствий(Команда)
	тзСоответствияУслуг.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСоответствия(Команда)
	
	тзСоответствияУслуг.Очистить();
	Объект.ОренбурскаяОбласть_УслугиВОСЗН.Очистить();
	Объект.ОренбургскаяОбласть_УслугиВБазе.Очистить();
	
КонецПроцедуры

#КонецОбласти