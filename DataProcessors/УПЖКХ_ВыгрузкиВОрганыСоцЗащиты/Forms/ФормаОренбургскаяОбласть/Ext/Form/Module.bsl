
//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область События_формы

// Обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновитьПериод();
	
	ВосстановитьНастройки();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеВидимостьюКнопок("ОткрытиеФормы");
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события "ПередЗакрытием" формы.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиНаСервере();
	
КонецПроцедуры // ПередЗакрытием()

#КонецОбласти // События_формы

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область МесяцВыгрузки

// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
//
&НаКлиенте
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры // ПериодСтрокойПриИзменении()

// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
//
&НаКлиенте
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ПериодСтрокойНачалоВыбора()

// Обработчик события "Регулирование" поля "ПериодСтрокой".
//
&НаКлиенте
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление, Модифицированность);
	
КонецПроцедуры // ПериодСтрокойРегулирование()

// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
//
&НаКлиенте
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойАвтоПодбор()

// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
//
&НаКлиенте
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойОкончаниеВводаТекста()

#КонецОбласти // МесяцВыгрузки

#Область Организация

// Обработчик события "ПриИзменении" поля "Организация".
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УправлениеВидимостьюКнопок("Организация");
	
КонецПроцедуры // ОрганизацияПриИзменении()

#КонецОбласти // Организация

#Область ФайлЗагрузки

// Обработчик события "НачалоВыбора" поля ввода "ФайлЗагрузки".
//
&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр                      = "Файл данных (*.dbf)|*.dbf";
	ДиалогВыбораФайла.Расширение                  = "dbf";
	ДиалогВыбораФайла.Заголовок                   = "Выберите файл загрузки";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла              = Объект.ИмяФайлаЗагрузки;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ФайлЗагрузкиНачалоВыбораЗавершение",
	                           ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры // ФайлЗагрузкиНачалоВыбора()

// Обработчик завершения процедуры ФайлЗагрузкиНачалоВыбора.
//
&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		
		Объект.ИмяФайлаЗагрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
		КаталогФайлаЗагрузки = ДополнительныеПараметры.ДиалогВыбораФайла.Каталог;
		
		УправлениеВидимостьюКнопок("ФайлЗагрузки");
		
	КонецЕсли;

КонецПроцедуры // ФайлЗагрузкиНачалоВыбораЗавершение()

// Обработчик события "Открытие" поля ввода "ФайлЗагрузки".
//
&НаКлиенте
Процедура ФайлЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.ИмяФайлаЗагрузки = "" Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран файл загрузки!", , "Объект.ИмяФайлаЗагрузки");
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ФайлЗагрузкиОткрытиеЗавершение", ЭтотОбъект);
		НачатьЗапускПриложения(ОписаниеОповещения, Объект.ИмяФайлаЗагрузки,,Ложь);
	КонецЕсли;
	
КонецПроцедуры // ФайлЗагрузкиОткрытие()

// Обработчик завершения процедуры ФайлЗагрузкиОткрытие.
//
&НаКлиенте
Процедура ФайлЗагрузкиОткрытиеЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	// Заглушка, т.к. в НачатьЗапускПриложения первый параметр обязательный
	ЭтаПеременнаяЧтобыНеРугаласьПроверкаКонфигурацииНаПустойОбработчик = Неопределено;
	
КонецПроцедуры // ФайлЗагрузкиОткрытиеЗавершение()

#КонецОбласти // ФайлЗагрузки

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

// Обработчик команды "КомандаСправочнаяИнформация".
//
&НаКлиенте
Процедура КомандаСправочнаяИнформация(Команда)
	
	ОткрытьСправкуФормы();
	
	УправлениеВидимостьюКнопок("Инструкция");
	
КонецПроцедуры // КомандаСправочнаяИнформация()

// Открывает форму настроек.
//
&НаКлиенте
Процедура ОткрытьФормуНастройки(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.ОренбургскаяОбласть_ФормаНастройки", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), , , , , ОписаниеОповещения);
	
КонецПроцедуры // ОткрытьФормуНастройки()

// Обработчик результата опроса команды "КомандаНастройка".
//
&НаКлиенте
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
	УправлениеВидимостьюКнопок("НастройкаЗавершение");
	
КонецПроцедуры // КомандаНастройкаЗавершение()

// Обработчик нажатия кнопки "КомандаЗагрузитьИзФайла".
//
&НаКлиенте
Процедура КомандаЗагрузитьИзФайла(Команда)
	
	Если ЕстьОшибкиНаОсновнойФорме() Или ЕстьОшибкиНаФормеНастроек() Тогда
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(Объект.ИмяФайлаЗагрузки);
	
	ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПроверкаСуществованияФайлаЗагрузки", ЭтотОбъект, "Загрузка"));
	
КонецПроцедуры // КомандаЗагрузитьИзФайла()

// Обработчик нажатия кнопки "КомандаНачисленныеЛьготыЗаполнить".
//
&НаКлиенте
Процедура КомандаЗаполнитьВсе(Команда)
	
	ПолучитьИдентифицированныхЛьготников();
	
	Если Не ИдентифицированныеЛьготники.Количество() > 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Таблица выгрузки не заполнена, т.к. не удалось идентифицировать льготников! "
														+ "Выполните повторную загрузку или заполните поле ""Лицевой счет"" вручную.");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуВыгрузки();
	
	УправлениеВидимостьюКнопок("ЗаполнитьВсе");
	
КонецПроцедуры // КомандаЗаполнитьВсе()

// Обработчик нажатия кнопки "КомандаВыгрузитьВсе".
//
&НаКлиенте
Процедура КомандаВыгрузитьВсе(Команда)
	
	ВыгрузитьДанныеВФайл();
	
КонецПроцедуры // КомандаВыгрузитьВсе()

#КонецОбласти // ОбработчикиКомандФормы

//////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНЦИИ

#Область ВспомогательныеМеханизмы

// Проверяет корректность заполнения настроек на основной форме.
//
&НаКлиенте
Функция ЕстьОшибкиНаОсновнойФорме(Отказ = Ложь, ВыводитьСообщениеОбОшибке = Ложь)
	
	Если НЕ ЗначениеЗаполнено(ПериодСтрокой) Тогда
		
		Если ВыводитьСообщениеОбОшибке Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указан месяц, за который необходимо выгрузить данные!",
				, "ПериодСтрокой", "Объект");
		КонецЕсли;
		
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Если ВыводитьСообщениеОбОшибке Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указана организация по которой будет произведена выгрузка!",
				, "Организация", "Объект");
		КонецЕсли;
		
		Отказ = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.ИмяФайлаЗагрузки) Тогда
		
		Если ВыводитьСообщениеОбОшибке Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указан файл загрузки, который предоставила ОСЗН!",
				, "ИмяФайлаЗагрузки", "Объект");
		КонецЕсли;
		
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // ЕстьОшибкиНаОсновнойФорме()

// Проверяет корректность заполнения настроек на форме настроек.
//
&НаКлиенте
Функция ЕстьОшибкиНаФормеНастроек(Отказ = Ложь, ВыводитьСообщениеОбОшибке = Ложь)
	
	Если тзСоответствияУслуг.Количество() = 0 Тогда
		
		Если ВыводитьСообщениеОбОшибке Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не заполнена таблица соответствия услуг на форме настроек!");
		КонецЕсли;
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // ЕстьОшибкиНаФормеНастроек()

// Проверяет существование файла загрузки.
//
&НаКлиенте
Функция ПроверкаСуществованияФайлаЗагрузки(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		
		ПутьКФайлу = "";
		
		Описание = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияФайлаВХранилище", ЭтаФорма);
		НачатьПомещениеФайла(Описание, ПутьКФайлу, Объект.ИмяФайлаЗагрузки, Ложь);
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Выбранный файл загрузки не существует! Выберите другой файл.", , "ИмяФайлаЗагрузки", "Объект");
	КонецЕсли;
	
КонецФункции // ПроверкаСуществованияФайлаЗагрузки()

// Обработчик результата помещения файла в хранилище.
//
&НаКлиенте
Процедура ОбработатьРезультатПомещенияФайлаВХранилище(Результат, ПутьКФайлу, ВыбранноеИмяФайла, ДопПараметры) Экспорт
	
	Если ТаблицаЗагрузки.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗагрузитьЗавершение", ЭтотОбъект, Новый Структура("ПутьКФайлу", ПутьКФайлу));
		
		ТекстВопроса = "Перед повторной загрузкой из файла загрузки ранее загруженные данные будут очищены. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПолучитьТаблицуДанныхИзФайла(ПутьКФайлу);
		
		УправлениеВидимостьюКнопок("ЗагрузитьИзФайлаЗавершение");
	
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатПомещенияФайлаВХранилище()

// Обработчик результата опроса команды "КомандаЗагрузитьИзФайла".
//
&НаКлиенте
Процедура КомандаЗагрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПолучитьТаблицуДанныхИзФайла(ДополнительныеПараметры.ПутьКФайлу);
		
		УправлениеВидимостьюКнопок("ЗагрузитьИзФайлаЗавершение");
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузитьЗавершение()

// Процедура загрузки данных из файла.
//
&НаСервере
Процедура ПолучитьТаблицуДанныхИзФайла(ПутьКФайлу)
	
	ТаблицаЗагрузки.Очистить();
	
	// Запись временных данных во временный файл.
	врДанныеФайла = ПолучитьИзВременногоХранилища(ПутьКФайлу);
	ВременныйФайл = ПолучитьИмяВременногоФайла("DBF");
	
	// Для чтения *.dbf формата урежем имя временного файла.
	ФайлДБФ = Новый Файл(ВременныйФайл);
	СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".DBF";
	НовоеИмяФайла = Лев(ФайлДБФ.ИмяБезРасширения, 8) + ".DBF";
	ВременныйФайл = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	
	врДанныеФайла.Записать(ВременныйФайл);
	
	ФайлДБФ = Новый XBase;
	ФайлДБФ.Кодировка = КодировкаXBase.OEM;
	ФайлДБФ.ОткрытьФайл(ВременныйФайл, , Истина);
	
	Если ФайлДБФ.Поля.Найти("KODORG") = Неопределено Или ФайлДБФ.Поля.Найти("GKU_ID") = Неопределено Или ФайлДБФ.Поля.Найти("MES") = Неопределено
		Или ФайлДБФ.Поля.Найти("ADR") = Неопределено Или ФайлДБФ.Поля.Найти("INDEX") = Неопределено Или ФайлДБФ.Поля.Найти("MO") = Неопределено
		Или ФайлДБФ.Поля.Найти("NASP") = Неопределено Или ФайлДБФ.Поля.Найти("UL") = Неопределено Или ФайлДБФ.Поля.Найти("DOM") = Неопределено
		Или ФайлДБФ.Поля.Найти("KORP") = Неопределено Или ФайлДБФ.Поля.Найти("KV") = Неопределено Или ФайлДБФ.Поля.Найти("SNILS") = Неопределено
		Или ФайлДБФ.Поля.Найти("FAM") = Неопределено Или ФайлДБФ.Поля.Найти("IM") = Неопределено Или ФайлДБФ.Поля.Найти("OT") = Неопределено
		Или ФайлДБФ.Поля.Найти("LS") = Неопределено Или ФайлДБФ.Поля.Найти("RAION") = Неопределено Или ФайлДБФ.Поля.Найти("KOD_KAT") = Неопределено
		Или ФайлДБФ.Поля.Найти("KAT") = Неопределено Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Структура файла загрузки отличается от той, что содержится в справочной информации к выгрузке! "
			+ "Выберите корректный файл и выполните повторную загрузку данных.", , "ИмяФайлаЗагрузки", "Объект");
		Возврат;
	КонецЕсли;
	
	ОстатокОтДеления = ФайлДБФ.Поля.Количество() - 19;
	
	Если ОстатокОтДеления = 0 Тогда
		
		ПолучитьТаблицуДанныхИзФайлаПродолжение(ФайлДБФ);
		
		ТаблицаЗагрузкиКопия = РеквизитФормыВЗначение("ТаблицаЗагрузки").Скопировать();
		
		тзИдентифицированныеЛьготники = ПроизвестиИдентификациюЛицевыхСчетов(ТаблицаЗагрузкиКопия);
		
		// Заполняем колонку "ЛицевойСчет" ссылками идентифицированных льготников на форме.
		// Выводим список льготников, которых не удалось идентифицировать.
		ПараметрыОтбора = Новый Структура("FAM, IM, OT, NASP, UL, DOM, KORP, KV, LS");
		
		Для Каждого Льготник Из ТаблицаЗагрузкиКопия Цикл
			
			ПараметрыОтбора.FAM  = Льготник.FAM;
			ПараметрыОтбора.IM   = Льготник.IM;
			ПараметрыОтбора.OT   = Льготник.OT;
			ПараметрыОтбора.NASP = Льготник.NASP;
			ПараметрыОтбора.UL   = Льготник.UL;
			ПараметрыОтбора.DOM  = Льготник.DOM;
			ПараметрыОтбора.KORP = Льготник.KORP;
			ПараметрыОтбора.KV   = Льготник.KV;
			ПараметрыОтбора.LS   = Льготник.LS;
			
			НайденныйСтроки = тзИдентифицированныеЛьготники.НайтиСтроки(ПараметрыОтбора);
			
			Если НайденныйСтроки.Количество() = 0 Тогда
				
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Льготник: " + ПараметрыОтбора.FAM + " " + ПараметрыОтбора.IM + " "
				+ ПараметрыОтбора.OT + " в базе не идентифицирован! "
				+ "LS: """ + ПараметрыОтбора.LS + """. Полный адрес: " + Льготник.ADR + ".");
				
			Иначе
				
				Для Каждого ИдентифицированныйЛьготник Из НайденныйСтроки Цикл
					Льготник.ЛицевойСчет = ИдентифицированныйЛьготник.ЛицевойСчет;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаЗагрузки.Загрузить(ТаблицаЗагрузкиКопия);
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Структура файла загрузки отличается от той, что содержится в справочной информации к выгрузке! "
			+ "Выберите корректный файл и выполните повторную загрузку данных.", , "ИмяФайлаЗагрузки", "Объект");
	КонецЕсли;
	
КонецПроцедуры // ПолучитьТаблицуДанныхИзФайла()

// Возвращает адрес временного хранилища настроек.
//
&НаСервере
Функция ПолучитьАдресХранилищаНастроек()
	
	Настройки = Новый Структура;
	Настройки.Вставить("ИмяФайлаЗагрузки", Объект.ИмяФайлаЗагрузки);
	
	Возврат ПоместитьВоВременноеХранилище(Настройки, Новый УникальныйИдентификатор);
	
КонецФункции // ПолучитьАдресХранилищаНастроек()

// Получает настройки из временного хранилища.
//
&НаСервере
Функция ПолучитьНастройкиИзХранилища(АдресУслугВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресУслугВХранилище);
	
	врТаблица    = Неопределено;
	врПеременная = Неопределено;
	
	// Идентификация данных.
	Если СтруктураНастроек.Свойство("ИдентификацияЛС", врПеременная) Тогда
		Объект.ИдентификацияЛС = врПеременная;
	КонецЕсли;
	
	Если СтруктураНастроек.Свойство("ВидОтапливаемойПлощади", врПеременная) Тогда
		ВидОтапливаемойПлощади = врПеременная;
	КонецЕсли;
	
	// Соответствия услуг.
	Если СтруктураНастроек.Свойство("тзСоответствияУслуг", врТаблица) Тогда
		Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
			тзСоответствияУслуг.Загрузить(врТаблица);
		КонецЕсли;
	КонецЕсли;
	
	// Услуги в ОСЗН.
	Если СтруктураНастроек.Свойство("УслугиВОСЗН", врТаблица) Тогда
		Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
			Объект.ОренбурскаяОбласть_УслугиВОСЗН.Загрузить(врТаблица);
		КонецЕсли;
	КонецЕсли;
	
	// Услуги в базе.
	Если СтруктураНастроек.Свойство("УслугиВБазе", врТаблица) Тогда
		Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
			Объект.ОренбургскаяОбласть_УслугиВБазе.Загрузить(врТаблица);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ПолучитьНастройкиИзХранилища()

// Процедура восстановления настроек.
//
&НаСервере
Процедура ВосстановитьНастройки()
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ОренбургскаяОбласть_Выгрузка_ВОСЗН", "ПараметрыВыгрузки");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		врТаблица    = Неопределено;
		врПеременная = Неопределено;
		
		// Идентификация данных.
		Если СтруктураПараметров.Свойство("ИдентификацияЛС", врПеременная) Тогда
			Объект.ИдентификацияЛС = врПеременная;
		Иначе
			Объект.ИдентификацияЛС = 0;
		КонецЕсли;
		
		// Вид отапливаемой площади.
		Если СтруктураПараметров.Свойство("ВидОтапливаемойПлощади", врПеременная) Тогда
			ВидОтапливаемойПлощади = врПеременная;
		КонецЕсли;
		
		// Соответствия услуг.
		Если СтруктураПараметров.Свойство("тзСоответствияУслуг", врТаблица) Тогда
			Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
				тзСоответствияУслуг.Загрузить(врТаблица);
			КонецЕсли;
		КонецЕсли;
		
		// Услуги в ОСЗН.
		Если СтруктураПараметров.Свойство("УслугиВОСЗН", врТаблица) Тогда
			Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
				Объект.ОренбурскаяОбласть_УслугиВОСЗН.Загрузить(врТаблица);
			КонецЕсли;
		КонецЕсли;
		
		// Услуги в базе.
		Если СтруктураПараметров.Свойство("УслугиВБазе", врТаблица) Тогда
			Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
				Объект.ОренбургскаяОбласть_УслугиВБазе.Загрузить(врТаблица);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройки()

// Изменяет период на форме выгрузки.
//
// Параметры:
//  Период - Дата - устанавливаемый период.
//
&НаСервере
Процедура ОбновитьПериод(Период = Неопределено)
	
	Объект.Период = ?(Период = Неопределено, УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("РабочаяДата"), КонецМесяца(Период));
	
	Если Объект.Период = '00010101' Тогда
		Объект.Период = ТекущаяДата();
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ОбновитьПериод()

// Процедура сохранения настроек.
//
&НаСервере
Процедура СохранитьНастройкиНаСервере()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ИдентификацияЛС",        Объект.ИдентификацияЛС);
	СтруктураПараметров.Вставить("ВидОтапливаемойПлощади", ВидОтапливаемойПлощади);
	СтруктураПараметров.Вставить("тзСоответствияУслуг",    тзСоответствияУслуг.Выгрузить());
	СтруктураПараметров.Вставить("УслугиВОСЗН",            Объект.ОренбурскаяОбласть_УслугиВОСЗН.Выгрузить());
	СтруктураПараметров.Вставить("УслугиВБазе",            Объект.ОренбургскаяОбласть_УслугиВБазе.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ОренбургскаяОбласть_Выгрузка_ВОСЗН", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры // СохранитьНастройкиНаСервере()

// Дозаполняет таблицу начисленных льгот данными из базы.
// Дозаполняет поля: WELL, SUML, DATPRL, SROKS, SROKPO.
//
&НаСервере
Процедура ЗаполнитьТаблицуВыгрузки()
	
	#Область ПолучениеСведенийОЛицевомСчете
	
	// ВАЖНО!
	// Запрос не предусматривает заполнения следующих полей:
	// KOL_PR   - количество временно проживающих (без регистрации).
	// KOL_PR_C - с какого числа временно проживают.
	// KOL_PR_D - по какое число временно проживают.
	// K_VR_OT  - количество временно отсутствующих.
	// K_VR_OTC - с какого числа временно отсутсвуют.
	// K_VR_OTD - по какое число временно отсутсвуют.
	// Также заполнение поля "KOL_OPR" - общее количество проживающих, происходит на основании
	// поля "KOLCHLS" - количество зарегистрированных.
	//
	// На текущий момент, клиент сам не производит заполнение этих полей, но
	// на будущее запланированна доработка механизма запроса по заполнению вышеописанных полей,
	// также имеется соответствующий план.
	
	// Описание запроса:
	//
	// втИдентифицированныеЛьготники
	// ОПИСАНИЕ:
	//  Идентифицированные льготники.
	//  полученные в результате считывания из файла загрузки ипоследующей идентификации.
	// ПОЛЯ:
	//  ЛицевойСчет - ссылка на лицевой счет льготника
	//
	// втДоли
	// ОПИСАНИЕ:
	//  Данные о размерах долей идентифицированных лицевых счетов,
	//  действующих на конец месяца выгрузки.
	// ПОЛЯ:
	//  Помещение    - ссылка на помещение.
	//  ЛицевойСчета - ссылка на лицевой счет льготника.
	//  ДоляЛС       - доля площади (ДоляЧислитель / ДоляЗнаменатель).
	//
	// втПлощади
	// ОПИСАНИЕ:
	//  Данные о площадях помещений, действующих на конец месяца выгрузки.
	// ПОЛЯ:
	//  Объект - ссылка на помещение.
	//  S_OT   - отапливаемая площадь помещения, зависит от настройки "ВидОтапливаемойПлощади" (на форме настроек).
	//  S_OB   - общая площадь помещения.
	//  S_G    - жилая площадь помещения.
	//
	// втПлощадиСДолями
	// ОПИСАНИЕ:
	//  Данные о площади помещения, которая приходится на лицевой счет,
	//  по которому зарегистрирован льготник.
	// ПОЛЯ:
	//  ЛицевойСчет - ссылка на лицевой счет.
	//  S_OT        - отапливаемая площадь помещения, которая приходится на лицевой счет.
	//  S_OB        - общая площадь помещения, которая приходится на лицевой счет.
	//  S_G         - жилая площадь помещения, которая приходится на лицевой счет.
	//
	// втСобственностьНаПомещение
	// ОПИСАНИЕ:
	//  Данные о собственности на помещения.
	// ПОЛЯ:
	//  Помещение        - ссылка помещение
	//  ВидСобственности - вид собственности помещения
	//
	// втСведенияОЗанимаемомПомещении
	// ОПИСАНИЕ:
	//  Данные о собственности на помещения.
	// ПОЛЯ:
	//  ЛицевойСчет - ссылка на лицевой счет
	//  VIDZF       - тип жилищного фонда 1-частный, 2 – муниципальный, 3- государственный.
	//  TIP_POM     - тип жилого помещения 1 – многоквартирный 2 – индивидуальный 3 - общежитие (коммунальная квартира).
	//  ETAZ_H      - этажность дома.
	//  ETAZ_KV     - занимаемый этаж помещения.
	//
	// втУчетКоличестваЖильцов
	// ОПИСАНИЕ:
	//  Данные о количестве зарегистрированных из РС "КВП_УчетКоличестваЖильцовПоЛицевымСчетам".
	// ПОЛЯ:
	//  ЛицевойСчет                  - ссылка на лицевой счет.
	//  КоличествоЗарегистрированных - количество зарегистрированных жильцов на лицевой счет.
	//
	// втКоличествоИзСведений
	// ОПИСАНИЕ:
	//  Данные о количестве зарегистрированных из РС "УПЖКХ_СведенияОЗарегистрированных".
	// ПОЛЯ:
	//  ЛицевойСчет                  - ссылка на лицевой счет.
	//  КоличествоЗарегистрированных - количество зарегистрированных жильцов на лицевой счет.
	//
	// втТаблицаКоличестваЗарегистрированных
	// ОПИСАНИЕ:
	//  Данные о количестве зарегистрированных в зависимости от настройки "УказыватьКоличествоПрожИЗарегЧислами".
	// ПОЛЯ:
	//  ЛицевойСчет                  - ссылка на лицевой счет.
	//  КоличествоЗарегистрированных - количество зарегистрированных жильцов на лицевой счет.
	//
	// Основной запрос
	// ОПИСАНИЕ:
	//  Получение сведений о лицевом счете:
	//  S_OB    - общая площадь.
	//  S_G     - жилая площадь.
	//  S_OT    - отаплваемая площадь.
	//  ETAZ_H  - этажность дома.
	//  ETAZ_KV - занимаемый этаж помещения.
	//  VIDZF   - тип жилищного фонда.
	//  TIP_POM - тип жилого помещения.
	//  KOLCHLS - количество зарегистрированных граждан.
	//  KOL_OPR - общее количество проживающих = количество зарегистрированных граждан.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентифицированныеЛьготники.ЛицевойСчет КАК ЛицевойСчет,
	|	ИдентифицированныеЛьготники.FAM КАК FAM,
	|	ИдентифицированныеЛьготники.IM КАК IM,
	|	ИдентифицированныеЛьготники.OT КАК OT,
	|	ИдентифицированныеЛьготники.GKU_ID КАК GKU_ID,
	|	ИдентифицированныеЛьготники.ADR КАК ADR
	|ПОМЕСТИТЬ втИдентифицированныеЛьготники
	|ИЗ
	|	&ИдентифицированныеЛьготники КАК ИдентифицированныеЛьготники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.Объект КАК Помещение,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель = 0
	|			ТОГДА 0
	|		ИНАЧЕ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|	КОНЕЦ КАК ДоляЛС
	|ПОМЕСТИТЬ втДоли
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					втИдентифицированныеЛьготники.ЛицевойСчет КАК ЛицевойСчет
	|				ИЗ
	|					втИдентифицированныеЛьготники КАК втИдентифицированныеЛьготники)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Помещение,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади = &ВидОтапливаемойПлощади
	|				ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК S_OT,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|				ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК S_OB,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь)
	|				ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК S_G
	|ПОМЕСТИТЬ втПлощади
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ДатаКон,
	|			Объект В
	|				(ВЫБРАТЬ
	|					втДоли.Помещение КАК Помещение
	|				ИЗ
	|					втДоли КАК втДоли)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДоли.ЛицевойСчет КАК ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА втДоли.ДоляЛС = 0
	|			ТОГДА 0
	|		ИНАЧЕ втДоли.ДоляЛС * втПлощади.S_OB
	|	КОНЕЦ КАК S_OB,
	|	ВЫБОР
	|		КОГДА втДоли.ДоляЛС = 0
	|			ТОГДА 0
	|		ИНАЧЕ втДоли.ДоляЛС * втПлощади.S_G
	|	КОНЕЦ КАК S_G,
	|	ВЫБОР
	|		КОГДА втДоли.ДоляЛС = 0
	|			ТОГДА 0
	|		ИНАЧЕ втДоли.ДоляЛС * втПлощади.S_OT
	|	КОНЕЦ КАК S_OT
	|ПОМЕСТИТЬ втПлощадиСДолями
	|ИЗ
	|	втДоли КАК втДоли
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощади КАК втПлощади
	|		ПО втДоли.Помещение = втПлощади.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПлощади
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение КАК Помещение,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности КАК ВидСобственности
	|ПОМЕСТИТЬ втСобственностьНаПомещение
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
	|			&ДатаКон,
	|			Помещение В
	|				(ВЫБРАТЬ
	|					втДоли.Помещение КАК Помещение
	|				ИЗ
	|					втДоли КАК втДоли)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втДоли.ЛицевойСчет КАК ЛицевойСчет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втСобственностьНаПомещение.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
	|				ТОГДА 1
	|			КОГДА втСобственностьНаПомещение.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Муниципальная)
	|				ТОГДА 2
	|			КОГДА втСобственностьНаПомещение.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Государственная)
	|				ТОГДА 3
	|		КОНЕЦ) КАК VIDZF,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втСобственностьНаПомещение.Помещение.Владелец.Многоквартирное
	|				ТОГДА 1
	|			КОГДА втСобственностьНаПомещение.Помещение.ВидПомещения.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Дом)
	|				ТОГДА 2
	|			ИНАЧЕ 3
	|		КОНЕЦ) КАК TIP_POM,
	|	втДоли.ЛицевойСчет.Адрес.Владелец.Этажей КАК ETAZ_H,
	|	втДоли.ЛицевойСчет.Адрес.Этаж КАК ETAZ_KV
	|ПОМЕСТИТЬ втСведенияОЗанимаемомПомещении
	|ИЗ
	|	втДоли КАК втДоли
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСобственностьНаПомещение КАК втСобственностьНаПомещение
	|		ПО втДоли.Помещение = втСобственностьНаПомещение.Помещение
	|
	|СГРУППИРОВАТЬ ПО
	|	втДоли.ЛицевойСчет,
	|	втДоли.ЛицевойСчет.Адрес.Владелец.Этажей,
	|	втДоли.ЛицевойСчет.Адрес.Этаж
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСобственностьНаПомещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втДоли
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					втИдентифицированныеЛьготники.ЛицевойСчет
	|				ИЗ
	|					втИдентифицированныеЛьготники КАК втИдентифицированныеЛьготники)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втКоличествоИзСведений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			,
	|			ДатаИзменения <= &ДатаКон
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						втИдентифицированныеЛьготники.ЛицевойСчет
	|					ИЗ
	|						втИдентифицированныеЛьготники КАК втИдентифицированныеЛьготники)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА втУчетКоличестваЖильцов.ЛицевойСчет
	|		ИНАЧЕ втКоличествоИзСведений.ЛицевойСчет
	|	КОНЕЦ КАК ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0)
	|		ИНАЧЕ ЕСТЬNULL(втКоличествоИзСведений.КоличествоЗарегистрированных, 0)
	|	КОНЕЦ КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втТаблицаКоличестваЗарегистрированных
	|ИЗ
	|	втКоличествоИзСведений КАК втКоличествоИзСведений
	|		ПОЛНОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО втКоличествоИзСведений.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втУчетКоличестваЖильцов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втКоличествоИзСведений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втИдентифицированныеЛьготники.ЛицевойСчет КАК ЛицевойСчет,
	|	втПлощадиСДолями.S_OB КАК S_OB,
	|	втПлощадиСДолями.S_G КАК S_G,
	|	втПлощадиСДолями.S_OT КАК S_OT,
	|	втСведенияОЗанимаемомПомещении.VIDZF КАК VIDZF,
	|	втСведенияОЗанимаемомПомещении.TIP_POM КАК TIP_POM,
	|	втСведенияОЗанимаемомПомещении.ETAZ_H КАК ETAZ_H,
	|	втСведенияОЗанимаемомПомещении.ETAZ_KV КАК ETAZ_KV,
	|	втТаблицаКоличестваЗарегистрированных.КоличествоЗарегистрированных КАК KOLCHLS,
	|	втТаблицаКоличестваЗарегистрированных.КоличествоЗарегистрированных КАК KOL_OPR
	|ИЗ
	|	втИдентифицированныеЛьготники КАК втИдентифицированныеЛьготники
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиСДолями КАК втПлощадиСДолями
	|		ПО втИдентифицированныеЛьготники.ЛицевойСчет = втПлощадиСДолями.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОЗанимаемомПомещении КАК втСведенияОЗанимаемомПомещении
	|		ПО втИдентифицированныеЛьготники.ЛицевойСчет = втСведенияОЗанимаемомПомещении.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаКоличестваЗарегистрированных КАК втТаблицаКоличестваЗарегистрированных
	|		ПО втИдентифицированныеЛьготники.ЛицевойСчет = втТаблицаКоличестваЗарегистрированных.ЛицевойСчет";
	
	Запрос.УстановитьПараметр("ИдентифицированныеЛьготники",          РеквизитФормыВЗначение("ИдентифицированныеЛьготники"));
	Запрос.УстановитьПараметр("ДатаКон",                              КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ВидОтапливаемойПлощади",               ВидОтапливаемойПлощади);
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	#КонецОбласти // ПолучениеСведенийОЛицевомСчете
	
	#Область ПолучениеСведенийОНачислениях
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		втСведенияОЛицевомСчете = РезультатЗапроса.Выгрузить();
		
		СоответствияУслуг = Новый ТаблицаЗначений;
		СоответствияУслуг.Колонки.Добавить("УслугаВБазе",         Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
		СоответствияУслуг.Колонки.Добавить("УслугаВОСЗН",         Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
		СоответствияУслуг.Колонки.Добавить("ИдентификаторУслуги", Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла(10, 2)));
		СоответствияУслуг.Колонки.Добавить("СпособСверткиТарифа", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(30)));
		СоответствияУслуг.Колонки.Добавить("ЕдиницаИзмерения",    Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла(3)));
		
		СписокОбщедомовыхУслуг      = Новый Массив;
		СписокИндивидуальныхУслуг   = Новый Массив;
		СписокИндивИОбщедомУслуг    = Новый Массив;
		
		Для Каждого ТекУслуга Из тзСоответствияУслуг Цикл
			
			НоваяСтрока = СоответствияУслуг.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекУслуга);
			
			Если ТекУслуга.СпособОпределенияНачислений = "Общедомовая" Тогда
				
				СписокОбщедомовыхУслуг.Добавить(ТекУслуга.УслугаВБазе);
				
			ИначеЕсли ТекУслуга.СпособОпределенияНачислений = "Индивидуальная" Тогда
				
				СписокИндивидуальныхУслуг.Добавить(ТекУслуга.УслугаВБазе);
				
			ИначеЕсли ТекУслуга.СпособОпределенияНачислений = "Индивидуальная и общедомовая" Тогда
				
				СписокИндивИОбщедомУслуг.Добавить(ТекУслуга.УслугаВБазе);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// ВАЖНО!
		// Запрос не предусматривает заполнения следующих полей:
		// NORM_B  - норматив коммун.услуги Базовый на 1 ед.изм. (чел.).
		// NORM_P  - норматив потребления коммунальной услуги Повышенный .
		// PRIZNAK - организация, осуществляющая управление МКД или исполнитель  ЖКУ (кроме энергоснабжения) для индивид.жилого дома.
		// SOGL    - наличие соглашения о реструктуризации задолженности.
		// SOGL_V  - выполнение соглашения о реструктуризации задолженности.
		//
		// На текущий момент, клиент сам не производит заполнение этих полей, но
		// на будущее запланированна доработка механизма запроса по заполнению вышеописанных полей.
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоответствияУслуг.УслугаВБазе КАК УслугаВБазе,
		|	СоответствияУслуг.УслугаВОСЗН КАК УслугаВОСЗН,
		|	СоответствияУслуг.ИдентификаторУслуги КАК ИдентификаторУслуги,
		|	СоответствияУслуг.СпособСверткиТарифа КАК СпособСверткиТарифа,
		|	СоответствияУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ПОМЕСТИТЬ СоответствияУслуг
		|ИЗ
		|	&СоответствияУслуг КАК СоответствияУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСведенияОЛицевомСчете.ЛицевойСчет КАК ЛицевойСчет,
		|	втСведенияОЛицевомСчете.S_OB КАК S_OB,
		|	втСведенияОЛицевомСчете.S_G КАК S_G,
		|	втСведенияОЛицевомСчете.S_OT КАК S_OT,
		|	втСведенияОЛицевомСчете.VIDZF КАК VIDZF,
		|	втСведенияОЛицевомСчете.TIP_POM КАК TIP_POM,
		|	втСведенияОЛицевомСчете.ETAZ_H КАК ETAZ_H,
		|	втСведенияОЛицевомСчете.ETAZ_KV КАК ETAZ_KV,
		|	втСведенияОЛицевомСчете.KOLCHLS КАК KOLCHLS,
		|	втСведенияОЛицевомСчете.KOL_OPR КАК KOL_OPR
		|ПОМЕСТИТЬ втСведенияОЛицевомСчете
		|ИЗ
		|	&втСведенияОЛицевомСчете КАК втСведенияОЛицевомСчете
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(УПЖКХ_НачисленияОбороты.ЛицевойСчет) КАК ЛицевойСчет,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
		|					И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
		|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК V_USLUG,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.Услуга В (&СписокОбщедомовыхУслуг)
		|					И УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			КОГДА УПЖКХ_НачисленияОбороты.Услуга В (&СписокИндивидуальныхУслуг)
		|					И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			КОГДА УПЖКХ_НачисленияОбороты.Услуга В (&СписокИндивИОбщедомУслуг)
		|					И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК SUM_NACH,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК SUM_PER,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
		|				ТОГДА НАЧАЛОПЕРИОДА(УПЖКХ_НачисленияОбороты.МесяцНачисления, МЕСЯЦ)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК SUM_OT,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
		|				ТОГДА КОНЕЦПЕРИОДА(УПЖКХ_НачисленияОбороты.МесяцНачисления, МЕСЯЦ)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК SUM_PO,
		|	СоответствияУслуг.ИдентификаторУслуги КАК USLUGA,
		|	МАКСИМУМ(СоответствияУслуг.ЕдиницаИзмерения) КАК IZM,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
		|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК SUMM_OPL
		|ПОМЕСТИТЬ втНачисления
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Месяц,
		|			РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))
		|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия))
		|				И Организация = &Организация
		|				И Услуга В
		|					(ВЫБРАТЬ
		|						СоответствияУслуг.УслугаВБазе
		|					ИЗ
		|						СоответствияУслуг КАК СоответствияУслуг)
		|				И ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втИдентифицированныеЛьготники.ЛицевойСчет
		|					ИЗ
		|						втИдентифицированныеЛьготники КАК втИдентифицированныеЛьготники)) КАК УПЖКХ_НачисленияОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ СоответствияУслуг КАК СоответствияУслуг
		|		ПО УПЖКХ_НачисленияОбороты.Услуга = СоответствияУслуг.УслугаВБазе
		|
		|СГРУППИРОВАТЬ ПО
		|	СоответствияУслуг.ИдентификаторУслуги,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	СоответствияУслуг.СпособСверткиТарифа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	ВЫБОР
		|		КОГДА СоответствияУслуг.СпособСверткиТарифа = ""Суммировать""
		|			ТОГДА СУММА(УПЖКХ_НачисленияОбороты.Тариф)
		|		КОГДА СоответствияУслуг.СпособСверткиТарифа = ""Минимум""
		|			ТОГДА МИНИМУМ(УПЖКХ_НачисленияОбороты.Тариф)
		|		КОГДА СоответствияУслуг.СпособСверткиТарифа = ""Максимум""
		|			ТОГДА МАКСИМУМ(УПЖКХ_НачисленияОбороты.Тариф)
		|		КОГДА СоответствияУслуг.СпособСверткиТарифа = ""Усреднять""
		|			ТОГДА СРЕДНЕЕ(УПЖКХ_НачисленияОбороты.Тариф)
		|	КОНЕЦ КАК TARIF,
		|	СоответствияУслуг.ИдентификаторУслуги КАК USLUGA,
		|	МАКСИМУМ(СоответствияУслуг.ЕдиницаИзмерения) КАК IZM
		|ПОМЕСТИТЬ втТарифы
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Регистратор,
		|			Организация = &Организация
		|				И НЕ Тариф = 0
		|				И Услуга В
		|					(ВЫБРАТЬ
		|						СоответствияУслуг.УслугаВБазе
		|					ИЗ
		|						СоответствияУслуг КАК СоответствияУслуг)) КАК УПЖКХ_НачисленияОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ СоответствияУслуг КАК СоответствияУслуг
		|		ПО УПЖКХ_НачисленияОбороты.Услуга = СоответствияУслуг.УслугаВБазе
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	СоответствияУслуг.СпособСверткиТарифа,
		|	СоответствияУслуг.ИдентификаторУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияНачальныйОстаток) КАК SUM_UP,
		|	СоответствияУслуг.ИдентификаторУслуги КАК USLUGA
		|ПОМЕСТИТЬ втОстатки
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			,
		|			,
		|			Организация = &Организация
		|				И ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втИдентифицированныеЛьготники.ЛицевойСчет
		|					ИЗ
		|						втИдентифицированныеЛьготники КАК втИдентифицированныеЛьготники)
		|				И Услуга В
		|					(ВЫБРАТЬ
		|						СоответствияУслуг.УслугаВБазе КАК УслугаВБазе
		|					ИЗ
		|						СоответствияУслуг КАК СоответствияУслуг)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ СоответствияУслуг КАК СоответствияУслуг
		|		ПО КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Услуга = СоответствияУслуг.УслугаВБазе
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
		|	СоответствияУслуг.ИдентификаторУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК ЛицевойСчет,
		|	МАКСИМУМ(1) КАК НаличиеСчетчика,
		|	СоответствияУслуг.ИдентификаторУслуги КАК USLUGA
		|ПОМЕСТИТЬ втНаличиеСчетчикаНаУслугу
		|ИЗ
		|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
		|			&ДатаКон,
		|			Объект В
		|					(ВЫБРАТЬ
		|						втИдентифицированныеЛьготники.ЛицевойСчет
		|					ИЗ
		|						втИдентифицированныеЛьготники КАК втИдентифицированныеЛьготники)
		|				И Счетчик.ВидУслуги В
		|					(ВЫБРАТЬ
		|						СоответствияУслуг.УслугаВБазе
		|					ИЗ
		|						СоответствияУслуг КАК СоответствияУслуг)
		|				И ДатаИзменения <= &ДатаКон) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ СоответствияУслуг КАК СоответствияУслуг
		|		ПО КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги = СоответствияУслуг.УслугаВБазе
		|ГДЕ
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
		|
		|СГРУППИРОВАТЬ ПО
		|	СоответствияУслуг.ИдентификаторУслуги,
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНачисления.ЛицевойСчет КАК ЛицевойСчет,
		|	втНачисления.USLUGA КАК USLUGA,
		|	втНачисления.IZM КАК IZM,
		|	втТарифы.TARIF КАК TARIF,
		|	втНачисления.V_USLUG КАК V_USLUG,
		|	втНачисления.SUM_NACH КАК SUM_NACH,
		|	втНачисления.SUM_PER КАК SUM_PER,
		|	втНачисления.SUM_OT КАК SUM_OT,
		|	втНачисления.SUM_PO КАК SUM_PO,
		|	втНачисления.SUMM_OPL КАК SUMM_OPL,
		|	втОстатки.SUM_UP КАК SUM_UP,
		|	втНачисления.SUM_NACH + втНачисления.SUM_PER + ЕСТЬNULL(втОстатки.SUM_UP, 0) КАК S_K_OPL,
		|	ЕСТЬNULL(втНаличиеСчетчикаНаУслугу.НаличиеСчетчика, 0) КАК SCH
		|ПОМЕСТИТЬ втСведенияОНачислениях
		|ИЗ
		|	втНачисления КАК втНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК втОстатки
		|		ПО втНачисления.ЛицевойСчет = втОстатки.ЛицевойСчет
		|			И втНачисления.USLUGA = втОстатки.USLUGA
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНаличиеСчетчикаНаУслугу КАК втНаличиеСчетчикаНаУслугу
		|		ПО втНачисления.ЛицевойСчет = втНаличиеСчетчикаНаУслугу.ЛицевойСчет
		|			И втНачисления.USLUGA = втНаличиеСчетчикаНаУслугу.USLUGA
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТарифы КАК втТарифы
		|		ПО втНачисления.ЛицевойСчет = втТарифы.ЛицевойСчет
		|			И втНачисления.USLUGA = втТарифы.USLUGA
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСведенияОНачислениях.ЛицевойСчет КАК ЛицевойСчет,
		|	втСведенияОНачислениях.ЛицевойСчет.Наименование КАК NUMLS,
		|	втСведенияОНачислениях.USLUGA КАК USLUGA,
		|	втСведенияОНачислениях.IZM КАК IZM,
		|	втСведенияОНачислениях.TARIF КАК TARIF,
		|	втСведенияОНачислениях.V_USLUG КАК V_USLUG,
		|	втСведенияОНачислениях.SUM_NACH КАК SUM_NACH,
		|	втСведенияОНачислениях.SUM_PER КАК SUM_PER,
		|	втСведенияОНачислениях.SUM_OT КАК SUM_OT,
		|	втСведенияОНачислениях.SUM_PO КАК SUM_PO,
		|	втСведенияОНачислениях.SUMM_OPL КАК SUMM_OPL,
		|	втСведенияОНачислениях.SUM_UP КАК SUM_UP,
		|	втСведенияОНачислениях.S_K_OPL КАК S_K_OPL,
		|	втСведенияОНачислениях.SCH КАК SCH,
		|	втСведенияОЛицевомСчете.S_OB КАК S_OB,
		|	втСведенияОЛицевомСчете.S_G КАК S_G,
		|	втСведенияОЛицевомСчете.S_OT КАК S_OT,
		|	втСведенияОЛицевомСчете.VIDZF КАК VIDZF,
		|	втСведенияОЛицевомСчете.TIP_POM КАК TIP_POM,
		|	втСведенияОЛицевомСчете.ETAZ_H КАК ETAZ_H,
		|	втСведенияОЛицевомСчете.ETAZ_KV КАК ETAZ_KV,
		|	втСведенияОЛицевомСчете.KOLCHLS КАК KOLCHLS,
		|	втСведенияОЛицевомСчете.KOL_OPR КАК KOL_OPR,
		|	&НаименованиеОрганизации КАК NAZVOGR,
		|	&ИННОрганизации КАК INN,
		|	&ОГРНОрганизации КАК OGRN,
		|	&ОГРНОрганизации КАК PRIZNAK_1,
		|	втИдентифицированныеЛьготники.FAM КАК FAM,
		|	втИдентифицированныеЛьготники.IM КАК IM,
		|	втИдентифицированныеЛьготники.OT КАК OT,
		|	втИдентифицированныеЛьготники.GKU_ID КАК GKU_ID,
		|	втИдентифицированныеЛьготники.ADR КАК ADR
		|ИЗ
		|	втСведенияОНачислениях КАК втСведенияОНачислениях
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОЛицевомСчете КАК втСведенияОЛицевомСчете
		|		ПО втСведенияОНачислениях.ЛицевойСчет = втСведенияОЛицевомСчете.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втИдентифицированныеЛьготники КАК втИдентифицированныеЛьготники
		|		ПО втСведенияОНачислениях.ЛицевойСчет = втИдентифицированныеЛьготники.ЛицевойСчет
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЛицевойСчет";
		
		Запрос.УстановитьПараметр("СписокОбщедомовыхУслуг",    СписокОбщедомовыхУслуг);
		Запрос.УстановитьПараметр("СписокИндивидуальныхУслуг", СписокИндивидуальныхУслуг);
		Запрос.УстановитьПараметр("СписокИндивИОбщедомУслуг",  СписокИндивИОбщедомУслуг);
		Запрос.УстановитьПараметр("СоответствияУслуг",         СоответствияУслуг);
		Запрос.УстановитьПараметр("ДатаНач",                   НачалоМесяца(Объект.Период));
		Запрос.УстановитьПараметр("Организация",               Объект.Организация);
		Запрос.УстановитьПараметр("НаименованиеОрганизации",   Объект.Организация.Наименование);
		Запрос.УстановитьПараметр("ИННОрганизации",            Объект.Организация.ИНН);
		Запрос.УстановитьПараметр("ОГРНОрганизации",           Объект.Организация.ОГРН);
		Запрос.УстановитьПараметр("втСведенияОЛицевомСчете",   втСведенияОЛицевомСчете);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		СведенияДляВыгрузки = РезультатЗапроса.Выгрузить();
		
		// Заполнение таблицы выгрузки на форме.
		Если СведенияДляВыгрузки.Количество() > 0 Тогда
			
			ТаблицаВыгрузки.Очистить();
			
			Для Каждого Строка Из СведенияДляВыгрузки Цикл
				
				НоваяСтрока = ТаблицаВыгрузки.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
				// Заполнения поля "PRIM" с примечанием о задолженности.
				Если Не Строка.SUM_NACH = 0 Тогда
					Если ((Строка.S_K_OPL - Строка.SUMM_OPL) / Строка.SUM_NACH) > 2 Тогда
						НоваяСтрока.PRIM = "Имеется задолженность свыше 2-х мес. норм в сумме " + Строка(Строка.S_K_OPL - Строка.SUMM_OPL);
					КонецЕсли;
				КонецЕсли;
				
				// Убираем префикс у номера лицевого счета.
				НоваяСтрока.NUMLS = ПодготовитьНомерЛСДляВывода(Строка.NUMLS);
				
			КонецЦикла;
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Данные с услугами ЖКУ за """ + ПериодСтрокой + """ успешно загружены в таблицу ""Таблица выгрузки""!");
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти // ПолучениеСведенийОНачислениях
	
КонецПроцедуры // ЗаполнитьТаблицуВыгрузки()

// Управляет видимостью кнопок.
//
&НаКлиенте
Процедура УправлениеВидимостьюКнопок(НаименованиеОперации)
	
	Настройка               = Ложь;
	КомандаЗагрузитьИзФайла = Ложь;
	ЗаполнитьВсе            = Ложь;
	ВыгрузитьВсе            = Ложь;
	
	ЕстьОшибкиНаОсновнойФорме = ЕстьОшибкиНаОсновнойФорме();
	ЕстьОшибкиНаФормеНастроек = ЕстьОшибкиНаФормеНастроек();
	
	Если НаименованиеОперации = "ОткрытиеФормы" Тогда
		
		Если ЕстьОшибкиНаОсновнойФорме Или ЕстьОшибкиНаФормеНастроек Тогда
			
			Настройка = Истина;
			
		ИначеЕсли Не ЕстьОшибкиНаОсновнойФорме И Не ЕстьОшибкиНаФормеНастроек Тогда
			
			Настройка               = Истина;
			КомандаЗагрузитьИзФайла = Истина;
			
		КонецЕсли;
		
	ИначеЕсли НаименованиеОперации = "Инструкция" Тогда
		
		Настройка = Истина;
		
		Если Не ЕстьОшибкиНаОсновнойФорме И Не ЕстьОшибкиНаФормеНастроек Тогда
			
			КомандаЗагрузитьИзФайла = Истина;
			
		КонецЕсли;
		
	ИначеЕсли НаименованиеОперации = "НастройкаЗавершение" Или НаименованиеОперации = "ФайлЗагрузки"
		Или НаименованиеОперации = "Организация" Тогда
		
		Если Не ЕстьОшибкиНаОсновнойФорме И Не ЕстьОшибкиНаФормеНастроек(, Истина) Тогда
			
			Настройка               = Истина;
			КомандаЗагрузитьИзФайла = Истина;
			
		Иначе
			
			Настройка = Истина;
			
		КонецЕсли;
		
	ИначеЕсли НаименованиеОперации = "ЗагрузитьИзФайлаЗавершение" Тогда
		
		ПолучитьИдентифицированныхЛьготников();
		Если ТаблицаЗагрузки.Количество() = 0 Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось загрузить сведения из файла! Файл загрузки пустой.");
			
			Настройка               = Истина;
			КомандаЗагрузитьИзФайла = Истина;
			
		ИначеЕсли ИдентифицированныеЛьготники.Количество() = 0 Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось идентифицировать льготников из файла загрузки!");
			
			Настройка               = Истина;
			КомандаЗагрузитьИзФайла = Истина;
			
		Иначе
			
			Настройка               = Истина;
			КомандаЗагрузитьИзФайла = Истина;
			ЗаполнитьВсе            = Истина;
			
		КонецЕсли;
		
	ИначеЕсли НаименованиеОперации = "ЗаполнитьВсе" Тогда
		
		Настройка               = Истина;
		КомандаЗагрузитьИзФайла = Истина;
		ЗаполнитьВсе            = Истина;
		ВыгрузитьВсе            = Истина;
		
	КонецЕсли;
	
	Элементы.Настройка.Доступность               = Настройка;
	Элементы.КомандаЗагрузитьИзФайла.Доступность = КомандаЗагрузитьИзФайла;
	Элементы.ЗаполнитьВсе.Доступность            = ЗаполнитьВсе;
	Элементы.ВыгрузитьВсе.Доступность            = ВыгрузитьВсе;
	
КонецПроцедуры // УправлениеВидимостьюКнопок()

// Помещает настройки во временное хранилище.
//
&НаСервере
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИдентификацияЛС",        Объект.ИдентификацияЛС);
	СтруктураНастроек.Вставить("ВидОтапливаемойПлощади", ВидОтапливаемойПлощади);
	СтруктураНастроек.Вставить("тзСоответствияУслуг",    тзСоответствияУслуг.Выгрузить());
	СтруктураНастроек.Вставить("УслугиВОСЗН",            Объект.ОренбурскаяОбласть_УслугиВОСЗН.Выгрузить());
	СтруктураНастроек.Вставить("УслугиВБазе",            Объект.ОренбургскаяОбласть_УслугиВБазе.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьНастройкиВХранилище()

// Функция сокращает название города или улицы: убирает сокращения,
// определяющие тип данного элемента адреса: "г.", "ул." и так далее.
//
// Параметры:
//  Ресурс       - Строка - элемент адреса.
//
// Возвращаемое значение:
//  Строка - элемент адреса в сокращенном виде.
//
&НаСервереБезКонтекста
Функция НормализацияПолейАдресаОренбургскаяОбласть(Ресурс, Массив)
	
	Найден = Истина;
	
	Для Каждого Элемент Из Массив Цикл
		
		Если Прав(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			ПредСимвол = Сред(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент), 1);
			
			Если ПредСимвол = " " Тогда
				Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент)));
			ИначеЕсли ПредСимвол = "." Тогда
				Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент) - 1));
			КонецЕсли;
		ИначеЕсли Лев(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			СледСимвол = Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1, 1);
			Если СледСимвол = " " Тогда
				Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1));
			ИначеЕсли СледСимвол = "." Тогда
				Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 2));
			КонецЕсли;
		Иначе
			
			Найден = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Найден = Ложь Тогда
		Возврат Ресурс;
	КонецЕсли;
	
КонецФункции // НормализацияПолейАдреса()

// Формирует массив сокращений для выбранного вида сокращения.
//
&НаСервереБезКонтекста
Функция СформироватьМассивСокращениеПоВиду(ВидСокращение)
		
	МассивСокращений = Новый Массив;
	// для нас.пунктов
	Если ВидСокращение = 1 Тогда
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("г.");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("п.");
		МассивСокращений.Добавить("с");
		МассивСокращений.Добавить("с.");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("дп");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("рп");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("ст");
		// для улиц
	ИначеЕсли ВидСокращение = 2 Тогда
		МассивСокращений.Добавить("ул");
		МассивСокращений.Добавить("пл");
		МассивСокращений.Добавить("пер");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("проезд");
		МассивСокращений.Добавить("б-р");
		МассивСокращений.Добавить("туп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("ш");
		МассивСокращений.Добавить("пр-кт");
		МассивСокращений.Добавить("пр-кт.");
		МассивСокращений.Добавить("тракт");
		МассивСокращений.Добавить("сквер");
		МассивСокращений.Добавить("наб");
		МассивСокращений.Добавить("км");
		МассивСокращений.Добавить("ж/д_ст");
		МассивСокращений.Добавить("сад");
		МассивСокращений.Добавить("парк");
		МассивСокращений.Добавить("кв-л");
		МассивСокращений.Добавить("аллея");
	КонецЕсли;
	
	Возврат МассивСокращений;
	
КонецФункции // СформироватьМассивСокращениеПоВиду()

// Предназначена для исключения из наименований городов и улиц адресных сокращений.
//
&НаСервереБезКонтекста
Процедура ИсключитьАдресныеСокращенияИзНаименованияГородовИУлиц(ТекущаяТаблица, МассивСокрНасПункт, МассивСокрУлицы)
	
	Для каждого ТекСтрока Из ТекущаяТаблица Цикл
		ТекСтрока.NASP   = НормализацияПолейАдресаОренбургскаяОбласть(НРег(ТекСтрока.NASP), МассивСокрНасПункт);
		ТекСтрока.UL = НормализацияПолейАдресаОренбургскаяОбласть(НРег(ТекСтрока.UL), МассивСокрУлицы);
	КонецЦикла;
	
КонецПроцедуры // ИсключитьАдресныеСокращенияИзНаименованияГородовИУлиц()

#КонецОбласти // ВспомогательныеМеханизмы

//////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ФАЙЛОВ

#Область ВыгрузкаФайлов

// Выгружает данные из таблицы "ТаблицаВыгрузки" в dbf-файл.
//
&НаКлиенте
Процедура ВыгрузитьДанныеВФайл()
	
	Файл = Новый Файл(КаталогФайлаЗагрузки);
	
	Если НЕ Файл.Существует() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Каталог не существует!", , "ИмяФайлаЗагрузки", "Объект");
	Иначе
		
		Если ТаблицаВыгрузки.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблице ""Таблица выгрузки"" отсутствуют данные! Файл сведений с услугами  ЖКУ не удалось сформировать.");
			Возврат;
		КонецЕсли;
		
		ФайлВыгрузки = Новый XBase;
		ФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
		
		ФайлВыгрузки.Поля.Добавить("GKU_ID",    "S", "20");
		ФайлВыгрузки.Поля.Добавить("ADR",       "S", "200");
		ФайлВыгрузки.Поля.Добавить("FAM",       "S", "40");
		ФайлВыгрузки.Поля.Добавить("IM",        "S", "40");
		ФайлВыгрузки.Поля.Добавить("OT",        "S", "40");
		ФайлВыгрузки.Поля.Добавить("S_OB",      "N", "16", "2");
		ФайлВыгрузки.Поля.Добавить("S_G",       "N", "16", "2");
		ФайлВыгрузки.Поля.Добавить("S_OT",      "N", "16", "2");
		ФайлВыгрузки.Поля.Добавить("ETAZ_H",    "N", "3", "0");
		ФайлВыгрузки.Поля.Добавить("ETAZ_KV",   "N", "3", "0");
		ФайлВыгрузки.Поля.Добавить("VIDZF",     "N", "3", "0");
		ФайлВыгрузки.Поля.Добавить("TIP_POM",   "N", "3", "0");
		ФайлВыгрузки.Поля.Добавить("KOLCHLS",   "N", "4", "0");
		ФайлВыгрузки.Поля.Добавить("KOL_PR",    "N", "4", "0");
		ФайлВыгрузки.Поля.Добавить("KOL_PR_C",  "D");
		ФайлВыгрузки.Поля.Добавить("KOL_PR_D",  "D");
		ФайлВыгрузки.Поля.Добавить("KOL_OPR",   "N", "4", "0");
		ФайлВыгрузки.Поля.Добавить("K_VR_OT",   "N", "4", "0");
		ФайлВыгрузки.Поля.Добавить("K_VR_OTC",  "D");
		ФайлВыгрузки.Поля.Добавить("K_VR_OTD",  "D");
		ФайлВыгрузки.Поля.Добавить("USLUGA",    "N", "10", "2");
		ФайлВыгрузки.Поля.Добавить("TARIF",     "N", "16", "4");
		ФайлВыгрузки.Поля.Добавить("NORM_B",    "N", "16", "4");
		ФайлВыгрузки.Поля.Добавить("NORM_P",    "N", "16", "4");
		ФайлВыгрузки.Поля.Добавить("SCH",       "N", "3", "0");
		ФайлВыгрузки.Поля.Добавить("V_USLUG",   "N", "16", "4");
		ФайлВыгрузки.Поля.Добавить("IZM",       "N", "3", "0");
		ФайлВыгрузки.Поля.Добавить("SUM_NACH",  "N", "16", "4");
		ФайлВыгрузки.Поля.Добавить("SUM_PER",   "N", "16", "4");
		ФайлВыгрузки.Поля.Добавить("SUM_OT",    "D");
		ФайлВыгрузки.Поля.Добавить("SUM_PO",    "D");
		ФайлВыгрузки.Поля.Добавить("S_K_OPL",   "N", "16", "4");
		ФайлВыгрузки.Поля.Добавить("SUMM_OPL",  "N", "16", "4");
		ФайлВыгрузки.Поля.Добавить("SUM_UP",    "N", "16", "4");
		ФайлВыгрузки.Поля.Добавить("SOGL",      "N", "3", "0");
		ФайлВыгрузки.Поля.Добавить("SOGL_V",    "N", "3", "0");
		ФайлВыгрузки.Поля.Добавить("NUMLS",     "S", "200");
		ФайлВыгрузки.Поля.Добавить("INN",       "N", "12");
		ФайлВыгрузки.Поля.Добавить("OGRN",      "N", "15");
		ФайлВыгрузки.Поля.Добавить("NAZVOGR",   "S", "100");
		ФайлВыгрузки.Поля.Добавить("PRIM",      "S", "200");
		ФайлВыгрузки.Поля.Добавить("PRIZNAK_1", "S", "15");
		ФайлВыгрузки.Поля.Добавить("PRIZNAK",   "S", "100");
		
		// Формирование имени файла выгрузки.
		ИмяФайла = Строка(?(ТаблицаЗагрузки.Количество() > 0, ТаблицаЗагрузки[0].KODORG, "")) + "_" + Формат(Объект.Период, "ДФ=MM")+ Формат(Объект.Период, "ДФ=yyyy") + ".dbf";
		
		ФайлВыгрузки.СоздатьФайл(КаталогФайлаЗагрузки + "\" + ИмяФайла);
		ФайлВыгрузки.АвтоСохранение = Истина;
		
		ПерваяСтрока                 = Истина;
		ЧислоЗаписейВТаблицеВыгрузки = ТаблицаВыгрузки.Количество();
		ЧислоИдентифицированных      = ИдентифицированныеЛьготники.Количество();
		
		Для Каждого ТекСтрока Из ТаблицаВыгрузки Цикл
			
			Если ПерваяСтрока Тогда
				
				ФайлВыгрузки.Добавить();
				ФайлВыгрузки["NUMLS"]   = "ВСЕГО";
				ФайлВыгрузки["OGRN"]    = ЧислоЗаписейВТаблицеВыгрузки;
				ФайлВыгрузки["NAZVOGR"] = ЧислоИдентифицированных;
				
				ПерваяСтрока = Ложь;
			КонецЕсли;
			
			ФайлВыгрузки.Добавить();
			ЗаполнитьЗначенияСвойств(ФайлВыгрузки, ТекСтрока);
			
		КонецЦикла;
		
		ФайлВыгрузки.ЗакрытьФайл();
		
		Текст = "Выгрузка файла """ +  ИмяФайла + """ со сведениями с услугами ЖКУ завершена!";
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(Текст);
		
	КонецЕсли;
	
КонецПроцедуры // ВыгрузитьДанныеВФайл()

// Убирает из наименования лицевого счета не цифровые символы.
//
Функция ПодготовитьНомерЛСДляВывода(ЛицевойСчет) Экспорт
	
	НаименованиеЛС = СокрЛП(ЛицевойСчет);
	СтрокаДляВозврата = "";
	Пока СтрДлина(НаименованиеЛС) > 0 Цикл
		
		СимволЛС = Лев(НаименованиеЛС, 1);
		Если КодСимвола(СимволЛС) > 47 И КодСимвола(СимволЛС) < 58 Тогда
			СтрокаДляВозврата = СтрокаДляВозврата + СимволЛС;
		КонецЕсли;
		
		НаименованиеЛС = Прав(НаименованиеЛС, СтрДлина(НаименованиеЛС) - 1);
	КонецЦикла;
	
	Возврат СтрокаДляВозврата;
	
КонецФункции // ПодготовитьНомерЛСДляВывода()

#КонецОбласти // ВыгрузкаФайлов

//////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНЦИИ ДЛЯ ЗАГРУЗКИ И ИДЕНТИФИКАЦИИ ЖИЛЬЦОВ

#Область ЗагрузкаИИдентификация

// Процедура предназначена для идентификации льготников из файла ОСЗН с жильцами из информационной базы.
//
&НаСервере
Функция ПроизвестиИдентификациюЛицевыхСчетов(ТаблицаЗагрузкиКопия)
	
#Область ЖильцыСФИОИзБазы
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзФайла.FAM КАК FAM,
	|	ТаблицаИзФайла.IM КАК IM,
	|	ТаблицаИзФайла.OT КАК OT,
	|	ТаблицаИзФайла.NASP КАК NASP,
	|	ТаблицаИзФайла.UL КАК UL,
	|	ТаблицаИзФайла.DOM КАК DOM,
	|	ТаблицаИзФайла.KORP КАК KORP,
	|	ТаблицаИзФайла.KV КАК KV,
	|	ТаблицаИзФайла.LS КАК LS
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайла
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес КАК Помещение,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес.Владелец КАК Здание
	|ПОМЕСТИТЬ втЛицевыеОбслуживаемыеВыбраннойОрганизацией
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&ДатаКон, Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество
	|ПОМЕСТИТЬ втФИОФизЛиц
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКон, ) КАК ФИОФизическихЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.ФизЛицо КАК ФизЛицо,
	|	УПЖКХ_Жильцы.Владелец КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЖильцы
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	НЕ УПЖКХ_Жильцы.ПометкаУдаления
	|	И УПЖКХ_Жильцы.ФизЛицо В
	|			(ВЫБРАТЬ
	|				втФИОФизЛиц.ФизическоеЛицо КАК ФизическоеЛицо
	|			ИЗ
	|				втФИОФизЛиц КАК втФИОФизЛиц)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втФИОФизЛиц.Фамилия КАК Фамилия,
	|	втФИОФизЛиц.Имя КАК Имя,
	|	втФИОФизЛиц.Отчество КАК Отчество,
	|	втЖильцы.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЖильцыСФИО
	|ИЗ
	|	втЖильцы КАК втЖильцы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
	|		ПО втЖильцы.ФизЛицо = втФИОФизЛиц.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией.Помещение КАК Помещение,
	|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией.Здание КАК Здание,
	|	втЖильцыСФИО.Фамилия КАК Фамилия,
	|	втЖильцыСФИО.Имя КАК Имя,
	|	втЖильцыСФИО.Отчество КАК Отчество
	|ПОМЕСТИТЬ втЛССФИОЖильцов
	|ИЗ
	|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией КАК втЛицевыеОбслуживаемыеВыбраннойОрганизацией
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЖильцыСФИО КАК втЖильцыСФИО
	|		ПО втЛицевыеОбслуживаемыеВыбраннойОрганизацией.ЛицевойСчет = втЖильцыСФИО.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втЛССФИОЖильцов.Здание КАК Объект
	|ИЗ
	|	втЛССФИОЖильцов КАК втЛССФИОЖильцов";
	
	МассивСокрНасПункт = СформироватьМассивСокращениеПоВиду(1);
	МассивСокрУлицы    = СформироватьМассивСокращениеПоВиду(2);
	ИсключитьАдресныеСокращенияИзНаименованияГородовИУлиц(ТаблицаЗагрузкиКопия, МассивСокрНасПункт, МассивСокрУлицы);
	
	Запрос.УстановитьПараметр("ДатаКон",       КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаЗагрузкиКопия);
	Запрос.УстановитьПараметр("Организация",   Объект.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивОбъектов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Объект");
	
	ТаблицаАдресов = ПолучитьАдресаВсехЗданий(МассивОбъектов);
	
#КонецОбласти

#Область Идентификация
	
	Если Объект.ИдентификацияЛС = 0 Тогда
		
		УсловиеСоединения = " ПО (втТаблицаДанныхИзФайла.LS = втЖильцыСАдресами.ЛицевойСчетСтрокой
							|ИЛИ втТаблицаДанныхИзФайла.LS = втЖильцыСАдресами.ИдентификаторЛС)";
		
	ИначеЕсли Объект.ИдентификацияЛС = 1 Тогда
		
		УсловиеСоединения = " ПО (втТаблицаДанныхИзФайла.LS = втЖильцыСАдресами.ЛицевойСчетСтрокой
							|		И втТаблицаДанныхИзФайла.FAM = втЖильцыСАдресами.Фамилия
							|		И втТаблицаДанныхИзФайла.IM = втЖильцыСАдресами.Имя
							|		И втТаблицаДанныхИзФайла.OT = втЖильцыСАдресами.Отчество
							|			ИЛИ втТаблицаДанныхИзФайла.LS = втЖильцыСАдресами.ИдентификаторЛС
							|			И втТаблицаДанныхИзФайла.FAM = втЖильцыСАдресами.Фамилия
							|			И втТаблицаДанныхИзФайла.IM = втЖильцыСАдресами.Имя
							|			И втТаблицаДанныхИзФайла.OT = втЖильцыСАдресами.Отчество)";
		
	Иначе
		
		УсловиеСоединения = " ПО (втТаблицаДанныхИзФайла.FAM = втЖильцыСАдресами.Фамилия
							|			И втТаблицаДанныхИзФайла.IM = втЖильцыСАдресами.Имя
							|			И втТаблицаДанныхИзФайла.OT = втЖильцыСАдресами.Отчество
							|			И втТаблицаДанныхИзФайла.NASP = втЖильцыСАдресами.НаселенныйПункт
							|			И втТаблицаДанныхИзФайла.UL = втЖильцыСАдресами.Улица
							|			И втТаблицаДанныхИзФайла.DOM = втЖильцыСАдресами.Дом
							|			И втТаблицаДанныхИзФайла.KORP = втЖильцыСАдресами.Корпус
							|			И (ВЫБОР
							|				КОГДА втЖильцыСАдресами.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Дом)
							|					ТОГДА ИСТИНА
							|				КОГДА втЖильцыСАдресами.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Квартира)
							|						И втТаблицаДанныхИзФайла.KV = 0
							|					ТОГДА втЖильцыСАдресами.Квартира = 1
							|				ИНАЧЕ втТаблицаДанныхИзФайла.KV = втЖильцыСАдресами.Квартира
							|			КОНЕЦ))";
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаАдресов.Здание КАК Здание,
	|	ТаблицаАдресов.НаселенныйПункт КАК НаселенныйПункт,
	|	ТаблицаАдресов.Улица КАК Улица,
	|	ТаблицаАдресов.Дом КАК Дом,
	|	ТаблицаАдресов.Корпус КАК Корпус
	|ПОМЕСТИТЬ втАдресаЗданий
	|ИЗ
	|	&ТаблицаАдресов КАК ТаблицаАдресов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛССФИОЖильцов.Фамилия КАК Фамилия,
	|	втЛССФИОЖильцов.Имя КАК Имя,
	|	втЛССФИОЖильцов.Отчество КАК Отчество,
	|	ЕСТЬNULL(втАдресаЗданий.НаселенныйПункт, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втАдресаЗданий.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втАдресаЗданий.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втАдресаЗданий.Корпус, """") КАК Корпус,
	|	втЛССФИОЖильцов.Помещение.ВидПомещения.ТипПомещения КАК ТипПомещения,
	|	втЛССФИОЖильцов.Помещение.Код КАК Квартира,
	|	втЛССФИОЖильцов.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛССФИОЖильцов.ЛицевойСчет.Наименование КАК ЛицевойСчетСтрокой,
	|	втЛССФИОЖильцов.ЛицевойСчет.Идентификатор КАК ИдентификаторЛС
	|ПОМЕСТИТЬ втЖильцыСАдресами
	|ИЗ
	|	втЛССФИОЖильцов КАК втЛССФИОЖильцов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАдресаЗданий КАК втАдресаЗданий
	|		ПО втЛССФИОЖильцов.Здание = втАдресаЗданий.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втЖильцыСФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втАдресаЗданий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСАдресами.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаДанныхИзФайла.FAM КАК FAM,
	|	втТаблицаДанныхИзФайла.IM КАК IM,
	|	втТаблицаДанныхИзФайла.OT КАК OT,
	|	втТаблицаДанныхИзФайла.NASP КАК NASP,
	|	втТаблицаДанныхИзФайла.UL КАК UL,
	|	втТаблицаДанныхИзФайла.DOM КАК DOM,
	|	втТаблицаДанныхИзФайла.KORP КАК KORP,
	|	втТаблицаДанныхИзФайла.KV КАК KV,
	|	втТаблицаДанныхИзФайла.LS КАК LS
	|ИЗ
	|	втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЖильцыСАдресами КАК втЖильцыСАдресами"
			+ УсловиеСоединения +
	"
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаДанныхИзФайла.FAM,
	|	втТаблицаДанныхИзФайла.IM,
	|	втТаблицаДанныхИзФайла.OT,
	|	втТаблицаДанныхИзФайла.NASP,
	|	втТаблицаДанныхИзФайла.UL,
	|	втТаблицаДанныхИзФайла.DOM,
	|	втТаблицаДанныхИзФайла.KORP,
	|	втТаблицаДанныхИзФайла.KV,
	|	втТаблицаДанныхИзФайла.LS,
	|	втЖильцыСАдресами.ЛицевойСчет";
	
#КонецОбласти
	
	Запрос.УстановитьПараметр("ТаблицаАдресов",    ТаблицаАдресов);
	Запрос.УстановитьПараметр("ДатаКон",           КонецМесяца(Объект.Период));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции // ПроизвестиИдентификациюЛицевыхСчетов()

// Получает таблицу значений с адресами зданий.
//
&НаСервере
Функция ПолучитьАдресаВсехЗданий(МассивОбъектов)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов, Ложь);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втКонтактнаяИнформация.Объект КАК Здание,
	|	ВЫБОР
	|		КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
	|			ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|		КОГДА НЕ втКонтактнаяИнформация.Город = """"
	|			ТОГДА втКонтактнаяИнформация.Город
	|		ИНАЧЕ втКонтактнаяИнформация.Регион
	|	КОНЕЦ КАК НаселенныйПункт,
	|	втКонтактнаяИнформация.Улица,
	|	втКонтактнаяИнформация.Дом,
	|	втКонтактнаяИнформация.Корпус
	|ИЗ
	|	втКонтактнаяИнформация КАК втКонтактнаяИнформация";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьАдресаВсехЗданий()

// Получает таблицу с данными о льготниках для дальнейшего поиска сведений о начисленных льготах.
//
&НаСервере
Процедура ПолучитьТаблицуДанныхИзФайлаПродолжение(ФайлДБФ)
	
	// Нужна ТаблицаЗначений для перебора колонок.
	ТаблицаЗагрузкиКопия = РеквизитФормыВЗначение("ТаблицаЗагрузки");
	
	Попытка
		
		ПерваяСтрока = Истина;
		
		Пока НЕ ФайлДБФ.ВКонце() Цикл
			
			// Первую строку не нужно записывать.
			Если ПерваяСтрока Тогда
				ПерваяСтрока = Ложь;
				ФайлДБФ.Следующая();
				Продолжить;
			КонецЕсли;
			
			// Заполнение полей ТЗ "ТаблицаВыгрузки" согласно DBF-файлу.
			СтрокаТаблицыВыгрузки = ТаблицаЗагрузки.Добавить();
			
			Для Каждого Колонка Из ТаблицаЗагрузкиКопия.Колонки Цикл
				
				Попытка
					СтрокаТаблицыВыгрузки[Колонка.Имя] = ?(Строка(Колонка.ТипЗначения) = "Строка", СокрЛП(ФайлДБФ[Колонка.Имя]), ФайлДБФ[Колонка.Имя]);
				Исключение
				КонецПопытки;
				
			КонецЦикла;
			
			ФайлДБФ.Следующая();
		КонецЦикла;
		
		ФайлДБФ.ЗакрытьФайл();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Структура файла загрузки отличается от той, что содержится в справочной информации к выгрузке! " +
		+ "Выберите корректный файл и выполните повторную загрузку данных.", , "ИмяФайлаЗагрузки", "Объект");
	КонецПопытки;
	
КонецПроцедуры // ПолучитьТаблицуДанныхИзФайлаПродолжение()

// Возвращает таблицу идентифицированных льготников, получая ведения из таблицы загрузки.
//
&НаСервере
Процедура ПолучитьИдентифицированныхЛьготников()
	
	ИдентифицированныеЛьготники.Очистить();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗагрузки.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаЗагрузки.FAM КАК FAM,
	|	ТаблицаЗагрузки.IM КАК IM,
	|	ТаблицаЗагрузки.OT КАК OT,
	|	ТаблицаЗагрузки.GKU_ID КАК GKU_ID,
	|	ТаблицаЗагрузки.ADR КАК ADR
	|ПОМЕСТИТЬ втТаблицаЗагрузки
	|ИЗ
	|	&ТаблицаЗагрузки КАК ТаблицаЗагрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втТаблицаЗагрузки.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаЗагрузки.FAM КАК FAM,
	|	втТаблицаЗагрузки.IM КАК IM,
	|	втТаблицаЗагрузки.OT КАК OT,
	|	втТаблицаЗагрузки.GKU_ID КАК GKU_ID,
	|	втТаблицаЗагрузки.ADR КАК ADR
	|ИЗ
	|	втТаблицаЗагрузки КАК втТаблицаЗагрузки
	|ГДЕ
	|	НЕ втТаблицаЗагрузки.ЛицевойСчет = ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ТаблицаЗагрузки", РеквизитФормыВЗначение("ТаблицаЗагрузки"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ИдентифицированныеЛьготники.Загрузить(РезультатЗапроса.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры // ПолучитьИдентифицированныхЛьготников()

#КонецОбласти // ЗагрузкаИИдентификация