
/////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Объект.Период      = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	
	ВосстановитьНастройкиНаСервере();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиНаСервере();
	
КонецПроцедуры // ПередЗакрытием()

#КонецОбласти


#Область СохраняемыеНастройки

////////////////////////
// Сохраняемые настройки

&НаСервере
// Процедура восстановления настроек.
//
Процедура ВосстановитьНастройкиНаСервере()
	
	СтруктураНастроек = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ВыгрузкаОСЗНРостовскаяОбласть", "ПараметрыВыгрузки");
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		// Каталог выгрузки.
		врИмяКаталогаВыгрузки = Неопределено;
		Если СтруктураНастроек.Свойство("ИмяКаталогаВыгрузки", врИмяКаталогаВыгрузки) Тогда
			Объект.КаталогВыгрузки = врИмяКаталогаВыгрузки;
		КонецЕсли;
		
		// Имя файла загрузки.
		врИмяФайлаЗагрузки = Неопределено;
		Если СтруктураНастроек.Свойство("ИмяФайлаЗагрузки", врИмяФайлаЗагрузки) Тогда
			Объект.ИмяФайлаЗагрузки = врИмяФайлаЗагрузки;
		КонецЕсли;
		
		// Таблица настроек справочника ОСЗН.
		врТаблицаНастроек = Неопределено;
		Если СтруктураНастроек.Свойство("РостовскаяОбласть_ТаблицаНастроек", врТаблицаНастроек) Тогда
			Если ТипЗнч(врТаблицаНастроек) = Тип("ТаблицаЗначений") Тогда
				Объект.РостовскаяОбласть_ТаблицаНастроек.Загрузить(врТаблицаНастроек);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица услуг справочника ОСЗН в базе.
		врТаблицаУслугВБазе = Неопределено;
		Если СтруктураНастроек.Свойство("РостовскаяОбласть_УслугиВБазе", врТаблицаУслугВБазе) Тогда
			Если ТипЗнч(врТаблицаУслугВБазе) = Тип("ТаблицаЗначений") Тогда
				Объект.РостовскаяОбласть_УслугиВБазе.Загрузить(врТаблицаУслугВБазе);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры // ВосстановитьНастройкиНаСервере()

&НаСервере
// Процедура сохранения настроек.
//
Процедура СохранитьНастройкиНаСервере()
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("ИмяКаталогаВыгрузки", Объект.КаталогВыгрузки);
	СтруктураНастроек.Вставить("ИмяФайлаЗагрузки",    Объект.ИмяФайлаЗагрузки);
	
	СтруктураНастроек.Вставить("РостовскаяОбласть_ТаблицаНастроек", Объект.РостовскаяОбласть_ТаблицаНастроек.Выгрузить());
	СтруктураНастроек.Вставить("РостовскаяОбласть_УслугиВБазе",     Объект.РостовскаяОбласть_УслугиВБазе.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ВыгрузкаОСЗНРостовскаяОбласть", "ПараметрыВыгрузки", СтруктураНастроек);
	
КонецПроцедуры // СохранитьНастройкиНаСервере()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

////////////////////////
// Период

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры // ПериодСтрокойПриИзменении()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ПериодСтрокойНачалоВыбора()

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры // ПериодСтрокойРегулирование()

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойАвтоПодбор()

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойОкончаниеВводаТекста()

////////////////////////
// Каталог выгрузки

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "КаталогВыгрузки".
//
Процедура ИмяФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр                  = "Файл данных (*.dbf)|*.dbf";
	ДиалогВыбораФайла.Расширение              = "dbf";
	ДиалогВыбораФайла.Заголовок               = "Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ИндексФильтра           = 0;
	
	Файл = Новый Файл(Объект.ИмяФайлаЗагрузки);
	ДиалогВыбораФайла.Каталог                 = Файл.Путь;
	ДиалогВыбораФайла.ПолноеИмяФайла          = Файл.Имя;
	
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор          = Ложь;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		Файл = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
		
		ИмяФайла = Файл.ИмяБезРасширения;
		Если СтрДлина(ИмяФайла) <= 8 Тогда
			Объект.ИмяФайлаЗагрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
			Объект.КаталогВыгрузки  = ДиалогВыбораФайла.Каталог;
		Иначе
			ПоказатьПредупреждение(, "Длина файла загрузки не может быть больше 8 символов. Переименуйте выбираемый файл!");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИмяКаталогаВыгрузкиНачалоВыбора()

&НаКлиенте
// Обработчик события "Открытие" поля "ИмяКаталогаВыгрузки".
//
Процедура ИмяФайлаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	ЗапуститьПриложение("explorer " + Объект.ИмяФайлаЗагрузки);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ИмяКаталогаВыгрузкиОткрытие()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля ввода КаталогВыгрузки.
//
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_РаботаСФайламиКлиент.ВыбратьКаталог(ЭтаФорма, "Выбор каталога выгрузки", Объект.КаталогВыгрузки);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик результата работы процедуры "ДиалогВыбораФайла.Показать".
//
Процедура ВыбратьКаталогЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.КаталогВыгрузки = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры // КаталогВыгрузкиНачалоВыбора()

&НаКлиенте
// Обработчик события "Открытие" поля ввода КаталогВыгрузки.
//
Процедура КаталогВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	ЗапуститьПриложение("explorer " + Объект.КаталогВыгрузки);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область КоманднаяПанель

////////////////////////
// Команда Настройка

&НаКлиенте
// Обработчик команды "КомандаНастройка".
//
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.РостовскаяОбласть_ФормаНастройки", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры // КомандаНастройка()

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
//
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры // КомандаНастройкаЗавершение()

&НаКлиенте
// Процедура-обработчик команды "Загрузить".
//
Процедура Загрузить(Команда)
	
	Если Объект.ИмяФайлаЗагрузки = "" Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан файл загрузки!");
		Возврат;
		
	КонецЕсли;
	
	Если РостовскаяОбласть_ТаблицаВыгрузки.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед загрузкой данных из файла ОСЗН таблица выгрузки будет очищена. Продолжить?";
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗагрузить", 
												ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
		
		Возврат;
		
	КонецЕсли;
	
	ЗагрузитьПродолжение();
	
КонецПроцедуры // Загрузить()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре-обработчике команды "Загрузить".
Процедура ОбработатьРезультатВопросаЗагрузить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РостовскаяОбласть_ТаблицаВыгрузки.Очистить();
	ТаблицаКодовУслугИзФайла.Очистить();
	ЗагрузитьПродолжение();
	
КонецПроцедуры

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "Загрузить".
Процедура ЗагрузитьПродолжение()
	
	// Помещаем загружаемый файл во временное хранилище.
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборФайла", ЭтотОбъект);
	НачатьПомещениеФайла(Оповещение, , Объект["ИмяФайлаЗагрузки"], Ложь, УникальныйИдентификатор);
	
	АктуализироватьТаблицуНастроек();
	
	// Установим период формирования равным указанным в файле ОСЗН.
	Для каждого СтрокаТаблицыВыгрузки Из РостовскаяОбласть_ТаблицаВыгрузки Цикл
		
		Если НЕ СтрокаТаблицыВыгрузки.DTFACT = Неопределено Тогда
			
			Объект.Период = СтрокаТаблицыВыгрузки.DTFACT;
			УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик команды "Заполнить".
//
Процедура Заполнить(Команда)
	
	Если ЕстьОшибкиЗаполненияПолейФормы() Тогда
		Возврат;
	КонецЕсли;
	
	Если РостовскаяОбласть_ТаблицаВыгрузки.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для поиска данных о начислениях и оплатах табличная часть должна быть заполнена!");
	Иначе
		ОтборНеидентифицированныхЛС = Новый Структура("СоответствующийЛицевойСчет", ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка"));
		
		НеидентифицированныеЛС = РостовскаяОбласть_ТаблицаВыгрузки.НайтиСтроки(ОтборНеидентифицированныхЛС);
		Если НеидентифицированныеЛС.Количество() = РостовскаяОбласть_ТаблицаВыгрузки.Количество() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Во всех строках таблицы выгрузки, которые были загружены из файла, лицевые счет не идентифицированы в информационной базе! Данные о начислениях и оплатах не будут заполнены!");
		Иначе
			ЗаполнитьСведенияОНачисленияхИОплатахНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // Заполнить()

&НаКлиенте
// Процедура-обработчик команды "Выгрузить".
//
Процедура Выгрузить(Команда)
	
	Если РостовскаяОбласть_ТаблицаВыгрузки.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Перед выгрузкой данных в файл табличная часть должна быть заполнена данными о начислениях и оплатах за выбранный период!");
		Возврат;
	КонецЕсли;
	
	DBFФайлВыгрузки = Новый XBase;
	#Если Не ВебКлиент Тогда
	DBFФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
	#КонецЕсли
	
	КолонкиDBF = ПолучитьКолонкиDBF();
	
	Для Каждого Колонка Из КолонкиDBF Цикл
		
		Если Колонка.Тип = "S" Тогда
			
			DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.Длина);
			
		ИначеЕсли Колонка.Тип = "N" Тогда
			
			DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.РазрядностьЦелойЧасти, Колонка.РазрядностьДробнойЧасти);
			
		ИначеЕсли Колонка.Тип = "D" Тогда
			
			DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.ЧастиДаты);
			
		ИначеЕсли Колонка.Тип = "L" Тогда
			
			DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип);
			
		КонецЕсли;
		
	КонецЦикла;
	
	КороткоеИмяВременногоФайла = ПолучитьИмяВременногоDBFФайла();
	
	DBFФайлВыгрузки.СоздатьФайл(КороткоеИмяВременногоФайла);
	DBFФайлВыгрузки.АвтоСохранение = Истина;
	
	// Запись данных из табличной части в файл выгрузки.
	Для Каждого Строка Из РостовскаяОбласть_ТаблицаВыгрузки Цикл
		
		DBFФайлВыгрузки.Добавить();
		
		ЗаполнитьЗначенияСвойств(DBFФайлВыгрузки, Строка);
		
		DBFФайлВыгрузки.Записать();
		
	КонецЦикла;
	
	DBFФайлВыгрузки.ЗакрытьФайл();
	
	// Сохраняем резервную копию исходного файла выгрузки.
	Файл = Новый Файл(Объект.ИмяФайлаЗагрузки);
	ИмяБэкапФайла = СтрЗаменить(Файл.ПолноеИмя, Файл.ИмяБезРасширения, Файл.ИмяБезРасширения + "_Исходный");
	
	КопироватьФайл(Объект.ИмяФайлаЗагрузки, ИмяБэкапФайла);
	
	// Подменяем исходный файл выгрузки на заполненный.
	КопироватьФайл(КороткоеИмяВременногоФайла, Объект.ИмяФайлаЗагрузки);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка в файл ОСЗН """ + Объект.ИмяФайлаЗагрузки + """ завершена!");
	
КонецПроцедуры // Выгрузить()

#КонецОбласти

#Область РаботаСХранилищем

&НаСервере
// Помещает данные во временное хранилище для передачи их в форму настройки.
//
// Возвращаемое значение:
//  Строка - адрес настроек в хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("РостовскаяОбласть_ТаблицаНастроек", Объект.РостовскаяОбласть_ТаблицаНастроек.Выгрузить());
	СтруктураНастроек.Вставить("РостовскаяОбласть_УслугиВБазе",     Объект.РостовскаяОбласть_УслугиВБазе.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьДанныеВХранилище()

&НаСервере
// Получает настройки из временного хранилища.
//
Функция ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		// Таблица настроек справочника ОСЗН.
		врТаблицаНастроек = Неопределено;
		Если СтруктураНастроек.Свойство("РостовскаяОбласть_ТаблицаНастроек", врТаблицаНастроек) Тогда
			Если ТипЗнч(врТаблицаНастроек) = Тип("ТаблицаЗначений") Тогда
				Объект.РостовскаяОбласть_ТаблицаНастроек.Загрузить(врТаблицаНастроек);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица услуг справочника ОСЗН в базе.
		врТаблицаУслугВБазе = Неопределено;
		Если СтруктураНастроек.Свойство("РостовскаяОбласть_УслугиВБазе", врТаблицаУслугВБазе) Тогда
			Если ТипЗнч(врТаблицаУслугВБазе) = Тип("ТаблицаЗначений") Тогда
				Объект.РостовскаяОбласть_УслугиВБазе.Загрузить(врТаблицаУслугВБазе);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПолучитьНастройкиИзХранилища()

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

&НаКлиенте
// Обработчик результата помещения файла во временное хранилище.
//
Процедура ОбработатьВыборФайла(Результат, АдресФайлаВХранилище, ВыбранноеИмяФайла, Режим) Экспорт
	
	Если Результат Тогда
		// Загружаем данные из dbf на сервере.
		ЗагрузитьИзФайлаНаСервере(АдресФайлаВХранилище);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборФайла()

&НаСервере
// Загружает копию dbf-файла в текущую таблицу.
// Параметры:
//  АдресФайлаВХранилище - Строка - адрес текущего файла во временном хранилище.
//
Процедура ЗагрузитьИзФайлаНаСервере(АдресФайлаВХранилище)
	
	// Получаем dbf из временного хранилища.
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	
	// Для чтения *.dbf файла в кодировке DOS (OEM), урежем имя временного файла.
	КороткоеИмяВременногоФайла = ПолучитьИмяВременногоDBFФайла();
	
	// Записываем dbf в файл с указанным именем.
	ДвоичныеДанные.Записать(КороткоеИмяВременногоФайла);
	
	// Производим чтение dbf файла.
	DBFФайл = Новый XBase;
	
	DBFФайл.Кодировка = КодировкаXBase.OEM;
	
	DBFФайл.ОткрытьФайл(КороткоеИмяВременногоФайла, , Истина);
	
	// Проверяем файл ОСЗН на существование. Добавляем поля таблицы выгрузки.
	Если DBFФайл.Открыта() Тогда
		
		// Подготовить таблицу значений с кодами услуги и количеством полей по каждой из них из файла ОСЗН.
		ПодготовитьСписокСКодамиУслугИзФайла(DBFФайл.Поля);
		
		Выполнить("ДобавитьРеквизитыВТаблицуЗагрузкиНаСервере(DBFФайл)");
		
	Иначе
		
		Сообщить("Не удалось прочитать файл ОСЗН!");
		DBFФайл.ЗакрытьФайл();
		Возврат;
		
	КонецЕсли;
	
	// Нужна ТаблицаЗначений для перебора колонок.
	ТаблицаДляЗагрузки = РеквизитФормыВЗначение("РостовскаяОбласть_ТаблицаВыгрузки");
	// Заполнение полей ТаблицаДанныхИзФайла согласно DBF-файлу.
	
	Пока НЕ DBFФайл.ВКонце() Цикл
		
		НоваяЗапись = ТаблицаДляЗагрузки.Добавить();
		
		Для Каждого Колонка Из ТаблицаДляЗагрузки.Колонки Цикл
		
			Попытка
				НоваяЗапись[Колонка.Имя] = ?(Строка(Колонка.ТипЗначения) = "Строка", СокрЛП(DBFФайл[Колонка.Имя]), DBFФайл[Колонка.Имя]);
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
		DBFФайл.Следующая();
		
	КонецЦикла;
	
	DBFФайл.ЗакрытьФайл();
	
	ИсключитьАдресныеСокращения(ТаблицаДляЗагрузки, 1);
	
	ПроизвестиИдентификациюЛицевыхСчетов(ТаблицаДляЗагрузки);
	
	// Помещаем заполенную таблицу значений в соответствующий реквизит формы.
	ЗначениеВРеквизитФормы(ТаблицаДляЗагрузки, "РостовскаяОбласть_ТаблицаВыгрузки");
	
	// Очищает временное хранилище.
	УдалитьИзВременногоХранилища(АдресФайлаВХранилище);
	
КонецПроцедуры // ЗагрузитьИзФайлаНаСервере()

&НаКлиентеНаСервереБезКонтекста
// Возвращает полное имя временного dbf-файла с указанным именем без расширения.
//
// Параметры:
//  ИмяФайла - Строка - имя файла без расширения.
//
// Возвращаемые параметры:
//  НовоеИмяВременногоФайла - Строка - полное имя временного dbf-файла с указанным именем без расширения.
//
Функция ПолучитьИмяВременногоDBFФайла()
	
	ИмяВременногоФайла = "";
	#Если Не ВебКлиент Тогда
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("dbf");
	#КонецЕсли
	
	Файл = Новый Файл(ИмяВременногоФайла);
	НовоеИмяВременногоФайла = СтрЗаменить(Файл.ПолноеИмя, Файл.ИмяБезРасширения, "Загрузки");
	
	Возврат НовоеИмяВременногоФайла;
	
КонецФункции // ПолучитьИмяВременногоDBFФайла()

&НаСервере
// Подготоваливает список с кодами услуг из файла загрузки.
//
Процедура ПодготовитьСписокСКодамиУслугИзФайла(ПоляDBFФайла)
	
	Если ТаблицаКодовУслугИзФайла.Количество() > 0 Тогда
		ТаблицаКодовУслугИзФайла.Очистить();
	КонецЕсли;
	
	СохраненныйКодУслуги = "-1";
	
	СохраненныйСпособОпределенияНачислений = "";
	
	ПервыйПроход = Истина;
	
	Для СчетчикПолей = 0 По ПоляDBFФайла.Количество() - 1 Цикл
		
		ТекущееПолеDBF = ПоляDBFФайла.Получить(СчетчикПолей).Имя;
		
		Если Найти(ТекущееПолеDBF, "SOUT") Тогда
			ПозицияСимвола = Найти(ТекущееПолеDBF, "T");
			ТекСпособОпределенияНачислений = "Общедомовой";
		ИначеЕсли Найти(ТекущееПолеDBF, "SIN") Тогда
			ПозицияСимвола = Найти(ТекущееПолеDBF, "N");
			ТекСпособОпределенияНачислений = "Индивидуальный";
		Иначе
			Продолжить;
		КонецЕсли;
		
		ТекКодУслуги = Сред(ТекущееПолеDBF, ПозицияСимвола + 1);
		
		Если ТекКодУслуги = "XX" ИЛИ ТекКодУслуги = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПервыйПроход ИЛИ СохраненныйКодУслуги <> ТекКодУслуги Тогда
			
			Если ПервыйПроход Тогда
				ПервыйПроход = Ложь;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаКодовУслугИзФайла.Добавить();
			НоваяСтрока.КодУслуги                   = ТекКодУслуги;
			НоваяСтрока.СпособОпределенияНачислений = ТекСпособОпределенияНачислений;
			
			СохраненныйКодУслуги                   = ТекКодУслуги;
			СохраненныйСпособОпределенияНачислений = ТекСпособОпределенияНачислений;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьСписокСКодамиУслугИзФайла()

&НаСервере
// Переопределяет колонки и поля таблицы "РостовскаяОбласть_ТаблицаВыгрузки".
//
Процедура ДобавитьРеквизитыВТаблицуЗагрузкиНаСервере(DBFФайл)
	
	Если АдресДобавляемыеРеквизитыТаблицыЗагрузки = "" Тогда
		
		ДобавляемыеРеквизитыТаблицыЗагрузки = Новый Массив;
		
	Иначе
		
		ДобавляемыеРеквизитыТаблицыЗагрузки = ПолучитьИзВременногоХранилища(АдресДобавляемыеРеквизитыТаблицыЗагрузки);
		
		УдаляемыеРеквизиты = Новый Массив;
		
		// Удаляем ранее добавленные элементы формы.
		Для Каждого РеквизитУдаления Из ДобавляемыеРеквизитыТаблицыЗагрузки Цикл
			УдаляемыеРеквизиты.Добавить("РостовскаяОбласть_ТаблицаВыгрузки." + РеквизитУдаления.Имя);
			Элементы.Удалить(Элементы["РостовскаяОбласть_ТаблицаВыгрузки" + РеквизитУдаления.Имя]);
		КонецЦикла;
		
		// Удаляем ранее добавленные реквизиты.
		ИзменитьРеквизиты(, УдаляемыеРеквизиты);
		
		ДобавляемыеРеквизитыТаблицыЗагрузки.Очистить();
		
	КонецЕсли;
	
	Для каждого ТекСтрока Из ТаблицаКодовУслугИзФайла Цикл
		
		КодУслуги = ТекСтрока.КодУслуги;
		
		Если DBFФайл.Поля.Найти("ROUT" + КодУслуги) <> Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("ROUT" + КодУслуги, Новый ОписаниеТипов("Булево"), "РостовскаяОбласть_ТаблицаВыгрузки", "ROUT" + КодУслуги, Ложь));
		КонецЕсли;
		
		Если DBFФайл.Поля.Найти("RIN" + КодУслуги) <> Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("RIN" + КодУслуги,  Новый ОписаниеТипов("Булево"), "РостовскаяОбласть_ТаблицаВыгрузки", "RIN"  + КодУслуги, Ложь));
		КонецЕсли;
		
		Если DBFФайл.Поля.Найти("SOUT" + КодУслуги) <> Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("SOUT" + КодУслуги, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(13, 2), "РостовскаяОбласть_ТаблицаВыгрузки", "SOUT" + КодУслуги, Ложь));
		КонецЕсли;
		
		Если DBFФайл.Поля.Найти("SIN" + КодУслуги) <> Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("SIN" + КодУслуги,  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(13, 2), "РостовскаяОбласть_ТаблицаВыгрузки", "SIN" + КодУслуги, Ложь));
		КонецЕсли;
		
		Если DBFФайл.Поля.Найти("TARIF" + КодУслуги) <> Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("TARIF" + КодУслуги,  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(12, 2), "РостовскаяОбласть_ТаблицаВыгрузки", "TARIF" + КодУслуги, Ложь));
		КонецЕсли;
		
	КонецЦикла;
	
	Если DBFФайл.Поля.Найти("RINXX") <> Неопределено Тогда
		ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("RINXX", Новый ОписаниеТипов("Булево"), "РостовскаяОбласть_ТаблицаВыгрузки", "RINXX", Ложь));
	КонецЕсли;
	
	Если DBFФайл.Поля.Найти("SINXX") <> Неопределено Тогда
		ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("SINXX", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(13, 2), "РостовскаяОбласть_ТаблицаВыгрузки", "SINXX", Ложь));
	КонецЕсли;
	
	Если DBFФайл.Поля.Найти("TARIFXX") <> Неопределено Тогда
		ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("TARIFXX", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(12, 2), "РостовскаяОбласть_ТаблицаВыгрузки", "TARIFXX", Ложь));
	КонецЕсли;
	
	Если DBFФайл.Поля.Найти("NOTE") <> Неопределено Тогда
		ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("NOTE", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(254), "РостовскаяОбласть_ТаблицаВыгрузки", "NOTE", Ложь));
	КонецЕсли;
	
	// Добавляем новые реквизиты.
	ИзменитьРеквизиты(ДобавляемыеРеквизитыТаблицыЗагрузки);
	
	// Создаем новые элементы формы.
	Для Каждого Колонка Из ДобавляемыеРеквизитыТаблицыЗагрузки Цикл 
		Элемент             = Элементы.Добавить("РостовскаяОбласть_ТаблицаВыгрузки" + Колонка.Имя, Тип("ПолеФормы"), Элементы.РостовскаяОбласть_ТаблицаВыгрузки);
		Элемент.Вид         = ВидПоляФормы.ПолеВвода;
		Элемент.Формат      = "ЧН=0";
		Элемент.ПутьКДанным = "РостовскаяОбласть_ТаблицаВыгрузки." + Колонка.Имя;
	КонецЦикла;
	
	// Сохраням массив добавляемых реквизитов.
	АдресДобавляемыеРеквизитыТаблицыЗагрузки = ПоместитьВоВременноеХранилище(ДобавляемыеРеквизитыТаблицыЗагрузки, Новый УникальныйИдентификатор);
	
КонецПроцедуры // ДобавитьРеквизитыВТаблицуЗагрузкиНаСервере()

&НаСервере
// Актуализирует таблицу настроек выгрузки.
//
Процедура АктуализироватьТаблицуНастроек()
	
	ТаблицаНастроек = Объект.РостовскаяОбласть_ТаблицаНастроек;
	ДобавленыСтрокиВТаблицуНастроек = Ложь;
	Для каждого ТекущаяСтрока Из ТаблицаКодовУслугИзФайла Цикл
		
		ПараметрыОтбора = Новый Структура("КодУслугиВОСЗН", ТекущаяСтрока.КодУслуги);
		МассивСовпадений = ТаблицаНастроек.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивСовпадений.Количество() = 0 Тогда
			
			ДобавленыСтрокиВТаблицуНастроек = Истина;
			
			НоваяСтрокаТаблицыНастроек = ТаблицаНастроек.Добавить();
			
			НоваяСтрокаТаблицыНастроек.КодУслугиВОСЗН              = ТекущаяСтрока.КодУслуги;
			НоваяСтрокаТаблицыНастроек.СпособОпределенияНачислений = ТекущаяСтрока.СпособОпределенияНачислений;
			
		Иначе
			
			Для каждого Элемент Из МассивСовпадений Цикл
				
				Если НЕ (Элемент.СпособОпределенияНачислений = ТекущаяСтрока.СпособОпределенияНачислений ИЛИ Элемент.СпособОпределенияНачислений = "Совокупный") Тогда
					
					Сообщить("Для услуги с кодом " + ТекущаяСтрока.КодУслуги + " способ определения начислений не соответствует установленному в файле загрузки!" + Символы.ПС
							 + "Возможно некорректное отражение начислений.");
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДобавленыСтрокиВТаблицуНастроек Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В файле загрузки обнаружены новые коды услуг! Просьба установить соответствия в таблице настроек.",
																,
																"ФормаКомандаНастройка");
		
	КонецЕсли;
	
КонецПроцедуры // АктуализироватьТаблицуНастроек()

&НаСервере
// Процедура предназначена для идентификации льготников из файла ОСЗН с жильцами из базы.
//
Процедура ПроизвестиИдентификациюЛицевыхСчетов(ТаблицаДляЗагрузки)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	Запрос.УстановитьПараметр("ТаблицаДляЗагрузки", ТаблицаДляЗагрузки);
	Запрос.УстановитьПараметр("ДатаКонца",          КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("Организация",        Объект.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Наименование КАК НаименованиеЛС,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Идентификатор КАК ИдентификаторЛС
	|ПОМЕСТИТЬ втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&ДатаКонца, Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних";
	
	Запрос.Выполнить();
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией.Здание КАК Объект
	|ИЗ
	|	втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией КАК втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией.ЛицевойСчет,
	|	втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией.НаименованиеЛС,
	|	втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией.ИдентификаторЛС,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Город, """") КАК Город,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ втКонтактнаяИнформация.Город = """"
	|				ТОГДА втКонтактнаяИнформация.Город
	|			КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
	|				ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|			ИНАЧЕ втКонтактнаяИнформация.Регион
	|		КОНЕЦ, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус,
	|	втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией.ЛицевойСчет.Адрес.Код КАК Квартира,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(6)) КАК КвартираСтрокой
	|ИЗ
	|	втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией КАК втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией.Здание = втКонтактнаяИнформация.Объект";
	
	ТаблицаЛицевыхСчетовИзБазы = Запрос.Выполнить().Выгрузить();
	
	ИсключитьАдресныеСокращения(ТаблицаЛицевыхСчетовИзБазы, 2);
	
	// Идентификация льготников из файла загрузки с данными из информационной базы.
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТаблицаЛицевыхСчетовИзБазы", ТаблицаЛицевыхСчетовИзБазы);
	Запрос.УстановитьПараметр("ТаблицаДляЗагрузки",         ТаблицаДляЗагрузки);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЛицевыхСчетовИзБазы.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаЛицевыхСчетовИзБазы.НаименованиеЛС КАК НаименованиеЛС,
	|	ТаблицаЛицевыхСчетовИзБазы.ИдентификаторЛС КАК ИдентификаторЛС,
	|	ТаблицаЛицевыхСчетовИзБазы.Город КАК Город,
	|	ТаблицаЛицевыхСчетовИзБазы.НаселенныйПункт КАК НаселенныйПункт,
	|	ТаблицаЛицевыхСчетовИзБазы.Улица КАК Улица,
	|	ТаблицаЛицевыхСчетовИзБазы.Дом КАК Дом,
	|	ТаблицаЛицевыхСчетовИзБазы.Корпус КАК Корпус,
	|	ТаблицаЛицевыхСчетовИзБазы.КвартираСтрокой КАК КвартираСтрокой
	|ПОМЕСТИТЬ втЛицевыхСчетовИзБазы
	|ИЗ
	|	&ТаблицаЛицевыхСчетовИзБазы КАК ТаблицаЛицевыхСчетовИзБазы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДляЗагрузки.ACCOUNT КАК ACCOUNT,
	|	ТаблицаДляЗагрузки.KNASP КАК KNASP,
	|	ТаблицаДляЗагрузки.KYLIC КАК KYLIC,
	|	ТаблицаДляЗагрузки.NDOM КАК NDOM,
	|	ТаблицаДляЗагрузки.NKORP КАК NKORP,
	|	ТаблицаДляЗагрузки.NKW КАК NKW,
	|	ТаблицаДляЗагрузки.НаселенныйПункт КАК НаселенныйПункт,
	|	ТаблицаДляЗагрузки.НаименованиеУлицы КАК НаименованиеУлицы
	|ПОМЕСТИТЬ втДанныеИзФайла
	|ИЗ
	|	&ТаблицаДляЗагрузки КАК ТаблицаДляЗагрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыхСчетовИзБазы.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛицевыхСчетовИзБазы.НаименованиеЛС КАК НаименованиеЛС,
	|	втЛицевыхСчетовИзБазы.ИдентификаторЛС КАК ИдентификаторЛС,
	|	втЛицевыхСчетовИзБазы.Город КАК Город,
	|	втЛицевыхСчетовИзБазы.НаселенныйПункт КАК НаселенныйПункт,
	|	втЛицевыхСчетовИзБазы.Улица КАК Улица,
	|	втЛицевыхСчетовИзБазы.Дом КАК Дом,
	|	втЛицевыхСчетовИзБазы.Корпус КАК Корпус,
	|	втДанныеИзФайла.ACCOUNT КАК ACCOUNT,
	|	втДанныеИзФайла.NKW КАК NKW
	|ИЗ
	|	втДанныеИзФайла КАК втДанныеИзФайла
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЛицевыхСчетовИзБазы КАК втЛицевыхСчетовИзБазы
	// Пока отключили идентификацию по полю "ACCOUNT", т.к. данное поле в основном не соответствует данным в базе.
	//|		ПО (втДанныеИзФайла.ACCOUNT = втЛицевыхСчетовИзБазы.НаименованиеЛС
	//|				ИЛИ втДанныеИзФайла.ACCOUNT = втЛицевыхСчетовИзБазы.ИдентификаторЛС
	|				ПО (втДанныеИзФайла.НаселенныйПункт = втЛицевыхСчетовИзБазы.НаселенныйПункт
	|					И втДанныеИзФайла.НаименованиеУлицы = втЛицевыхСчетовИзБазы.Улица
	|					И (ВЫБОР
	|							КОГДА втДанныеИзФайла.NKORP = """"
	|								ТОГДА втДанныеИзФайла.NDOM = втЛицевыхСчетовИзБазы.Дом
	|							ИНАЧЕ (втДанныеИзФайла.NDOM + ""/"" + втДанныеИзФайла.NKORP) = втЛицевыхСчетовИзБазы.Дом
	|						КОНЕЦ)
	|					И втДанныеИзФайла.NKW = втЛицевыхСчетовИзБазы.КвартираСтрокой)";
	
	ТаблицаИдентифицированныхЛьготников = Запрос.Выполнить().Выгрузить();
	
	ОтборПоАдресу = Новый Структура("НаселенныйПункт, Улица, Дом, Корпус, NKW");
	
	Для каждого ТекСтрока Из ТаблицаДляЗагрузки Цикл
		
		НайденныйЛС = ТаблицаИдентифицированныхЛьготников.Найти(ТекСтрока.ACCOUNT, "ACCOUNT");
		Если НайденныйЛС = Неопределено Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Лицевой счет " + ТекСтрока.ACCOUNT + " в базе не идентифицирован!");
		Иначе
			ТекСтрока.СоответствующийЛицевойСчет = НайденныйЛС.ЛицевойСчет;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроизвестиИдентификациюЛицевыхСчетов()

&НаСервереБезКонтекста
// Процедура предназначена для исключения из наименования здания и улицы,
// на которой расположены выгружаемые здания, адресных сокращений.
//
Процедура ИсключитьАдресныеСокращения(ТаблицаДляЗагрузки, НаборПолейДляСокращения)
	
	МассивСокращенийНасПунктов = Новый Массив();
	МассивСокращенийНасПунктов.Добавить("г");
	МассивСокращенийНасПунктов.Добавить("г.");
	МассивСокращенийНасПунктов.Добавить("пгт");
	МассивСокращенийНасПунктов.Добавить("пгт.");
	МассивСокращенийНасПунктов.Добавить("д");
	МассивСокращенийНасПунктов.Добавить("д.");
	МассивСокращенийНасПунктов.Добавить("п");
	МассивСокращенийНасПунктов.Добавить("п.");
	МассивСокращенийНасПунктов.Добавить("ст");
	МассивСокращенийНасПунктов.Добавить("ст.");
	
	МассивСокращенийУлиц = Новый Массив();
	МассивСокращенийУлиц.Добавить("ул");
	МассивСокращенийУлиц.Добавить("ул.");
	МассивСокращенийУлиц.Добавить("пер");
	МассивСокращенийУлиц.Добавить("пер.");
	МассивСокращенийУлиц.Добавить("пр-кт");
	МассивСокращенийУлиц.Добавить("проезд");
	МассивСокращенийУлиц.Добавить("б-р");
	МассивСокращенийУлиц.Добавить("б.");
	МассивСокращенийУлиц.Добавить("пл");
	МассивСокращенийУлиц.Добавить("пл.");
	МассивСокращенийУлиц.Добавить("парк");
	МассивСокращенийУлиц.Добавить("сквер");
	
	Для Каждого ТекСтрока ИЗ ТаблицаДляЗагрузки Цикл
		
		Если НаборПолейДляСокращения = 1 Тогда
			
			ТекСтрока.НаселенныйПункт   = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.KNASP), МассивСокращенийНасПунктов);
			ТекСтрока.НаименованиеУлицы = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.KYLIC), МассивСокращенийУлиц);
			
		Иначе
			
			ТекСтрока.НаселенныйПункт = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.НаселенныйПункт), МассивСокращенийНасПунктов);
			ТекСтрока.Город           = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.Город),           МассивСокращенийНасПунктов);
			ТекСтрока.Улица           = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.Улица),           МассивСокращенийУлиц);
			ТекСтрока.КвартираСтрокой = Строка(ТекСтрока.Квартира);
			ТекСтрока.НаименованиеЛС  = НомерЛицевогоСчета(ТекСтрока.НаименованиеЛС);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ИсключитьАдресныеСокращения()

&НаСервереБезКонтекста
// Функция сокращает название города или улицы: убирает сокращения,
// определяющие тип данного элемента адреса: "г.", "ул." и так далее.
//
// Параметры:
//  Ресурс       - Строка - элемент адреса
//
// Возвращаемое значение:
//  Строка - элемент адреса в сокращенном виде
//
Функция НормализацияПолейАдресаОбласти(Ресурс, Массив)
	
	Найден = Истина;
	
	Для Каждого Элемент Из Массив Цикл
		
		Если Прав(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			ПредСимвол = Сред(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент), 1);
			
			Если ПредСимвол = " " Тогда
				Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент)));
			КонецЕсли;
		ИначеЕсли Лев(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			СледСимвол = Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1, 1);
			
			Если СледСимвол = " " Тогда
				Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1));
			КонецЕсли;
		Иначе
			
			Найден = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Найден = Ложь Тогда
		Возврат Ресурс;
	КонецЕсли;
	
КонецФункции // НормализацияПолейАдресаОбласти()

&НаКлиенте
// Процедура предназначена для проверка заполнения элементов формы.
//
Функция ЕстьОшибкиЗаполненияПолейФормы()
	
	ЕстьОшибки = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан период выгрузки!");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указана организация, по которой будут выгружены данные!");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции // ЕстьОшибкиЗаполненияПолейФормы()

&НаСервере
// Процедура предназначена для заполнения в табличной части сведениями о суммах начислений.
//
Процедура ЗаполнитьСведенияОНачисленияхИОплатахНаСервере()
	
	ТаблицаДанных = ПолучитьТаблицуДанных();
	
	ТаблицаНачислений = ПолучитьТаблицуНачислений(ТаблицаДанных);
	
	ОтборНачислений = Новый Структура;
	ОтборНачислений.Вставить("ЛицевойСчет");
	
	Для каждого ТекущаяСтрока Из РостовскаяОбласть_ТаблицаВыгрузки Цикл
		
		Если ТекущаяСтрока.СоответствующийЛицевойСчет.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборНачислений.ЛицевойСчет = ТекущаяСтрока.СоответствующийЛицевойСчет;
		
		СтрокиСНачислениямиПоТекущемуЛС = ТаблицаНачислений.Скопировать(ОтборНачислений);
		
		Если СтрокиСНачислениямиПоТекущемуЛС.Количество() > 0 Тогда
			
			// Установим две переменные для получения сумм по индивидуальным и общедомовым начислениям.
			СуммаИндивидуальныхНачисленийПоЛС = 0;
			СуммаОбщедомовыхНачисленийПоЛС    = 0;
			
			// Получим дату задолженности.
			Если Не СтрокиСНачислениямиПоТекущемуЛС[0].МесяцНачисления = Дата(1,1,1) Тогда
				ТекущаяСтрока.MONTHDBT = КонецМесяца(СтрокиСНачислениямиПоТекущемуЛС[0].МесяцНачисления) + 1;
			КонецЕсли;
			
			// Заполним соответствующие поля по начислениям.
			Для каждого СтрокаНачислений Из СтрокиСНачислениямиПоТекущемуЛС Цикл
				
				СуммаНачисленийПоУслуге = 0;
				
				Если ТекущаяСтрока.Свойство("SIN" + СтрокаНачислений.КодУслугиВОСЗН) Тогда
					
					// Заполним значение суммы начислений для индивидуального способа определения начислений.
					Если СтрокаНачислений.СпособОпределенияНачислений = "Индивидуальный"
					 ИЛИ СтрокаНачислений.СпособОпределенияНачислений = "Совокупный" Тогда
						СуммаНачисленийПоУслуге = СтрокаНачислений.СуммаНачисленияИнд;
					КонецЕсли;
					
					ТекущаяСтрока["SIN" + СтрокаНачислений.КодУслугиВОСЗН] = СуммаНачисленийПоУслуге;
					Если ТекущаяСтрока.Свойство("TARIF" + СтрокаНачислений.КодУслугиВОСЗН) Тогда
						ТекущаяСтрока["TARIF" + СтрокаНачислений.КодУслугиВОСЗН] = СтрокаНачислений.Тариф;
					КонецЕсли;
					
					// Установим значение поля RIN соответствующего кода услуги в ОСЗН в "ИСТИНУ"
					// и добавим сумму в итог по индивидуальным начислениям, в случае, если сумма
					// индивидуального начисления не равна нулю.
					Если СуммаНачисленийПоУслуге > 0 Тогда
						ТекущаяСтрока["RIN" + СтрокаНачислений.КодУслугиВОСЗН] = Истина;
						СуммаИндивидуальныхНачисленийПоЛС = СуммаИндивидуальныхНачисленийПоЛС + СуммаНачисленийПоУслуге;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ТекущаяСтрока.Свойство("SOUT" + СтрокаНачислений.КодУслугиВОСЗН) Тогда
					
					// Заполним значение суммы начислений для индивидуального способа определения начислений.
					Если СтрокаНачислений.СпособОпределенияНачислений = "Общедомовой"
					 ИЛИ СтрокаНачислений.СпособОпределенияНачислений = "Совокупный" Тогда
						СуммаНачисленийПоУслуге = СтрокаНачислений.СуммаНачисленияОДН;
					КонецЕсли;
					
					ТекущаяСтрока["SOUT" + СтрокаНачислений.КодУслугиВОСЗН] = СуммаНачисленийПоУслуге;
					Если ТекущаяСтрока.Свойство("TARIF" + СтрокаНачислений.КодУслугиВОСЗН) Тогда
						ТекущаяСтрока["TARIF" + СтрокаНачислений.КодУслугиВОСЗН] = СтрокаНачислений.Тариф;
					КонецЕсли;
					
					// Установим значение поля ROUT соответствующего кода услуги в ОСЗН в "Истину"
					// и добавим сумму в итог по общедомовым начислениям, в случае, если сумма
					// общедомового начисления не равна нулю.
					Если СуммаНачисленийПоУслуге > 0 Тогда
						ТекущаяСтрока["ROUT" + СтрокаНачислений.КодУслугиВОСЗН] = Истина;
						СуммаОбщедомовыхНачисленийПоЛС = СуммаОбщедомовыхНачисленийПоЛС + СуммаНачисленийПоУслуге;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Перенесем полученные суммы в соответствующие поля.
			ТекущаяСтрока.SUMFIN  = СуммаИндивидуальныхНачисленийПоЛС;
			ТекущаяСтрока.SUMFOUT = СуммаОбщедомовыхНачисленийПоЛС;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСведенияОНачисленияхИОплатахНаСервере()

&НаСервере
// Подготавливает таблицу с идентифицированными лицевыми счетами.
//
Функция ПолучитьТаблицуДанных()
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ЛицевойСчет",                 Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаДанных.Колонки.Добавить("КодУслугиВОСЗН",              УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(4));
	ТаблицаДанных.Колонки.Добавить("СпособОпределенияНачислений", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(0));
	
	Для Каждого ТекКодУслуги Из ТаблицаКодовУслугИзФайла Цикл
		
		Для Каждого ТекСтрока Из РостовскаяОбласть_ТаблицаВыгрузки Цикл
			
			Если НЕ ТекСтрока.СоответствующийЛицевойСчет.Пустая() Тогда
				
				НоваяСтрока = ТаблицаДанных.Добавить();
				
				НоваяСтрока.ЛицевойСчет                 = ТекСтрока.СоответствующийЛицевойСчет;
				НоваяСтрока.КодУслугиВОСЗН              = ТекКодУслуги.КодУслуги;
				НоваяСтрока.СпособОпределенияНачислений = ТекКодУслуги.СпособОпределенияНачислений;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции // ПолучитьТаблицуДанных()

&НаСервере
// Возвращает таблицу начислений.
//
Функция ПолучитьТаблицуНачислений(ТаблицаДанных)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода",            НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("КонецПериода",             КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("Организация",              Объект.Организация);
	Запрос.УстановитьПараметр("ТаблицаУслуг",             Объект.РостовскаяОбласть_УслугиВБазе.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаДанных",            ТаблицаДанных);
	Запрос.УстановитьПараметр("СписокВидовНачисления",    ПолучитьСписокДоступныхВидовНачислений());
	Запрос.УстановитьПараметр("СписокВидовНачисленияОДН", ПолучитьСписокДоступныхВидовНачислений("ОДН"));
	Запрос.УстановитьПараметр("СписокВидовНачисленияИнд", ПолучитьСписокДоступныхВидовНачислений("Инд"));
	Запрос.УстановитьПараметр("СписокРазделовУчета",      ПолучитьСписокИсключаемыхРазделовУчета());
	Запрос.УстановитьПараметр("ТекущийМесяц",             НачалоДня(КонецМесяца(Объект.Период)));
	
	// Подготовить список услуг "ИНД", "ОДН" и "Совокупных".
	Запрос.УстановитьПараметр("УслугиИндивидуальные", СформироватьСписокУслугПоСпособуОпределенияНачислений("Индивидуальный"));
	Запрос.УстановитьПараметр("УслугиОбщедомовые",    СформироватьСписокУслугПоСпособуОпределенияНачислений("Общедомовой"));
	Запрос.УстановитьПараметр("УслугиСовокупные",     СформироватьСписокУслугПоСпособуОпределенияНачислений("Совокупный"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанных.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаДанных.КодУслугиВОСЗН КАК КодУслугиВОСЗН,
	|	ТаблицаДанных.СпособОпределенияНачислений КАК СпособОпределенияНачислений
	|ПОМЕСТИТЬ втДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуг.УслугаВБазе КАК Услуга,
	|	ТаблицаУслуг.КодУслугиВОСЗН КАК КодУслугиВОСЗН,
	|	ТаблицаУслуг.СпособОпределенияНачислений КАК СпособОпределенияНачислений
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	&ТаблицаУслуг КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	МИНИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления) КАК МесяцНачисления
	|ПОМЕСТИТЬ втДанныеПоСрокамВозникновенияЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&КонецПериода,
	|			МесяцНачисления <> &ТекущийМесяц
	|				И Организация = &Организация
	|				И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДанных.ЛицевойСчет
	|					ИЗ
	|						втДанных КАК втДанных)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втУслуги.Услуга
	|					ИЗ
	|						втУслуги КАК втУслуги)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанных.ЛицевойСчет КАК ЛицевойСчет,
	|	втДанных.КодУслугиВОСЗН КАК КодУслугиВОСЗН,
	|	втДанных.СпособОпределенияНачислений КАК СпособОпределенияНачислений,
	|	ЕСТЬNULL(втДанныеПоСрокамВозникновенияЗадолженности.МесяцНачисления, ДАТАВРЕМЯ(1, 1, 1)) КАК МесяцНачисления
	|ПОМЕСТИТЬ втДанныеПоЛС
	|ИЗ
	|	втДанных КАК втДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеПоСрокамВозникновенияЗадолженности КАК втДанныеПоСрокамВозникновенияЗадолженности
	|		ПО втДанных.ЛицевойСчет = втДанныеПоСрокамВозникновенияЗадолженности.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеПоЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	втУслуги.Услуга КАК Услуга,
	|	втДанныеПоЛС.КодУслугиВОСЗН КАК КодУслугиВОСЗН,
	|	втДанныеПоЛС.МесяцНачисления КАК МесяцНачисления,
	|	втУслуги.СпособОпределенияНачислений КАК СпособОпределенияНачислений
	|ПОМЕСТИТЬ втЛьготникиСУслугами
	|ИЗ
	|	втДанныеПоЛС КАК втДанныеПоЛС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втУслуги КАК втУслуги
	|		ПО втДанныеПоЛС.КодУслугиВОСЗН = втУслуги.КодУслугиВОСЗН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
	|	СУММА(ЕСТЬNULL(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот, 0)) КАК СуммаНачисления,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.Услуга В (&УслугиОбщедомовые)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			КОГДА УПЖКХ_НачисленияОбороты.Услуга В (&УслугиСовокупные)
	|					И УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОДН,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.Услуга В (&УслугиИндивидуальные)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			КОГДА УПЖКХ_НачисленияОбороты.Услуга В (&УслугиСовокупные)
	|					И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаИнд,
	|	УПЖКХ_НачисленияОбороты.Тариф КАК Тариф
	|ПОМЕСТИТЬ втНачисленийВМесяцеВыгрузки
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И НЕ РазделУчета В (&СписокРазделовУчета)
	|				И ВидНачисления В (&СписокВидовНачисления)) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Тариф
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛьготникиСУслугами.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛьготникиСУслугами.КодУслугиВОСЗН КАК КодУслугиВОСЗН,
	|	втЛьготникиСУслугами.МесяцНачисления КАК МесяцНачисления,
	|	втЛьготникиСУслугами.СпособОпределенияНачислений КАК СпособОпределенияНачислений,
	|	МАКСИМУМ(ЕСТЬNULL(втНачисленийВМесяцеВыгрузки.Тариф, 0)) КАК Тариф,
	|	СУММА(ЕСТЬNULL(втНачисленийВМесяцеВыгрузки.СуммаНачисления, 0)) КАК СуммаНачисления,
	|	СУММА(ЕСТЬNULL(втНачисленийВМесяцеВыгрузки.СуммаОДН, 0)) КАК СуммаНачисленияОДН,
	|	СУММА(ЕСТЬNULL(втНачисленийВМесяцеВыгрузки.СуммаИнд, 0)) КАК СуммаНачисленияИнд
	|ИЗ
	|	втЛьготникиСУслугами КАК втЛьготникиСУслугами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленийВМесяцеВыгрузки КАК втНачисленийВМесяцеВыгрузки
	|		ПО втЛьготникиСУслугами.ЛицевойСчет = втНачисленийВМесяцеВыгрузки.ЛицевойСчет
	|			И втЛьготникиСУслугами.Услуга = втНачисленийВМесяцеВыгрузки.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛьготникиСУслугами.ЛицевойСчет,
	|	втЛьготникиСУслугами.КодУслугиВОСЗН,
	|	втЛьготникиСУслугами.МесяцНачисления,
	|	втЛьготникиСУслугами.СпособОпределенияНачислений";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ТаблицаНачислений = Результат.Скопировать();
	ТаблицаНачислений.Свернуть("ЛицевойСчет, КодУслугиВОСЗН, СпособОпределенияНачислений, МесяцНачисления", "СуммаНачисления, СуммаНачисленияОДН, СуммаНачисленияИнд");
	
	Возврат ТаблицаНачислений;
	
КонецФункции // ПолучитьТаблицуНачислений()

&НаСервереБезКонтекста
// Получает список разделов учета, не используемых для получения данных.
//
Функция ПолучитьСписокИсключаемыхРазделовУчета()
	
	СписокРазделовУчета = Новый СписокЗначений;
	
	СписокРазделовУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.Пени);
	СписокРазделовУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.Льготы);
	
	Возврат СписокРазделовУчета;
	
КонецФункции

&НаСервереБезКонтекста
// Получает список видов начислений, необходимый для запроса.
//
Функция ПолучитьСписокДоступныхВидовНачислений(ПризнакУчета = Неопределено)
	
	СписокВидовНачислений = Новый СписокЗначений;
	
	Если ПризнакУчета = "Инд" ИЛИ ПризнакУчета = Неопределено Тогда
		
		СписокВидовНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.Начисление);
		СписокВидовНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПоИПУ);
		СписокВидовНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу);
		СписокВидовНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу);
		
		СписокВидовНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента);
		
		СписокВидовНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему);
		СписокВидовНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему);
		
		СписокВидовНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.ФактическиеЗатраты);
		СписокВидовНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.СервисныеУслуги);
	КонецЕсли;
	
	Если ПризнакУчета = "ОДН" ИЛИ ПризнакУчета = Неопределено Тогда
		
		СписокВидовНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПоОПУ);
		
	КонецЕсли;
	
	Возврат СписокВидовНачислений;
	
КонецФункции

&НаСервере
// Получаем список услуг с переданными способом определения начислений.
//
Функция СформироватьСписокУслугПоСпособуОпределенияНачислений(СпособОпределенияНачислений)
	
	СписокУслуг = Новый СписокЗначений;
	
	ОтборУслуг = Новый Структура("СпособОпределенияНачислений", СпособОпределенияНачислений);
	НайденныеСтроки = Объект.РостовскаяОбласть_УслугиВБазе.НайтиСтроки(ОтборУслуг);
	Для каждого ТекСтрока Из НайденныеСтроки Цикл
		СписокУслуг.Добавить(ТекСтрока.УслугаВБазе);
	КонецЦикла;
	
	Возврат СписокУслуг;
	
КонецФункции // СформироватьСписокУслугПоСпособуОпределенияНачислений()

&НаСервере
// Формирует массив структур, состоящих из параметров для записи полей выгружаемого DBF-файла.
//
// Возвращаемое значение:
//  МассивСтруктурКолонок - Массив - массив структур. 
//
Функция ПолучитьКолонкиDBF()
	
	ТаблицаДляВыгрузки = РеквизитФормыВЗначение("РостовскаяОбласть_ТаблицаВыгрузки");
	
	МассивСтруктурКолонок = Новый Массив;
	
	Для Каждого Колонка Из ТаблицаДляВыгрузки.Колонки Цикл
		
		Если НЕ (Колонка.Имя = "СоответствующийЛицевойСчет"
			ИЛИ  Колонка.Имя = "НаселенныйПункт"
			ИЛИ  Колонка.Имя = "НаименованиеУлицы") Тогда
			
			// Элемент массива - данные N-ой строки.
			Структура = Новый Структура;
			Структура.Вставить("Имя", Колонка.Имя);
			
			Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
				
				Структура.Вставить("Тип",                     "N");
				Структура.Вставить("РазрядностьЦелойЧасти",   Колонка.ТипЗначения.КвалификаторыЧисла.Разрядность - Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти);
				Структура.Вставить("РазрядностьДробнойЧасти", Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти);
				
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
				
				Структура.Вставить("Тип",   "S");
				Структура.Вставить("Длина", Колонка.ТипЗначения.КвалификаторыСтроки.Длина);
				
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				
				Структура.Вставить("Тип",       "D");
				Структура.Вставить("ЧастиДаты", Колонка.ТипЗначения.КвалификаторыДаты.ЧастиДаты);
				
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Булево")) Тогда
				
				Структура.Вставить("Тип", "L");
				
			КонецЕсли;
			
			МассивСтруктурКолонок.Добавить(Структура);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаДляВыгрузки, "РостовскаяОбласть_ТаблицаВыгрузки");
	
	Возврат МассивСтруктурКолонок;
	
КонецФункции // ПолучитьКолонкиDBF()

#КонецОбласти