
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ТаблицаНастроекОтчета.Количество() > 0 Тогда
		РасположитьЭлементыФормыПоПараметрамНастройки();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)	
		
	Если ТаблицаНастроекОтчета.Количество() > 0 Тогда
		РасположитьЭлементыФормыПоПараметрамНастройки();
	Иначе
		НастройкиОтчетаПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры


#Область КомандыФормы

&НаСервере
Процедура ОбновитьОтчетНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДатаОтчета) Тогда
		мТекущаяДата = Объект.ДатаОтчета;
	Иначе
		мТекущаяДата = ТекущаяДата();
	КонецЕсли;

	ЗаполнитьТаблицуПериодов();
	ТаблицаРасшифровок.Очистить();
	
	Если ТаблицаНастроекОтчета.НайтиСтроки(Новый Структура("ИдентификаторОтчета","ДиаграммаРаботающиеСотрудники"))[0].Выводить Тогда
		ЗаполнитьДиаграммаРаботающиеСотрудники();
	КонецЕсли;
		
	Если ТаблицаНастроекОтчета.НайтиСтроки(Новый Структура("ИдентификаторОтчета","ДиаграммаТекущийСтатусРаботающихСотрудников"))[0].Выводить Тогда
		ЗаполнитьДиаграммаТекущийСтатусРаботающихСотрудников();
	КонецЕсли;
		
	Если ТаблицаНастроекОтчета.НайтиСтроки(Новый Структура("ИдентификаторОтчета","ДиаграммаДоступностьРаботающихСотрудников"))[0].Выводить Тогда
		ЗаполнитьДиаграммаДоступностьРаботающихСотрудников();
	КонецЕсли;
	
	Если ТаблицаНастроекОтчета.НайтиСтроки(Новый Структура("ИдентификаторОтчета","ДиаграммаТекущийСтатусЗадачНаСегодня"))[0].Выводить Тогда
		ЗаполнитьДиаграммаТекущийСтатусЗадачНаСегодня();
	КонецЕсли;
	
	Если ТаблицаНастроекОтчета.НайтиСтроки(Новый Структура("ИдентификаторОтчета","ДиаграммаОпозданияПоЗадачам"))[0].Выводить Тогда
		ЗаполнитьДиаграммаОпозданияПоЗадачам();
	КонецЕсли;
		
	Если ТаблицаНастроекОтчета.НайтиСтроки(Новый Структура("ИдентификаторОтчета","ДиаграммаПричиныЗавершенияЗадач"))[0].Выводить Тогда
		ЗаполнитьДиаграммаПричиныЗавершенияЗадач();
	КонецЕсли;
	
	Если ТаблицаНастроекОтчета.НайтиСтроки(Новый Структура("ИдентификаторОтчета","ДиаграммаСредниеЗатратыВремениНаВыполнениеЗаявок"))[0].Выводить Тогда
		ЗаполнитьДиаграммаСредниеЗатратыВремениНаВыполнениеЗаявок();
	КонецЕсли;
		
	Если ТаблицаНастроекОтчета.НайтиСтроки(Новый Структура("ИдентификаторОтчета","ДиаграммаАнализСроковВыполненияЗаявок"))[0].Выводить Тогда
		ЗаполнитьДиаграммаАнализСроковВыполненияЗаявок();
	КонецЕсли;
	
	
	Если ТаблицаНастроекОтчета.НайтиСтроки(Новый Структура("ИдентификаторОтчета","ДиаграммаАнализСроковРеакцииПоЗаявкам"))[0].Выводить Тогда
		ЗаполнитьДиаграммаАнализСроковРеакцииПоЗаявкам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтчет(Команда)
		
	ОбновитьОтчетНаСервере();
	
КонецПроцедуры

#КонецОбласти


#Область ДиаграммаРаботающиеСотрудники

&НаСервере
Процедура ЗаполнитьДиаграммаРаботающиеСотрудники()
	
	НаименованиеДиаграммы = "ДиаграммаРаботающиеСотрудники";
	ТекущаяДиаграмма = ЭтотОбъект[НаименованиеДиаграммы];
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	атл_ДетальныйГрафикРаботыСотрудников.Сотрудник
	               |ПОМЕСТИТЬ СписокРаботающихСейчасПоГрафикуСотрудников
	               |ИЗ
	               |	РегистрСведений.атл_ДетальныйГрафикРаботыСотрудников КАК атл_ДетальныйГрафикРаботыСотрудников
	               |ГДЕ
	               |	&ТекущаяДата МЕЖДУ атл_ДетальныйГрафикРаботыСотрудников.ВремяНачала И атл_ДетальныйГрафикРаботыСотрудников.ВремяОкончания
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	атл_НастройкиПодключенияМобильныхСотрудников.Пользователь КАК Пользователь
	               |ПОМЕСТИТЬ ПользователиМК
	               |ИЗ
	               |	РегистрСведений.атл_НастройкиПодключенияМобильныхСотрудников КАК атл_НастройкиПодключенияМобильныхСотрудников
	               |ГДЕ
	               |	атл_НастройкиПодключенияМобильныхСотрудников.ЯвляетсяПользователемМК = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ВЫБОР
	               |			КОГДА СписокРаботающихСейчасПоГрафикуСотрудников.Сотрудник ЕСТЬ NULL
	               |				ТОГДА 0
	               |			ИНАЧЕ 1
	               |		КОНЕЦ) КАК Работает,
	               |	СУММА(1) КАК Всего
	               |ПОМЕСТИТЬ ИтогиПоКоличеству
	               |ИЗ
	               |	ПользователиМК КАК ПользователиМК
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СписокРаботающихСейчасПоГрафикуСотрудников КАК СписокРаботающихСейчасПоГрафикуСотрудников
	               |		ПО ПользователиМК.Пользователь = СписокРаботающихСейчасПоГрафикуСотрудников.Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ИтогиПоКоличеству.Работает, 0) КАК Работает,
	               |	ЕСТЬNULL(ИтогиПоКоличеству.Всего, 0) КАК Всего
	               |ИЗ
	               |	ИтогиПоКоличеству КАК ИтогиПоКоличеству" ;
	
	Запрос.УстановитьПараметр("ТекущаяДата", мТекущаяДата);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();	
	
	ВыполнитьНачальнуюНастройкуДиаграммы(НаименованиеДиаграммы);	

	Если Выборка.Количество() > 0 Тогда
		
		Выборка.Следующий();
		
		ВыполнитьНачальнуюНастройкуДиаграммы(НаименованиеДиаграммы);
		
		ДобавитьСтрокуВТаблицуРасшифровок(НаименованиеДиаграммы, "Всего", "Всего", Выборка.Всего, Истина);
		
		ТекущаяДиаграмма.Серии.Добавить("Работает");
		ТекущаяДиаграмма.Серии[0].Цвет = Новый Цвет(144,238,144);
		
		ТекущаяДиаграмма.Серии.Добавить("Не работает");
		ТекущаяДиаграмма.Серии[1].Цвет = Новый Цвет(250,128,114);
		
		СтруктураДополнительныхПараметров = Новый Структура;
		СтруктураДополнительныхПараметров.Вставить("СтатусРаботы", 1); //работает
		Точка = ТекущаяДиаграмма.УстановитьТочку("1");
		ТекущаяДиаграмма.УстановитьЗначение(Точка, ТекущаяДиаграмма.Серии[0], Выборка.Работает, СтруктураДополнительныхПараметров, "Работает");
		
		ДобавитьСтрокуВТаблицуРасшифровок(НаименованиеДиаграммы, "Работает", "Работает", Выборка.Работает, ,ТекущаяДиаграмма.Серии[0].Цвет);
		
		СтруктураДополнительныхПараметров = Новый Структура;
		СтруктураДополнительныхПараметров.Вставить("СтатусРаботы", 2); //НЕ работает
		Точка = ТекущаяДиаграмма.УстановитьТочку("1");
		ТекущаяДиаграмма.УстановитьЗначение(Точка, ТекущаяДиаграмма.Серии[1], Выборка.Всего - Выборка.Работает, СтруктураДополнительныхПараметров, "Не работает");
		
		ДобавитьСтрокуВТаблицуРасшифровок(НаименованиеДиаграммы, "Не работает", "Не работает", Выборка.Всего - Выборка.Работает, ,ТекущаяДиаграмма.Серии[1].Цвет);
		
	КонецЕсли;
	
	ВыполнитьКонечнуюНастройкуДиаграммы(НаименованиеДиаграммы);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаРаботающиеСотрудникиВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОтркытьФормуРасшифровокОтчета("ДиаграммаРаботающиеСотрудники");
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРасшифровкуПоДиаграммеРаботающиеСотрудники(СтатусРаботы)  
	
	КомпоновщикНастроекКомпоновкиДанных = ПолучитьКомпоновщикНастроекДиаграммаРаботающиеСотрудники(СтатусРаботы);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", );
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", КомпоновщикНастроекКомпоновкиДанных); 

	ОткрытьФорму("Отчет.атл_РаботающиеМобильныеСотрудники.Форма", ПараметрыФормы);

КонецПроцедуры

&НаСервере
Функция ПолучитьКомпоновщикНастроекДиаграммаРаботающиеСотрудники(СтатусРаботы)
	
	Если СтатусРаботы = "Всего" Тогда
		СтатусРаботы = Новый СписокЗначений;
		СтатусРаботы.Добавить("Все");		
	КонецЕсли;
	
	мОбработка = Отчеты.атл_РаботающиеМобильныеСотрудники.Создать();			
	СхемаКомпоновкиДанных = мОбработка.СхемаКомпоновкиДанных;
    НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;                  

    флСтатус = Ложь;
	флДата = Ложь;
	н = 0;
	
	ПараметрыДанных = НастройкиКомпоновки.ПараметрыДанных.Элементы;
	Пока (флСтатус = Ложь ИЛИ флДата = Ложь) И н < ПараметрыДанных.Количество() Цикл
	    текПараметр = ПараметрыДанных[н];
	    Если текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("СписокСтатусовРаботы") Тогда
	        флСтатус = Истина;
			текПараметр.Значение = СтатусРаботы;
			текПараметр.Использование = Истина;
		ИначеЕсли текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ТекущаяДата") Тогда
	        флДата = Истина;
			текПараметр.Значение = Объект.ДатаОтчета;
			текПараметр.Использование = Истина;
	    КонецЕсли;
	    н = н + 1;
	КонецЦикла;
	
	Если флСтатус = Ложь Тогда                           
	    НовыйПараметр = ПараметрыДанных.Добавить();
	    НовыйПараметр.Параметр = Новый ПараметрКомпоновкиДанных("СписокСтатусовРаботы");
		НовыйПараметр.Значение = СтатусРаботы;
		НовыйПараметр.Использование = Истина;
	КонецЕсли;
	
	Если флДата = Ложь Тогда                           
	    НовыйПараметр = ПараметрыДанных.Добавить();
		НовыйПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ТекущаяДата");
		НовыйПараметр.Значение = Объект.ДатаОтчета;
		НовыйПараметр.Использование = Истина;	 
	КонецЕсли;

	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновки);
	
	Возврат КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки;

КонецФункции

#КонецОбласти


#Область ДиаграммаТекущийСтатусРаботающихСотрудников

&НаСервере
Процедура ЗаполнитьДиаграммаТекущийСтатусРаботающихСотрудников()
	
	НаименованиеДиаграммы = "ДиаграммаТекущийСтатусРаботающихСотрудников";
	ТекущаяДиаграмма = ЭтотОбъект[НаименованиеДиаграммы];
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	атл_ДетальныйГрафикРаботыСотрудников.Сотрудник
	               |ПОМЕСТИТЬ СписокРаботающихСейчасПоГрафикуСотрудников
	               |ИЗ
	               |	РегистрСведений.атл_ДетальныйГрафикРаботыСотрудников КАК атл_ДетальныйГрафикРаботыСотрудников
	               |ГДЕ
	               |	&ТекущаяДата МЕЖДУ атл_ДетальныйГрафикРаботыСотрудников.ВремяНачала И атл_ДетальныйГрафикРаботыСотрудников.ВремяОкончания
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	атл_НастройкиПодключенияМобильныхСотрудников.Пользователь КАК Пользователь
	               |ПОМЕСТИТЬ ПользователиМК
	               |ИЗ
	               |	РегистрСведений.атл_НастройкиПодключенияМобильныхСотрудников КАК атл_НастройкиПодключенияМобильныхСотрудников
	               |ГДЕ
	               |	атл_НастройкиПодключенияМобильныхСотрудников.ЯвляетсяПользователемМК = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокРаботающихСейчасПоГрафикуСотрудников.Сотрудник
	               |ПОМЕСТИТЬ РаботающиеМобильныеСотрудники
	               |ИЗ
	               |	ПользователиМК КАК ПользователиМК
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокРаботающихСейчасПоГрафикуСотрудников КАК СписокРаботающихСейчасПоГрафикуСотрудников
	               |		ПО ПользователиМК.Пользователь = СписокРаботающихСейчасПоГрафикуСотрудников.Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	атл_ЗадачаМобильномуСотруднику.Исполнитель,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА атл_ЗадачаМобильномуСотруднику.ТекущийСтатус = ЗНАЧЕНИЕ(Перечисление.атл_СтатусыЗадачМобильнымСотрудникам.Выехал)
	               |				ТОГДА 1
	               |			ИНАЧЕ ВЫБОР
	               |					КОГДА атл_ЗадачаМобильномуСотруднику.ТекущийСтатус = ЗНАЧЕНИЕ(Перечисление.атл_СтатусыЗадачМобильнымСотрудникам.Приехал)
	               |						ТОГДА 2
	               |					ИНАЧЕ 0
	               |				КОНЕЦ
	               |		КОНЕЦ) КАК ТекущийСтатусПоЗадаче
	               |ПОМЕСТИТЬ СтатусыПоЗадачам
	               |ИЗ
	               |	Документ.атл_ЗадачаМобильномуСотруднику КАК атл_ЗадачаМобильномуСотруднику
	               |ГДЕ
	               |	атл_ЗадачаМобильномуСотруднику.Проведен = ИСТИНА
	               |	И атл_ЗадачаМобильномуСотруднику.ТекущийСтатус В(&СписокДоступныхСтатусов)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	атл_ЗадачаМобильномуСотруднику.Исполнитель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СтатусыПоЗадаче.ТекущийСтатусПоЗадаче, 0) КАК СтатусПоСотруднику,
	               |	РаботающиеСотрудники.Сотрудник,
	               |	1 КАК Количество
	               |ПОМЕСТИТЬ СтатусыПоСотрудникам
	               |ИЗ
	               |	РаботающиеМобильныеСотрудники КАК РаботающиеСотрудники
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыПоЗадачам КАК СтатусыПоЗадаче
	               |		ПО РаботающиеСотрудники.Сотрудник = СтатусыПоЗадаче.Исполнитель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(СтатусыПоСотрудникам.Количество) КАК Количество,
	               |	СтатусыПоСотрудникам.СтатусПоСотруднику
	               |ИЗ
	               |	СтатусыПоСотрудникам КАК СтатусыПоСотрудникам
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтатусыПоСотрудникам.СтатусПоСотруднику
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СтатусыПоСотрудникам.СтатусПоСотруднику УБЫВ
	               |АВТОУПОРЯДОЧИВАНИЕ" ;
	
	
	СписокДоступныхСтатусов = Новый СписокЗначений;
	СписокДоступныхСтатусов.Добавить(Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Выехал);
	СписокДоступныхСтатусов.Добавить(Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Приехал);
	
	Запрос.УстановитьПараметр("СписокДоступныхСтатусов", СписокДоступныхСтатусов);
	Запрос.УстановитьПараметр("ТекущаяДата", мТекущаяДата);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ВыполнитьНачальнуюНастройкуДиаграммы(НаименованиеДиаграммы);	
	
	Если Выборка.Количество() > 0 Тогда
		
		//добавляем строку всего		
		ДобавитьСтрокуВТаблицуРасшифровок(НаименованиеДиаграммы, "Всего", "Всего", Результат.Выгрузить().Итог("Количество"), Истина);
		
		КоличествоСерий = 0;
		НазваниеСерии = "";
		Пока Выборка.Следующий() Цикл
			Если Выборка.СтатусПоСотруднику = 0 Тогда
				НазваниеСерии = "Простаивает";
				ТекущаяДиаграмма.Серии.Добавить(НазваниеСерии);
				ТекущаяДиаграмма.Серии[КоличествоСерий].Цвет = Новый Цвет(250,128,114);
			ИначеЕсли Выборка.СтатусПоСотруднику = 1 Тогда
				НазваниеСерии = "В пути";
				ТекущаяДиаграмма.Серии.Добавить(НазваниеСерии);
				ТекущаяДиаграмма.Серии[КоличествоСерий].Цвет = Новый Цвет(255,218,185);
			ИначеЕсли Выборка.СтатусПоСотруднику = 2 Тогда
				НазваниеСерии = "У заказчика";
				ТекущаяДиаграмма.Серии.Добавить(НазваниеСерии);
				ТекущаяДиаграмма.Серии[КоличествоСерий].Цвет = Новый Цвет(144,238,144);
			КонецЕсли;
			
			Точка = ТекущаяДиаграмма.УстановитьТочку("1");
			ТекущаяДиаграмма.УстановитьЗначение(Точка, ТекущаяДиаграмма.Серии[КоличествоСерий], Выборка.Количество, Неопределено, НазваниеСерии);
			
			ДобавитьСтрокуВТаблицуРасшифровок(НаименованиеДиаграммы, НазваниеСерии, НазваниеСерии, Выборка.Количество, , ТекущаяДиаграмма.Серии[КоличествоСерий].Цвет);
		
			КоличествоСерий = КоличествоСерий + 1;
		КонецЦикла;

	КонецЕсли;
	
	ВыполнитьКонечнуюНастройкуДиаграммы(НаименованиеДиаграммы);			
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаТекущийСтатусРаботающихСотрудниковВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтркытьФормуРасшифровокОтчета("ДиаграммаТекущийСтатусРаботающихСотрудников");
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРасшифровкуПоДиаграммеТекущийСтатусРаботающихСотрудников(СтатусСотрудника)
	
	КомпоновщикНастроекКомпоновкиДанных = ПолучитьКомпоновщикНастроекДиаграммаТекущийСтатусРаботающихСотрудников(СтатусСотрудника);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", );
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", КомпоновщикНастроекКомпоновкиДанных); 

	ОткрытьФорму("Отчет.атл_ТекущийСтатусМобильныхСотрудников.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКомпоновщикНастроекДиаграммаТекущийСтатусРаботающихСотрудников(СтатусСотрудника)
	
	Если СтатусСотрудника = "Всего" Тогда
		СтатусСотрудника = Новый СписокЗначений;
		СтатусСотрудника.Добавить("Все");		
	КонецЕсли;
	
	мОбработка = Отчеты.атл_ТекущийСтатусМобильныхСотрудников.Создать();			
	СхемаКомпоновкиДанных = мОбработка.СхемаКомпоновкиДанных;
    НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;                  

    флСтатус = Ложь;
	флДата = Ложь;
	флСтатусСотрудника = Ложь;
	н = 0;
	
	СтатусРаботы = "Работает";
	
	ПараметрыДанных = НастройкиКомпоновки.ПараметрыДанных.Элементы;
	Пока (флСтатус = Ложь ИЛИ флДата = Ложь ИЛИ флСтатусСотрудника = Ложь) И н < ПараметрыДанных.Количество() Цикл
	    текПараметр = ПараметрыДанных[н];
	    Если текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("СписокСтатусовРаботы") Тогда
	        флСтатус = Истина;
			текПараметр.Значение = СтатусРаботы;
			текПараметр.Использование = Истина;
		ИначеЕсли текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ТекущаяДата") Тогда
	        флДата = Истина;
			текПараметр.Значение = Объект.ДатаОтчета;
			текПараметр.Использование = Истина;
		ИначеЕсли текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("СписокСтатусовСотрудника") Тогда
	        флСтатусСотрудника = Истина;
			текПараметр.Значение = СтатусСотрудника;
			текПараметр.Использование = Истина;
	    КонецЕсли;
	    н = н + 1;
	КонецЦикла;
	
	Если флСтатус = Ложь Тогда                           
	    НовыйПараметр = ПараметрыДанных.Добавить();
	    НовыйПараметр.Параметр = Новый ПараметрКомпоновкиДанных("СписокСтатусовРаботы");
		НовыйПараметр.Значение = СтатусРаботы;
		НовыйПараметр.Использование = Истина;
	КонецЕсли;
	
	Если флДата = Ложь Тогда                           
	    НовыйПараметр = ПараметрыДанных.Добавить();
		НовыйПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ТекущаяДата");
		НовыйПараметр.Значение = Объект.ДатаОтчета;
		НовыйПараметр.Использование = Истина;	 
	КонецЕсли;
	
	Если флСтатусСотрудника = Ложь Тогда                           
	    НовыйПараметр = ПараметрыДанных.Добавить();
	    НовыйПараметр.Параметр = Новый ПараметрКомпоновкиДанных("СписокСтатусовСотрудника");
		НовыйПараметр.Значение = СтатусСотрудника;
		НовыйПараметр.Использование = Истина;
	КонецЕсли;

	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновки);
	
	Возврат КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки;

КонецФункции
	
#КонецОбласти


#Область ДиаграммаДоступностьРаботающихСотрудников

&НаСервере
Процедура ЗаполнитьДиаграммаДоступностьРаботающихСотрудников()
	
	НаименованиеДиаграммы = "ДиаграммаДоступностьРаботающихСотрудников";
	ТекущаяДиаграмма = ЭтотОбъект[НаименованиеДиаграммы];
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	атл_ДетальныйГрафикРаботыСотрудников.Сотрудник
	               |ПОМЕСТИТЬ СписокРаботающихСейчасПоГрафикуСотрудников
	               |ИЗ
	               |	РегистрСведений.атл_ДетальныйГрафикРаботыСотрудников КАК атл_ДетальныйГрафикРаботыСотрудников
	               |ГДЕ
	               |	&ТекущаяДата МЕЖДУ атл_ДетальныйГрафикРаботыСотрудников.ВремяНачала И атл_ДетальныйГрафикРаботыСотрудников.ВремяОкончания
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	атл_НастройкиПодключенияМобильныхСотрудников.Пользователь КАК Пользователь
	               |ПОМЕСТИТЬ ПользователиМК
	               |ИЗ
	               |	РегистрСведений.атл_НастройкиПодключенияМобильныхСотрудников КАК атл_НастройкиПодключенияМобильныхСотрудников
	               |ГДЕ
	               |	атл_НастройкиПодключенияМобильныхСотрудников.ЯвляетсяПользователемМК = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокРаботающихСейчасПоГрафикуСотрудников.Сотрудник
	               |ПОМЕСТИТЬ РаботающиеМобильныеСотрудники
	               |ИЗ
	               |	ПользователиМК КАК ПользователиМК
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокРаботающихСейчасПоГрафикуСотрудников КАК СписокРаботающихСейчасПоГрафикуСотрудников
	               |		ПО ПользователиМК.Пользователь = СписокРаботающихСейчасПоГрафикуСотрудников.Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	атл_АктивностьПользователей.Пользователь,
	               |	ИСТИНА КАК СотрудникАктивен
	               |ПОМЕСТИТЬ АктивныеСотрудники
	               |ИЗ
	               |	РегистрСведений.атл_АктивностьПользователей КАК атл_АктивностьПользователей
	               |ГДЕ
	               |	атл_АктивностьПользователей.МК = ИСТИНА
	               |	И атл_АктивностьПользователей.ДатаПоследнейАктивности >= &ДатаДопустимойПоследнейАктивности
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РаботающиеМобильныеСотрудники.Сотрудник,
	               |	ЕСТЬNULL(АктивныеСотрудники.СотрудникАктивен, ЛОЖЬ) КАК СотрудникАктивен
	               |ПОМЕСТИТЬ АктивностьВсехСотрудников
	               |ИЗ
	               |	РаботающиеМобильныеСотрудники КАК РаботающиеМобильныеСотрудники
	               |		ЛЕВОЕ СОЕДИНЕНИЕ АктивныеСотрудники КАК АктивныеСотрудники
	               |		ПО РаботающиеМобильныеСотрудники.Сотрудник = АктивныеСотрудники.Пользователь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АктивностьВсехСотрудников.СотрудникАктивен КАК СотрудникАктивен,
	               |	СУММА(1) КАК Количество
	               |ИЗ
	               |	АктивностьВсехСотрудников КАК АктивностьВсехСотрудников
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	АктивностьВсехСотрудников.СотрудникАктивен
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СотрудникАктивен" ;
				   	
	СписокДоступныхСтатусов = Новый СписокЗначений;
	СписокДоступныхСтатусов.Добавить(Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Выехал);
	СписокДоступныхСтатусов.Добавить(Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Приехал);
	
	Запрос.УстановитьПараметр("ДатаДопустимойПоследнейАктивности", мТекущаяДата - ?(Константы.атл_ВремяВТечениеКоторогоПользовательОнлайн.Получить() = 0, 300, Константы.атл_ВремяВТечениеКоторогоПользовательОнлайн.Получить()));
	Запрос.УстановитьПараметр("ТекущаяДата", мТекущаяДата);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ВыполнитьНачальнуюНастройкуДиаграммы(НаименованиеДиаграммы);	
	
	Если Выборка.Количество() > 0 Тогда
		
		//добавляем строку всего
		ДобавитьСтрокуВТаблицуРасшифровок(НаименованиеДиаграммы, "Всего", "Всего", Результат.Выгрузить().Итог("Количество"), Истина);
		
		КоличествоСерий = 0;
		НазваниеСерии = "";
		Пока Выборка.Следующий() Цикл
			СтруктураДополнительныхПараметров = Новый Структура;
			Если Выборка.СотрудникАктивен = Истина Тогда
				НазваниеСерии = "Онлайн";
				ТекущаяДиаграмма.Серии.Добавить(НазваниеСерии);
				ТекущаяДиаграмма.Серии[КоличествоСерий].Цвет = Новый Цвет(144,238,144);
				СтруктураДополнительныхПараметров.Вставить("СтатусАктивности", 1);
			ИначеЕсли Выборка.СотрудникАктивен = Ложь Тогда
				НазваниеСерии = "Оффлайн";
				ТекущаяДиаграмма.Серии.Добавить(НазваниеСерии);
				ТекущаяДиаграмма.Серии[КоличествоСерий].Цвет = Новый Цвет(250,128,114);
				СтруктураДополнительныхПараметров.Вставить("СтатусАктивности", 2);
			КонецЕсли;
			
			Точка = ТекущаяДиаграмма.УстановитьТочку("1");
			ТекущаяДиаграмма.УстановитьЗначение(Точка, ТекущаяДиаграмма.Серии[КоличествоСерий], Выборка.Количество, Неопределено, НазваниеСерии);
					
			ДобавитьСтрокуВТаблицуРасшифровок(НаименованиеДиаграммы, НазваниеСерии, НазваниеСерии, Выборка.Количество, , ТекущаяДиаграмма.Серии[КоличествоСерий].Цвет);
			
			КоличествоСерий = КоличествоСерий + 1;
		КонецЦикла;

	КонецЕсли;
	
	ВыполнитьКонечнуюНастройкуДиаграммы(НаименованиеДиаграммы);			
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаДоступностьРаботающихСотрудниковВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтркытьФормуРасшифровокОтчета("ДиаграммаДоступностьРаботающихСотрудников");
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРасшифровкуПоДиаграммеДоступностьРаботающихСотрудников(СтатусАктивности)
	
	КомпоновщикНастроекКомпоновкиДанных = ПолучитьКомпоновщикНастроекДиаграммаДоступностьРаботающихСотрудников(СтатусАктивности);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", );
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", КомпоновщикНастроекКомпоновкиДанных); 

	ОткрытьФорму("Отчет.атл_ДоступностьМобильныхСотрудников.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКомпоновщикНастроекДиаграммаДоступностьРаботающихСотрудников(СтатусАктивности)
		
	Если СтатусАктивности = "Всего" Тогда
		СтатусАктивности = Новый СписокЗначений;
		СтатусАктивности.Добавить("Все");			
	КонецЕсли;
	
	мОбработка = Отчеты.атл_ДоступностьМобильныхСотрудников.Создать();			
	СхемаКомпоновкиДанных = мОбработка.СхемаКомпоновкиДанных;
    НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;                  

    флСтатус = Ложь;
	флДата = Ложь;
	флСтатусАктивности = Ложь;
	н = 0;
	
	СтатусРаботы = "Работает";
	
	ПараметрыДанных = НастройкиКомпоновки.ПараметрыДанных.Элементы;
	Пока (флСтатус = Ложь ИЛИ флДата = Ложь ИЛИ флСтатусАктивности = Ложь) И н < ПараметрыДанных.Количество() Цикл
	    текПараметр = ПараметрыДанных[н];
	    Если текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("СписокСтатусовРаботы") Тогда
	        флСтатус = Истина;
			текПараметр.Значение = СтатусРаботы;
			текПараметр.Использование = Истина;
		ИначеЕсли текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ТекущаяДата") Тогда
	        флДата = Истина;
			текПараметр.Значение = Объект.ДатаОтчета;
			текПараметр.Использование = Истина;
		ИначеЕсли текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("СписокСтатусовАктивности") Тогда
	        флСтатусАктивности = Истина;
			текПараметр.Значение = СтатусАктивности;
			текПараметр.Использование = Истина;
	    КонецЕсли;
	    н = н + 1;
	КонецЦикла;
	
	Если флСтатус = Ложь Тогда                           
	    НовыйПараметр = ПараметрыДанных.Добавить();
	    НовыйПараметр.Параметр = Новый ПараметрКомпоновкиДанных("СписокСтатусовРаботы");
		НовыйПараметр.Значение = СтатусРаботы;
		НовыйПараметр.Использование = Истина;
	КонецЕсли;
	
	Если флДата = Ложь Тогда                           
	    НовыйПараметр = ПараметрыДанных.Добавить();
		НовыйПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ТекущаяДата");
		НовыйПараметр.Значение = Объект.ДатаОтчета;
		НовыйПараметр.Использование = Истина;	 
	КонецЕсли;
	
	Если флСтатусАктивности = Ложь Тогда                           
	    НовыйПараметр = ПараметрыДанных.Добавить();
	    НовыйПараметр.Параметр = Новый ПараметрКомпоновкиДанных("СписокСтатусовАктивности");
		НовыйПараметр.Значение = СтатусАктивности;
		НовыйПараметр.Использование = Истина;
	КонецЕсли;

	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновки);
	
	Возврат КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки;

КонецФункции
	
#КонецОбласти


#Область ДиаграммаТекущийСтатусЗадачНаСегодня

&НаСервере
Процедура ЗаполнитьДиаграммаТекущийСтатусЗадачНаСегодня()
	
	НаименованиеДиаграммы = "ДиаграммаТекущийСтатусЗадачНаСегодня";
	ТекущаяДиаграмма = ЭтотОбъект[НаименованиеДиаграммы];
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	атл_ЗадачаМобильномуСотруднику.ТекущийСтатус,
	               |	СУММА(1) КАК Количество
	               |ИЗ
	               |	Документ.атл_ЗадачаМобильномуСотруднику КАК атл_ЗадачаМобильномуСотруднику
	               |ГДЕ
	               |	атл_ЗадачаМобильномуСотруднику.Проведен = ИСТИНА
	               |	И атл_ЗадачаМобильномуСотруднику.ПланируемаяДатаВыполненияРабот МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ) И КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	атл_ЗадачаМобильномуСотруднику.ТекущийСтатус" ;
	
	Запрос.УстановитьПараметр("ТекущаяДата", мТекущаяДата);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ВыполнитьНачальнуюНастройкуДиаграммы(НаименованиеДиаграммы);	
	
	Если Выборка.Количество() > 0 Тогда
		
		//добавляем строку всего		
		ДобавитьСтрокуВТаблицуРасшифровок(НаименованиеДиаграммы, "Всего", "Всего", Результат.Выгрузить().Итог("Количество"), Истина);
		
		КоличествоСерий = 0;
		Пока Выборка.Следующий() Цикл
			ТекущийСтатус = Выборка.ТекущийСтатус;
			ТекущаяДиаграмма.Серии.Добавить(Строка(ТекущийСтатус));
			ТекущаяДиаграмма.Серии[КоличествоСерий].Цвет = атл_УправлениеМобильнымиСотрудниками.ОпределитьЦветПоСтатусуЗадачаМобильномуСотруднику(ТекущийСтатус);
			
			Точка = ТекущаяДиаграмма.УстановитьТочку("1");
			ТекущаяДиаграмма.УстановитьЗначение(Точка, ТекущаяДиаграмма.Серии[КоличествоСерий], Выборка.Количество, Неопределено, ТекущийСтатус);
			
			СтруктураДополнительныхПараметров = Новый Структура;
			СтруктураДополнительныхПараметров.Вставить("ТекущийСтатус", ТекущийСтатус);
						
			ДобавитьСтрокуВТаблицуРасшифровок(НаименованиеДиаграммы, ТекущийСтатус, ТекущийСтатус, Выборка.Количество, , ТекущаяДиаграмма.Серии[КоличествоСерий].Цвет);
			
			КоличествоСерий = КоличествоСерий + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	ВыполнитьКонечнуюНастройкуДиаграммы(НаименованиеДиаграммы);			
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаТекущийСтатусЗадачНаСегодняВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтркытьФормуРасшифровокОтчета("ДиаграммаТекущийСтатусЗадачНаСегодня");
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРасшифровкуПоДиаграммеТекущийСтатусЗадачНаСегодня(ТекущийСтатус)
	
	КомпоновщикНастроекКомпоновкиДанных = ПолучитьКомпоновщикНастроекДиаграммаТекущийСтатусЗадачНаСегодня(ТекущийСтатус);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", );
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", КомпоновщикНастроекКомпоновкиДанных); 

	ОткрытьФорму("Отчет.атл_ТекущийСтатусЗадачМобильнымСотрудникам.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКомпоновщикНастроекДиаграммаТекущийСтатусЗадачНаСегодня(ТекущийСтатус)
		
	мОбработка = Отчеты.атл_ТекущийСтатусЗадачМобильнымСотрудникам.Создать();			
	СхемаКомпоновкиДанных = мОбработка.СхемаКомпоновкиДанных;
    НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;                  

	//Зададим значение параметров дат начала и конца отчета
	флДатаНачало = Ложь;	
	флДатаКонец = Ложь;
	мПустаяДата = Дата("00010101");
	н = 0;		
	
	ПараметрыДанных = НастройкиКомпоновки.ПараметрыДанных.Элементы;
	Пока (флДатаНачало = Ложь ИЛИ флДатаКонец = Ложь) И н < ПараметрыДанных.Количество() Цикл
	    текПараметр = ПараметрыДанных[н];
	    Если текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ДатаНачала") Тогда
	        флДатаНачало = Истина;
			текПараметр.Значение = мПустаяДата;
			текПараметр.Использование = Истина;
		ИначеЕсли текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ДатаКонца") Тогда
	        флДатаКонец = Истина;
			текПараметр.Значение = КонецДня(ТекущаяДата());
			текПараметр.Использование = Истина;		
	    КонецЕсли;
	    н = н + 1;
	КонецЦикла;
	
	Если флДатаНачало = Ложь Тогда                           
	    НовыйПараметр = ПараметрыДанных.Добавить();
		НовыйПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ДатаНачала");
		НовыйПараметр.Значение = мПустаяДата;
		НовыйПараметр.Использование = Истина;	 
	КонецЕсли;
	
	Если флДатаКонец = Ложь Тогда                           
	    НовыйПараметр = ПараметрыДанных.Добавить();
	    НовыйПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ДатаКонца");
		НовыйПараметр.Значение = КонецДня(ТекущаяДата());
		НовыйПараметр.Использование = Истина;
	КонецЕсли;
	

    флСтатус = Ложь;
	флДатаНачало = Ложь;	
	флДатаКонец = Ложь;	
	н = 0;					
	
	ЭлементыОтбора = НастройкиКомпоновки.Отбор.Элементы;
	Пока (флСтатус = Ложь ИЛИ флДатаНачало = Ложь ИЛИ флДатаКонец) И н < ЭлементыОтбора.Количество() Цикл
		текОтбор = ЭлементыОтбора[н];						
		Если НЕ ТекущийСтатус = "Всего" И текОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийСтатус") Тогда
	        флСтатус = Истина;
			текОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			текОтбор.ПравоеЗначение = ТекущийСтатус;
			текОтбор.Использование = Истина;
		ИначеЕсли текОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланируемаяДатаВыполненияРабот") И флДатаНачало = Ложь Тогда
	    	флДатаНачало = Истина;
			текОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			текОтбор.ПравоеЗначение = НачалоДня(Объект.ДатаОтчета);
			текОтбор.Использование = Истина;
		ИначеЕсли текОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланируемаяДатаВыполненияРабот") Тогда
	    	флДатаКонец = Истина;
			текОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			текОтбор.ПравоеЗначение = КонецДня(Объект.ДатаОтчета);
			текОтбор.Использование = Истина;
	    КонецЕсли;				
		н = н + 1;
	КонецЦикла;
	
	Если НЕ ТекущийСтатус = "Всего" И флСтатус = Ложь Тогда                           
		НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийСтатус");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.ПравоеЗначение = ТекущийСтатус;
	    НовыйОтбор.Использование = Истина;	    
	КонецЕсли;
	
	Если флДатаНачало = Ложь Тогда                           
	    НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланируемаяДатаВыполненияРабот");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		НовыйОтбор.ПравоеЗначение = НачалоДня(Объект.ДатаОтчета);
	    НовыйОтбор.Использование = Истина;	 
	КонецЕсли;
	
	Если флДатаКонец = Ложь Тогда                           
	    НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланируемаяДатаВыполненияРабот");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		НовыйОтбор.ПравоеЗначение = КонецДня(Объект.ДатаОтчета);
	    НовыйОтбор.Использование = Истина;
	КонецЕсли;

	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновки);
	
	Возврат КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки;

КонецФункции
	
#КонецОбласти


#Область ДиаграммаОпозданияПоЗадачам

&НаСервере
Процедура ЗаполнитьДиаграммаОпозданияПоЗадачам()
	
	НаименованиеДиаграммы = "ДиаграммаОпозданияПоЗадачам";
	ТекущаяДиаграмма = ЭтотОбъект[НаименованиеДиаграммы];
	
	ВыполнитьНачальнуюНастройкуДиаграммы(НаименованиеДиаграммы);
	
	СоздатьСерииПоПериодам(НаименованиеДиаграммы);	
	
	Для Каждого Стр из Объект.ТаблицаПериодов Цикл
		СтруктураРезультата = ПолучитьРезультатДляДиаграммыОпозданийПоЗадачам(Стр.ДатаНачала, КонецДня(Стр.ДатаОкончания));
		мИдСтрокиТаблицыПериодов = Стр.НомерСтроки;
		
		//выводим расшифровку для всего периода
		ДобавитьСтрокуВТаблицуРасшифровок(НаименованиеДиаграммы, Стр.НаименованиеПериода, "Всего", СтруктураРезультата.Всего, Истина,, мИдСтрокиТаблицыПериодов);
		
		НазваниеТочки = "С опозданием";
		Точка = ТекущаяДиаграмма.УстановитьТочку(НазваниеТочки);		
		ТекущаяДиаграмма.УстановитьЗначение(Точка, ТекущаяДиаграмма.Серии[Стр.НомерСтроки - 1], СтруктураРезультата.Опозданий, Неопределено, СтруктураРезультата.Опозданий);
		
		//выводим расшифровку для "С опозданием"
		ДобавитьСтрокуВТаблицуРасшифровок(НаименованиеДиаграммы, НазваниеТочки, НазваниеТочки, СтруктураРезультата.Опозданий, ,ТекущаяДиаграмма.Серии[Стр.НомерСтроки - 1].Цвет, мИдСтрокиТаблицыПериодов);
		
		
		НазваниеТочки = "В срок";
		Точка = ТекущаяДиаграмма.УстановитьТочку(НазваниеТочки);		
		ТекущаяДиаграмма.УстановитьЗначение(Точка, ТекущаяДиаграмма.Серии[Стр.НомерСтроки - 1], СтруктураРезультата.ВСрок, Неопределено, СтруктураРезультата.ВСрок);
		
		//выводим расшифровку для "В срок"				
		ДобавитьСтрокуВТаблицуРасшифровок(НаименованиеДиаграммы, НазваниеТочки, НазваниеТочки, СтруктураРезультата.ВСрок, ,ТекущаяДиаграмма.Серии[Стр.НомерСтроки - 1].Цвет, мИдСтрокиТаблицыПериодов);
		
	КонецЦикла;
	
	ВыполнитьКонечнуюНастройкуДиаграммы(НаименованиеДиаграммы);			
		
КонецПроцедуры

&НаСервере
Функция ПолучитьРезультатДляДиаграммыОпозданийПоЗадачам(ДатаНачала, ДатаОкончания)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СУММА(1) КАК Количество,
	               |	СУММА(ВЫБОР
	               |			КОГДА атл_ЗадачаМобильномуСотруднику.ПриехалДата <= атл_ЗадачаМобильномуСотруднику.ПланируемаяДатаВыполненияРабот
	               |				ТОГДА 0
	               |			ИНАЧЕ 1
	               |		КОНЕЦ) КАК КоличествоОпозданий
	               |ПОМЕСТИТЬ ПодготовленнаяТаблица
	               |ИЗ
	               |	Документ.атл_ЗадачаМобильномуСотруднику КАК атл_ЗадачаМобильномуСотруднику
	               |ГДЕ
	               |	атл_ЗадачаМобильномуСотруднику.Проведен = ИСТИНА
	               |	И атл_ЗадачаМобильномуСотруднику.ПриехалДата МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И атл_ЗадачаМобильномуСотруднику.ПриехалДата <> ДАТАВРЕМЯ(1, 1, 1)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ПодготовленнаяТаблица.Количество, 0) КАК Количество,
	               |	ЕСТЬNULL(ПодготовленнаяТаблица.КоличествоОпозданий, 0) КАК КоличествоОпозданий
	               |ИЗ
	               |	ПодготовленнаяТаблица КАК ПодготовленнаяТаблица" ;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	//определяем количество дней
	КоличествоДней = атл_УправлениеМобильнымиСотрудниками.КоличествоДнейМеждуДатами(ДатаНачала, ДатаОкончания);	
	
	СтруктураРезультата = Новый Структура();
	Если Выборка.Количество() > 0 и КоличествоДней > 0 Тогда
		Выборка.Следующий();
		СтруктураРезультата.Вставить("Всего", 		Окр(Выборка.Количество / КоличествоДней, 2));
		СтруктураРезультата.Вставить("Опозданий", 	Окр(Выборка.КоличествоОпозданий / КоличествоДней, 2));
		СтруктураРезультата.Вставить("ВСрок", 		Окр((Выборка.Количество - Выборка.КоличествоОпозданий) / КоличествоДней, 2));
	Иначе
		СтруктураРезультата.Вставить("Всего", 	  0);
		СтруктураРезультата.Вставить("Опозданий", 0);
		СтруктураРезультата.Вставить("ВСрок", 	  0);
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаКлиенте
Процедура ДиаграммаОпозданияПоЗадачамВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтркытьФормуРасшифровокОтчета("ДиаграммаОпозданияПоЗадачам");	
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРасшифровкуПоДиаграммеОпозданияПоЗадачам(СтатусПриезда, КлючСтроки)
	
	КомпоновщикНастроекКомпоновкиДанных = ПолучитьКомпоновщикНастроекДиаграммаОпозданияПоЗадачам(СтатусПриезда, КлючСтроки);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", );
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", КомпоновщикНастроекКомпоновкиДанных); 

	ОткрытьФорму("Отчет.атл_ОпозданияПоЗадачамМобильныхСотрудников.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКомпоновщикНастроекДиаграммаОпозданияПоЗадачам(СтатусПриезда, КлючСтроки)
		
	мОбработка = Отчеты.атл_ОпозданияПоЗадачамМобильныхСотрудников.Создать();			
	СхемаКомпоновкиДанных = мОбработка.СхемаКомпоновкиДанных;
	НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;                  

	Если СтатусПриезда = "Всего" Тогда
		СтатусПриезда = Новый СписокЗначений;
		СтатусПриезда.Добавить("Все");				
	КонецЕсли;
	
	флСтатус = Ложь;
	флДатаНачало = Ложь;
	флДатаКонец = Ложь;
	флКоличество = Ложь;
	н = 0;
	
	мСтрокаПериода = Объект.ТаблицаПериодов[КлючСтроки-1];
	Если мСтрокаПериода = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;           	
	
	ПараметрыДанных = НастройкиКомпоновки.ПараметрыДанных.Элементы;
	Пока (флСтатус = Ложь ИЛИ флДатаНачало = Ложь ИЛИ флДатаКонец = Ложь ИЛИ флКоличество = Ложь) И н < ПараметрыДанных.Количество() Цикл
	    текПараметр = ПараметрыДанных[н];
	    Если текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ДатаНачала") Тогда
	        флДатаНачало = Истина;
			текПараметр.Значение = мСтрокаПериода.ДатаНачала;
			текПараметр.Использование = Истина;
		ИначеЕсли текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ДатаКонца") Тогда
	        флДатаКонец = Истина;
			текПараметр.Значение = мСтрокаПериода.ДатаОкончания;
			текПараметр.Использование = Истина;
		ИначеЕсли текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("СписокСтатусовПриезда") Тогда
	        флСтатус = Истина;
			текПараметр.Значение = СтатусПриезда;
			текПараметр.Использование = Истина;
		ИначеЕсли текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ВыводитьКоличествоВПересчетеНаДень") Тогда
	        флКоличество = Истина;
			текПараметр.Значение = НЕ мСтрокаПериода.ПериодДень;
			текПараметр.Использование = Истина;
	    КонецЕсли;
	    н = н + 1;
	КонецЦикла;
	
	Если флДатаНачало = Ложь Тогда                           
	    НовыйПараметр = ПараметрыДанных.Добавить();
	    НовыйПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ДатаНачала");
		НовыйПараметр.Значение = мСтрокаПериода.ДатаНачала;
		НовыйПараметр.Использование = Истина;
	КонецЕсли;
	
	Если флДатаКонец = Ложь Тогда                           
	    НовыйПараметр = ПараметрыДанных.Добавить();
		НовыйПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ДатаКонца");
		НовыйПараметр.Значение = мСтрокаПериода.ДатаОкончания;
		НовыйПараметр.Использование = Истина;	 
	КонецЕсли;
	
	Если флСтатус = Ложь Тогда                           
	    НовыйПараметр = ПараметрыДанных.Добавить();
	    НовыйПараметр.Параметр = Новый ПараметрКомпоновкиДанных("СписокСтатусовПриезда");
		НовыйПараметр.Значение = СтатусПриезда;
		НовыйПараметр.Использование = Истина;
	КонецЕсли;
	
	Если флКоличество = Ложь Тогда                           
	    НовыйПараметр = ПараметрыДанных.Добавить();
	    НовыйПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ВыводитьКоличествоВПересчетеНаДень");
		НовыйПараметр.Значение = НЕ мСтрокаПериода.ПериодДень;
		НовыйПараметр.Использование = Истина;
	КонецЕсли;

	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновки);
	
	Возврат КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки;

КонецФункции
	
#КонецОбласти


#Область ДиаграммаПричиныЗавершенияЗадач

&НаСервере
Процедура ЗаполнитьДиаграммаПричиныЗавершенияЗадач()
	
	НаименованиеДиаграммы = "ДиаграммаПричиныЗавершенияЗадач";
	ТекущаяДиаграмма = ЭтотОбъект[НаименованиеДиаграммы];
	
	ВыполнитьНачальнуюНастройкуДиаграммы(НаименованиеДиаграммы);
	
	СоздатьСерииПоПериодам(НаименованиеДиаграммы);	
	
	Для Каждого Стр из Объект.ТаблицаПериодов Цикл
		ТаблицаРезультатов = ПолучитьРезультатДляДиаграммыПричиныЗавершенияЗадач(Стр.ДатаНачала, КонецДня(Стр.ДатаОкончания));
		мИдСтрокиТаблицыПериодов = Стр.НомерСтроки;
		
		//выводим расшифровку для всего периода
		ДобавитьСтрокуВТаблицуРасшифровок(НаименованиеДиаграммы, Стр.НаименованиеПериода, "Всего",  ТаблицаРезультатов.Итог("Количество"), Истина,, мИдСтрокиТаблицыПериодов);
		
		
		Для Каждого ЗначениеРезультата из ТаблицаРезультатов Цикл
			
			НазваниеТочки = ЗначениеРезультата.ПричинаЗавершенияЗадачи;
			Точка = ТекущаяДиаграмма.УстановитьТочку(НазваниеТочки);
			ТекущаяДиаграмма.УстановитьЗначение(Точка, ТекущаяДиаграмма.Серии[Стр.НомерСтроки - 1], ЗначениеРезультата.Количество, Неопределено, ЗначениеРезультата.Количество);
			
			//выводим расшифровку детальной записи
			ДобавитьСтрокуВТаблицуРасшифровок(НаименованиеДиаграммы, НазваниеТочки, НазваниеТочки, ЗначениеРезультата.Количество, ,ТекущаяДиаграмма.Серии[Стр.НомерСтроки - 1].Цвет, мИдСтрокиТаблицыПериодов);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВыполнитьКонечнуюНастройкуДиаграммы(НаименованиеДиаграммы);			
		
КонецПроцедуры

&НаСервере
Функция ПолучитьРезультатДляДиаграммыПричиныЗавершенияЗадач(ДатаНачала, ДатаОкончания)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СУММА(1) КАК Количество,
	               |	атл_ЗадачаМобильномуСотруднику.ПричинаЗавершенияЗадачи
	               |ИЗ
	               |	Документ.атл_ЗадачаМобильномуСотруднику КАК атл_ЗадачаМобильномуСотруднику
	               |ГДЕ
	               |	атл_ЗадачаМобильномуСотруднику.Проведен = ИСТИНА
	               |	И атл_ЗадачаМобильномуСотруднику.ЗавершилДата МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	атл_ЗадачаМобильномуСотруднику.ПричинаЗавершенияЗадачи" ;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	//определяем количество дней
	КоличествоДней = атл_УправлениеМобильнымиСотрудниками.КоличествоДнейМеждуДатами(ДатаНачала, ДатаОкончания);	
	
	ОбщееКоличество = 0;
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("Количество");
	ТаблицаРезультатов.Колонки.Добавить("ПричинаЗавершенияЗадачи");
	
	Если Выборка.Количество() > 0 Тогда
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаРезультатов.Добавить();
			НоваяСтрока.ПричинаЗавершенияЗадачи = Выборка.ПричинаЗавершенияЗадачи;
			Если КоличествоДней = 0 Тогда
				НоваяСтрока.Количество = 0;
			Иначе
				НоваяСтрока.Количество = Окр(Выборка.Количество / КоличествоДней, 2);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаРезультатов;
	
КонецФункции

&НаКлиенте
Процедура ДиаграммаПричиныЗавершенияЗадачВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтркытьФормуРасшифровокОтчета("ДиаграммаПричиныЗавершенияЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРасшифровкуПоДиаграммеПричиныЗавершенияЗадач(ПричинаЗавершенияЗадачи, КлючСтроки)
	
	КомпоновщикНастроекКомпоновкиДанных = ПолучитьКомпоновщикНастроекДиаграммаПричиныЗавершенияЗадач(ПричинаЗавершенияЗадачи, КлючСтроки);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", );
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", КомпоновщикНастроекКомпоновкиДанных); 

	ОткрытьФорму("Отчет.атл_ПричиныЗавершенияЗадачМобильнымСотрудникам.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКомпоновщикНастроекДиаграммаПричиныЗавершенияЗадач(ПричинаЗавершенияЗадачи, КлючСтроки)
		
	мОбработка = Отчеты.атл_ПричиныЗавершенияЗадачМобильнымСотрудникам.Создать();			
	СхемаКомпоновкиДанных = мОбработка.СхемаКомпоновкиДанных;
	НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;                  

	флДатаНачало = Ложь;
	флДатаКонец = Ложь;
	флКоличество = Ложь;
	н = 0;
	
	мСтрокаПериода = Объект.ТаблицаПериодов[КлючСтроки-1];
	Если мСтрокаПериода = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;           	
	
	ПараметрыДанных = НастройкиКомпоновки.ПараметрыДанных.Элементы;
	Пока (флДатаНачало = Ложь ИЛИ флДатаКонец = Ложь ИЛИ флКоличество = Ложь) И н < ПараметрыДанных.Количество() Цикл
	    текПараметр = ПараметрыДанных[н];
	    Если текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ДатаНачала") Тогда
	        флДатаНачало = Истина;
			текПараметр.Значение = мСтрокаПериода.ДатаНачала;
			текПараметр.Использование = Истина;
		ИначеЕсли текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ДатаКонца") Тогда
	        флДатаКонец = Истина;
			текПараметр.Значение = мСтрокаПериода.ДатаОкончания;
			текПараметр.Использование = Истина;
		ИначеЕсли текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ВыводитьКоличествоВПересчетеНаДень") Тогда
	        флКоличество = Истина;
			текПараметр.Значение = НЕ мСтрокаПериода.ПериодДень;
			текПараметр.Использование = Истина;
	    КонецЕсли;
	    н = н + 1;
	КонецЦикла;
	
	Если флДатаНачало = Ложь Тогда                           
	    НовыйПараметр = ПараметрыДанных.Добавить();
	    НовыйПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ДатаНачала");
		НовыйПараметр.Значение = мСтрокаПериода.ДатаНачала;
		НовыйПараметр.Использование = Истина;
	КонецЕсли;
	
	Если флДатаКонец = Ложь Тогда                           
	    НовыйПараметр = ПараметрыДанных.Добавить();
		НовыйПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ДатаКонца");
		НовыйПараметр.Значение = мСтрокаПериода.ДатаОкончания;
		НовыйПараметр.Использование = Истина;	 
	КонецЕсли;
	
	Если флКоличество = Ложь Тогда                           
	    НовыйПараметр = ПараметрыДанных.Добавить();
	    НовыйПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ВыводитьКоличествоВПересчетеНаДень");
		НовыйПараметр.Значение = НЕ мСтрокаПериода.ПериодДень;
		НовыйПараметр.Использование = Истина;
	КонецЕсли;

	
	Если НЕ ПричинаЗавершенияЗадачи = "Всего" Тогда
		флСтатус = Ложь;
		н = 0;
		
		ЭлементыОтбора = НастройкиКомпоновки.Отбор.Элементы;
		Пока (флСтатус = Ложь) И н < ЭлементыОтбора.Количество() Цикл
			текОтбор = ЭлементыОтбора[н];						
			Если текОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПричинаЗавершенияЗадачи") Тогда
		        флСтатус = Истина;
				текОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				текОтбор.ПравоеЗначение = ПричинаЗавершенияЗадачи;
				текОтбор.Использование = Истина;			
		    КонецЕсли;				
			н = н + 1;
		КонецЦикла;
		
		Если флСтатус = Ложь Тогда                           
			НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПричинаЗавершенияЗадачи");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйОтбор.ПравоеЗначение = ПричинаЗавершенияЗадачи;
		    НовыйОтбор.Использование = Истина;	    
		КонецЕсли;
	КонецЕсли;
	
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновки);
	
	Возврат КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки;

КонецФункции
	
#КонецОбласти


#Область ДиаграммаСредниеЗатратыВремениНаВыполнениеЗаявок

&НаСервере
Процедура ЗаполнитьДиаграммаСредниеЗатратыВремениНаВыполнениеЗаявок()
	
	НаименованиеДиаграммы = "ДиаграммаСредниеЗатратыВремениНаВыполнениеЗаявок";
	ТекущаяДиаграмма = ЭтотОбъект[НаименованиеДиаграммы];
	
	ВыполнитьНачальнуюНастройкуДиаграммы(НаименованиеДиаграммы);	
	
	СоздатьСерииПоПериодам(НаименованиеДиаграммы);
	
	Для Каждого Стр из Объект.ТаблицаПериодов Цикл
		ТаблицаРезультатов = ПолучитьРезультатДляДиаграммыСредниеЗатратыВремениНаВыполнениеЗаявок(Стр.ДатаНачала, КонецДня(Стр.ДатаОкончания));
		мИдСтрокиТаблицыПериодов = Стр.НомерСтроки;
		
		//выводим расшифровку для всего периода
		ДобавитьСтрокуВТаблицуРасшифровок(НаименованиеДиаграммы, Стр.НаименованиеПериода, "Всего", ТаблицаРезультатов.Итог("Количество"), Истина,, мИдСтрокиТаблицыПериодов);
		
		Для Каждого ЗначениеРезультата из ТаблицаРезультатов Цикл
			НазваниеТочки = ЗначениеРезультата.ИнтервалВремени;
			Точка = ТекущаяДиаграмма.УстановитьТочку(НазваниеТочки);
			ТекущаяДиаграмма.УстановитьЗначение(Точка, ТекущаяДиаграмма.Серии[Стр.НомерСтроки - 1], ЗначениеРезультата.Количество, Неопределено, ЗначениеРезультата.Количество);
			
			//выводим расшифровку детальной записи
			ДобавитьСтрокуВТаблицуРасшифровок(НаименованиеДиаграммы, НазваниеТочки, НазваниеТочки, ЗначениеРезультата.Количество, ,ТекущаяДиаграмма.Серии[Стр.НомерСтроки - 1].Цвет, мИдСтрокиТаблицыПериодов);
		КонецЦикла;
	КонецЦикла;
	
	ВыполнитьКонечнуюНастройкуДиаграммы(НаименованиеДиаграммы);			
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРезультатДляДиаграммыСредниеЗатратыВремениНаВыполнениеЗаявок(ДатаНачала, ДатаОкончания)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	атл_ГруппыИнтерваловВремениПоЗадачамМобильнымСотрудникамИнтервалыВремениПоЗадачамУМС.НомерСтроки,
	               |	атл_ГруппыИнтерваловВремениПоЗадачамМобильнымСотрудникамИнтервалыВремениПоЗадачамУМС.ИнтервалВремениПоЗадачамУМС
	               |ПОМЕСТИТЬ ПорядокИнтервалов
	               |ИЗ
	               |	Справочник.атл_ГруппыИнтерваловВремениПоЗадачамМобильнымСотрудникам.ИнтервалыВремениПоЗадачамУМС КАК атл_ГруппыИнтерваловВремениПоЗадачамМобильнымСотрудникамИнтервалыВремениПоЗадачамУМС
	               |ГДЕ
	               |	атл_ГруппыИнтерваловВремениПоЗадачамМобильнымСотрудникамИнтервалыВремениПоЗадачамУМС.Ссылка = &ВыбраннаяГруппаИнтервалов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	1 КАК Количество,
	               |	атл_ЗадачаМобильномуСотруднику.Ссылка
	               |ПОМЕСТИТЬ ЗавершенныеЗадачи
	               |ИЗ
	               |	Документ.атл_ЗадачаМобильномуСотруднику КАК атл_ЗадачаМобильномуСотруднику
	               |ГДЕ
	               |	атл_ЗадачаМобильномуСотруднику.Проведен = ИСТИНА
	               |	И атл_ЗадачаМобильномуСотруднику.ЗавершилДата МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И атл_ЗадачаМобильномуСотруднику.ПричинаЗавершенияЗадачи В(&СписокДопустимыхПричинЗавершения)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	атл_ЗатраченноеВремяПоИнтерваламПоЗадачамМобильнымСотрудникам.ИнтервалВремени,
	               |	СУММА(атл_ЗатраченноеВремяПоИнтерваламПоЗадачамМобильнымСотрудникам.ВремяПоГрафикуКомпании) КАК ВремяПоГрафикуКомпании,
	               |	СУММА(ЗавершенныеЗадачи.Количество) КАК Количество
	               |ПОМЕСТИТЬ ДанныеБезПорядкаИнтервалов
	               |ИЗ
	               |	ЗавершенныеЗадачи КАК ЗавершенныеЗадачи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.атл_ЗатраченноеВремяПоИнтерваламПоЗадачамМобильнымСотрудникам КАК атл_ЗатраченноеВремяПоИнтерваламПоЗадачамМобильнымСотрудникам
	               |		ПО ЗавершенныеЗадачи.Ссылка = атл_ЗатраченноеВремяПоИнтерваламПоЗадачамМобильнымСотрудникам.ЗадачаМобильномуСотруднику
	               |ГДЕ
	               |	атл_ЗатраченноеВремяПоИнтерваламПоЗадачамМобильнымСотрудникам.ИнтервалВремени В(&СписокДоступныхИнтервалов)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	атл_ЗатраченноеВремяПоИнтерваламПоЗадачамМобильнымСотрудникам.ИнтервалВремени
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеБезПорядкаИнтервалов.ИнтервалВремени,
	               |	ДанныеБезПорядкаИнтервалов.ВремяПоГрафикуКомпании,
	               |	ДанныеБезПорядкаИнтервалов.Количество,
	               |	ПорядокИнтервалов.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	ДанныеБезПорядкаИнтервалов КАК ДанныеБезПорядкаИнтервалов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокИнтервалов КАК ПорядокИнтервалов
	               |		ПО ДанныеБезПорядкаИнтервалов.ИнтервалВремени = ПорядокИнтервалов.ИнтервалВремениПоЗадачамУМС
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки
	               |АВТОУПОРЯДОЧИВАНИЕ" ;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ВыбраннаяГруппаИнтервалов", Объект.ГруппаИнтерваловВремениПоЗадачамУМС);
	Запрос.УстановитьПараметр("СписокДопустимыхПричинЗавершения", Объект.ГруппаИнтерваловВремениПоЗадачамУМС.ПричиныЗавершенияЗадачУМС.ВыгрузитьКолонку("ПричинаЗавершенияЗадачиУМС"));
	Запрос.УстановитьПараметр("СписокДоступныхИнтервалов", Объект.ГруппаИнтерваловВремениПоЗадачамУМС.ИнтервалыВремениПоЗадачамУМС.ВыгрузитьКолонку("ИнтервалВремениПоЗадачамУМС"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("Количество");
	ТаблицаРезультатов.Колонки.Добавить("ИнтервалВремени");
	
	Если Выборка.Количество() > 0 Тогда
		Пока Выборка.Следующий() Цикл
			ВремяДляРасчета = Выборка.ВремяПоГрафикуКомпании / 3600;
			Если Выборка.Количество = 0 Тогда //количество ЗадачУМС = 0
				ВремяНаОднуЗадачуУМС = 0;
			Иначе
				ВремяНаОднуЗадачуУМС = Окр(ВремяДляРасчета / Выборка.Количество, 2);
			КонецЕсли;
			
			НоваяСтрока = ТаблицаРезультатов.Добавить();
			НоваяСтрока.ИнтервалВремени = Выборка.ИнтервалВремени;
			НоваяСтрока.Количество = ВремяНаОднуЗадачуУМС;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаРезультатов;
	
КонецФункции

&НаКлиенте
Процедура ДиаграммаСредниеЗатратыВремениНаВыполнениеЗаявокВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтркытьФормуРасшифровокОтчета("ДиаграммаСредниеЗатратыВремениНаВыполнениеЗаявок");
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРасшифровкуПоДиаграммеСредниеЗатратыВремениНаВыполнениеЗаявок(ИнтервалВремени, КлючСтроки)
	
	КомпоновщикНастроекКомпоновкиДанных = ПолучитьКомпоновщикНастроекДиаграммаСредниеЗатратыВремениНаВыполнениеЗаявок(ИнтервалВремени, КлючСтроки);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", );
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", КомпоновщикНастроекКомпоновкиДанных); 

	ОткрытьФорму("Отчет.атл_ЗатратыВремениНаВыполнениеЗаявок.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКомпоновщикНастроекДиаграммаСредниеЗатратыВремениНаВыполнениеЗаявок(ИнтервалВремени, КлючСтроки)
		
	мОбработка = Отчеты.атл_ЗатратыВремениНаВыполнениеЗаявок.Создать();			
	СхемаКомпоновкиДанных = мОбработка.СхемаКомпоновкиДанных;
	НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;                  

	флДатаНачало = Ложь;
	флДатаКонец = Ложь;
	флГруппа = Ложь;
	н = 0;
	
	мСтрокаПериода = Объект.ТаблицаПериодов[КлючСтроки-1];
	Если мСтрокаПериода = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;           	
	
	ПараметрыДанных = НастройкиКомпоновки.ПараметрыДанных.Элементы;
	Пока (флДатаНачало = Ложь ИЛИ флДатаКонец = Ложь ИЛИ флГруппа = Ложь) И н < ПараметрыДанных.Количество() Цикл
	    текПараметр = ПараметрыДанных[н];
	    Если текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ДатаНачала") Тогда
	        флДатаНачало = Истина;
			текПараметр.Значение = мСтрокаПериода.ДатаНачала;
			текПараметр.Использование = Истина;
		ИначеЕсли текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ДатаКонца") Тогда
	        флДатаКонец = Истина;
			текПараметр.Значение = мСтрокаПериода.ДатаОкончания;
			текПараметр.Использование = Истина;
		ИначеЕсли текПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ГруппаИнтервалов") Тогда
	        флГруппа = Истина;
			текПараметр.Значение = Объект.ГруппаИнтерваловВремениПоЗадачамУМС;
			текПараметр.Использование = Истина;
	    КонецЕсли;
	    н = н + 1;
	КонецЦикла;
	
	Если флДатаНачало = Ложь Тогда                           
	    НовыйПараметр = ПараметрыДанных.Добавить();
	    НовыйПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ДатаНачала");
		НовыйПараметр.Значение = мСтрокаПериода.ДатаНачала;
		НовыйПараметр.Использование = Истина;
	КонецЕсли;
	
	Если флДатаКонец = Ложь Тогда                           
	    НовыйПараметр = ПараметрыДанных.Добавить();
		НовыйПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ДатаКонца");
		НовыйПараметр.Значение = мСтрокаПериода.ДатаОкончания;
		НовыйПараметр.Использование = Истина;	 
	КонецЕсли;
	
	Если флГруппа = Ложь Тогда                           
	    НовыйПараметр = ПараметрыДанных.Добавить();
	    НовыйПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ГруппаИнтервалов");
		НовыйПараметр.Значение = Объект.ГруппаИнтерваловВремениПоЗадачамУМС;
		НовыйПараметр.Использование = Истина;
	КонецЕсли;

	
	Если НЕ ИнтервалВремени = "Всего" Тогда
		флИнтервал = Ложь;
		н = 0;
		
		ЭлементыОтбора = НастройкиКомпоновки.Отбор.Элементы;
		Пока (флИнтервал = Ложь) И н < ЭлементыОтбора.Количество() Цикл
			текОтбор = ЭлементыОтбора[н];						
			Если текОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИнтервалВремени") Тогда
		        флСтатус = Истина;
				текОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				текОтбор.ПравоеЗначение = ИнтервалВремени;
				текОтбор.Использование = Истина;			
		    КонецЕсли;				
			н = н + 1;
		КонецЦикла;
		
		Если флИнтервал = Ложь Тогда                           
			НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИнтервалВремени");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйОтбор.ПравоеЗначение = ИнтервалВремени;
		    НовыйОтбор.Использование = Истина;	    
		КонецЕсли;
	КонецЕсли;
	
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновки);
	
	Возврат КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки;

КонецФункции
	
#КонецОбласти


#Область ДиаграммаАнализСроковВыполненияЗаявкоИАнлизСроковРеакцииПоЗаявкам

&НаСервере
Процедура ЗаполнитьДиаграммаАнализСроковВыполненияЗаявок();
	
	НаименованиеДиаграммы = "ДиаграммаАнализСроковВыполненияЗаявок";
	ТекущаяДиаграмма = ЭтотОбъект[НаименованиеДиаграммы];
	
	ВыполнитьНачальнуюНастройкуДиаграммы(НаименованиеДиаграммы);
	
	СоздатьСерииПоПериодам(НаименованиеДиаграммы);
	
	МаксимальноеКоличество = 0;
	МаксимальноеКоличествоЗаМесяц = 0;
	Для Каждого Стр из Объект.ТаблицаПериодов Цикл
		СписокРезультатов = ПолучитьРезультатДляДиаграммыАнализаСроков(Стр.ДатаНачала, КонецДня(Стр.ДатаОкончания), Объект.ИнтервалВремениВыполненияЗаявки);
		Для Каждого ЗначениеРезультата из СписокРезультатов Цикл
			Точка = ТекущаяДиаграмма.УстановитьТочку(ЗначениеРезультата.Представление);
			ТекущаяДиаграмма.УстановитьЗначение(Точка, ТекущаяДиаграмма.Серии[Стр.НомерСтроки - 1], ЗначениеРезультата.Значение, Неопределено, ЗначениеРезультата.Значение);
			МаксимальноеКоличество = Макс(МаксимальноеКоличество, ЗначениеРезультата.Значение);
			Если Стр.НаименованиеПериода = "В среднем за день за прошедший месяц" Тогда
				МаксимальноеКоличествоЗаМесяц = ЗначениеРезультата.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НарисоватьПолосыДиаграммы(НаименованиеДиаграммы, МаксимальноеКоличество);
	
	ВыполнитьКонечнуюНастройкуДиаграммы(НаименованиеДиаграммы);		
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДиаграммаАнализСроковРеакцииПоЗаявкам();
	
	НаименованиеДиаграммы = "ДиаграммаАнализСроковРеакцииПоЗаявкам";
	ТекущаяДиаграмма = ЭтотОбъект[НаименованиеДиаграммы];
	
	ВыполнитьНачальнуюНастройкуДиаграммы(НаименованиеДиаграммы);
	
	СоздатьСерииПоПериодам(НаименованиеДиаграммы);
	
	МаксимальноеКоличество = 0;
	МаксимальноеКоличествоЗаМесяц = 0;
	Для Каждого Стр из Объект.ТаблицаПериодов Цикл
		СписокРезультатов = ПолучитьРезультатДляДиаграммыАнализаСроков(Стр.ДатаНачала, КонецДня(Стр.ДатаОкончания), Объект.ИнтервалВремениРеакцииНаЗаявку);
		Для Каждого ЗначениеРезультата из СписокРезультатов Цикл
			Точка = ТекущаяДиаграмма.УстановитьТочку(ЗначениеРезультата.Представление);
			ТекущаяДиаграмма.УстановитьЗначение(Точка, ТекущаяДиаграмма.Серии[Стр.НомерСтроки - 1], ЗначениеРезультата.Значение, Неопределено, ЗначениеРезультата.Значение);
			МаксимальноеКоличество = Макс(МаксимальноеКоличество, ЗначениеРезультата.Значение);
			Если Стр.НаименованиеПериода = "В среднем за день за прошедший месяц" Тогда
				МаксимальноеКоличествоЗаМесяц = ЗначениеРезультата.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НарисоватьПолосыДиаграммы(НаименованиеДиаграммы, МаксимальноеКоличество);
	
	ВыполнитьКонечнуюНастройкуДиаграммы(НаименованиеДиаграммы);		
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРезультатДляДиаграммыАнализаСроков(ДатаНачала, ДатаОкончания, ИнтервалДляАнализа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	1 КАК Количество,
	               |	атл_ЗадачаМобильномуСотруднику.Ссылка
	               |ПОМЕСТИТЬ ЗавершенныеЗадачи
	               |ИЗ
	               |	Документ.атл_ЗадачаМобильномуСотруднику КАК атл_ЗадачаМобильномуСотруднику
	               |ГДЕ
	               |	атл_ЗадачаМобильномуСотруднику.Проведен = ИСТИНА
	               |	И атл_ЗадачаМобильномуСотруднику.ЗавершилДата МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И атл_ЗадачаМобильномуСотруднику.ПричинаЗавершенияЗадачи В(&СписокДопустимыхПричинЗавершения)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	атл_ЗатраченноеВремяПоИнтерваламПоЗадачамМобильнымСотрудникам.ИнтервалВремени,
	               |	СУММА(атл_ЗатраченноеВремяПоИнтерваламПоЗадачамМобильнымСотрудникам.ВремяПоГрафикуКомпании) КАК ВремяПоГрафикуКомпании,
	               |	СУММА(ЗавершенныеЗадачи.Количество) КАК Количество
	               |ИЗ
	               |	ЗавершенныеЗадачи КАК ЗавершенныеЗадачи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.атл_ЗатраченноеВремяПоИнтерваламПоЗадачамМобильнымСотрудникам КАК атл_ЗатраченноеВремяПоИнтерваламПоЗадачамМобильнымСотрудникам
	               |		ПО ЗавершенныеЗадачи.Ссылка = атл_ЗатраченноеВремяПоИнтерваламПоЗадачамМобильнымСотрудникам.ЗадачаМобильномуСотруднику
	               |ГДЕ
	               |	атл_ЗатраченноеВремяПоИнтерваламПоЗадачамМобильнымСотрудникам.ИнтервалВремени = &ИнтервалВремениВыполненияЗаявки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	атл_ЗатраченноеВремяПоИнтерваламПоЗадачамМобильнымСотрудникам.ИнтервалВремени" ;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ВыбраннаяГруппаИнтервалов", 			Объект.ГруппаИнтерваловВремениПоЗадачамУМС);
	Запрос.УстановитьПараметр("СписокДопустимыхПричинЗавершения", 	Объект.ГруппаИнтерваловВремениПоЗадачамУМС.ПричиныЗавершенияЗадачУМС.ВыгрузитьКолонку("ПричинаЗавершенияЗадачиУМС"));
	Запрос.УстановитьПараметр("ИнтервалВремениВыполненияЗаявки", 	ИнтервалДляАнализа);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	
	СписокРезультатов = Новый СписокЗначений;
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		ВремяДляРасчета = Выборка.ВремяПоГрафикуКомпании / 3600;
		Если Выборка.Количество = 0 Тогда //количество ЗадачУМС = 0
			ВремяНаОднуЗадачуУМС = 0;
		Иначе
			ВремяНаОднуЗадачуУМС = ВремяДляРасчета / Выборка.Количество;
		КонецЕсли;
		
		СписокРезультатов.Добавить(Окр(ВремяНаОднуЗадачуУМС, 2), Выборка.ИнтервалВремени);
	КонецЕсли;
	
	Возврат СписокРезультатов;
	
КонецФункции

&НаСервере
Процедура НарисоватьПолосыДиаграммы(НаименованиеДиаграммы, МаксимальноеКоличествоЗаМесяц)
	
	ТекущаяДиаграмма = ЭтотОбъект[НаименованиеДиаграммы];
	Сч = ТекущаяДиаграмма.ПолосыИзмерительнойДиаграммы.Количество() - 1;
	
	Пока Сч >= 0 Цикл
		ТекущаяДиаграмма.ПолосыИзмерительнойДиаграммы.Удалить(ТекущаяДиаграмма.ПолосыИзмерительнойДиаграммы[Сч]);
		Сч = Сч - 1;
	КонецЦикла;
	
	ТекущаяДиаграмма.АвтоМаксимальноеЗначение = Ложь;
	ТекущаяДиаграмма.МаксимальноеЗначение = Цел(МаксимальноеКоличествоЗаМесяц*1.5);
	Полосы = ТекущаяДиаграмма.ПолосыИзмерительнойДиаграммы; 
	НоваяПолоса = Полосы.Добавить(); 
	НоваяПолоса.Начало = 0; 
	НоваяПолоса.Конец = Цел(ТекущаяДиаграмма.МаксимальноеЗначение * 0.4);
	НоваяПолоса.ЦветФона = WebЦвета.Зеленый; 
	
	НоваяПолоса = Полосы.Добавить(); 
	НоваяПолоса.Начало = Цел(ТекущаяДиаграмма.МаксимальноеЗначение * 0.4); 
	НоваяПолоса.Конец = Цел(ТекущаяДиаграмма.МаксимальноеЗначение * 0.8);
	НоваяПолоса.ЦветФона = WebЦвета.Желтый; 
	
	НоваяПолоса = Полосы.Добавить(); 
	НоваяПолоса.Начало = Цел(ТекущаяДиаграмма.МаксимальноеЗначение * 0.8);
	НоваяПолоса.Конец = 100000;
	НоваяПолоса.ЦветФона = WebЦвета.Красный;
	
КонецПроцедуры

	
#КонецОбласти


#Область ПрочиеПроцедурыИФункции

&НаСервере
Процедура СоздатьСерииПоПериодам(НаименованиеДиаграммы)
	
	ТекущаяДиаграмма = ЭтотОбъект[НаименованиеДиаграммы];
	Для Каждого Стр из Объект.ТаблицаПериодов Цикл
		мНоваяСерия = ТекущаяДиаграмма.Серии.Добавить(Стр.НаименованиеПериода);
		мНоваяСерия.Цвет = Новый Цвет(Стр.Красный,Стр.Зеленый,Стр.Синий);		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьНачальнуюНастройкуДиаграммы(НаименованиеДиаграммы)
		
	ЭтотОбъект[НаименованиеДиаграммы].Обновление = Ложь;
	ЭтотОбъект[НаименованиеДиаграммы].Очистить();
	ЭтотОбъект[НаименованиеДиаграммы].АвтоТранспонирование = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКонечнуюНастройкуДиаграммы(НаименованиеДиаграммы)
	
	ЭтотОбъект[НаименованиеДиаграммы].АвтоТранспонирование = Истина;
	ЭтотОбъект[НаименованиеДиаграммы].Обновление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПериодов()
	
	Если мТекущаяДата = Дата("00010101") Тогда
		мТекущаяДата = ТекущаяДата();
	КонецЕсли;
	
	Объект.ТаблицаПериодов.Очистить();
	
	//сегодня
	НоваяСтрока = Объект.ТаблицаПериодов.Добавить();
	НоваяСтрока.НаименованиеПериода = "Сегодня";
	НоваяСтрока.ДатаНачала = НачалоДня(мТекущаяДата);
	НоваяСтрока.ДатаОкончания = КонецДня(мТекущаяДата);
	НоваяСтрока.ПериодДень  = Истина;
	НоваяСтрока.Красный = 144;
	НоваяСтрока.Зеленый = 238;
	НоваяСтрока.Синий 	= 144;
	
	//предыдущий месяц
	НоваяСтрока = Объект.ТаблицаПериодов.Добавить();
	НоваяСтрока.НаименованиеПериода = "В среднем за день за прошедший месяц";
	НоваяСтрока.ДатаОкончания = КонецДня(мТекущаяДата  - 86400);
	НоваяСтрока.ДатаНачала = НачалоДня(ДобавитьМесяц(НоваяСтрока.ДатаОкончания,-1) + 86400);
	НоваяСтрока.ПериодДень  = Ложь;
	НоваяСтрока.Красный = 250;
	НоваяСтрока.Зеленый = 128;
	НоваяСтрока.Синий 	= 114;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОтчета(Команда)		
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ГруппаИнтерваловВремениПоЗадачамУМС", Объект.ГруппаИнтерваловВремениПоЗадачамУМС);
	ПараметрыФормы.Вставить("ИнтервалВремениВыполненияЗаявки", Объект.ИнтервалВремениВыполненияЗаявки);
	ПараметрыФормы.Вставить("ИнтервалВремениРеакцииНаЗаявку", Объект.ИнтервалВремениРеакцииНаЗаявку);		
	
	мОповещение = Новый ОписаниеОповещения("ОбработкаФормыНастройки", ЭтотОбъект);
	ОткрытьФорму("Обработка.атл_МониторРуководителяМобильныхСотрудников.Форма.Настройки", ПараметрыФормы, ЭтаФорма,,,,мОповещение);
		
КонецПроцедуры

&НаСервере
Процедура НастройкиОтчетаПоУмолчанию()
		
	ТаблицаНастроекОтчета.Очистить();
	
	мСтрокаОтчета = ТаблицаНастроекОтчета.Добавить();
	мСтрокаОтчета.Наименование = "Количество работающих сотрудников";
	мСтрокаОтчета.ЗапретУдаления = Истина;
	мСтрокаОтчета.ИдентификаторОтчета = "ДиаграммаРаботающиеСотрудники";
	мСтрокаОтчета.ИндексКартинки = 3;
	мСтрокаОтчета.Выводить = Истина;
	
	мСтрокаОтчета = ТаблицаНастроекОтчета.Добавить();
	мСтрокаОтчета.Наименование = "Текущий статус работающих сотрудников";
	мСтрокаОтчета.ЗапретУдаления = Истина;
	мСтрокаОтчета.ИдентификаторОтчета = "ДиаграммаТекущийСтатусРаботающихСотрудников";
	мСтрокаОтчета.ИндексКартинки = 3;
	мСтрокаОтчета.Выводить = Истина;
	
	мСтрокаОтчета = ТаблицаНастроекОтчета.Добавить();
	мСтрокаОтчета.Наименование = "Доступность работающих сотрудников";
	мСтрокаОтчета.ЗапретУдаления = Истина;
	мСтрокаОтчета.ИдентификаторОтчета = "ДиаграммаДоступностьРаботающихСотрудников";
	мСтрокаОтчета.ИндексКартинки = 3;
	мСтрокаОтчета.Выводить = Истина;
	
	мСтрокаОтчета = ТаблицаНастроекОтчета.Добавить();
	мСтрокаОтчета.Наименование = "Текущий статус задач на сегодня";
	мСтрокаОтчета.ЗапретУдаления = Истина;
	мСтрокаОтчета.ИдентификаторОтчета = "ДиаграммаТекущийСтатусЗадачНаСегодня";
	мСтрокаОтчета.ИндексКартинки = 3;
	мСтрокаОтчета.Выводить = Истина;
	
	мСтрокаОтчета = ТаблицаНастроекОтчета.Добавить();
	мСтрокаОтчета.Наименование = "Опоздания по задачам";
	мСтрокаОтчета.ЗапретУдаления = Истина;
	мСтрокаОтчета.ИдентификаторОтчета = "ДиаграммаОпозданияПоЗадачам";
	мСтрокаОтчета.ИндексКартинки = 3;
	мСтрокаОтчета.Выводить = Истина;
	
	мСтрокаОтчета = ТаблицаНастроекОтчета.Добавить();
	мСтрокаОтчета.Наименование = "Причины завершения задач";
	мСтрокаОтчета.ЗапретУдаления = Истина;
	мСтрокаОтчета.ИдентификаторОтчета = "ДиаграммаПричиныЗавершенияЗадач";
	мСтрокаОтчета.ИндексКартинки = 3;
	мСтрокаОтчета.Выводить = Истина;
	
	мСтрокаОтчета = ТаблицаНастроекОтчета.Добавить();
	мСтрокаОтчета.Наименование = "Средние затраты времени на выполнение заявок";
	мСтрокаОтчета.ЗапретУдаления = Истина;
	мСтрокаОтчета.ИдентификаторОтчета = "ДиаграммаСредниеЗатратыВремениНаВыполнениеЗаявок";
	мСтрокаОтчета.ИндексКартинки = 3;
	мСтрокаОтчета.Выводить = Истина;
	
	мСтрокаОтчета = ТаблицаНастроекОтчета.Добавить();
	мСтрокаОтчета.Наименование = "Анализ сроков выполнения заявок";
	мСтрокаОтчета.ЗапретУдаления = Истина;
	мСтрокаОтчета.ИдентификаторОтчета = "ДиаграммаАнализСроковВыполненияЗаявок";
	мСтрокаОтчета.ИндексКартинки = 3;
	мСтрокаОтчета.Выводить = Истина;
	
	мСтрокаОтчета = ТаблицаНастроекОтчета.Добавить();
	мСтрокаОтчета.Наименование = "Анализ сроков реакции по заявкам";
	мСтрокаОтчета.ЗапретУдаления = Истина;
	мСтрокаОтчета.ИдентификаторОтчета = "ДиаграммаАнализСроковРеакцииПоЗаявкам";
	мСтрокаОтчета.ИндексКартинки = 3;
	мСтрокаОтчета.Выводить = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаФормыНастройки(НастройкиФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ НастройкиФормы = Неопределено Тогда	
		Объект.ГруппаИнтерваловВремениПоЗадачамУМС = НастройкиФормы.ГруппаИнтерваловВремениПоЗадачамУМС;
		Объект.ИнтервалВремениВыполненияЗаявки = НастройкиФормы.ИнтервалВремениВыполненияЗаявки;
		Объект.ИнтервалВремениРеакцииНаЗаявку = НастройкиФормы.ИнтервалВремениРеакцииНаЗаявку;
		
		ЗаполнитьТаблицыНастроекИзХранилища(НастройкиФормы.АдресНастройкиОтчета, НастройкиФормы.АдресМассивГрупп);
		РасположитьЭлементыФормыПоПараметрамНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасположитьЭлементыФормыПоПараметрамНастройки()
	
	мОтбор1 = Новый Структура;
	мОтбор1.Вставить("Группировка", Ложь);
	НастройкиОтчета = ТаблицаНастроекОтчета.НайтиСтроки(мОтбор1);
	мОтбор2 = Новый Структура;
	мОтбор2.Вставить("Группировка", Истина);
	МассивГрупп = ТаблицаНастроекОтчета.НайтиСтроки(мОтбор2);
		
	Если МассивГрупп.Количество() > 0 Тогда
		Если Элементы.Найти("ГруппаСтраниц") = Неопределено Тогда
			мДобавленыГруппы = Истина;
			мГруппаСтраниц = Элементы.Добавить("ГруппаСтраниц", Тип("ГруппаФормы"), ЭтаФорма);		
			мГруппаСтраниц.Вид = ВидГруппыФормы.Страницы;
			мГруппаСтраниц.РастягиватьПоГоризонтали = Истина;
			мГруппаСтраниц.РастягиватьПоВертикали = Истина;
			//мНомерСтраницы = 0;
			
			//Добавим первую страницу "Основные", на которую будут перемещены отчеты, которые не входят в группы
			мНоваяСтраница = Элементы.Добавить("СтраницаСлужебная0", Тип("ГруппаФормы"), мГруппаСтраниц);
			мНоваяСтраница.Вид = ВидГруппыФормы.Страница;
			мНоваяСтраница.Заголовок = "Основные";
			
			//Перемещаем основные группы
			Элементы.Переместить(Элементы.Группа1, Элементы["СтраницаСлужебная0"]);
			Элементы.Переместить(Элементы.Группа2, Элементы["СтраницаСлужебная0"]);
			Элементы.Переместить(Элементы.Группа3, Элементы["СтраницаСлужебная0"]);
		КонецЕсли;
		
		Для Каждого текГруппа Из МассивГрупп Цикл
			мОтбор = Новый Структура;
			мОтбор.Вставить("Идентификатор", текГруппа.ИдентификаторОтчета); 			
			мНайденныеСтроки = СписокДобавленныхГруппФормы.НайтиСтроки(мОтбор);
			Если мНайденныеСтроки.Количество() = 0 Тогда				
				//мНомерСтраницы = мНомерСтраницы + 1;				
				мИмя = "Страница" + текГруппа.ИдентификаторОтчета;
				мНоваяСтраница = Элементы.Добавить(мИмя, Тип("ГруппаФормы"), мГруппаСтраниц);
				мНоваяСтраница.Вид = ВидГруппыФормы.Страница;
				мНоваяСтраница.Заголовок = СокрЛП(текГруппа.Наименование);
				мНоваяСтраница.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;			
				
				мНоваяСтрока = СписокДобавленныхГруппФормы.Добавить();
				мНоваяСтрока.Наименование = мИмя;
				мНоваяСтрока.Идентификатор = текГруппа.ИдентификаторОтчета;
				мНоваяСтрока.КоличествоГрупп = 1;
				
				//Первую группу создаем для всех
				мИмя = "СтраницаГруппа1" + текГруппа.ИдентификаторОтчета; 
				мНоваяСтраница = Элементы.Добавить(мИмя, Тип("ГруппаФормы"), мНоваяСтраница);
				мНоваяСтраница.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				мНоваяСтраница.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				
			Иначе				
				Элементы["Страница" + текГруппа.ИдентификаторОтчета].Заголовок = текГруппа.Наименование;
				мНайденныеСтроки[0].КоличествоВПоследнейГруппе = 0;
				мНайденныеСтроки[0].КоличествоГрупп = 1;
			КонецЕсли;
		КонецЦикла;			
	КонецЕсли;
	
	счОсновной = 1;
	сч = 1;
	//Вначале переместим элементы, которые расположены в основной вкладке.
	//Все диаграммы других вклажок переместим в корень 
	Для Каждого текСтрока Из НастройкиОтчета Цикл
		Если текСтрока.ИмяРодителя = "" Тогда
			мИмя = "Группа" + Строка(счОсновной);
			Если сч = 4 Тогда			
				счОсновной = счОсновной +1;		
				сч = 1;
				мИмя = "Группа" + Строка(счОсновной);
			КонецЕсли;
			
			Элементы[текСтрока.ИдентификаторОтчета].Видимость = текСтрока.Выводить; 
			Элементы.Переместить(Элементы[текСтрока.ИдентификаторОтчета], Элементы[мИмя]);						
			сч= сч +1;
		Иначе
			Элементы.Переместить(Элементы[текСтрока.ИдентификаторОтчета], Элементы["Группа1"]);	
		КонецЕсли;
	КонецЦикла;	

	//Перемещаем отчеты до дополнительные вкладки
	Для Каждого текСтрока Из НастройкиОтчета Цикл
		Если НЕ текСтрока.ИмяРодителя = "" Тогда
			мОтбор = Новый Структура;
			мОтбор.Вставить("Идентификатор", текСтрока.ИмяРодителя); 			
			мНайденныеСтроки = СписокДобавленныхГруппФормы.НайтиСтроки(мОтбор);
			Если мНайденныеСтроки.Количество() > 0 Тогда
				Если мНайденныеСтроки[0].КоличествоВПоследнейГруппе < 3 Тогда
					мИмя = "СтраницаГруппа"+ Строка(мНайденныеСтроки[0].КоличествоГрупп) + текСтрока.ИмяРодителя;				
					Элементы[текСтрока.ИдентификаторОтчета].Видимость = текСтрока.Выводить;
					Элементы.Переместить(Элементы[текСтрока.ИдентификаторОтчета], Элементы[мИмя]);										
					мНайденныеСтроки[0].КоличествоВПоследнейГруппе = мНайденныеСтроки[0].КоличествоВПоследнейГруппе + 1;
				Иначе
					//Добавить новую подгруппу
					мНайденныеСтроки[0].КоличествоГрупп = мНайденныеСтроки[0].КоличествоГрупп +1;
					мИмяГруппы = "СтраницаГруппа" + Строка(мНайденныеСтроки[0].КоличествоГрупп) + текСтрока.ИмяРодителя;
					Если Элементы.Найти(мИмяГруппы) = Неопределено Тогда
						мНоваяСтраница = Элементы.Добавить(мИмяГруппы, Тип("ГруппаФормы"), Элементы["Страница" + текСтрока.ИмяРодителя]);
						мНоваяСтраница.Вид = ВидГруппыФормы.ОбычнаяГруппа;
						мНоваяСтраница.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
					КонецЕсли;
					
					Элементы[текСтрока.ИдентификаторОтчета].Видимость = текСтрока.Выводить;
					Элементы.Переместить(Элементы[текСтрока.ИдентификаторОтчета], Элементы[мИмяГруппы]);
					мНайденныеСтроки[0].КоличествоВПоследнейГруппе = 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
					
	
	//Удалим лишние группировки формы
	Если МассивГрупп.Количество() = 0 Тогда			
		//Перемещаем все элементы на типовые группы и удаляем лишние		
		Элементы.Переместить(Элементы.Группа1, ЭтаФорма);
		Элементы.Переместить(Элементы.Группа2, ЭтаФорма);
		Элементы.Переместить(Элементы.Группа3, ЭтаФорма);
		
		Для Каждого тек Из СписокДобавленныхГруппФормы Цикл
			Элементы.Удалить(Элементы[тек.Наименование]);			
		КонецЦикла;
		Если НЕ Элементы.Найти("ГруппаСтраниц") = Неопределено Тогда
			Элементы.Удалить(Элементы["ГруппаСтраниц"]);
		КонецЕсли;
		СписокДобавленныхГруппФормы.Очистить();
		
	Иначе
		Для Каждого тек Из СписокДобавленныхГруппФормы Цикл
			флЕсть = Ложь;
			Для Каждого текГруппа Из МассивГрупп Цикл
				Если тек.Наименование = ("Страница" + текГруппа.ИдентификаторОтчета) Тогда
					флЕсть = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если флЕсть = Ложь Тогда
				Если Элементы[тек.Наименование].ПодчиненныеЭлементы.Количество() > 0 Тогда
					//Одна группа должны быть подчиненной
					мПодчиненныеУдаляемойГруппы = Элементы[тек.Наименование].ПодчиненныеЭлементы[0];
					Если  мПодчиненныеУдаляемойГруппы.ПодчиненныеЭлементы.Количество() = 0 Тогда
						Элементы.Удалить(Элементы[тек.Наименование]);
						СписокДобавленныхГруппФормы.Удалить(тек.ПолучитьИдентификатор());
					КонецЕсли;
				ИначеЕсли Элементы[тек.Наименование].ПодчиненныеЭлементы.Количество() = 0 Тогда
					Элементы.Удалить(Элементы[тек.Наименование]);
					СписокДобавленныхГруппФормы.Удалить(тек.ПолучитьИдентификатор());
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура РасположитьЭлементыФормыПоПараметрамНастройки_Стар(АдресНастройкиОтчета, АдресМассивГрупп)
			
	НастройкиОтчета = ПолучитьИзВременногоХранилища(АдресНастройкиОтчета);
	МассивГрупп = ПолучитьИзВременногоХранилища(АдресМассивГрупп);
		
	Если МассивГрупп.Количество() > 0 Тогда
		Если Элементы.Найти("ГруппаСтраниц") = Неопределено Тогда
			мДобавленыГруппы = Истина;
			мГруппаСтраниц = Элементы.Добавить("ГруппаСтраниц", Тип("ГруппаФормы"), ЭтаФорма);
			мГруппаСтраниц.Вид = ВидГруппыФормы.Страницы;
			//мНомерСтраницы = 0;
			
			//Добавим первую страницу "Основные", на которую будут перемещены отчеты, которые не входят в группы
			мНоваяСтраница = Элементы.Добавить("СтраницаСлужебная0", Тип("ГруппаФормы"), мГруппаСтраниц);
			мНоваяСтраница.Вид = ВидГруппыФормы.Страница;
			мНоваяСтраница.Заголовок = "Основные";
			
			//Перемещаем основные группы
			Элементы.Переместить(Элементы.Группа1, Элементы["СтраницаСлужебная0"]);
			Элементы.Переместить(Элементы.Группа2, Элементы["СтраницаСлужебная0"]);
			Элементы.Переместить(Элементы.Группа3, Элементы["СтраницаСлужебная0"]);
		КонецЕсли;
		
		Для Каждого текГруппа Из МассивГрупп Цикл
			мОтбор = Новый Структура;
			мОтбор.Вставить("Идентификатор", текГруппа.ИдентификаторОтчета); 			
			мНайденныеСтроки = СписокДобавленныхГруппФормы.НайтиСтроки(мОтбор);
			Если мНайденныеСтроки.Количество() = 0 Тогда				
				//мНомерСтраницы = мНомерСтраницы + 1;				
				мИмя = "Страница" + текГруппа.ИдентификаторОтчета;
				мНоваяСтраница = Элементы.Добавить(мИмя, Тип("ГруппаФормы"), мГруппаСтраниц);
				мНоваяСтраница.Вид = ВидГруппыФормы.Страница;
				мНоваяСтраница.Заголовок = СокрЛП(текГруппа.Наименование);
				мНоваяСтраница.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;			
				
				мНоваяСтрока = СписокДобавленныхГруппФормы.Добавить();
				мНоваяСтрока.Наименование = мИмя;
				мНоваяСтрока.Идентификатор = текГруппа.ИдентификаторОтчета;
				мНоваяСтрока.КоличествоГрупп = 1;
				
				//Первую группу создаем для всех
				мИмя = "СтраницаГруппа1" + текГруппа.ИдентификаторОтчета; 
				мНоваяСтраница = Элементы.Добавить(мИмя, Тип("ГруппаФормы"), мНоваяСтраница);
				мНоваяСтраница.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				мНоваяСтраница.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				
			Иначе				
				Элементы["Страница" + текГруппа.ИдентификаторОтчета].Заголовок = текГруппа.Наименование;
				мНайденныеСтроки[0].КоличествоВПоследнейГруппе = 0;
				мНайденныеСтроки[0].КоличествоГрупп = 1;
			КонецЕсли;
		КонецЦикла;			
	КонецЕсли;
	
	счОсновной = 1;
	сч = 1;
	//Вначале переместим элементы, которые расположены в основной вкладке.
	//Все диаграммы других вклажок переместим в корень 
	Для Каждого текСтрока Из НастройкиОтчета Цикл
		Если текСтрока.ИмяРодителя = "" Тогда
			мИмя = "Группа" + Строка(счОсновной);
			Если сч = 4 Тогда			
				счОсновной = счОсновной +1;		
				сч = 1;
				мИмя = "Группа" + Строка(счОсновной);
			КонецЕсли;
			
			Элементы[текСтрока.ИдентификаторОтчета].Видимость = текСтрока.Выводить; 
			Элементы.Переместить(Элементы[текСтрока.ИдентификаторОтчета], Элементы[мИмя]);						
			сч= сч +1;
		Иначе
			Элементы.Переместить(Элементы[текСтрока.ИдентификаторОтчета], Элементы["Группа1"]);	
		КонецЕсли;
	КонецЦикла;	

	//Перемещаем отчеты до дополнительные вкладки
	Для Каждого текСтрока Из НастройкиОтчета Цикл
		Если НЕ текСтрока.ИмяРодителя = "" Тогда
			мОтбор = Новый Структура;
			мОтбор.Вставить("Идентификатор", текСтрока.ИмяРодителя); 			
			мНайденныеСтроки = СписокДобавленныхГруппФормы.НайтиСтроки(мОтбор);
			Если мНайденныеСтроки.Количество() > 0 Тогда
				Если мНайденныеСтроки[0].КоличествоВПоследнейГруппе < 3 Тогда
					мИмя = "СтраницаГруппа"+ Строка(мНайденныеСтроки[0].КоличествоГрупп) + текСтрока.ИмяРодителя;				
					Элементы[текСтрока.ИдентификаторОтчета].Видимость = текСтрока.Выводить;
					Элементы.Переместить(Элементы[текСтрока.ИдентификаторОтчета], Элементы[мИмя]);										
					мНайденныеСтроки[0].КоличествоВПоследнейГруппе = мНайденныеСтроки[0].КоличествоВПоследнейГруппе + 1;
				Иначе
					//Добавить новую подгруппу
					мНайденныеСтроки[0].КоличествоГрупп = мНайденныеСтроки[0].КоличествоГрупп +1;
					мИмяГруппы = "СтраницаГруппа" + Строка(мНайденныеСтроки[0].КоличествоГрупп) + текСтрока.ИмяРодителя;
					Если Элементы.Найти(мИмяГруппы) = Неопределено Тогда
						мНоваяСтраница = Элементы.Добавить(мИмяГруппы, Тип("ГруппаФормы"), Элементы["Страница" + текСтрока.ИмяРодителя]);
						мНоваяСтраница.Вид = ВидГруппыФормы.ОбычнаяГруппа;
						мНоваяСтраница.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
					КонецЕсли;
					
					Элементы[текСтрока.ИдентификаторОтчета].Видимость = текСтрока.Выводить;
					Элементы.Переместить(Элементы[текСтрока.ИдентификаторОтчета], Элементы[мИмяГруппы]);
					мНайденныеСтроки[0].КоличествоВПоследнейГруппе = 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
					
	
	//Удалим лишние группировки формы
	Если МассивГрупп.Количество() = 0 Тогда			
		//Перемещаем все элементы на типовые группы и удаляем лишние		
		Элементы.Переместить(Элементы.Группа1, ЭтаФорма);
		Элементы.Переместить(Элементы.Группа2, ЭтаФорма);
		Элементы.Переместить(Элементы.Группа3, ЭтаФорма);
		
		Для Каждого тек Из СписокДобавленныхГруппФормы Цикл
			Элементы.Удалить(Элементы[тек.Наименование]);			
		КонецЦикла;
		Если НЕ Элементы.Найти("ГруппаСтраниц") = Неопределено Тогда
			Элементы.Удалить(Элементы["ГруппаСтраниц"]);
		КонецЕсли;
		СписокДобавленныхГруппФормы.Очистить();
		
	Иначе
		Для Каждого тек Из СписокДобавленныхГруппФормы Цикл
			флЕсть = Ложь;
			Для Каждого текГруппа Из МассивГрупп Цикл
				Если тек.Наименование = ("Страница" + текГруппа.ИдентификаторОтчета) Тогда
					флЕсть = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если флЕсть = Ложь Тогда
				Если Элементы[тек.Наименование].ПодчиненныеЭлементы.Количество() > 0 Тогда
					//Одна группа должны быть подчиненной
					мПодчиненныеУдаляемойГруппы = Элементы[тек.Наименование].ПодчиненныеЭлементы[0];
					Если  мПодчиненныеУдаляемойГруппы.ПодчиненныеЭлементы.Количество() = 0 Тогда
						Элементы.Удалить(Элементы[тек.Наименование]);
						СписокДобавленныхГруппФормы.Удалить(тек.ПолучитьИдентификатор());
					КонецЕсли;
				ИначеЕсли Элементы[тек.Наименование].ПодчиненныеЭлементы.Количество() = 0 Тогда
					Элементы.Удалить(Элементы[тек.Наименование]);
					СписокДобавленныхГруппФормы.Удалить(тек.ПолучитьИдентификатор());
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыНастроекИзХранилища(АдресНастройкиОтчета, АдресМассивГрупп)
	
	ТаблицаНастроекОтчета.Очистить();
	НастройкиОтчета = ПолучитьИзВременногоХранилища(АдресНастройкиОтчета);
	МассивГрупп = ПолучитьИзВременногоХранилища(АдресМассивГрупп);	
	
	Для Каждого текСтрокаМассива Из МассивГрупп Цикл
		НоваяСтрока = ТаблицаНастроекОтчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, текСтрокаМассива);
	КонецЦикла;
	
	Для Каждого текСтрока Из НастройкиОтчета Цикл
		НоваяСтрока = ТаблицаНастроекОтчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, текСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтркытьФормуРасшифровокОтчета(НаименованиеДиаграммы)
	
	СтандартнаяОбработка = Ложь;
	
	мАдресТаблицыРасшифровок = ПолучитьАдресХранищаТаблицыРасшифровок();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресТаблицыРасшифровок", мАдресТаблицыРасшифровок);
	ПараметрыФормы.Вставить("НаименованиеОтчета", НаименованиеДиаграммы);
	
	ОткрытьФорму("Обработка.атл_МониторРуководителяМобильныхСотрудников.Форма.РасшифровкиОтчета", ПараметрыФормы, ЭтаФорма);	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресХранищаТаблицыРасшифровок()
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаРасшифровок.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуВТаблицуРасшифровок(НаименованиеОтчета, Показатель, ИдентификаторПоказателя, ЗначениеПоказателя, 
												ГруппировкаСтрок = Ложь, Цвет = Неопределено, КлючСтроки = 0)
	
	мНоваяСтрока = ТаблицаРасшифровок.Добавить();
	мНоваяСтрока.НаименованиеОтчета = НаименованиеОтчета;
	мНоваяСтрока.Показатель = Показатель;
	мНоваяСтрока.ИдентификаторПоказателя = ИдентификаторПоказателя;
	мНоваяСтрока.ЗначениеПоказателя	= ЗначениеПоказателя;
	мНоваяСтрока.ГруппировкаСтрок = ГруппировкаСтрок;
	мНоваяСтрока.Цвет = Цвет;
	мНоваяСтрока.КлючСтроки = КлючСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатВыбораРасшифровкиОтчета(ВыбранныйПоказатель, КлючСтроки, НаименованиеОтчета) Экспорт
	
	Если НаименованиеОтчета = "ДиаграммаРаботающиеСотрудники" Тогда
		ВывестиРасшифровкуПоДиаграммеРаботающиеСотрудники(ВыбранныйПоказатель);
		
	ИначеЕсли НаименованиеОтчета = "ДиаграммаТекущийСтатусРаботающихСотрудников" Тогда
		ВывестиРасшифровкуПоДиаграммеТекущийСтатусРаботающихСотрудников(ВыбранныйПоказатель);	
		
	ИначеЕсли НаименованиеОтчета = "ДиаграммаДоступностьРаботающихСотрудников" Тогда
		ВывестиРасшифровкуПоДиаграммеДоступностьРаботающихСотрудников(ВыбранныйПоказатель);
		
	ИначеЕсли НаименованиеОтчета = "ДиаграммаТекущийСтатусЗадачНаСегодня" Тогда
		ВывестиРасшифровкуПоДиаграммеТекущийСтатусЗадачНаСегодня(ВыбранныйПоказатель);
		
	ИначеЕсли НаименованиеОтчета = "ДиаграммаОпозданияПоЗадачам" Тогда
		ВывестиРасшифровкуПоДиаграммеОпозданияПоЗадачам(ВыбранныйПоказатель, КлючСтроки);
		
	ИначеЕсли НаименованиеОтчета = "ДиаграммаПричиныЗавершенияЗадач" Тогда
		ВывестиРасшифровкуПоДиаграммеПричиныЗавершенияЗадач(ВыбранныйПоказатель, КлючСтроки);
			
	ИначеЕсли НаименованиеОтчета = "ДиаграммаСредниеЗатратыВремениНаВыполнениеЗаявок" Тогда
		ВывестиРасшифровкуПоДиаграммеСредниеЗатратыВремениНаВыполнениеЗаявок(ВыбранныйПоказатель, КлючСтроки);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти










