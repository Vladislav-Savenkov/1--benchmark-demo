&НаСервере
Перем мОбработкаУМС;

#Область СобытияФормыИЭлементовФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МаксимальноеКоличествоПопытокПодключения = 1;
	
	мЗаписьРегистраатл_НастройкиПодсистемыУМС = РегистрыСведений.атл_НастройкиПодсистемыУМС.СоздатьМенеджерЗаписи();
	мЗаписьРегистраатл_НастройкиПодсистемыУМС.Прочитать(); 
	
	ЭтаФорма.ЗначениеВРеквизитФормы(мЗаписьРегистраатл_НастройкиПодсистемыУМС, "ЗаписьРегистраатл_НастройкиПодсистемыУМС");	
	
	мОбработкаУМС = Обработки.атл_ОбменДаннымиУМС.Создать();
	мОбработкаУМС.ПрочитатьПараметрыПодключенияКСерверуУМС();
	мОбработкаУМС.ВызватьПодключениеКСерверу();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЛогиновВыполняемоеДействиеПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Элементы.ТаблицаЛогинов.ТекущиеДанные.ВыполняемоеДействие) Тогда
		Элементы.ТаблицаЛогинов.ТекущиеДанные.ВыполняемоеДействие = ПолучитьДействиеНеВыбрано();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЛогиновВыполняемоеДействиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	мАдресХранилища = ПолучитьСписокДопустимыхДействий(Элементы.ТаблицаЛогинов.ТекущаяСтрока);
	мСписок = ПолучитьИзВременногоХранилища(мАдресХранилища);
	
	ДанныеВыбора = мСписок;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьИнформациюОПодключенииМобильногоСотрудника" Тогда
		Если ЗначениеЗаполнено(Параметр) И ТипЗнч(Параметр) = Тип("СправочникСсылка.Пользователи") Тогда
			ОбновитьДанныеПоПользователю(Параметр);			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область КомандыФормы

&НаКлиенте
Процедура РасширеннаяНастройка(Команда)
	
	мКнопка = Элементы.РасширеннаяНастройка;
	Если мКнопка.Пометка = Истина Тогда
		мКнопка.Пометка = Ложь;				
		//скрываем колонки
		Элементы.ГруппаКолонокИнформацияНаСервере.Видимость = Ложь;
		Элементы.ГруппаКолонокИнформацияВ1С.Видимость = Ложь;
	Иначе
		мКнопка.Пометка = Истина;
		//показываем колонки
		Элементы.ГруппаКолонокИнформацияНаСервере.Видимость = Истина;
		Элементы.ГруппаКолонокИнформацияВ1С.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНастройки(Команда)
	
	мОповещение = Новый ОписаниеОповещения("ИзменитьНастройкиПодсистемыУМСОповещение", ЭтотОбъект);

	ОткрытьФорму("РегистрСведений.атл_НастройкиПодсистемыУМС.ФормаЗаписи",,ЭтаФорма,,,,мОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьИнформационнуюБазуНаСервере(Команда)
	
	ВыполнитьПодключениеКСерверу(Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнформациюОСостоянииУчетнойЗаписиНаКлиенте(Команда)
		
	ПолучитьИнформациюОСостоянииУчетнойЗаписи();
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбменДанными(Команда)
	
	ОткрытьФорму("Обработка.атл_ОбменДаннымиУМС.Форма");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПодключенияМК(Команда)
	
	ТекущиеДанные = Элементы.СписокПользователи.ТекущиеДанные;	 
	Если ТекущиеДанные <> Неопределено Тогда						
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Пользователь", ТекущиеДанные.Ссылка);
		
		мКлючЗаписи = КлючЗаписи(ТекущиеДанные.Ссылка);
		
		Если НЕ мКлючЗаписи = Неопределено Тогда
			ПараметрыФормы = Новый Структура("Ключ,ЗначенияЗаполнения", мКлючЗаписи, ЗначенияЗаполнения);		
		    ОткрытьФорму("РегистрСведений.атл_НастройкиПодключенияМобильныхСотрудников.Форма.ФормаЗаписи", ПараметрыФормы,ЭтаФорма)
		Иначе
			мФорма = ПолучитьФорму("РегистрСведений.атл_НастройкиПодключенияМобильныхСотрудников.Форма.ФормаЗаписи",, ЭтаФорма);
			мФорма.Запись.Пользователь = ТекущиеДанные.Ссылка;
			мФорма.Открыть();			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокПользователейПодсистемыУМС(Команда)
	
	ЗаполнитьСписокПользователейПодсистемыУМСНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьДанныеССервером(Команда)
	СинхронизироватьДанныеССерверомНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПользователей(Команда)
	ВыгрузитьПользователейНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПричиныЗавершенияЗадачМобильнымСотрудникам(Команда)
	ВыгрузитьПричиныЗавершенияЗадачМобильнымСотрудникамНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсеСправочники(Команда)
	ВыгрузитьВсеСправочникиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНастройкиУВсехПользователей(Команда)
	ОбновитьНастройкиУВсехПользователейНаСервере();
КонецПроцедуры

#КонецОбласти



#Область ПрочиеПроцедурыИФункции

&НаСервере
Процедура ОбновитьНастройкиПодсистемыУМС()
	
	мЗаписьРегистраатл_НастройкиПодсистемыУМС = РегистрыСведений.атл_НастройкиПодсистемыУМС.СоздатьМенеджерЗаписи();
	мЗаписьРегистраатл_НастройкиПодсистемыУМС.Прочитать(); 
	
	ЭтаФорма.ЗначениеВРеквизитФормы(мЗаписьРегистраатл_НастройкиПодсистемыУМС, "ЗаписьРегистраатл_НастройкиПодсистемыУМС");		
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНастройкиПодсистемыУМСОповещение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ОбновитьНастройкиПодсистемыУМС();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИнформациюОСостоянииУчетнойЗаписи()
	
	мОбработкаУМС = Обработки.атл_ОбменДаннымиУМС.Создать();
	мОбработкаУМС.ПрочитатьПараметрыПодключенияКСерверуУМС();
	мОбработкаУМС.ВызватьПодключениеКСерверу();
	мОбработкаУМС.ПолучитьИнформациюОСостоянииУчетнойЗаписи();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПодключениеКСерверу(ЗарегистрироватьИБ = Ложь)
	
	мОбработкаУМС = Обработки.атл_ОбменДаннымиУМС.Создать();
	Если ЗарегистрироватьИБ Тогда 
		мОбработкаУМС.мЗарегистрироватьИнформационнуюБазуНаСервере = Истина;
	КонецЕсли;
	мОбработкаУМС.ПрочитатьПараметрыПодключенияКСерверуУМС();
	мОбработкаУМС.ВызватьПодключениеКСерверу();
	
КонецПроцедуры

&НаСервере
Функция КлючЗаписи(Пользователь)
	
	мНабор = РегистрыСведений.атл_НастройкиПодключенияМобильныхСотрудников.СоздатьМенеджерЗаписи();
	мНабор.Пользователь = Пользователь;
	мНабор.Прочитать();
	
	Если мНабор.Выбран() Тогда
		ДанныеКлючаЗаписи = Новый Структура("Пользователь", Пользователь);
		Возврат РегистрыСведений.атл_НастройкиПодключенияМобильныхСотрудников.СоздатьКлючЗаписи(ДанныеКлючаЗаписи);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокПользователейПодсистемыУМСНаСервере()
	
	мОбработкаУМС = Обработки.атл_ОбменДаннымиУМС.Создать();
	мОбработкаУМС.ПрочитатьПараметрыПодключенияКСерверуУМС();
	мОбработкаУМС.ВызватьПодключениеКСерверу();
	
	мОбработкаУМС.ТаблицаЛогинов.Очистить();
	
	//сначала запрашиваем информацию о состоянии учетной записи	
	мОбработкаУМС.мОтправленЗапросОКоличествеДоступныхЛогинов = Истина;
	мОбработкаУМС.ПолучитьИнформациюОСостоянииУчетнойЗаписи();
	//
	
	РезультатыЗаписиПакета = мОбработкаУМС.ЗаписатьПакет(0,"command",,,,,"get_users",,,);
	РезультатыОтправки = мОбработкаУМС.ОтправкаДанныхНаСервер(РезультатыЗаписиПакета); 
	Если РезультатыОтправки.ОтправкаУспешна Тогда
		Объект.КоличествоДоступныхЛогинов = мОбработкаУМС.КоличествоДоступныхЛогинов;	
		ПерезаполнитьСписокПользователейПоДаннымССервера(РезультатыОтправки);		
		ЗагрузитьЛогиныИз1С();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "ВНИМАНИЕ! НЕ УДАЛОСЬ отправить запрос получения списка пользователей!";
		Сообщение.Сообщить();		
	КонецЕсли;
	
	мОбработкаУМС.ВыполнитьПопыткуУдаленияФайла(РезультатыОтправки.ИмяПринятогоФайла);	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПользователейПодсистемыУМСПослеСинхранизацииНаСервере()
		
	мОбработкаУМС.ТаблицаЛогинов.Очистить();
	
	//сначала запрашиваем информацию о состоянии учетной записи	
	мОбработкаУМС.мОтправленЗапросОКоличествеДоступныхЛогинов = Истина;
	мОбработкаУМС.ПолучитьИнформациюОСостоянииУчетнойЗаписи();
	//
	
	РезультатыЗаписиПакета = мОбработкаУМС.ЗаписатьПакет(0,"command",,,,,"get_users",,,);
	РезультатыОтправки = мОбработкаУМС.ОтправкаДанныхНаСервер(РезультатыЗаписиПакета); 
	Если РезультатыОтправки.ОтправкаУспешна Тогда	
		Объект.КоличествоДоступныхЛогинов = мОбработкаУМС.КоличествоДоступныхЛогинов;
		ПерезаполнитьСписокПользователейПоДаннымССервера(РезультатыОтправки);		
		ЗагрузитьЛогиныИз1С();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "ВНИМАНИЕ! НЕ УДАЛОСЬ отправить запрос получения списка пользователей!";
		Сообщение.Сообщить();		
	КонецЕсли;
	
	мОбработкаУМС.ВыполнитьПопыткуУдаленияФайла(РезультатыОтправки.ИмяПринятогоФайла);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСписокПользователейПоДаннымССервера(РезультатыОтправки)
	
	ПакетСДанными = мОбработкаУМС.ПолучитьДанныеИзПакета(РезультатыОтправки);
	Если Не ПакетСДанными = Неопределено Тогда
		//заполняем список пользователей
		
		ПакетСписокПользователей = ПакетСДанными.users;
		
		Если ТипЗнч(ПакетСписокПользователей) = Тип("СписокXDTO") Тогда
			КоличествоЭлементовВСписке = ПакетСписокПользователей.Количество();
			Если КоличествоЭлементовВСписке > 0 Тогда
				Объект.ТаблицаЛогинов.Очистить();
				Для Индекс = 0 по КоличествоЭлементовВСписке-1 Цикл
					Элемент = ПакетСписокПользователей[Индекс];
					ПрочитатьСтрокуИзПакетаСПользователями(Элемент);
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			//один объект
			ПрочитатьСтрокуИзПакетаСПользователями(ПакетСписокПользователей);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСтрокуИзПакетаСПользователями(Элемент)
	
	НоваяСтрока = Объект.ТаблицаЛогинов.Добавить();
	НоваяСтрока.ВыполняемоеДействие = Перечисления.атл_ВидыВыполняемыхСПользователямиДействий.НеВыбрано;
	
	Логин = Элемент["login"];
	НоваяСтрока.ЛогинНаСервере = Логин;
	
	ПриоритетНаСервере = Элемент["sort"];
	НоваяСтрока.ПриоритетНаСервере = ПриоритетНаСервере;
	
	ИдентификаторВ1С = Элемент["uid1c"];
	НоваяСтрока.Идентификатор1СНаСервере = ИдентификаторВ1С;
	
	ИдентификаторЛогинаНаСервере = Элемент["id"];
	НоваяСтрока.ИдентификаторЛогинаНаСервере = ИдентификаторЛогинаНаСервере;
	
	КодПродукта = Элемент["product_code"];
	НоваяСтрока.КодПродукта	= КодПродукта;
	
	НомерВерсииПродукта = Элемент["product_version"];
	НоваяСтрока.НомерВерсииПродукта	= НомерВерсииПродукта;
	
	Если Элемент["authorized"] = 1 Тогда
		НоваяСтрока.УстройствоПодключеноНаСервере = Истина;
	КонецЕсли;
	
	НоваяСтрока.ИмяУстройства = Элемент["device_name"];
	
	мНастройки = Элемент["settings"];
	
	Если НЕ мНастройки = Неопределено Тогда
		Если мНастройки["track_location_recording"] = 1 Тогда
			НоваяСтрока.ЗаписыватьТрекПоРасписаниюНаСервере = Истина;
		Иначе
			НоваяСтрока.ЗаписыватьТрекПоРасписаниюНаСервере = Ложь;
		КонецЕсли;
		
		Если мНастройки["event_location_recording"] = 1 Тогда
			НоваяСтрока.ЗаписыватьКоординатыСобытийПоРасписаниюНаСервере = Истина;
		Иначе
			НоваяСтрока.ЗаписыватьКоординатыСобытийПоРасписаниюНаСервере = Ложь;
		КонецЕсли;
		
		Если мНастройки["current_location_recording"] = 1 Тогда
			НоваяСтрока.ПолучатьИнформациюОТекущемМестонахожденииНаСервере = Истина;
		Иначе
			НоваяСтрока.ПолучатьИнформациюОТекущемМестонахожденииНаСервере = Ложь;
		КонецЕсли;	
		
		Если мНастройки["remind_on_planned_visit"] = 1 Тогда
			НоваяСтрока.НапоминатьОЗадачеВМоментЗапланированогоНачалаРаботНаСервере = Истина;
		Иначе
			НоваяСтрока.НапоминатьОЗадачеВМоментЗапланированогоНачалаРаботНаСервере = Ложь;
		КонецЕсли;
		
		НоваяСтрока.КоличествоМинутЗаКотороеНапоминатьОЗадачеДоЗапланированогоНачалаРаботНаСервере = мНастройки["remind_before_planned_visit"];
		
		Если мНастройки["remind_on_arrived"] = 1 Тогда
			НоваяСтрока.НапоминатьОНеобходимостиИзмененияСтатусаВМоментПрибытияНаМестоВыполненияРаботНаСервере = Истина;
		Иначе
			НоваяСтрока.НапоминатьОНеобходимостиИзмененияСтатусаВМоментПрибытияНаМестоВыполненияРаботНаСервере = Ложь;
		КонецЕсли;
		
		Если мНастройки["remind_on_leave"] = 1 Тогда
			НоваяСтрока.НапоминатьОНеобходимостиИзмененияСтатусаВМоментВыходаИзЗоныМестаВыполненияРаботНаСервере = Истина;
		Иначе
			НоваяСтрока.НапоминатьОНеобходимостиИзмененияСтатусаВМоментВыходаИзЗоныМестаВыполненияРаботНаСервере = Ложь;
		КонецЕсли;
		
		Если мНастройки["remind_cycle_on_new_task"] = 1 Тогда
			НоваяСтрока.ПовторятьНапоминаниеОНовойЗадачеНаСервере = Истина;
		Иначе
			НоваяСтрока.ПовторятьНапоминаниеОНовойЗадачеНаСервере = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "" + Логин + " " + ПриоритетНаСервере + " " + ИдентификаторВ1С;
	Сообщение.Сообщить();	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЛогиныИз1С()
	
	Для Каждого Стр Из Объект.ТаблицаЛогинов Цикл
		СтрокаУникальногоИдентификатора = Стр.Идентификатор1СНаСервере;
		Стр.Идентификатор1СНаСервере = СтрокаУникальногоИдентификатора;
		Стр.ПриоритетВ1С = Стр.НомерСтроки;
		
		Попытка
			УникальныйИдентификаторОбъекта = Новый УникальныйИдентификатор(СтрокаУникальногоИдентификатора);
			ПользовательВ1СПоСтроке = Справочники.Пользователи.ПолучитьСсылку(УникальныйИдентификаторОбъекта);
			Если ЗначениеЗаполнено(ПользовательВ1СПоСтроке) и ПользовательВ1СПоСтроке.ПолучитьОбъект() <> Неопределено Тогда
				Стр.ПользовательВ1С = ПользовательВ1СПоСтроке;
				ЗаписьДополнительныеПараметры = РегистрыСведений.атл_НастройкиПодключенияМобильныхСотрудников.СоздатьМенеджерЗаписи();
				ЗаписьДополнительныеПараметры.Пользователь = Стр.ПользовательВ1С;
				ЗаписьДополнительныеПараметры.Прочитать();
				Если ЗначениеЗаполнено(Стр.Идентификатор1СНаСервере) Тогда
					Если Не ЗаписьДополнительныеПараметры.АвторизованНаСервере Тогда
						ЗаписьДополнительныеПараметры.АвторизованНаСервере = Истина;
						ЗаписьДополнительныеПараметры.Записать();
						//только что авторизованному пользователю сразу отправляем расписание занятости
						атл_УправлениеМобильнымиСотрудниками.ОтправитьРасписаниеМобильномуСотруднику(Стр.ПользовательВ1С);
					КонецЕсли;						
				Иначе
					Если ЗаписьДополнительныеПараметры.АвторизованНаСервере Тогда
						ЗаписьДополнительныеПараметры.АвторизованНаСервере = Ложь;
						ЗаписьДополнительныеПараметры.Записать();
					КонецЕсли;						
				КонецЕсли;
				
				Стр.ЛогинВ1С = ЗаписьДополнительныеПараметры.ЛогинМК;
				Стр.ПарольВ1С = ЗаписьДополнительныеПараметры.ПарольМК;				
				Стр.ЗаписыватьТрекПоРасписаниюВ1С = ЗаписьДополнительныеПараметры.ЗаписыватьТрекПоРасписанию;
				Стр.ЗаписыватьКоординатыСобытийПоРасписаниюВ1С = ЗаписьДополнительныеПараметры.ЗаписыватьКоординатыСобытийПоРасписанию;
				Стр.ПолучатьИнформациюОТекущемМестонахожденииВ1С = ЗаписьДополнительныеПараметры.ПолучатьИнформациюОТекущемМестонахождении;
				Стр.НапоминатьОЗадачеВМоментЗапланированогоНачалаРаботВ1С = ЗаписьДополнительныеПараметры.НапоминатьОЗадачеВМоментЗапланированогоНачалаРабот;				
				Стр.КоличествоМинутЗаКотороеНапоминатьОЗадачеДоЗапланированогоНачалаРаботВ1С = ЗаписьДополнительныеПараметры.КоличествоМинутЗаКотороеНапоминатьОЗадачеДоЗапланированогоНачалаРабот; 
				Стр.НапоминатьОНеобходимостиИзмененияСтатусаВМоментПрибытияНаМестоВыполненияРаботВ1С = ЗаписьДополнительныеПараметры.НапоминатьОНеобходимостиИзмененияСтатусаВМоментПрибытияНаМестоВыполненияРабот; 				
				Стр.НапоминатьОНеобходимостиИзмененияСтатусаВМоментВыходаИзЗоныМестаВыполненияРаботВ1С = ЗаписьДополнительныеПараметры.НапоминатьОНеобходимостиИзмененияСтатусаВМоментВыходаИзЗоныМестаВыполненияРабот; 
				Стр.ПовторятьНапоминаниеОНовойЗадачеВ1С = ЗаписьДополнительныеПараметры.ПовторятьНапоминаниеОНовойЗадаче; 
				
				Если (Стр.ЗаписыватьТрекПоРасписаниюВ1С <> Стр.ЗаписыватьТрекПоРасписаниюНаСервере) 
						ИЛИ (Стр.ЗаписыватьКоординатыСобытийПоРасписаниюВ1С <> Стр.ЗаписыватьКоординатыСобытийПоРасписаниюНаСервере)
						ИЛИ (Стр.ПолучатьИнформациюОТекущемМестонахожденииВ1С <> Стр.ПолучатьИнформациюОТекущемМестонахожденииНаСервере) 						
						ИЛИ (Стр.НапоминатьОЗадачеВМоментЗапланированогоНачалаРаботВ1С <> Стр.НапоминатьОЗадачеВМоментЗапланированогоНачалаРаботНаСервере) 
						ИЛИ (Стр.КоличествоМинутЗаКотороеНапоминатьОЗадачеДоЗапланированогоНачалаРаботВ1С <> Стр.КоличествоМинутЗаКотороеНапоминатьОЗадачеДоЗапланированогоНачалаРаботНаСервере) 
						ИЛИ (Стр.НапоминатьОНеобходимостиИзмененияСтатусаВМоментПрибытияНаМестоВыполненияРаботВ1С <> Стр.НапоминатьОНеобходимостиИзмененияСтатусаВМоментПрибытияНаМестоВыполненияРаботНаСервере) 
						ИЛИ (Стр.НапоминатьОНеобходимостиИзмененияСтатусаВМоментВыходаИзЗоныМестаВыполненияРаботВ1С <> Стр.НапоминатьОНеобходимостиИзмененияСтатусаВМоментВыходаИзЗоныМестаВыполненияРаботНаСервере) 
						ИЛИ (Стр.ПовторятьНапоминаниеОНовойЗадачеВ1С <> Стр.ПовторятьНапоминаниеОНовойЗадачеНаСервере) Тогда
												
					Стр.ДополнительнаяИнформация = Стр.ДополнительнаяИнформация  + "Различаются настройки между сервером и 1С! ";
					Стр.ЕстьОшибка = Истина;	
				КонецЕсли;
			Иначе
				Стр.ДополнительнаяИнформация = "Не найден пользователь в 1С! ";
				Стр.ЕстьОшибка = Истина;
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не удалось найти пользователя в 1С по идентификатору " + СтрокаУникальногоИдентификатора;
				Сообщение.Сообщить();				
			КонецЕсли;
		Исключение
			Стр.ДополнительнаяИнформация = "Не найден пользователь в 1С! ";
			Стр.ЕстьОшибка = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось найти пользователя в 1С по идентификатору " + СтрокаУникальногоИдентификатора;			
			Сообщение.Сообщить();			
	    КонецПопытки;
		
		Если Стр.НомерСтроки > Объект.КоличествоДоступныхЛогинов Тогда
			Стр.ДополнительнаяИнформация = Стр.ДополнительнаяИнформация  + "Превышено число логинов! ";
			Стр.ЕстьОшибка = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// пытаемся заполнить по справочнику, за исключением имеющихся
	
	СписокИмеющихсяЛогинов = Объект.ТаблицаЛогинов.Выгрузить(,"ЛогинВ1С"); //.ВыгрузитьКолонки("ЛогинВ1С");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.Ссылка,
	               |	ВложенныйЗапрос.ЯвляетсяПользователемМК,
	               |	ВложенныйЗапрос.ЛогинМК,
	               |	ВложенныйЗапрос.ПриоритетМК,
	               |	ВложенныйЗапрос.ПарольМК,
	               |	ВложенныйЗапрос.ЗаписыватьТрекПоРасписанию,
	               |	ВложенныйЗапрос.ЗаписыватьКоординатыСобытийПоРасписанию,
	               |	ВложенныйЗапрос.ПолучатьИнформациюОТекущемМестонахождении,
	               |	ВложенныйЗапрос.НапоминатьОЗадачеВМоментЗапланированогоНачалаРабот,
	               |	ВложенныйЗапрос.КоличествоМинутЗаКотороеНапоминатьОЗадачеДоЗапланированогоНачалаРабот,
	               |	ВложенныйЗапрос.НапоминатьОНеобходимостиИзмененияСтатусаВМоментПрибытияНаМестоВыполненияРабот,
	               |	ВложенныйЗапрос.НапоминатьОНеобходимостиИзмененияСтатусаВМоментВыходаИзЗоныМестаВыполненияРабот,
	               |	ВложенныйЗапрос.ПовторятьНапоминаниеОНовойЗадаче
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Пользователи.Ссылка КАК Ссылка,
	               |		ЕСТЬNULL(НастройкиПодключенияПользователей.ЯвляетсяПользователемМК, ЛОЖЬ) КАК ЯвляетсяПользователемМК,
	               |		НастройкиПодключенияПользователей.ЛогинМК КАК ЛогинМК,
	               |		НастройкиПодключенияПользователей.ПриоритетМК КАК ПриоритетМК,
	               |		НастройкиПодключенияПользователей.ПарольМК КАК ПарольМК,
	               |		НастройкиПодключенияПользователей.ЗаписыватьТрекПоРасписанию КАК ЗаписыватьТрекПоРасписанию,
	               |		НастройкиПодключенияПользователей.ЗаписыватьКоординатыСобытийПоРасписанию КАК ЗаписыватьКоординатыСобытийПоРасписанию,
	               |		НастройкиПодключенияПользователей.ПолучатьИнформациюОТекущемМестонахождении КАК ПолучатьИнформациюОТекущемМестонахождении,
	               |		НастройкиПодключенияПользователей.НапоминатьОЗадачеВМоментЗапланированогоНачалаРабот КАК НапоминатьОЗадачеВМоментЗапланированогоНачалаРабот,
	               |		НастройкиПодключенияПользователей.КоличествоМинутЗаКотороеНапоминатьОЗадачеДоЗапланированогоНачалаРабот КАК КоличествоМинутЗаКотороеНапоминатьОЗадачеДоЗапланированогоНачалаРабот,
	               |		НастройкиПодключенияПользователей.НапоминатьОНеобходимостиИзмененияСтатусаВМоментПрибытияНаМестоВыполненияРабот КАК НапоминатьОНеобходимостиИзмененияСтатусаВМоментПрибытияНаМестоВыполненияРабот,
	               |		НастройкиПодключенияПользователей.НапоминатьОНеобходимостиИзмененияСтатусаВМоментВыходаИзЗоныМестаВыполненияРабот КАК НапоминатьОНеобходимостиИзмененияСтатусаВМоментВыходаИзЗоныМестаВыполненияРабот,
	               |		НастройкиПодключенияПользователей.ПовторятьНапоминаниеОНовойЗадаче КАК ПовторятьНапоминаниеОНовойЗадаче
	               |	ИЗ
	               |		Справочник.Пользователи КАК Пользователи
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.атл_НастройкиПодключенияМобильныхСотрудников КАК НастройкиПодключенияПользователей
	               |			ПО Пользователи.Ссылка = НастройкиПодключенияПользователей.Пользователь
	               |	ГДЕ
	               |		НЕ Пользователи.Ссылка В (&СписокИмеющихсяЛогинов)) КАК ВложенныйЗапрос
	               |ГДЕ
	               |	ВложенныйЗапрос.ЯвляетсяПользователемМК = ИСТИНА";
	
	Запрос.УстановитьПараметр("СписокИмеющихсяЛогинов", СписокИмеющихсяЛогинов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		мПараметрыПоиска = Новый Структура;
		мПараметрыПоиска.Вставить("ПользовательВ1С", Выборка.Ссылка); 
		мНайденныеСтроки = Объект.ТаблицаЛогинов.НайтиСтроки(мПараметрыПоиска);
		
		Если мНайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрокаВСписке = Объект.ТаблицаЛогинов.Добавить();
			НоваяСтрокаВСписке.ВыполняемоеДействие = Перечисления.атл_ВидыВыполняемыхСПользователямиДействий.НеВыбрано;
			НоваяСтрокаВСписке.ЛогинВ1С = Выборка.ЛогинМК;
			НоваяСтрокаВСписке.ПарольВ1С = Выборка.ПарольМК;
			НоваяСтрокаВСписке.ПриоритетВ1С = Выборка.ПриоритетМК;
			НоваяСтрокаВСписке.ПользовательВ1С = Выборка.Ссылка;
			НоваяСтрокаВСписке.ЗаписыватьТрекПоРасписаниюВ1С = Выборка.ЗаписыватьТрекПоРасписанию;
			НоваяСтрокаВСписке.ЗаписыватьКоординатыСобытийПоРасписаниюВ1С = Выборка.ЗаписыватьКоординатыСобытийПоРасписанию;
			НоваяСтрокаВСписке.ПолучатьИнформациюОТекущемМестонахожденииВ1С = Выборка.ПолучатьИнформациюОТекущемМестонахождении;			
			НоваяСтрокаВСписке.НапоминатьОЗадачеВМоментЗапланированогоНачалаРаботВ1С = Выборка.НапоминатьОЗадачеВМоментЗапланированогоНачалаРабот;
			НоваяСтрокаВСписке.КоличествоМинутЗаКотороеНапоминатьОЗадачеДоЗапланированогоНачалаРаботВ1С = Выборка.КоличествоМинутЗаКотороеНапоминатьОЗадачеДоЗапланированогоНачалаРабот;
			НоваяСтрокаВСписке.НапоминатьОНеобходимостиИзмененияСтатусаВМоментПрибытияНаМестоВыполненияРаботВ1С = Выборка.НапоминатьОНеобходимостиИзмененияСтатусаВМоментПрибытияНаМестоВыполненияРабот;
			НоваяСтрокаВСписке.НапоминатьОНеобходимостиИзмененияСтатусаВМоментВыходаИзЗоныМестаВыполненияРаботВ1С = Выборка.НапоминатьОНеобходимостиИзмененияСтатусаВМоментВыходаИзЗоныМестаВыполненияРабот;
			НоваяСтрокаВСписке.ПовторятьНапоминаниеОНовойЗадачеВ1С = Выборка.ПовторятьНапоминаниеОНовойЗадаче;
		
			НоваяСтрокаВСписке.ДополнительнаяИнформация = НоваяСтрокаВСписке.ДополнительнаяИнформация + "Пользователь не авторизован на сервере! ";
			Если НоваяСтрокаВСписке.НомерСтроки > Объект.КоличествоДоступныхЛогинов Тогда
				НоваяСтрокаВСписке.ДополнительнаяИнформация = НоваяСтрокаВСписке.ДополнительнаяИнформация  + "Превышено число логинов! ";
			КонецЕсли;
			НоваяСтрокаВСписке.ЕстьОшибка = Истина;
			
			ЗаписьДополнительныеПараметры = РегистрыСведений.атл_НастройкиПодключенияМобильныхСотрудников.СоздатьМенеджерЗаписи();
			ЗаписьДополнительныеПараметры.Пользователь = Выборка.Ссылка;
			ЗаписьДополнительныеПараметры.Прочитать();
			ЗаписьДополнительныеПараметры.АвторизованНаСервере = Ложь;
			ЗаписьДополнительныеПараметры.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьДанныеССерверомНаСервере()
	
	мОбработкаУМС = Обработки.атл_ОбменДаннымиУМС.Создать();
	мОбработкаУМС.ПрочитатьПараметрыПодключенияКСерверуУМС();
	мОбработкаУМС.ВызватьПодключениеКСерверу();
	
	мОбработкаУМС.ТаблицаЛогинов.Загрузить(Объект.ТаблицаЛогинов.Выгрузить());
	
	РезультатыОтправки = мОбработкаУМС.ВыгрузитьЛогиныНаСервер();
	
	Если РезультатыОтправки.ОтправкаУспешна Тогда
		
		Если мОбработкаУМС.ЕстьОшибкиСинхронизацииПользователейССервером(РезультатыОтправки) Тогда
			//есть ошибки
		Иначе
			//нет ошибоки
			Объект.ТаблицаЛогинов.Очистить();			
			ЗаполнитьСписокПользователейПодсистемыУМСПослеСинхранизацииНаСервере();
		КонецЕсли;
		//
		//ПерезаполнитьСписокПользователейПоДаннымССервера(РезультатыОтправки);
		
	КонецЕсли;
	мОбработкаУМС.ВыполнитьПопыткуУдаленияФайла(РезультатыОтправки.ИмяПринятогоФайла);

КонецПроцедуры

&НаСервере
Процедура ВыгрузитьПользователейНаСервере(ВыгружатьЦеликом = Истина)
		
	мОбработкаУМС = Обработки.атл_ОбменДаннымиУМС.Создать();
	мОбработкаУМС.ПрочитатьПараметрыПодключенияКСерверуУМС();
	мОбработкаУМС.ВызватьПодключениеКСерверу();
	мОбработкаУМС.ВыгрузитьПользователей(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьПричиныЗавершенияЗадачМобильнымСотрудникамНаСервере()
	
	мОбработкаУМС = Обработки.атл_ОбменДаннымиУМС.Создать();
	мОбработкаУМС.ПрочитатьПараметрыПодключенияКСерверуУМС();
	мОбработкаУМС.ВызватьПодключениеКСерверу();
	мОбработкаУМС.ВыгрузитьПричиныЗавершенияЗадач(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьВсеСправочникиНаСервере()
		
	мОбработкаУМС = Обработки.атл_ОбменДаннымиУМС.Создать();
	мОбработкаУМС.ПрочитатьПараметрыПодключенияКСерверуУМС();
	мОбработкаУМС.ВызватьПодключениеКСерверу();
	мОбработкаУМС.ВыгрузитьПользователей(Истина);
	мОбработкаУМС.ВыгрузитьПричиныЗавершенияЗадач(Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокДопустимыхДействий(НомерТекущейСтроки)
	
	мТекущиеДанные = Объект.ТаблицаЛогинов.НайтиПоИдентификатору(НомерТекущейСтроки);
	
	мСписок = Новый СписокЗначений;
	мСписок.Добавить(Перечисления.атл_ВидыВыполняемыхСПользователямиДействий.НеВыбрано);	
	
	//пытаемся определить возможный статус по строке
	Если Не ЗначениеЗаполнено(мТекущиеДанные.Идентификатор1СНаСервере) и ЗначениеЗаполнено(мТекущиеДанные.ПользовательВ1С) Тогда
		//можно добавить
		мСписок.Добавить(Перечисления.атл_ВидыВыполняемыхСПользователямиДействий.ДобавитьНаСервер);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мТекущиеДанные.Идентификатор1СНаСервере) и ЗначениеЗаполнено(мТекущиеДанные.ПользовательВ1С) Тогда
		//можно обновить настройки пользователя
		мСписок.Добавить(Перечисления.атл_ВидыВыполняемыхСПользователямиДействий.ОбновитьНастройки);			
		//можно изменить
		мСписок.Добавить(Перечисления.атл_ВидыВыполняемыхСПользователямиДействий.ИзменитьЛогинПароль);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мТекущиеДанные.Идентификатор1СНаСервере) и мТекущиеДанные.УстройствоПодключеноНаСервере Тогда
		//можно отключить устройство
		мСписок.Добавить(Перечисления.атл_ВидыВыполняемыхСПользователямиДействий.ОтключитьУстройствоНаСервере);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мТекущиеДанные.Идентификатор1СНаСервере) Тогда
		//можно удалить
		мСписок.Добавить(Перечисления.атл_ВидыВыполняемыхСПользователямиДействий.УдалитьНаСервере);
	КонецЕсли;
			
	мАдресХранилища = ПоместитьВоВременноеХранилище(мСписок, УникальныйИдентификатор);
	
	Возврат мАдресХранилища;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДействиеНеВыбрано()
	
	Возврат Перечисления.атл_ВидыВыполняемыхСПользователямиДействий.НеВыбрано;
	
КонецФункции

&НаСервере
Процедура ОбновитьНастройкиУВсехПользователейНаСервере()
	
	Для Каждого Стр из Объект.ТаблицаЛогинов Цикл
		Если ЗначениеЗаполнено(Стр.Идентификатор1СНаСервере) и ЗначениеЗаполнено(Стр.ПользовательВ1С) Тогда
			Стр.ВыполняемоеДействие = Перечисления.атл_ВидыВыполняемыхСПользователямиДействий.ОбновитьНастройки;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоПользователю(ПользовательДляОбновления)
	
	МассивСтрок = Объект.ТаблицаЛогинов.НайтиСтроки(Новый Структура("ПользовательВ1С", ПользовательДляОбновления));
	
	Для Каждого СтрокаПользователя Из МассивСтрок Цикл
		ЗаписьРегистра = РегистрыСведений.атл_НастройкиПодключенияМобильныхСотрудников.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Пользователь = СтрокаПользователя.ПользовательВ1С;
		ЗаписьРегистра.Прочитать();
		СтрокаПользователя.ЛогинВ1С 					 			 	= ЗаписьРегистра.ЛогинМК;
		СтрокаПользователя.ПарольВ1С 				 				 	= ЗаписьРегистра.ПарольМК;
		СтрокаПользователя.ЗаписыватьТрекПоРасписаниюВ1С			 	= ЗаписьРегистра.ЗаписыватьТрекПоРасписанию;
		СтрокаПользователя.ЗаписыватьКоординатыСобытийПоРасписаниюВ1С	= ЗаписьРегистра.ЗаписыватьКоординатыСобытийПоРасписанию;
		СтрокаПользователя.ПолучатьИнформациюОТекущемМестонахожденииВ1С = ЗаписьРегистра.ПолучатьИнформациюОТекущемМестонахождении;		
		СтрокаПользователя.НапоминатьОЗадачеВМоментЗапланированогоНачалаРаботВ1С = ЗаписьРегистра.НапоминатьОЗадачеВМоментЗапланированогоНачалаРабот;
		СтрокаПользователя.КоличествоМинутЗаКотороеНапоминатьОЗадачеДоЗапланированогоНачалаРаботВ1С = ЗаписьРегистра.КоличествоМинутЗаКотороеНапоминатьОЗадачеДоЗапланированогоНачалаРабот;
		СтрокаПользователя.НапоминатьОНеобходимостиИзмененияСтатусаВМоментПрибытияНаМестоВыполненияРаботВ1С = ЗаписьРегистра.НапоминатьОНеобходимостиИзмененияСтатусаВМоментПрибытияНаМестоВыполненияРабот;
		СтрокаПользователя.НапоминатьОНеобходимостиИзмененияСтатусаВМоментВыходаИзЗоныМестаВыполненияРаботВ1С = ЗаписьРегистра.НапоминатьОНеобходимостиИзмененияСтатусаВМоментВыходаИзЗоныМестаВыполненияРабот;
		СтрокаПользователя.ПовторятьНапоминаниеОНовойЗадачеВ1С = ЗаписьРегистра.ПовторятьНапоминаниеОНовойЗадаче;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти






