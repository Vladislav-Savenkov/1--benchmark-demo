
Перем мИдентификаторСессииПодключенияКСерверуУМС Экспорт;
Перем мЗаголовокHTTP Экспорт;

Перем мАдресСервера Экспорт;
Перем мИспользоватьШифрованноеСоединение Экспорт;
Перем мЛогинОрганизации Экспорт;
Перем мПарольОрганизации Экспорт;
Перем мИспользоватьШифрованиеДанных Экспорт;
Перем мКлючШифрованияПравильный Экспорт;

Перем мСохранятьВходящиеУдачноРазобранныеПакетыОтМС Экспорт;
Перем мСохранятьВходящиеУдачноРазобранныеПакетыОтСервера Экспорт;
Перем мСохранятьВЛогахИнформационныеСообщения Экспорт;
Перем мСохранятьВЛогахИнформационныеСообщенияОПакетахОтСервера Экспорт;

Перем мРежимОтладки Экспорт;

Перем мЕстьПодключениеКСерверу Экспорт;
Перем мИнтернетСоединение Экспорт;
Перем мТребуетсяПереподключение Экспорт;

Перем мПериодичностьСинхронизацииССервером Экспорт;
Перем мКратностьЗапросаАктивностиМобильныхСотрудников Экспорт;

Перем мОтправленЗапросОКоличествеДоступныхЛогинов Экспорт;

Перем мКоличествоПопытокПодключения;
Перем мМаксимальноеКоличествоПопытокОтправки Экспорт;
Перем мМаксимальноеКоличествоПопытокПодключения Экспорт;

Перем мТаблицаКлючейШифрования;
Перем мТаблицаКлючейШифрованияОЛЕ;
Перем мКлючиШифрования;

Перем мДатаПолученияПоследнегоПакета;
Перем мФоновыйОбмен;
Перем мФоновыйОбменВыполненУспешно;
Перем мКоличествоЗарегистрированныхОшибок;
Перем мКоличествоОтправленныхПакетов;
Перем мКоличествоПолученныхПакетов;
Перем мИменаФайловПакетовПриОтладке;

Перем мЗагрузкаПакета;
Перем мЗарегистрироватьИнформационнуюБазуНаСервере Экспорт;
Перем мВремяЗапросаИндексногоПакета;
Перем мЧасовойПояс;
Перем мТекущийПутьИБ;

Перем мВыполнитьЗапросПоДаннымТрекаМобильныхСотрудников;

Перем мГлобальныхПопытокПодключения;
Перем мПрерватьОбмен;

//Только для 8.3
Перем ВыводитьОтладочныеСообщения;
Перем КоличествоДоступныхЛогинов Экспорт;

Процедура ПодчиститьКукиВРегистре() Экспорт
	
	ЗаписьРегистраСинхронизацииССервером = РегистрыСведений.атл_ПеременныеСинхронизацииССерверомУМС.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСинхронизацииССервером.Прочитать();
	ЗаписьРегистраСинхронизацииССервером.КукиФоновогоОбмена = "";
	ЗаписьРегистраСинхронизацииССервером.Записать();
	
КонецПроцедуры

Процедура ОбновитьКукиВЗаголовкеИзРегистра() Экспорт
	
	ЗаписьРегистраСинхронизацииССервером = РегистрыСведений.атл_ПеременныеСинхронизацииССерверомУМС.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСинхронизацииССервером.Прочитать();
	мЗаголовокHTTP.Вставить("Cookie", "" + ЗаписьРегистраСинхронизацииССервером.КукиФоновогоОбмена); 
	
КонецПроцедуры

Процедура ОбновитьКукиВРегистреИзЗаголовка(ЗаголовокКуки) Экспорт
	
	ЗаписьРегистраСинхронизацииССервером = РегистрыСведений.атл_ПеременныеСинхронизацииССерверомУМС.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСинхронизацииССервером.Прочитать();
	ЗаписьРегистраСинхронизацииССервером.КукиФоновогоОбмена = ЗаголовокКуки;
	ЗаписьРегистраСинхронизацииССервером.Записать();
	
КонецПроцедуры

Функция ВыполнитьФоновыйОбмен() Экспорт
	
	мФоновыйОбмен = Истина;
	мФоновыйОбменВыполненУспешно = Истина;
	
	ПрочитатьПараметрыПодключенияКСерверуУМС();
	
	//если куки заполнены, тогда попробуем обойтись без подключения к серверу
	
	ЗаписьРегистраСинхронизацииССервером = РегистрыСведений.атл_ПеременныеСинхронизацииССерверомУМС.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСинхронизацииССервером.Прочитать();
	мЧасовойПояс = ЗаписьРегистраСинхронизацииССервером.ЧасовойПояс;
	
	//проверим путь авторизации. Если не совпадает с текущим, то безальтернативно чистим куки.
	
	Если ЗаписьРегистраСинхронизацииССервером.ПутьАвторизованнойИБ <> мТекущийПутьИБ Тогда
		ПодчиститьКукиВРегистре();
		ЗаписьРегистраСинхронизацииССервером.Прочитать();
	КонецЕсли;
	
	Если ЗаписьРегистраСинхронизацииССервером.КукиФоновогоОбмена = "" Тогда
		
		ВызватьПодключениеКСерверу();
		//сохраняем куки фонового обмена
		ЗаписьРегистраСинхронизацииССервером.КукиФоновогоОбмена = мЗаголовокHTTP.Получить("Cookie");
		ЗаписьРегистраСинхронизацииССервером.ПутьАвторизованнойИБ = мТекущийПутьИБ;
		ЗаписьРегистраСинхронизацииССервером.Записать();
		
	Иначе
		
		мИнтернетСоединение = Новый HTTPСоединение(мАдресСервера,,,,,мИспользоватьШифрованноеСоединение);
		мЗаголовокHTTP.Вставить("Cookie", "" + ЗаписьРегистраСинхронизацииССервером.КукиФоновогоОбмена); 
		мЕстьПодключениеКСерверу = Истина;
		мТребуетсяПереподключение = Ложь;
		
	КонецЕсли;
	
	//проверим необходимость отправки расписания сотрудников
	Если НачалоДня(ТекущаяДата()) > НачалоДня(ЗаписьРегистраСинхронизацииССервером.ДатаПоследнегоОбновленияРасписанияМобильныхСотрудников) Тогда
		//формируем запросы на отправку расписания по сотрудникам
		атл_УправлениеМобильнымиСотрудниками.ОтправитьРасписанияМобильнымСотрудникам();
		ЗаписьРегистраСинхронизацииССервером.ДатаПоследнегоОбновленияРасписанияМобильныхСотрудников = НачалоДня(ТекущаяДата());
		ЗаписьРегистраСинхронизацииССервером.Записать();
	КонецЕсли;
	
	ВыполнитьОбменДаннымиССервером();
	
	ЗаписьРегистраСинхронизацииССервером.Прочитать();
	ЗаписьРегистраСинхронизацииССервером.ЧасовойПояс = мЧасовойПояс;
	ЗаписьРегистраСинхронизацииССервером.Записать();
	
	//получить данные об активности пользователей
	Если ЗаписьРегистраСинхронизацииССервером.КоличествоСинхронизацийДоЗапросаАктивностиМобильныхСотрудников = 0 Тогда
		//запрос делаем каждый 4ый обмен
		ПолучитьДанныеОбАктивностиМобильныхСотрудников();
		мВыполнитьЗапросПоДаннымТрекаМобильныхСотрудников = Истина;
		Пока мВыполнитьЗапросПоДаннымТрекаМобильныхСотрудников Цикл
			мВыполнитьЗапросПоДаннымТрекаМобильныхСотрудников = Ложь;
			ПолучитьДанныеТрекаМобильныхСотрудников();
		КонецЦикла;
		РазобратьДанныеССервера();
		ЗаписьРегистраСинхронизацииССервером.Прочитать();
		ЗаписьРегистраСинхронизацииССервером.КоличествоСинхронизацийДоЗапросаАктивностиМобильныхСотрудников = 3;
		ЗаписьРегистраСинхронизацииССервером.Записать();
	Иначе
		ЗаписьРегистраСинхронизацииССервером.Прочитать();
		Если ЗаписьРегистраСинхронизацииССервером.КоличествоСинхронизацийДоЗапросаАктивностиМобильныхСотрудников > 0 Тогда
			ЗаписьРегистраСинхронизацииССервером.КоличествоСинхронизацийДоЗапросаАктивностиМобильныхСотрудников = ЗаписьРегистраСинхронизацииССервером.КоличествоСинхронизацийДоЗапросаАктивностиМобильныхСотрудников - 1;
			ЗаписьРегистраСинхронизацииССервером.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если мФоновыйОбмен Тогда
		
		СтруктураРезультатОбмена = Новый Структура;
		СтруктураРезультатОбмена.Вставить("РезультатОбмена", 					мФоновыйОбменВыполненУспешно);
		СтруктураРезультатОбмена.Вставить("КоличествоЗарегистрированныхОшибок", мКоличествоЗарегистрированныхОшибок);
		СтруктураРезультатОбмена.Вставить("КоличествоОтправленныхПакетов", 		мКоличествоОтправленныхПакетов);
		СтруктураРезультатОбмена.Вставить("КоличествоПолученныхПакетов", 		мКоличествоПолученныхПакетов);
		СтруктураРезультатОбмена.Вставить("ИменаФайловПакетовПриОтладке", 		мИменаФайловПакетовПриОтладке);
		
		Возврат СтруктураРезультатОбмена;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКлючШифрованияПоНомеруВерсии(НомерВерсииКлюча)
	
	РезультатПоиска = Новый Структура;
	
	//сначала ищем в таблице ключей шифрования
	РезультатПоискаВТаблицеКлючей = мТаблицаКлючейШифрования.Найти(НомерВерсииКлюча, "ВерсияКлючаШифрования");
	Если РезультатПоискаВТаблицеКлючей <> Неопределено Тогда
		Если РезультатПоискаВТаблицеКлючей.КлючМожетИспользоваться Тогда
			//ключ найден и проверен
			РезультатПоиска.Вставить("КлючОпределен", Истина);
			РезультатПоиска.Вставить("ОписаниеРезультатовПоиска", "Ключ с номером версии """ + НомерВерсииКлюча + """ найден!");
			РезультатПоиска.Вставить("КлючШифрования", СокрЛП(РезультатПоискаВТаблицеКлючей.КлючШифрования));
			Возврат РезультатПоиска;
		Иначе
			//в ключе есть ошибка, данный ключ использоваться не может...
			РезультатПоиска.Вставить("КлючОпределен", Ложь);
			РезультатПоиска.Вставить("ОписаниеРезультатовПоиска", "Ключ с номером версии """ + НомерВерсииКлюча + """ найден!");
			РезультатПоиска.Вставить("КлючШифрования", СокрЛП(РезультатПоискаВТаблицеКлючей.КлючШифрования));
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЕсли;
	
	//найти не удалось, либо ключ неверен
	ЭлементНайденныйКлюч = Справочники.атл_КлючиШифрования.НайтиПоКоду(НомерВерсииКлюча);
	РезультатПоиска = Новый Структура;
	Если ЭлементНайденныйКлюч = Неопределено Тогда
		//неверно задан номер версии для поиска
		РезультатПоиска.Вставить("КлючОпределен", Ложь);
		РезультатПоиска.Вставить("ОписаниеРезультатовПоиска", "Неверно задан номер версии ключа для поиска ( """ + НомерВерсииКлюча + """ )!");
	ИначеЕсли Не ЗначениеЗаполнено(ЭлементНайденныйКлюч) Тогда
		//не нашли по номеру версии
		РезультатПоиска.Вставить("КлючОпределен", Ложь);
		РезультатПоиска.Вставить("ОписаниеРезультатовПоиска", "Не удалось найти номер версии ключа """ + НомерВерсииКлюча + """ !");
	Иначе
		//нашли
		//добавляем ключ в таблицу ключей, чтобы в следующий раз уже не искать...
		НовыйКлюч = мТаблицаКлючейШифрования.Добавить();
		НовыйКлюч.ВерсияКлючаШифрования = НомерВерсииКлюча;
		НовыйКлюч.КлючШифрования 		= СокрЛП(ЭлементНайденныйКлюч.Наименование);
		НовыйКлюч.ЭлементКлючШифрования = ЭлементНайденныйКлюч;
		
		//выполняем проверку ключа шифрования...
		Если атл_УправлениеМобильнымиСотрудниками.ПроверитьКлючШифрования(НовыйКлюч.КлючШифрования) Тогда
			НовыйКлюч.КлючМожетИспользоваться = Истина;
			РезультатПоиска.Вставить("КлючОпределен", Истина);
			РезультатПоиска.Вставить("ОписаниеРезультатовПоиска", "Ключ с номером версии """ + НомерВерсииКлюча + """ найден!");
			РезультатПоиска.Вставить("КлючШифрования", СокрЛП(ЭлементНайденныйКлюч.Наименование));
		Иначе
			НовыйКлюч.КлючМожетИспользоваться = Ложь;
			РезультатПоиска.Вставить("КлючОпределен", Ложь);
			РезультатПоиска.Вставить("ОписаниеРезультатовПоиска", "Ключ с номером версии """ + НомерВерсииКлюча + """ найден, но может использоваться!");
		КонецЕсли;
		//
	КонецЕсли;
	
	Возврат РезультатПоиска;
	
КонецФункции

Функция СформироватьПакетСДаннымиПодключения()
	
	РезультатыПодготовкиПакетаДата = Новый Структура();
	
	ИмяФайлаПакета = ПолучитьИмяВременногоФайла("XML");
	РезультатыПодготовкиПакетаДата.Вставить("ИмяФайлаПакета", ИмяФайлаПакета);
	
	НовыйФайлДата = Новый ЗаписьXML;
	НовыйФайлДата.ОткрытьФайл(ИмяФайлаПакета);
	
	АвторизацияТип = ФабрикаXDTO.Тип("authorization_request_mwms", "authorization_request");
	
	АвторизацияФабрика = ФабрикаXDTO.Создать(АвторизацияТип);
	АвторизацияФабрика.company = мЛогинОрганизации;
	АвторизацияФабрика.pass = мПарольОрганизации;
	АвторизацияФабрика.master_version = "1.00";
	АвторизацияФабрика.uid = ХэшированиеСтроки(мТекущийПутьИБ);
	
	Если мЗарегистрироватьИнформационнуюБазуНаСервере Тогда
		АвторизацияФабрика.update_uid = 1; 
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(НовыйФайлДата, АвторизацияФабрика);
	НовыйФайлДата.Закрыть();
	
	Возврат РезультатыПодготовкиПакетаДата;
	
КонецФункции

Процедура ВыполнитьПопыткуПодключенияКСерверу(ПараметрыОтправки)
	
	мГлобальныхПопытокПодключения = мГлобальныхПопытокПодключения + 1;
	
	Если мГлобальныхПопытокПодключения <= 2 Тогда //допустимо две попытки подключения
		
		мИнтернетСоединение = Новый HTTPСоединение(мАдресСервера,,,,,мИспользоватьШифрованноеСоединение);
		
		РезультатыПодготовкиПакетаДата = СформироватьПакетСДаннымиПодключения();//
		РезультатыЗаписиПакета = ЗаписатьПакет(0,"command",,,,,"auth",,,РезультатыПодготовкиПакетаДата.ИмяФайлаПакета);
		
		ИмяОтправляемогоФайла = РезультатыЗаписиПакета.ИмяФайлаПакета;
		ИмяПринятогоФайла = ПолучитьИмяВременногоФайла("XML");
		
		ПодключениеВыполнитьНеУдалось = Ложь;
		
		Попытка
			ВыполнитьКопированиеФайла(ИмяОтправляемогоФайла, "ИСХ");
			мОтветСервера = мИнтернетСоединение.ОтправитьДляОбработки(ИмяОтправляемогоФайла, "/server.php", ИмяПринятогоФайла, мЗаголовокHTTP);
			ВыполнитьКопированиеФайла(ИмяПринятогоФайла, "ВХ");
			
			//подключились успешно...
			ЗаголовкиВОтветеСервера = мОтветСервера.Заголовки;
			ЗаголовокКуки = ЗаголовкиВОтветеСервера.Получить("Set-Cookie");
			Если ЗаголовокКуки <> "" Тогда
				мЗаголовокHTTP.Вставить("Cookie", "" + ЗаголовокКуки); 
				ОбновитьКукиВРегистреИзЗаголовка(ЗаголовокКуки);
			КонецЕсли;	
			
			мЕстьПодключениеКСерверу = Истина;
			мТребуетсяПереподключение = Ложь;
			
		Исключение
			
			//не подключились... 
			мЗаголовокHTTP.Вставить("Cookie", ""); 
			мЕстьПодключениеКСерверу  = Ложь;
			
			ПодключениеВыполнитьНеУдалось = Истина;
			
		КонецПопытки;	
		
		Если ПодключениеВыполнитьНеУдалось Тогда
			
			Попытка
				ОписаниеОшибкиСоединения = ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание;
				ПараметрыОшибкиОтправки = РазобратьОшибкуОтправки(ОписаниеОшибкиСоединения, ИмяПринятогоФайла);
				ТекстОписанияОшибки = "Не удалось подключиться к серверу: " + ?(ОписаниеОшибкиСоединения = "", ПараметрыОшибкиОтправки.ОписаниеОшибки, ОписаниеОшибкиСоединения + Символы.ПС + ПараметрыОшибкиОтправки.ОписаниеОшибки);
			Исключение
				//файл разобрать не получилось, выводим что есть...
				ТекстОписанияОшибки = "Не удалось подключиться к серверу: " + ОписаниеОшибкиСоединения;
			КонецПопытки;
			
			атл_УправлениеМобильнымиСотрудниками.СформироватьЗаписьВЛогах(Перечисления.атл_ВидыЛогов.ОшибкаПодключенияКСерверу, ТекстОписанияОшибки,);
			мКоличествоЗарегистрированныхОшибок = мКоличествоЗарегистрированныхОшибок + 1;
			
		КонецЕсли;
		
		//удаляем файлы...
		ВыполнитьПопыткуУдаленияФайла(ИмяОтправляемогоФайла);
	Иначе
		мПрерватьОбмен = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполнитьПопыткуОтправкиНаСервер(ПараметрыОтправки, УдалятьОтправляемыйФайл = Истина)
	
	Если ПараметрыОтправки = Неопределено Тогда
		ИмяОтправляемогоФайла = ПолучитьИмяВременногоФайла("XML");
	Иначе
		ИмяОтправляемогоФайла = ПараметрыОтправки.ИмяФайлаПакета;
	КонецЕсли;
	ИмяПринятогоФайла = ПолучитьИмяВременногоФайла("XML");
	
	РезультатыОтправки = Новый Структура();
	РезультатыОтправки.Вставить("ИмяПринятогоФайла", ИмяПринятогоФайла);
	
	Попытка
		ВыполнитьКопированиеФайла(ИмяОтправляемогоФайла, "ИСХ");
		мОтветСервера = мИнтернетСоединение.ОтправитьДляОбработки(ИмяОтправляемогоФайла, "/server.php", ИмяПринятогоФайла, мЗаголовокHTTP);
		ВыполнитьКопированиеФайла(ИмяПринятогоФайла, "ВХ");
		
		РезультатыОтправки.Вставить("ОписаниеОшибкиСоединения", "");
		РезультатыОтправки.Вставить("ОтправкаУспешна", Истина);
		
	Исключение
		//ПодчиститьКукиВРегистре();
		//какая-то ошибка отправки данных...
		ОписаниеОшибкиСоединения = ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание;
		РезультатыОтправки.Вставить("ОписаниеОшибкиСоединения", ОписаниеОшибкиСоединения);
		РезультатыОтправки.Вставить("ОтправкаУспешна", Ложь);
		
	КонецПопытки;	
	
	//удаляем файлы...
	Если УдалятьОтправляемыйФайл Тогда
		ВыполнитьПопыткуУдаленияФайла(ИмяОтправляемогоФайла);	
	КонецЕсли;
	
	Возврат РезультатыОтправки;
	
КонецФункции

Функция ПолучитьПричинуОшибки(ИнформацияОбОшибке)
	
	ПричинаОшибки = ИнформацияОбОшибке.Причина;
	Если ПричинаОшибки = Неопределено Тогда
		Возврат ИнформацияОбОшибке;
	КонецЕсли;
	
	Пока ПричинаОшибки.Причина <> Неопределено Цикл
		ПричинаОшибки = ПричинаОшибки.Причина;
	КонецЦикла;
	
	Возврат ПричинаОшибки;
	
КонецФункции

Функция РазобратьОшибкуОтправки(ОписаниеОшибкиСоединения, ИмяПринятогоФайла)
	
	СтруктураРазбораОшибки = Новый Структура();
	ТекстОшибки = "";
	
	Если Найти(ОписаниеОшибкиСоединения, "407") <> 0 И (Найти(НРег(ОписаниеОшибкиСоединения), "authentication") <> 0
		Или  Найти(НРег(ОписаниеОшибкиСоединения), "аутентификация") <> 0) Тогда
		Если Не ПустаяСтрока(мЛогинОрганизации) Тогда
			ТекстОшибки = "" + ОписаниеОшибкиСоединения + Символы.ПС + "Указаны неверные имя пользователя или пароль прокси-сервера!";
		КонецЕсли;
		
		//здесь нужно подставить параметры прокси
		
	ИначеЕсли Найти(НРег(ОписаниеОшибкиСоединения), "ошибка аутентификации при доступе к ресурсу") <> 0 Тогда
		Если Не ПустаяСтрока(мЛогинОрганизации) Тогда
			ТекстОшибки = "" + ОписаниеОшибкиСоединения + Символы.ПС + "Указаны неверные логин или пароль доступа на сервер!";
		КонецЕсли;
		
		//здесь нужно поменять параметры подключения
		
	ИначеЕсли Найти(НРег(ОписаниеОшибкиСоединения), "couldn't resolve host name") <> 0 Тогда
		ТекстОшибки = "" + ОписаниеОшибкиСоединения + Символы.ПС + "Указан неверный адрес сервера!";
		
	ИначеЕсли Найти(НРег(ОписаниеОшибкиСоединения), "ошибка работы с интернет:  ресурс не найден (404)") <> 0 Тогда
		ТекстОшибки = "" + ОписаниеОшибкиСоединения + Символы.ПС + "Указан неверный адрес сервера!";
		
	ИначеЕсли Найти(НРег(ОписаниеОшибкиСоединения),"ошибка работы с интернет:  доступ запрещен (403)") <> 0 Тогда
		//ошибка подключения, доступ закрыт сервером, детали прочитаем в файле от сервера...
		
		ТекстОшибки = ОписаниеОшибкиСоединения;
		//в логах делать эту запись не будем...
		
		РезультатРазбораФайла = Новый Структура;
		РезультатРазбораФайла.Вставить("ИмяПринятогоФайла", ИмяПринятогоФайла);
		ПакетСДанными = ПолучитьДанныеИзПакета(РезультатРазбораФайла);
		
		СтруктураРазбораОшибки.Вставить("ОписаниеОшибки", ТекстОшибки);
		
	ИначеЕсли Найти(НРег(ОписаниеОшибкиСоединения), "(503)") <> 0 Тогда
		
		ТекстОшибки = "" + ОписаниеОшибкиСоединения + Символы.ПС + "Ошибка сервера!";
		мПрерватьОбмен = Истина;
		
	Иначе
		//необработанная непонятная ошибка...
		//прерываем обмен
		ТекстОшибки = ОписаниеОшибкиСоединения;
		ТекстОшибки = ТекстОшибки + "Ошибка отправки данных!";
		
		РезультатРазбораФайла = Новый Структура;
		РезультатРазбораФайла.Вставить("ИмяПринятогоФайла", ИмяПринятогоФайла);
		ПакетСДанными = ПолучитьДанныеИзПакета(РезультатРазбораФайла);
		
		Если ПакетСДанными = Неопределено Тогда
			ТекстОшибки = ТекстОшибки + " Разобрать ошибку не удалось...";
		КонецЕсли;		
		
		СтруктураРазбораОшибки.Вставить("ОписаниеОшибки", ТекстОшибки);
		
	КонецЕсли;
	
	Сообщить("Ошибка! " +  ТекстОшибки, СтатусСообщения.Важное);
	атл_УправлениеМобильнымиСотрудниками.СформироватьЗаписьВЛогах(Перечисления.атл_ВидыЛогов.ОшибкаПодключенияКСерверу, ТекстОшибки);
	
	СтруктураРазбораОшибки.Вставить("ОписаниеОшибки", ТекстОшибки);
	
	Возврат СтруктураРазбораОшибки;
	
КонецФункции

Функция ОтправкаДанныхНаСервер(ПараметрыОтправки = Неопределено, КоличествоПопытокОтправки = 0, РежимПодключения = Ложь, КоличествоПопытокПодключения = 0) Экспорт
	
	Если РежимПодключения или Не мЕстьПодключениеКСерверу или мТребуетсяПереподключение Тогда //принудительно вызывается режим подключения...
		
		//пытаемся выполнить подключение...
		ВыполнитьПопыткуПодключенияКСерверу(ПараметрыОтправки);
		
		Если Не мЕстьПодключениеКСерверу Тогда
			
			Сообщить("Нет подключения к серверу обмена данными!");
			РезультатыОтправки = Новый Структура();
			РезультатыОтправки.Вставить("ИмяПринятогоФайла", "");
			РезультатыОтправки.Вставить("ОписаниеОшибкиСоединения", "Нет подключения к серверу обмена!");
			РезультатыОтправки.Вставить("ОтправкаУспешна", Ложь);
			Возврат РезультатыОтправки;
		Иначе
			//если нужно не только подключиться, но и отправить данные, то пробуем отправить
			Если Не РежимПодключения Тогда
				Если КоличествоПопытокПодключения < мМаксимальноеКоличествоПопытокПодключения Тогда
					КоличествоПопытокПодключения = КоличествоПопытокПодключения + 1;
					КоличествоПопытокОтправки = КоличествоПопытокОтправки + 1;
					ОтправкаДанныхНаСервер(Неопределено, КоличествоПопытокОтправки, Истина, КоличествоПопытокПодключения);
				Иначе
					//попытки исчерпаны, прерываем обмен
					РезультатыОтправки = Новый Структура();
					РезультатыОтправки.Вставить("ИмяПринятогоФайла", "");
					РезультатыОтправки.Вставить("ОписаниеОшибкиСоединения", "Не удалось выполнить обмен данными!");
					РезультатыОтправки.Вставить("ОтправкаУспешна", Ложь);
					Возврат РезультатыОтправки;
				КонецЕсли;
			Иначе
				//хотели подключиться, подключились успешно
				РезультатыОтправки = Новый Структура();
				РезультатыОтправки.Вставить("ИмяПринятогоФайла", "");
				РезультатыОтправки.Вставить("ОписаниеОшибкиСоединения", "");
				РезультатыОтправки.Вставить("ОтправкаУспешна", Истина);
				Возврат РезультатыОтправки;
				
			КонецЕсли;
		КонецЕсли;
	Иначе 
		//производим попытку отправки. Подключение не требуется
		РезультатОтправкиНаСервер = ВыполнитьПопыткуОтправкиНаСервер(ПараметрыОтправки, Ложь);
		Если РезультатОтправкиНаСервер.ОтправкаУспешна Тогда
			//все хорошо, удаляем временный файл
			Если Не ПараметрыОтправки = Неопределено Тогда
				ВыполнитьПопыткуУдаленияФайла(ПараметрыОтправки.ИмяФайлаПакета); 	
			КонецЕсли;
		Иначе
			//проанализируем ошибку...
			ПараметрыОшибкиОтправки = РазобратьОшибкуОтправки(РезультатОтправкиНаСервер.ОписаниеОшибкиСоединения, РезультатОтправкиНаСервер.ИмяПринятогоФайла);
			//если ошибка в том, что нет авторизации, то нужно авторизоваться на сервере и повторить попытку подключения
			Если мТребуетсяПереподключение Тогда
				Сообщить("Выполняется переподключение к серверу...");
				ОтправкаДанныхНаСервер(,,Истина,);
				Если мЕстьПодключениеКСерверу Тогда
					Сообщить("Переподключение выполнено успешно...");
					РезультатОтправкиНаСервер = ВыполнитьПопыткуОтправкиНаСервер(ПараметрыОтправки);
					Если РезультатОтправкиНаСервер.ОтправкаУспешна Тогда
						//отправка удалась...
						//все ок
					Иначе
						//отправка не удалась
						Сообщить("Операцию обмена данными с сервером выполнить не удалось...");
					КонецЕсли;					
				Иначе
					Сообщить("ОШИБКА! Переподключение выполнить не удалось...");
				КонецЕсли;
			Иначе
				Если Не ПараметрыОтправки = Неопределено Тогда
					ВыполнитьПопыткуУдаленияФайла(ПараметрыОтправки.ИмяФайлаПакета);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатОтправкиНаСервер;
	
КонецФункции

Функция РазрешенОбменДанными(ВыводитьСообщение = Истина) Экспорт
	
	Если Не мЕстьПодключениеКСерверу или мТребуетсяПереподключение Тогда
		Если ВыводитьСообщение Тогда
			Сообщить("Нет подключения к серверу!");
		КонецЕсли;
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ВыполнитьКопированиеФайла(ИмяСтарогоФайла, ДопПризнак)
	
	Если ДопПризнак = "ИСХ" Тогда
		мКоличествоОтправленныхПакетов = мКоличествоОтправленныхПакетов + 1;
	ИначеЕсли ДопПризнак = "ВХ" Тогда
		мКоличествоПолученныхПакетов = мКоличествоПолученныхПакетов + 1;
	КонецЕсли;
		
	Если мРежимОтладки Тогда
		//копируем файлы
		ТекущаяДатаСтрокой = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ТекущаяДатаСтрокой = СтрЗаменить(ТекущаяДатаСтрокой,":","_");
		ТекущаяДатаСтрокой = СтрЗаменить(ТекущаяДатаСтрокой," ","_");
		ТекущаяДатаСтрокой = СтрЗаменить(ТекущаяДатаСтрокой,".","_");
		
		ОбщееКоличествоПакетов = мКоличествоОтправленныхПакетов + мКоличествоПолученныхПакетов;
		ИмяКопируемогоФайла = "УМС_" + ДопПризнак + "_" + ТекущаяДатаСтрокой + "_" + ОбщееКоличествоПакетов + ".xml";
		мИменаФайловПакетовПриОтладке.Добавить(ИмяКопируемогоФайла);
		КопироватьФайл(ИмяСтарогоФайла, КаталогВременныхФайлов() + ИмяКопируемогоФайла);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПопыткуУдаленияФайла(ИмяФайлаДляУдаления) Экспорт
	
	Попытка
		УдалитьФайлы(ИмяФайлаДляУдаления);
	Исключение
		Если ВыводитьОтладочныеСообщения Тогда
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Функция ПрочитатьПакет(ИмяФайла, ИдентификаторПакета = 0, ИсходныйТипXDTO = Неопределено) 
	
	Если ИсходныйТипXDTO = Неопределено Тогда
		ИсходныйТипXDTO = ФабрикаXDTO.Тип("response_packet_mwms","response_packet");
	КонецЕсли;
	
	НоваяФабрика = Неопределено;
	
	СтруктураОтвета = Новый Структура;
	//пытаемся открыть файл
	Попытка
		ЧтениеФайла = Новый ЧтениеXML;
		ЧтениеФайла.ОткрытьФайл(ИмяФайла);
	Исключение
		//ошибка! Не удалось открыть файл!
		ТекстОписанияОшибки = "Не удалось прочитать файл '" + ИмяФайла + "'. Проверьте содержимое!
		|" + ОписаниеОшибки() + ")";
		СтруктураОтвета.Вставить("ОшибкаЧтения", ТекстОписанияОшибки);
		СтруктураОтвета.Вставить("НоваяФабрика", НоваяФабрика);
		атл_УправлениеМобильнымиСотрудниками.СформироватьЗаписьВЛогах(Перечисления.атл_ВидыЛогов.ОшибкаРазбораДанных, ТекстОписанияОшибки, ИдентификаторПакета);
		мКоличествоЗарегистрированныхОшибок = мКоличествоЗарегистрированныхОшибок + 1;
		Возврат СтруктураОтвета;
	КонецПопытки;
	
	//////Попытка 
	//////	НоваяФабрика = ФабрикаXDTO.ПрочитатьXML(ЧтениеФайла, ИсходныйТипXDTO);
	//////	ЧтениеФайла.Закрыть();
	//////Исключение
	//////	//нефатальная ошибка разбора схемы XDTO. Пытаемся разобрать "вручную" без указания типа XDTO
	//////КонецПопытки;
	
	Если НоваяФабрика = Неопределено Тогда
		Попытка 
   			НоваяФабрика = ФабрикаXDTO.ПрочитатьXML(ЧтениеФайла);
			ЧтениеФайла.Закрыть();
		Исключение
			//Ошибка чтения 
			ТекстОписанияОшибки = "Не удалось разбрать данные файла '" + ИмяФайла + "'. Проверьте содержимое!
			|" + ОписаниеОшибки() + ")";
			СтруктураОтвета.Вставить("ОшибкаЧтения", ТекстОписанияОшибки);
			СтруктураОтвета.Вставить("НоваяФабрика", НоваяФабрика);
			атл_УправлениеМобильнымиСотрудниками.СформироватьЗаписьВЛогах(Перечисления.атл_ВидыЛогов.ОшибкаРазбораДанных, ТекстОписанияОшибки, ИдентификаторПакета);
			мКоличествоЗарегистрированныхОшибок = мКоличествоЗарегистрированныхОшибок + 1;
			Возврат СтруктураОтвета;
		КонецПопытки;
	КонецЕсли;

	СтруктураОтвета.Вставить("ОшибкаЧтения", "");
	СтруктураОтвета.Вставить("НоваяФабрика", НоваяФабрика);
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПолучитьДанныеПоляИзПакета(НоваяФабрика, ИмяПоля)
	
	Попытка
		ЗначениеПоля = НоваяФабрика.Получить(ИмяПоля);
		Возврат ЗначениеПоля;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

//служебные процедуры и функции

Функция ВозвратЗначениеПоФиксированномуМассиву(ИсходноеЗначение)
	
	Если ТипЗнч(ИсходноеЗначение) = Тип("ФиксированныйМассив") Тогда
		Если ИсходноеЗначение.Количество() Тогда
			Возврат ИсходноеЗначение[0];
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Дата") Тогда
		Возврат ИсходноеЗначение;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура ПрочитатьПараметрыПодключенияКСерверуУМС() Экспорт
	
	ЗаписьНастроекПодключения = РегистрыСведений.атл_НастройкиПодсистемыУМС.СоздатьМенеджерЗаписи();
	ЗаписьНастроекПодключения.Прочитать();
	
	мАдресСервера = ЗаписьНастроекПодключения.АдресСервера;
	мИспользоватьШифрованноеСоединение = ЗаписьНастроекПодключения.ИспользоватьШифрованноеСоединение;
	мЛогинОрганизации = ЗаписьНастроекПодключения.ЛогинОрганизации;
	мПарольОрганизации = ЗаписьНастроекПодключения.ПарольОрганизации;
	
	мПериодичностьСинхронизацииССервером = ЗаписьНастроекПодключения.ПериодичностьСинхронизацииССервером;
	мИспользоватьШифрованиеДанных = ЗаписьНастроекПодключения.ИспользоватьШифрованиеДанных;
	
	мСохранятьВходящиеУдачноРазобранныеПакетыОтМС = ЗаписьНастроекПодключения.СохранятьВходящиеУдачноРазобранныеПакетыОтМС;
	мСохранятьВходящиеУдачноРазобранныеПакетыОтСервера = ЗаписьНастроекПодключения.СохранятьВходящиеУдачноРазобранныеПакетыОтСервера;
	мСохранятьВЛогахИнформационныеСообщения = ЗаписьНастроекПодключения.СохранятьВЛогахИнформационныеСообщения;
	мСохранятьВЛогахИнформационныеСообщенияОПакетахОтСервера = ЗаписьНастроекПодключения.СохранятьВЛогахИнформационныеСообщенияОПакетахОтСервера;
	
	мРежимОтладки = ЗаписьНастроекПодключения.РежимОтладки;
	
	Если мИспользоватьШифрованиеДанных Тогда
		мКлючиШифрования = Новый Соответствие;
		ОбщийКлючШифрования = ЗаписьНастроекПодключения.ОбщийКлючШифрования;
		
		Если ЗначениеЗаполнено(ОбщийКлючШифрования) Тогда
			
			мКлючШифрованияПравильный = атл_УправлениеМобильнымиСотрудниками.ПроверитьКлючШифрования(СокрЛП(ОбщийКлючШифрования.Наименование));
			
			Если Не мКлючШифрованияПравильный и мИспользоватьШифрованиеДанных Тогда
				мИспользоватьШифрованиеДанных = Ложь;
			Иначе
				мКлючиШифрования.Вставить(Справочники.Пользователи.ПустаяСсылка(), ЗаписьНастроекПодключения.ОбщийКлючШифрования);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ХэшированиеСтроки(ИсходнаяСтрока)Экспорт
	
	//Только для 8.3
    Хеш = Новый ХешированиеДанных(ХешФункция.MD5);
    Хеш.Добавить(ИсходнаяСтрока);
 
    Возврат НРег(СтрЗаменить(Хеш.ХешСумма," ","")); 
		
КонецФункции // ХэшированиеСтроки()

Функция РассчитатьСдвигПоВремени(Время1, Время2)
	
	СдвигПоВремениВЧасах = Окр((Время1 - Время2) / 3600, 0);
	Если СдвигПоВремениВЧасах >= 24 Тогда
		СдвигПоВремениВЧасах = 0;
	ИначеЕсли СдвигПоВремениВЧасах <= -24 Тогда
		СдвигПоВремениВЧасах = 0;
	Иначе
		//оставляем как есть					
	КонецЕсли;
	
	Возврат СдвигПоВремениВЧасах;
	
КонецФункции

Процедура ПроверитьАктуальностьЧасовогоПоясаСотрудника(ИдентификаторОтправитель, ЧасовойПоясПользователя)
	
	Попытка
		СсылкаНаПользователя = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторОтправитель));
		ЧасовойПоясПользователя = Число(ЧасовойПоясПользователя);
		Если ЗначениеЗаполнено(СсылкаНаПользователя) Тогда
			//проверяем часовой пояс в настройках пользователя
			ЗаписьРегистра = РегистрыСведений.атл_НастройкиПодключенияМобильныхСотрудников.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Пользователь = СсылкаНаПользователя;
			ЗаписьРегистра.Прочитать();
			Если ЗаписьРегистра.ЧасовойПояс <> ЧасовойПоясПользователя Тогда
				ЗаписьРегистра.ЧасовойПояс = ЧасовойПоясПользователя;
				ЗаписьРегистра.Записать();
			КонецЕсли;
		КонецЕсли;	
	Исключение
		//не удалось выполнить проверку и обновление
	КонецПопытки;
	
КонецПроцедуры

Функция НайтиПользователяИБ(ИмяПользователя)
	
	Если ИмяПользователя = "НеАвторизован" Тогда
		ПользовательИБ = Неопределено
	Иначе
		// пытаемся найти пользователя по имени
		Попытка
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
		Исключение
			ПользовательИБ = Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ПользовательИБ;
КонецФункции

//подключение к серверу

Процедура ВызватьПодключениеКСерверу() Экспорт
	
	// Вставить содержимое обработчика.
	мИдентификаторСессииПодключенияКСерверуУМС	= "";
	
	Если Не мЕстьПодключениеКСерверу или мТребуетсяПереподключение Тогда
		
		РезультатыОтправки = ОтправкаДанныхНаСервер(,,Истина,); 
		
		Если РезультатыОтправки.ОтправкаУспешна Тогда
			
			мЕстьПодключениеКСерверу = Истина;
			мТребуетсяПереподключение = Ложь;
			Сообщить("Подключение к серверу" + ?(мФоновыйОбмен, " в фоновом режиме", " из обработки настройки обмена") + " выполнено успешно...");
		Иначе
			мЕстьПодключениеКСерверу = Ложь;
			мТребуетсяПереподключение = Ложь;
			ТекстСообщенияОбОшибке = "Подключиться к серверу" + ?(мФоновыйОбмен, " в фоновом режиме", "") + " не удалось!";
			Сообщить(ТекстСообщенияОбОшибке, СтатусСообщения.Внимание);
			атл_УправлениеМобильнымиСотрудниками.СформироватьЗаписьВЛогах(Перечисления.атл_ВидыЛогов.ОшибкаПодключенияКСерверу, ТекстСообщенияОбОшибке,);
			мКоличествоЗарегистрированныхОшибок = мКоличествоЗарегистрированныхОшибок + 1;
		КонецЕсли;
		ВыполнитьПопыткуУдаленияФайла(РезультатыОтправки.ИмяПринятогоФайла);
		
	Иначе
		
		Сообщить("Подключение" + ?(мФоновыйОбмен, " в фоновом режиме", "") + " уже установлено...");
		
	КОнецЕсли;
	
КонецПроцедуры

//процедуры взаимодействия с сервером

Функция ЗаписатьПакет(ТипПосылки = Неопределено, Действие = Неопределено, Кому = Неопределено, 
	ИмяПакета = Неопределено, ЛокальныйИДПакета = Неопределено, СерверныйИДПоследнегоПакета = Неопределено, Команда = Неопределено, 
	ТипОбъекта = Неопределено, ПодтипОбъекта = Неопределено, ИмяФайлаПакетаДата = "") Экспорт
	
	РезультатыЗаписиПакета = Новый Структура();
	
	ИмяФайлаПакета = ПолучитьИмяВременногоФайла("XML");
	РезультатыЗаписиПакета.Вставить("ИмяФайлаПакета", ИмяФайлаПакета);
	РезультатыЗаписиПакета.Вставить("ЕстьОшибки", Ложь);
	
	НовыйФайл = Новый ЗаписьXML;
	НовыйФайл.ОткрытьФайл(ИмяФайлаПакета);
	
	ПакетЗапросТип = ФабрикаXDTO.Тип("request_packet_mwms","request_packet");
	ПротоколТип = ФабрикаXDTO.Тип("request_packet_mwms","protocol");
	ПакетЗапросУМСФабрика = ФабрикаXDTO.Создать(ПакетЗапросТип);
	ПакетЗапросУМСФабрика.protocol = "0.03";
	
	ПакетЗапросУМСФабрика.priority = "1";
	
	Если Действие <> Неопределено Тогда 
		ПакетЗапросУМСФабрика.request_type =  Действие;
	КонецЕсли;
	
	Если Кому <> Неопределено Тогда
		КомуИдентификатор = Кому.УникальныйИдентификатор();
		ПакетЗапросУМСФабрика.to_uid = СокрЛП(КомуИдентификатор);
	КонецЕсли;
	
	Если Команда <> Неопределено Тогда
		ПакетЗапросУМСФабрика.command = СокрЛП(Команда);
	КонецЕсли;
	
	Если ТипПосылки <> Неопределено Тогда 
		ПакетЗапросУМСФабрика.life_type = ТипПосылки;  
	КонецЕсли;
	
	Если (ЛокальныйИДПакета <> Неопределено И ЛокальныйИДПакета <> 0) Тогда 
		ПакетЗапросУМСФабрика.local_packet_id=СтрЗаменить(Строка(ЛокальныйИДПакета)," ","");
	КонецЕсли;
	
	Если (СерверныйИДПоследнегоПакета <> Неопределено И СерверныйИДПоследнегоПакета <> 0) Тогда 
		ПакетЗапросУМСФабрика.packet_id=СтрЗаменить(Строка(СерверныйИДПоследнегоПакета)," ","");
	КонецЕсли;
	
	Если(ИмяПакета <> Неопределено) Тогда 
		ПакетЗапросУМСФабрика.data_name = ИмяПакета;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяФайлаПакетаДата) Тогда
		Если Действие = "command" или Не мИспользоватьШифрованиеДанных Тогда
			ПакетЗапросУМСФабрика.data_type = "2";
			НовыйФайлBase64 = Base64Строка(Новый ДвоичныеДанные(ИмяФайлаПакетаДата));
			ПакетЗапросУМСФабрика.data = НовыйФайлBase64;
		Иначе
			ТекстовыйДокумент = Новый ТекстовыйДокумент();
			ТекстовыйДокумент.Прочитать(ИмяФайлаПакетаДата);
			
			Попытка
				ТекстФайлаПакетаДата = ТекстовыйДокумент.ПолучитьТекст();
			Исключение
				//текст получить не удалось...
				ТекстФайлаПакетаДата = "";
				Сообщить("Операция шифрования не удалась! Ошибка при получении текста из файла!", СтатусСообщения.Внимание);
				РезультатыЗаписиПакета.Вставить("ЕстьОшибки", Истина);
			КонецПопытки;
			
			ПакетЗапросУМСФабрика.data_type = "3";  //зашифровано
			
			Если Кому = Неопределено Тогда
				//получаем общий ключ
				ТекущийКлючШифрования = мКлючиШифрования.Получить(Справочники.Пользователи.ПустаяСсылка()); //если получатель не указан, то будет возвращен общий ключ шифрования
			Иначе
				ТекущийКлючШифрования = мКлючиШифрования.Получить(Кому); //получаем ключ конкретного пользователя
			КонецЕсли;
			
			
			Если ТекущийКлючШифрования = Неопределено Тогда
				//в соответствии пока данного ключа нет...
				//конкретный пользователь...
				ЗаписьНастроекПользователя = РегистрыСведений.атл_НастройкиПодключенияМобильныхСотрудников.СоздатьМенеджерЗаписи();
				ЗаписьНастроекПользователя.Пользователь = Кому;
				ЗаписьНастроекПользователя.Прочитать();
				
				Если ЗначениеЗаполнено(ЗаписьНастроекПользователя.КлючШифрования) Тогда
					ТекущийКлючШифрования = ЗаписьНастроекПользователя.КлючШифрования;
					мКлючиШифрования.Вставить(Неопределено, ЗаписьНастроекПользователя.КлючШифрования);
				Иначе
					ТекущийКлючШифрования = мКлючиШифрования.Получить(Справочники.Пользователи.ПустаяСсылка()); //используем общий ключ шифрования
				КонецЕсли;
			КонецЕсли;
			
			//шифрование
			Попытка
				РезультатПоискаКлючаШифрованияОЛЕ = ПолучитьКлючШифрованияПоНомеруВерсииОЛЕ(ТекущийКлючШифрования.Код);
				Если РезультатПоискаКлючаШифрованияОЛЕ.КлючОпределен Тогда
					//ключ нашли, все ок
					//ТекущийКлючШифрования = РезультатПоискаКлючаШифрованияОЛЕ.КлючШифрования;
					САКлюч = РезультатПоискаКлючаШифрованияОЛЕ.САКлюч;
					Ключ = РезультатПоискаКлючаШифрованияОЛЕ.Ключ;
					
					//Расшифруем по ОЛЕ
				Иначе
					//ключ не определен, ошибка поиска ключа...
					//зашифровать не получится
				КонецЕсли;
				
				binSrc = FileToSafeArray(ИмяФайлаПакетаДата);
				binEnc =  AESЗашифровать(Ключ, САКлюч, binSrc); //зашифровываем, получаем бинарник
				
				ИмяБинарногоФайла = ПолучитьИмяВременногоФайла("XML");
				strDec = SafeArrayToFile(ИмяБинарногоФайла,binEnc); 
				РезультатШифрования = Base64Строка(Новый ДвоичныеДанные(ИмяБинарногоФайла)); //временный файл, можно делать другой
				ВыполнитьПопыткуУдаленияФайла(ИмяБинарногоФайла);
			Исключение
				РезультатШифрования = "";
				Сообщить("Операция шифрования не удалась! Ошибка при шифровании!", СтатусСообщения.Внимание);
				РезультатыЗаписиПакета.Вставить("ЕстьОшибки", Истина);
			КонецПопытки;
			
			ПакетЗапросУМСФабрика.key_version = ТекущийКлючШифрования.Код; //зашифровано
			ПакетЗапросУМСФабрика.data = РезультатШифрования;
		КонецЕсли;
		
		ВыполнитьПопыткуУдаленияФайла(ИмяФайлаПакетаДата);
		
	Иначе
		ПакетЗапросУМСФабрика.data_type = "2";
	КонецЕсли;
	
	Если(ТипОбъекта <> Неопределено) Тогда 
		ПакетЗапросУМСФабрика.object_type = ТипОбъекта;
	КонецЕсли;
	
	Если(ПодтипОбъекта <> Неопределено) Тогда 
		ПакетЗапросУМСФабрика.object_subtype = ПодтипОбъекта;
	КонецЕсли;
	
	ПакетЗапросУМСФабрика.time_stamp = ТекущаяДата();
	ПакетЗапросУМСФабрика.time_zone = мЧасовойПояс;
	
	ФабрикаXDTO.ЗаписатьXML(НовыйФайл,ПакетЗапросУМСФабрика);
	
	НовыйФайл.Закрыть();
	
	Возврат РезультатыЗаписиПакета;
	
КонецФункции

Процедура ПолучитьДанныеССервераПоПакету(ИдентификаторПакета) Экспорт
	
	РезультатыЗаписиПакета = ЗаписатьПакет(,"recieve",,,,ИдентификаторПакета,,,,);
	
	РезультатыОтправки = ОтправкаДанныхНаСервер(РезультатыЗаписиПакета);
	
	мДатаПолученияПоследнегоПакета = ТекущаяДата();
	
	Если РезультатыОтправки.ОтправкаУспешна Тогда
		
		ТипОбъектаИзПакета = "";
		ДанныеПакета = ПолучитьДанныеИзПакета(РезультатыОтправки, ИдентификаторПакета, ТипОбъектаИзПакета);
		
		Если ИдентификаторПакета <> Неопределено Тогда
			Если ДанныеПакета = Неопределено Тогда
				//вернуть подтверждение с информацией о невозможности разбора пакета
				КодОшибки = 0;
				Если ТипОбъектаИзПакета = "confirm" Тогда
					//для пакетов confirm не отправляем подтверждение о получении, а отправляем команду удаления пакета confim
					УдалениеПакетаНаСервере(ИдентификаторПакета);
				Иначе
					ПодтверждениеПолученияПакета(ИдентификаторПакета, КодОшибки);
				КонецЕсли;
			Иначе
				ПодтверждениеПолученияПакета(ИдентификаторПакета);
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеПакета = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		//возврат Ложь;	
	КонецЕсли;
	
	ВыполнитьПопыткуУдаленияФайла(РезультатыОтправки.ИмяПринятогоФайла);
	
КонецПроцедуры

Процедура ПолучитьДанныеССервера() Экспорт
	
	Если Не РазрешенОбменДанными() Тогда
		Если мФоновыйОбмен Тогда
			мФоновыйОбменВыполненУспешно = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РезультатыЗаписиПакета = ЗаписатьПакет(,"recieve",,,,,,,,);
	
	мВремяЗапросаИндексногоПакета = ТекущаяДата(); //запоминаем текущее время
	РезультатыОтправки = ОтправкаДанныхНаСервер(РезультатыЗаписиПакета);
	
	ВыполнитьПопыткуУдаленияФайла(РезультатыЗаписиПакета.ИмяФайлаПакета);
	
	
	Если РезультатыОтправки.ОтправкаУспешна Тогда
		
		ИндексыПакетов = ПолучитьДанныеИзПакета(РезультатыОтправки);
		Если ИндексыПакетов = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ВыполнитьПопыткуУдаленияФайла(РезультатыОтправки.ИмяПринятогоФайла);
		
		Если ИндексыПакетов <> Неопределено Тогда
			
			Если ИндексыПакетов.Свойства().Количество() <> 0 Тогда
				Если ИндексыПакетов.packet <> Неопределено И ТипЗнч(ИндексыПакетов.packet) = Тип("СписокXDTO") Тогда
					
					КоличествоЭлементовВСписке = ИндексыПакетов.packet.Количество();
					Если КоличествоЭлементовВСписке > 0 Тогда
						Для Индекс = 0 по КоличествоЭлементовВСписке-1 Цикл
							ПолучитьДанныеССервераПоПакету(ИндексыПакетов.packet[Индекс].packet_id);
							Если мПрерватьОбмен Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если Не мПрерватьОбмен Тогда
							//по пакетам все данные по списку получили. Запросим данные с сервера еще раз
							ПолучитьДанныеССервера();
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если Не мПрерватьОбмен Тогда
						//один объект
						ПолучитьДанныеССервераПоПакету(ИндексыПакетов.packet.packet_id);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ВыводитьОтладочныеСообщения Тогда
					Сообщить("Данные на сервере закончились...")
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ВыполнитьПопыткуУдаленияФайла(РезультатыОтправки.ИмяПринятогоФайла);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполнитьРасшифровку(ИмяФайла, ВерсияКлючаШифрования, ТекстДляРасшифровки, ОписаниеРасшифровываемойСтроки, ЕстьОшибкаРазбора = Ложь)
	
	//расшифровка
	Попытка
		
		РезультатПоискаКлючаШифрованияОЛЕ = ПолучитьКлючШифрованияПоНомеруВерсииОЛЕ(ВерсияКлючаШифрования);
		Если РезультатПоискаКлючаШифрованияОЛЕ.КлючОпределен Тогда
			//ключ нашли, все ок
			ТекущийКлючШифрования = РезультатПоискаКлючаШифрованияОЛЕ.КлючШифрования;
			САКлюч = РезультатПоискаКлючаШифрованияОЛЕ.САКлюч;
			Ключ = РезультатПоискаКлючаШифрованияОЛЕ.Ключ;
			
			//Расшифруем по ОЛЕ
		Иначе
			//ключ не определен, ошибка поиска ключа...
			//строку расшифровать не получится
			
			Сообщить("Операция расшифровки не удалась! Ошибка при расшифровке!", СтатусСообщения.Внимание);
			ЕстьОшибкаРазбора = Истина;
			
		КонецЕсли;
		
		bin = Base64ToSafeArray(ТекстДляРасшифровки);
		binDec = AESРасшифровать(ключ, САКлюч, bin);
		strDec = SafeArrayToFile(ИмяФайла, binDec);
		
	Исключение
		
		Сообщить("Операция расшифровки не удалась! Ошибка при расшифровке!", СтатусСообщения.Внимание);
		ЕстьОшибкаРазбора = Истина;
		
	КонецПопытки;
	
КонецФункции


//выгрузка пакета подтверждения получения

Функция СформироватьПакетСДатойПолученияПакета() Экспорт
	
	РезультатыПодготовкиПакетаДата = Новый Структура();
	
	ИмяФайлаПакета = ПолучитьИмяВременногоФайла("XML");
	РезультатыПодготовкиПакетаДата.Вставить("ИмяФайлаПакета", ИмяФайлаПакета);
	
	НовыйФайлДата = Новый ЗаписьXML;
	НовыйФайлДата.ОткрытьФайл(ИмяФайлаПакета);
	
	ПакетСДатойПолученияТип = ФабрикаXDTO.Тип("confirm_packet_mwms", "confirm");
	
	ПакетСДатойПолученияФабрика = ФабрикаXDTO.Создать(ПакетСДатойПолученияТип);
	
	ПакетСДатойПолученияФабрика.recieve_datetime = мДатаПолученияПоследнегоПакета;
	
	ФабрикаXDTO.ЗаписатьXML(НовыйФайлДата, ПакетСДатойПолученияФабрика);
	НовыйФайлДата.Закрыть();
	
	Возврат РезультатыПодготовкиПакетаДата;
	
КонецФункции

Процедура ПодтверждениеПолученияПакета(ИдентификаторПакета, КодОшибки = 0)
	
	
	РезультатыПодготовкиПакетаДата = СформироватьПакетСДатойПолученияПакета();
	
	РезультатыЗаписиПакета = ЗаписатьПакет(,"confirm",,,,ИдентификаторПакета,,,,РезультатыПодготовкиПакетаДата.ИмяФайлаПакета);
	
	РезультатыОтправки = ОтправкаДанныхНаСервер(РезультатыЗаписиПакета);
	Если РезультатыОтправки.ОтправкаУспешна Тогда
		Если ВыводитьОтладочныеСообщения Тогда
			Сообщить("Подтверждено получение пакета с идентификатором " + ИдентификаторПакета);
		КонецЕсли;
	Иначе
		Сообщить("Не удалось подтвердить получение пакета с идентификатором " + ИдентификаторПакета, СтатусСообщения.Важное);
	КонецЕсли;
	
	ВыполнитьПопыткуУдаленияФайла(РезультатыОтправки.ИмяПринятогоФайла);
	
	
КонецПроцедуры


//выгрузка команды удаления пакета

Функция СформироватьПакетСКомандойУдаленияПакета() Экспорт
	
	РезультатыПодготовкиПакетаДата = Новый Структура();
	
	ИмяФайлаПакета = ПолучитьИмяВременногоФайла("XML");
	РезультатыПодготовкиПакетаДата.Вставить("ИмяФайлаПакета", ИмяФайлаПакета);
	
	НовыйФайлДата = Новый ЗаписьXML;
	НовыйФайлДата.ОткрытьФайл(ИмяФайлаПакета);
	
	ПакетСДатойПолученияТип = ФабрикаXDTO.Тип("confirm_packet_mwms", "confirm");
	
	ПакетСДатойПолученияФабрика = ФабрикаXDTO.Создать(ПакетСДатойПолученияТип);
	
	ПакетСДатойПолученияФабрика.recieve_datetime = мДатаПолученияПоследнегоПакета;
	
	ФабрикаXDTO.ЗаписатьXML(НовыйФайлДата, ПакетСДатойПолученияФабрика);
	НовыйФайлДата.Закрыть();
	
	Возврат РезультатыПодготовкиПакетаДата;
	
КонецФункции

Процедура УдалениеПакетаНаСервере(ИдентификаторПакета)
	
	
	РезультатыПодготовкиПакетаДата = СформироватьПакетСДатойПолученияПакета();
	
	РезультатыЗаписиПакета = ЗаписатьПакет(0,"command",,,,ИдентификаторПакета,"delete_packet",,,);
	
	РезультатыОтправки = ОтправкаДанныхНаСервер(РезультатыЗаписиПакета);
	Если РезультатыОтправки.ОтправкаУспешна Тогда
		Если ВыводитьОтладочныеСообщения Тогда
			Сообщить("Подтверждено удаление пакета с идентификатором " + ИдентификаторПакета);
		КонецЕсли;
	Иначе
		Сообщить("Не удалось отправить команду удаления пакета с идентификатором " + ИдентификаторПакета, СтатусСообщения.Важное);
	КонецЕсли;
	
	ВыполнитьПопыткуУдаленияФайла(РезультатыОтправки.ИмяПринятогоФайла);
	
	
КонецПроцедуры


Функция РазобратьСодержимоеПоляДата(РазборЗаписиРегистра = Ложь, РезультатРазбораВнешнегоПакета = Неопределено, 
	ТипДанных, ТипОбъекта, ИсходноеЗначениеПоляДата, ВерсияКлюча, ИдентификаторПакета, ИдентификаторПодтверждаемогоПакета, ИдентификаторОбщегоПакета = 0,
	ИдентификаторОтправителяПакета = Неопределено)
	
	ПакетСДанными = Неопределено;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("XML");
	
	Если ТипЗнч(ТипДанных) = Тип("Строка") Тогда
		ТипДанных = Число(ТипДанных);
	КонецЕсли;
	
	ЕстьОшибкаРазбора = Ложь;
	Если ТипДанных = 2 Тогда
		
		Если Не РезультатРазбораВнешнегоПакета = Неопределено Тогда
			РезультатРазбораВнешнегоПакета.Вставить("ТипДанных", 2);
		КонецЕсли;
		
		Если ТипОбъекта = "file_data" Тогда
			ЗначениеПоляДата = ИсходноеЗначениеПоляДата;
		Иначе
			СтрокаXML = Base64Значение(ИсходноеЗначениеПоляДата);
			СтрокаXML.Записать(ИмяФайла);
			СтрокаXML=Неопределено;
		КонецЕсли;
	ИначеЕсли ТипДанных = 3 Тогда //шифрованный пакет
		
		Если Не РезультатРазбораВнешнегоПакета = Неопределено Тогда
			РезультатРазбораВнешнегоПакета.Вставить("ТипДанных",   3);
			РезультатРазбораВнешнегоПакета.Вставить("ВерсияКлюча", ВерсияКлюча);
		КонецЕсли;
		
		Если ТипОбъекта = "file_data" Тогда //расшифровывать будем позже
			ЗначениеПоляДата = ИсходноеЗначениеПоляДата;
		Иначе
			
			ТекстФайлаПакетаДата = ИсходноеЗначениеПоляДата;
			
			//пытаемся получить версию ключа
			ТекущаяВерсияКлючаШифрования = ВерсияКлюча;
			
			ВыполнитьРасшифровку(ИмяФайла, ТекущаяВерсияКлючаШифрования, ТекстФайлаПакетаДата, "", ЕстьОшибкаРазбора);
			
			Если ЕстьОшибкаРазбора Тогда
				СтрокаXML = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//зафиксируем отправителя пакета как будто это результат разбора внешнего пакета
	//попробуем заполнить по результатам разбора внешнего пакета
	Если РезультатРазбораВнешнегоПакета = Неопределено Тогда
		
		РезультатРазбораВнешнегоПакета = Новый Структура();
		
		Если Не ИдентификаторОтправителяПакета = Неопределено Тогда
			РезультатРазбораВнешнегоПакета.Вставить("ИдентификаторОтправителяПакета", ИдентификаторОтправителяПакета);
		КонецЕсли;
		Если Не ИдентификаторПакета = Неопределено Тогда
			РезультатРазбораВнешнегоПакета.Вставить("ИдентификаторПакета", ИдентификаторПакета);
		КонецЕсли;			
		Если Не ТипДанных = Неопределено Тогда
			РезультатРазбораВнешнегоПакета.Вставить("ТипДанных", ТипДанных);
		КонецЕсли;			
		Если Не ВерсияКлюча = Неопределено Тогда
			РезультатРазбораВнешнегоПакета.Вставить("ВерсияКлюча", ВерсияКлюча);
		КонецЕсли;			
	КонецЕсли;
	
	Если ЕстьОшибкаРазбора Тогда
		ПространствоИмен = "";
	Иначе
		Если ТипОбъекта = "file_data" Тогда
			//строка дата - составная часть файла. Как объект xml не разбираем
		Иначе
			ЧтениеXML= Новый ЧтениеXML;
			ЧтениеXMLДОМ= Новый ЧтениеXML;
			ЧтениеXML.ОткрытьФайл(ИмяФайла);
			ЧтениеXMLДОМ.ОткрытьФайл(ИмяФайла);
			//ЧтениеXML.Закрыть(); //сделаем позже, т.к. возможны ошибки
			
			ПостроительДОМ = Новый ПостроительDOM();
			ПространствоИмен = "";
			Попытка
				ДокументДОМ = ПостроительДОМ.Прочитать(ЧтениеXMLДОМ);
				ПространствоИмен = ДокументДОМ.ПервыйДочерний.URIПространстваИмен;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипОбъекта = "file_data" Тогда
		//строка дата - составная часть файла. Как объект xml не разбираем
		
		Если ИдентификаторОбщегоПакета <> 0 Тогда
			ЗаписьРегистра = РегистрыСведений.атл_СоставныеЧастиФайловУМС.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.ИдентификаторОбщегоПакета =  ИдентификаторОбщегоПакета;
			ЗаписьРегистра.ИдентификаторПакетаЧастиФайла = ИдентификаторПакета;
			ЗаписьРегистра.Прочитать();
			
			ЗаписьРегистра.ИдентификаторОбщегоПакета = ИдентификаторОбщегоПакета;
			ЗаписьРегистра.ИдентификаторПакетаЧастиФайла = ИдентификаторПакета;
			ЗаписьРегистра.Данные = ЗначениеПоляДата;
			ЗаписьРегистра.ДанныеПолучены = Истина;
			ЗаписьРегистра.ДатаРегистрацииДанных = ТекущаяДата();
			ЗаписьРегистра.Записать();
			
			ПроверкаНеобходимостиСборкиФайла(ЗаписьРегистра.ИдентификаторОбщегоПакета);
		КонецЕсли;
		
	Иначе
		Если ПространствоИмен = "" Тогда //обрабатываем пакет
			//пакет пустой, надо пропустить
		Иначе
			Если ПространствоИмен = "confirm_packet_mwms" Тогда
				ФабрикаДатаТип = ФабрикаXDTO.Тип("confirm_packet_mwms","confirm");
				ПакетСДанными = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаДатаТип);
				
				РегистрацияПодтвержденияПолученияПакета(ИдентификаторПодтверждаемогоПакета, ПакетСДанными);
			ИначеЕсли ПространствоИмен = "task_mwms" Тогда
				ФабрикаДатаТип = ФабрикаXDTO.Тип("task_mwms","task");
				ПакетСДанными = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаДатаТип);
				
				РегистрацияИзмененийПоЗадаче(ПакетСДанными, РезультатРазбораВнешнегоПакета);
				//ИначеЕсли ПространствоИмен = "request_data_mwms" Тогда
				//	ФабрикаДатаТип = ФабрикаXDTO.Тип("request_data_mwms","request_data");
				//	ПакетСДанными = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаДатаТип);
				//	
				//	Если ПакетСДанными.type = "history" Тогда
				//		РегистрацияЗапросаИсторииОборудования(ПакетСДанными, РезультатРазбораВнешнегоПакета);
				//	КонецЕсли;
				
			ИначеЕсли ПространствоИмен = "packets_indexes_mwms" Тогда
				ФабрикаДатаТип = ФабрикаXDTO.Тип("packets_indexes_mwms","packets");
				ПакетСДанными = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаДатаТип);
			ИначеЕсли ПространствоИмен = "response_users_list_mwms" Тогда
				ФабрикаДатаТип = ФабрикаXDTO.Тип("response_users_list_mwms","response_users_list");
				ПакетСДанными = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаДатаТип);
			ИначеЕсли ПространствоИмен = "response_update_users_mwms" Тогда
				ФабрикаДатаТип = ФабрикаXDTO.Тип("response_update_users_mwms","response_update_users");
				ПакетСДанными = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаДатаТип);
			ИначеЕсли ПространствоИмен = "message_mwms" Тогда
				ФабрикаДатаТип = ФабрикаXDTO.Тип("message_mwms","message");
				ПакетСДанными = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаДатаТип);
				
				РегистрацияПолученияПакетаССообщением(ПакетСДанными, РезультатРазбораВнешнегоПакета);
			ИначеЕсли ПространствоИмен = "users_activities_mwms" Тогда
				ФабрикаДатаТип = ФабрикаXDTO.Тип("users_activities_mwms","users_activities");
				ПакетСДанными = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаДатаТип);
				
				РегистрацияПакетаСДаннымиОбАктивностиМобильныхСотрудников(ПакетСДанными, РезультатРазбораВнешнегоПакета);
			ИначеЕсли ПространствоИмен = "monitoring_packets_mwms" Тогда
				ФабрикаДатаТип = ФабрикаXDTO.Тип("monitoring_packets_mwms","monitoring_packets");
				ПакетСДанными = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаДатаТип);
				
				РегистрацияПакетаСДаннымиТрекаМобильныхСотрудников(ПакетСДанными, РезультатРазбораВнешнегоПакета, ТипОбъекта);
			ИначеЕсли ПространствоИмен = "company_info_mwms" Тогда
				ФабрикаДатаТип = ФабрикаXDTO.Тип("company_info_mwms","company_info");
				ПакетСДанными = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаДатаТип);
				
				РегистрацияПакетаСДаннымиОСостоянииУчетнойЗаписи(ПакетСДанными, РезультатРазбораВнешнегоПакета);
			ИначеЕсли ПространствоИмен = "file_mwms" Тогда
				ФабрикаДатаТип = ФабрикаXDTO.Тип("file_mwms","file");
				ПакетСДанными = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаДатаТип);
				
				РегистрацияПакетаСДаннымиОФайле(ПакетСДанными, РезультатРазбораВнешнегоПакета);
			ИначеЕсли ПространствоИмен = "authorization_response_mwms" Тогда
				ФабрикаДатаТип = ФабрикаXDTO.Тип("authorization_response_mwms","authorization_response");
				ПакетСДанными = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаДатаТип);
				//если были ошибки при авторизации, то с ними разберемся позже
			Иначе
				Сообщить("Нестандартный пакет...");
				ФабрикаДатаТип = ФабрикаXDTO.Тип(ПространствоИмен,СтрЗаменить(ПространствоИмен,"_mwms",""));
				ПакетСДанными = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаДатаТип);
			КонецЕсли;
		КонецЕсли;
		ЧтениеXML.Закрыть();
	КонецЕсли;
	
	//пытаемся удалить файл
	ЧтениеXML= Новый ЧтениеXML;
	ЧтениеXMLДОМ= Новый ЧтениеXML;
	ПостроительДОМ = Новый ПостроительDOM();
	ВыполнитьПопыткуУдаленияФайла(ИмяФайла);
	
	Возврат ПакетСДанными;
	
КонецФункции

Функция РазобратьСодержимоеПоляДатаБезПакета(РезультатРазбораВнешнегоПакета = Неопределено, ТипДанных, ТипОбъекта, ИсходноеЗначениеПоляДата, ВерсияКлюча, ИдентификаторОтправителяПакета = Неопределено)
	
	ПакетСДанными = Неопределено;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("XML");
	
	Если ТипЗнч(ТипДанных) = Тип("Строка") Тогда
		ТипДанных = Число(ТипДанных);
	КонецЕсли;
	
	ЕстьОшибкаРазбора = Ложь;
	Если ТипДанных = 2 Тогда
		
		Если Не РезультатРазбораВнешнегоПакета = Неопределено Тогда
			РезультатРазбораВнешнегоПакета.Вставить("ТипДанных", 2);
		КонецЕсли;
		
		Если ТипОбъекта = "monitoring_packets" Тогда
			СтрокаXML = Base64Значение(ИсходноеЗначениеПоляДата);
			СтрокаXML.Записать(ИмяФайла);
			СтрокаXML=Неопределено;
		КонецЕсли;
	ИначеЕсли ТипДанных = 3 Тогда //шифрованный пакет
		
		Если Не РезультатРазбораВнешнегоПакета = Неопределено Тогда
			РезультатРазбораВнешнегоПакета.Вставить("ТипДанных",   3);
			РезультатРазбораВнешнегоПакета.Вставить("ВерсияКлюча", ВерсияКлюча);
		КонецЕсли;
		
		Если ТипОбъекта = "monitoring_packets" Тогда //расшифровывать будем позже
			
			ТекстФайлаПакетаДата = ИсходноеЗначениеПоляДата;
			
			//пытаемся получить версию ключа
			ТекущаяВерсияКлючаШифрования = ВерсияКлюча;
			
			ВыполнитьРасшифровку(ИмяФайла, ТекущаяВерсияКлючаШифрования, ТекстФайлаПакетаДата, "", ЕстьОшибкаРазбора);
			
			Если ЕстьОшибкаРазбора Тогда
				СтрокаXML = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//зафиксируем отправителя пакета как будто это результат разбора внешнего пакета
	//попробуем заполнить по результатам разбора внешнего пакета
	Если РезультатРазбораВнешнегоПакета = Неопределено Тогда
		
		РезультатРазбораВнешнегоПакета = Новый Структура();
		
		Если Не ИдентификаторОтправителяПакета = Неопределено Тогда
			РезультатРазбораВнешнегоПакета.Вставить("ИдентификаторОтправителяПакета", ИдентификаторОтправителяПакета);
		КонецЕсли;
		Если Не ТипДанных = Неопределено Тогда
			РезультатРазбораВнешнегоПакета.Вставить("ТипДанных", ТипДанных);
		КонецЕсли;			
		Если Не ВерсияКлюча = Неопределено Тогда
			РезультатРазбораВнешнегоПакета.Вставить("ВерсияКлюча", ВерсияКлюча);
		КонецЕсли;			
	КонецЕсли;
	
	Если ЕстьОшибкаРазбора Тогда
		Возврат Неопределено;
	Иначе
		Возврат ИмяФайла;
	КонецЕсли;
	
КонецФункции

Процедура РазобратьДанныеССервера()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	атл_ПолученныеПакетыСДаннымиУМС.ИдентификаторЗаписи
	|ИЗ
	|	РегистрСведений.атл_ПолученныеПакетыСДаннымиУМС КАК атл_ПолученныеПакетыСДаннымиУМС
	|ГДЕ
	|	атл_ПолученныеПакетыСДаннымиУМС.ДатаРазбора = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И атл_ПолученныеПакетыСДаннымиУМС.ДатаПоследнейНеудачнойПопыткиРазбора = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.атл_ПолученныеПакетыСДаннымиУМС.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИдентификаторЗаписи = Выборка.ИдентификаторЗаписи;
		МенеджерЗаписи.Прочитать();
		
		ТипОбъекта = МенеджерЗаписи.ТипОбъекта;
		ПакетСДанными = РазобратьСодержимоеПоляДата(Истина, Неопределено, МенеджерЗаписи.ТипДанных, ТипОбъекта, 
		МенеджерЗаписи.ДанныеПакета, МенеджерЗаписи.ВерсияКлючаШифрования, 
		МенеджерЗаписи.ИдентификаторПакета, МенеджерЗаписи.ИдентификаторПодтверждаемогоПакета, МенеджерЗаписи.ИдентификаторОбщегоПакета, МенеджерЗаписи.Отправитель);		
		
		Если ПакетСДанными = Неопределено Тогда
			Если ТипОбъекта = "file_data" Тогда
				Если мСохранятьВходящиеУдачноРазобранныеПакетыОтМС Тогда
					МенеджерЗаписи.ДатаРазбора = ТекущаяДата();
					МенеджерЗаписи.Записать();
				Иначе
					МенеджерЗаписи.Удалить();
				КонецЕсли;			
			Иначе
				МенеджерЗаписи.ДатаПоследнейНеудачнойПопыткиРазбора = ТекущаяДата();
				//записываем информацию об ошибке в логи
				ТекстОписанияЗаписи = "ОШИБКА при разборе пакета с данными (" + МенеджерЗаписи.ТипДанных + "/" + МенеджерЗаписи.ТипОбъекта + ")!";
				атл_УправлениеМобильнымиСотрудниками.СформироватьЗаписьВЛогах(Перечисления.атл_ВидыЛогов.ОшибкаРазбораДанных, ТекстОписанияЗаписи, МенеджерЗаписи.ИдентификаторПакета);
				мКоличествоЗарегистрированныхОшибок = мКоличествоЗарегистрированныхОшибок + 1;
				МенеджерЗаписи.Записать();
			КонецЕсли;
		Иначе
			
			Если ТипОбъекта = "packets_indexes" ИЛИ   		//индексный пакет не имеет смысл записывать в принципе
				ТипОбъекта = "company_info" ИЛИ   	  		//информация о компании
				ТипОбъекта = "response_users_list" ИЛИ    	// пакет со списком пользователей тоже не нужен, 
				ТипОбъекта = "users_activities" ИЛИ   	  	// пакет с информацией об активности пользователей 
				ТипОбъекта = "monitoring_packets" ИЛИ   	  	// пакет с информацией об активности пользователей 
				ТипОбъекта = ""
				Тогда
				Если мСохранятьВЛогахИнформационныеСообщенияОПакетахОтСервера Тогда
					//записываем информацию об успешном разборе в логи
					ТекстОписанияЗаписи = "Успешно разобран пакет с данными (" + МенеджерЗаписи.ТипДанных + "/" + МенеджерЗаписи.ТипОбъекта + ").";
					атл_УправлениеМобильнымиСотрудниками.СформироватьЗаписьВЛогах(Перечисления.атл_ВидыЛогов.ИнформационноеСообщениеОРазбореДанных, ТекстОписанияЗаписи, МенеджерЗаписи.ИдентификаторПакета);
				КонецЕсли;
				
				Если мСохранятьВходящиеУдачноРазобранныеПакетыОтСервера Тогда
					МенеджерЗаписи.ДатаРазбора = ТекущаяДата();
					МенеджерЗаписи.Записать();
				Иначе
					МенеджерЗаписи.Удалить();
				КонецЕсли;			
			Иначе
				
				Если мСохранятьВЛогахИнформационныеСообщения Тогда
					//записываем информацию об успешном разборе в логи
					ТекстОписанияЗаписи = "Успешно разобран пакет с данными (" + МенеджерЗаписи.ТипДанных + "/" + МенеджерЗаписи.ТипОбъекта + ").";
					атл_УправлениеМобильнымиСотрудниками.СформироватьЗаписьВЛогах(Перечисления.атл_ВидыЛогов.ИнформационноеСообщениеОРазбореДанных, ТекстОписанияЗаписи, МенеджерЗаписи.ИдентификаторПакета);
				КонецЕсли;
				
				Если мСохранятьВходящиеУдачноРазобранныеПакетыОтМС Тогда
					МенеджерЗаписи.ДатаРазбора = ТекущаяДата();
					МенеджерЗаписи.Записать();
				Иначе
					МенеджерЗаписи.Удалить();
				КонецЕсли;			
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры
	
Функция ПолучитьДанныеИзПакета(РезультатыОтправки, ИдентификаторПакета = Неопределено, ТипОбъектаВозвращаемый = Неопределено) Экспорт 
	
	ИсходныйТипXDTO = ФабрикаXDTO.Тип("response_packet_mwms","response_packet");
	СтруктураОтвета = ПрочитатьПакет(РезультатыОтправки.ИмяПринятогоФайла, ИдентификаторПакета, ИсходныйТипXDTO);
	Если Не СтруктураОтвета.ОшибкаЧтения = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	НоваяФабрика = СтруктураОтвета.НоваяФабрика;
	
	ПолученныйИдентификаторПакета = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "packet_id");
	
	РезультатРазбораВнешнегоПакета = Новый Структура;
	РезультатРазбораВнешнегоПакета.Вставить("ИдентификаторПакета",				ПолученныйИдентификаторПакета);
	РезультатРазбораВнешнегоПакета.Вставить("ИдентификаторОтправителяПакета",	ПолучитьДанныеПоляИзПакета(НоваяФабрика, "from_uid"));
	РезультатРазбораВнешнегоПакета.Вставить("ДатаСозданияПакета",				ПолучитьДанныеПоляИзПакета(НоваяФабрика, "create_time"));
	
	ТипОбъекта = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "object_type");
	
	Если Не ТипОбъектаВозвращаемый = Неопределено Тогда
		ТипОбъектаВозвращаемый = ТипОбъекта;
	КонецЕсли;
	
	ПакетСДанными = Неопределено;
	
	//проверяем есть ли ошибка...
	КодОшибкиПакета 	 = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "status_code");
	Попытка 
		//преобразовываем код ошибки в число
		КодОшибкиПакета = Число(КодОшибкиПакета);
	Исключение
	КонецПопытки;
	ОписаниеОшибкиПакета = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "status_description");
	
	
	
	Если ТипОбъекта = "packets_indexes" ИЛИ   //индексный пакет не имеет смысл записывать в принципе
		ТипОбъекта = "company_info" ИЛИ   	  //информация о компании
		ТипОбъекта = "response_users_list" ИЛИ   // пакет со списком пользователей тоже не нужен
		ТипОбъекта = "response_update_users" ИЛИ // пакет-ответ на команду синхронизации пользователей
		ТипОбъекта = "monitoring_packets" ИЛИ    // пакет-ответ на команду получения трека пользователей
		ТипОбъекта = Неопределено И
		(КодОшибкиПакета = Неопределено ИЛИ КодОшибкиПакета = 0)
		Тогда
		//ответ на запрос серверу о количестве пакетов для 1С разбираем сразу
		ЗначениеПоляДата = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "data");
		Если ЗначениеЗаполнено(ЗначениеПоляДата) Тогда
			
			ПакетСДанными = РазобратьСодержимоеПоляДата(Ложь, 
														РезультатРазбораВнешнегоПакета, 
														ПолучитьДанныеПоляИзПакета(НоваяФабрика, "data_type"), 
														ТипОбъекта,
														ЗначениеПоляДата,
														ПолучитьДанныеПоляИзПакета(НоваяФабрика, "key_version"), 
														ПолученныйИдентификаторПакета, 
														ПолучитьДанныеПоляИзПакета(НоваяФабрика, "confirm_id"));
			
		КонецЕсли;
		Если ТипОбъекта = "packets_indexes" Тогда   //индексный пакет содержит информацию о временном сдвиге
			Если ЗначениеЗаполнено(мВремяЗапросаИндексногоПакета) Тогда
				//высчитываем сдвиг по времени
				Если ЗначениеЗаполнено(НоваяФабрика.time_stamp) Тогда
					Попытка 
						ВремяСервераИзПакетаСтрока = НоваяФабрика.time_stamp;
						ВремяСервераИзПакетаСтрока = СтрЗаменить(ВремяСервераИзПакетаСтрока, "T", "");
						ВремяСервераИзПакетаСтрока = СтрЗаменить(ВремяСервераИзПакетаСтрока, "-", "");
						ВремяСервераИзПакетаСтрока = СтрЗаменить(ВремяСервераИзПакетаСтрока, ":", "");
						ВремяСервераИзПакета = Дата(ВремяСервераИзПакетаСтрока);
					Исключение
						//не получилось разобрать время...
						ВремяСервераИзПакета = Дата("00010101");
					КонецПопытки;
				Иначе
					ВремяСервераИзПакета = Дата("00010101");
				КонецЕсли;
				
				мЧасовойПояс = РассчитатьСдвигПоВремени(мВремяЗапросаИндексногоПакета, ВремяСервераИзПакета);
			КонецЕсли;
        КонецЕсли;
	Иначе
		
		Если КодОшибкиПакета = Неопределено или КодОшибкиПакета = 0 Тогда
			//ошибки нет
			//записываем полученный пакет в регистр для дальнейшего разбора.
			ИдентификаторПолученногоПакета = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "packet_id");
			ЗаписьПолученногоПакета = РегистрыСведений.атл_ПолученныеПакетыСДаннымиУМС.СоздатьМенеджерЗаписи();
			ЗаписьПолученногоПакета.ИдентификаторЗаписи = атл_УправлениеМобильнымиСотрудниками.ПолучитьИдентификаторНовойЗаписиПакетаСДанными();
			ЗаписьПолученногоПакета.ИдентификаторПакета = ПолученныйИдентификаторПакета;
			ЗаписьПолученногоПакета.ИдентификаторПодтверждаемогоПакета = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "confirm_id");
			Если ТипОбъекта = "file_data" Тогда
				Если мЗагрузкаПакета.Количество() > 0 Тогда
					ЗаписьПолученногоПакета.ИдентификаторОбщегоПакета = мЗагрузкаПакета.ИдентификаторОбщегоПакета;
				Иначе
					Сообщить("При загрузке части файла не удалось зафиксировать идентификатор индексного (общего) пакета!");
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НоваяФабрика.protocol) Тогда
				ЗаписьПолученногоПакета.ВерсияПротокола 	= ПолучитьДанныеПоляИзПакета(НоваяФабрика, "protocol");
			КонецЕсли;
			
			ЗаписьПолученногоПакета.ТипДанных = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "data_type");
			
			ЗаписьПолученногоПакета.ТипОбъекта = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "object_type");
			
			ЗначениеПоля = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "key_version");
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				ЗаписьПолученногоПакета.ВерсияКлючаШифрования = ЗначениеПоля;
			КонецЕсли;
			
			ЗначениеПоля = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "data_name");
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				ЗаписьПолученногоПакета.ИмяДанных 	= ЗначениеПоля;
			КонецЕсли;
			
			ЗначениеПоля = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "from_uid");
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				ЗаписьПолученногоПакета.Отправитель = ЗначениеПоля;
				ЗначениеПоля = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "time_zone");
				Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
					ЗаписьПолученногоПакета.ЧасовойПояс = ЗначениеПоля;
					//нужно проверить актуальность настроек пользователя
					ПроверитьАктуальностьЧасовогоПоясаСотрудника(ЗаписьПолученногоПакета.Отправитель, ЗначениеПоля);
				КонецЕсли;
			КонецЕсли;
			
			ЗаписьПолученногоПакета.ДатаЗагрузки = ТекущаяДата();
			
			
			ЗначениеПоля = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "data");
			Если ТипЗнч(ЗначениеПоля) = Тип("Строка") Тогда
				Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
					ЗаписьПолученногоПакета.ДанныеПакета 	= ЗначениеПоля;
				КонецЕсли;
				ЗаписьПолученногоПакета.Записать();
			Иначе
				//это ошибка...
				Если ИдентификаторПолученногоПакета = Неопределено Тогда
					ТекстОписанияОшибки = "В пришедшем пакете с ИД " + ПолученныйИдентификаторПакета + " не удалось разобрать поле DATA. Код ошибки: '"+КодОшибкиПакета+"'. Описание ошибки: '"+ОписаниеОшибкиПакета+"'";
					атл_УправлениеМобильнымиСотрудниками.СформироватьЗаписьВЛогах(Перечисления.атл_ВидыЛогов.ОшибкаРазбораДанных, ТекстОписанияОшибки, ПолученныйИдентификаторПакета);
					мКоличествоЗарегистрированныхОшибок = мКоличествоЗарегистрированныхОшибок + 1;
				Иначе
					ТекстОписанияОшибки = "В пришедшем пакете (идентификатора нет) не удалось разобрать поле DATA. Код ошибки: '"+КодОшибкиПакета+"'. Описание ошибки: '"+ОписаниеОшибкиПакета+"'";
					атл_УправлениеМобильнымиСотрудниками.СформироватьЗаписьВЛогах(Перечисления.атл_ВидыЛогов.ОшибкаРазбораДанных, ТекстОписанияОшибки, );
					мКоличествоЗарегистрированныхОшибок = мКоличествоЗарегистрированныхОшибок + 1;
				КонецЕсли;
			КонецЕсли;
			//окончание записи полученного пакета в регистр
		Иначе
			//ошибка ...
			ПодчиститьКукиВРегистре();
			мЗаголовокHTTP.Вставить("Cookie", "");
			
			Если КодОшибкиПакета = 107 Тогда
				ТекстОписанияОшибки = "Подключение невозможно! Мастер логин не активен!";
			ИначеЕсли КодОшибкиПакета = 123 Тогда
				ТекстОписанияОшибки = "Подключение невозможно! Зарегистрируйте информационную базу на сервере!";
			ИначеЕсли КодОшибкиПакета = 126 Тогда
				ТекстОписанияОшибки = "Подключение оборвалось. Требуется переподключение.";
				мТребуетсяПереподключение = Истина;
			Иначе
				ТекстОписанияОшибки = "";
			КонецЕсли;
			
			Если ТекстОписанияОшибки <> "" Тогда
				ТекстОписанияОшибки = ТекстОписанияОшибки + Символы.ПС;
			КонецЕсли;
			
			ТекстОписанияОшибки = ТекстОписанияОшибки + "Код ошибки: " + КодОшибкиПакета;
			ТекстОписанияОшибки = ТекстОписанияОшибки + Символы.ПС + "Описание ошибки: " + ОписаниеОшибкиПакета;
			Сообщить("" + ТекстОписанияОшибки);
			атл_УправлениеМобильнымиСотрудниками.СформироватьЗаписьВЛогах(Перечисления.атл_ВидыЛогов.ОшибкаПодключенияКСерверу, ТекстОписанияОшибки,);
			ПакетСДанными = НоваяФабрика;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПакетСДанными;
	
КонецФункции

Процедура РегистрацияПодтвержденияПолученияПакета(ИдентификаторПакетаНаСервере, ПакетСДанными)
	
	//ИдентификаторПакетаНаСервере = ПакетСДанными.packet_id;
	
	
	Если ЗначениеЗаполнено(ИдентификаторПакетаНаСервере) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	атл_ПакетыНаОтправку.ДатаСозданияПакета КАК ДатаСозданияПакета,
		|	атл_ПакетыНаОтправку.ВнутреннийИдентификаторПакета
		|ИЗ
		|	РегистрСведений.атл_ПакетыНаОтправку КАК атл_ПакетыНаОтправку
		|ГДЕ
		|	атл_ПакетыНаОтправку.ИдентификаторПакетаНаСервере = &ИдентификаторПакетаНаСервере
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСозданияПакета
		|АВТОУПОРЯДОЧИВАНИЕ";
		Запрос.УстановитьПараметр("ИдентификаторПакетаНаСервере", ИдентификаторПакетаНаСервере);
		
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ВнутреннийИдентификаторПакета = Выборка.ВнутреннийИдентификаторПакета;
			
			МенеджерЗаписи = РегистрыСведений.атл_ПакетыНаОтправку.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ВнутреннийИдентификаторПакета = Выборка.ВнутреннийИдентификаторПакета;
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.ПакетДоставлен = Истина;
			МенеджерЗаписи.ДатаДоставкиПакетаДоПолучателя = ПакетСДанными.recieve_datetime;
			МенеджерЗаписи.Записать();
			
			Если МенеджерЗаписи.ВидДанных = "Сообщение" и МенеджерЗаписи.ВидПакета = "Новое сообщение" Тогда
				//получили информацию о доставке
				Если  ПакетСДанными.recieve_datetime <> Неопределено Тогда
					МенеджерЗаписиСообщения = РегистрыСведений.атл_Сообщения.СоздатьМенеджерЗаписи();
					МенеджерЗаписиСообщения.ИдентификаторИнформационнойБазы = МенеджерЗаписи.ИдентификаторИнформационнойБазы;
					МенеджерЗаписиСообщения.ИдентификаторСообщения = МенеджерЗаписи.ИдентификаторОбъекта;
					МенеджерЗаписиСообщения.Прочитать();
					
					МенеджерЗаписиСообщения.ДатаДоставки = ПакетСДанными.recieve_datetime;
					
					МенеджерЗаписиСообщения.Записать();
				КонецЕсли;
				
			ИначеЕсли МенеджерЗаписи.ВидДанных = "Задача" Тогда
				Если МенеджерЗаписи.ВидПакета = "Новая задача" Тогда
					//получили информацию о доставке
					Если ЗначениеЗаполнено(МенеджерЗаписи.Объект) и ПакетСДанными.recieve_datetime <> Неопределено Тогда
						ЗадачаОбъект = МенеджерЗаписи.Объект.ПолучитьОбъект();
						ЗадачаОбъект.ПолучилДата = ПакетСДанными.recieve_datetime;
						ВременныйТекущийСтатус = атл_УправлениеМобильнымиСотрудниками.ПолучитьТекущийСтатусЗадачиУМС(ЗадачаОбъект);
						Если ВременныйТекущийСтатус <> ЗадачаОбъект.ТекущийСтатус Тогда
							СтарыйСтатус = ЗадачаОбъект.ТекущийСтатус;
							ЗадачаОбъект.ТекущийСтатус = ВременныйТекущийСтатус;
							ИзменялсяСтатус = Истина;			
						Иначе
							ИзменялсяСтатус = Ложь;
						КонецЕсли;
						ЗадачаОбъект.Записать(РежимЗаписиДокумента.Запись);
						
						Если ИзменялсяСтатус Тогда
							атл_УправлениеМобильнымиСотрудниками.СформироватьУведомлениеПоИзменениюСтатуса(СтарыйСтатус, ЗадачаОбъект.ТекущийСтатус, ЗадачаОбъект.Ссылка);
						КонецЕсли;
						
						//надо зафиксировать, что были доставлены комментарии по этой задаче...
						
					КонецЕсли;
				ИначеЕсли МенеджерЗаписи.ВидПакета = "Завершение задачи" Тогда
					//необходимо в комментарии о завершении задачи проставить дату доставки
					
					Если ЗначениеЗаполнено(МенеджерЗаписи.Объект) и ПакетСДанными.recieve_datetime <> Неопределено Тогда
						УстановитьДатуДоставкиПриложенногоКомментария(МенеджерЗаписи.Объект, 
						Перечисления.атл_ТипыКомментариевКОбъектамУМС.КомментарийКЗавершениюЗадачиМобильномуСотруднику, 
						ПакетСДанными.recieve_datetime);
					КонецЕсли;
					
				ИначеЕсли МенеджерЗаписи.ВидПакета = "Принятие задачи" Тогда
					//необходимо в комментарии о принятии задачи проставить дату доставки
					
					Если ЗначениеЗаполнено(МенеджерЗаписи.Объект) и ПакетСДанными.recieve_datetime <> Неопределено Тогда
						УстановитьДатуДоставкиПриложенногоКомментария(МенеджерЗаписи.Объект, 
						Перечисления.атл_ТипыКомментариевКОбъектамУМС.КомментарийКПринятиюРезультатовВыполненияЗадачиМобильномуСотруднику, 
						ПакетСДанными.recieve_datetime);
					КонецЕсли;
					
				ИначеЕсли МенеджерЗаписи.ВидПакета = "Отклонение задачи" Тогда
					//необходимо в комментарии об отклонении задачи проставить дату доставки
					
					Если ЗначениеЗаполнено(МенеджерЗаписи.Объект) и ПакетСДанными.recieve_datetime <> Неопределено Тогда
						УстановитьДатуДоставкиПриложенногоКомментария(МенеджерЗаписи.Объект, 
						Перечисления.атл_ТипыКомментариевКОбъектамУМС.КомментарийКОтклонениюРезультатовВыполненияЗадачиМобильномуСотруднику, 
						ПакетСДанными.recieve_datetime);
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли МенеджерЗаписи.ВидДанных = "Комментарий" и МенеджерЗаписи.ВидПакета = "Комментарий по задаче" Тогда
				//получили информацию о доставке
				Если ЗначениеЗаполнено(МенеджерЗаписи.Объект) и ПакетСДанными.recieve_datetime <> Неопределено Тогда
					МенеджерЗаписиКомментария = РегистрыСведений.атл_КомментарииКОбъектамУМС.СоздатьМенеджерЗаписи();
					МенеджерЗаписиКомментария.ИдентификаторКомментария = МенеджерЗаписи.ИдентификаторОбъекта;
					МенеджерЗаписиКомментария.ИдентификаторИнформационнойБазы = МенеджерЗаписи.ИдентификаторИнформационнойБазы;
					МенеджерЗаписиКомментария.Объект = МенеджерЗаписи.Объект.Ссылка;
					МенеджерЗаписиКомментария.Прочитать();
					
					МенеджерЗаписиКомментария.ПолучилДата = ПакетСДанными.recieve_datetime;
					
					МенеджерЗаписиКомментария.Записать();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьДанныеНаСервер() Экспорт
	
	//функция выбирает все неотправленные пакеты из соотвествующего регистра и отправляет на сервер
	//необходимо из регистра для начала вытащить все задачи, ожидающие отправки
	
	//обрабатываем первую группу пакетов на отправку
	
	Если Не РазрешенОбменДанными() Тогда
		Если мФоновыйОбмен Тогда
			мФоновыйОбменВыполненУспешно = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СписокВидовДанных = Новый СписокЗначений();
	СписокВидовДанных.Добавить("Задача");
	//Задачи обрабатываем первыми и отдельно так, чтобы потом не было проблем с ссылками
	//при отправке новых задач подчищаем записи об отправке пакетов с комментариями
	
	Результат = СформироватьЗапросПоПакетамНаОтправку(СписокВидовДанных);
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Объект) = Тип("ДокументСсылка.атл_ЗадачаМобильномуСотруднику") Тогда
			Если Выборка.ВидДанных = "Задача" Тогда
				ДокументЗадача = Выборка.Объект;
				Если Выборка.ВидПакета = "Новая задача" Тогда
					
					РезультатыПодготовкиПакетаДата = СформироватьПакетНоваяЗадача(ДокументЗадача);
					ЛокальныйИдентификаторПакета = СтрЗаменить(Выборка.ВнутреннийИдентификаторПакета,Символы.НПП,"") + Формат(Выборка.ДатаСозданияПакета, "ДФ=dd");
					РезультатыЗаписиПакета = ЗаписатьПакет(0,"send",Выборка.ПолучательПакета,,ЛокальныйИдентификаторПакета,,,"task","basic",РезультатыПодготовкиПакетаДата.ИмяФайлаПакета);
					
					РезультатыОтправки = ОтправкаДанныхНаСервер(РезультатыЗаписиПакета);
					
					Если РезультатыОтправки.ОтправкаУспешна Тогда
						
						ИсходныйТипXDTO = ФабрикаXDTO.Тип("response_packet_mwms","response_packet");
						СтруктураОтвета = ПрочитатьПакет(РезультатыОтправки.ИмяПринятогоФайла, , ИсходныйТипXDTO);
						Если Не СтруктураОтвета.ОшибкаЧтения = "" Тогда
							//пакет разобрать не смогли, идем дальше
							Продолжить;
						КонецЕсли;
						НоваяФабрика = СтруктураОтвета.НоваяФабрика;
						
						СерверныйИДПоследнегоПакета = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "packet_id");
						Если ТипЗнч(СерверныйИДПоследнегоПакета) = Тип("Строка") Тогда
							СерверныйИДПоследнегоПакета = Число(СерверныйИДПоследнегоПакета);
						КонецЕсли;
						
						Если ВыводитьОтладочныеСообщения Тогда
							Сообщить("ИД на сервере: " + СерверныйИДПоследнегоПакета);
						КонецЕсли;
						
						Попытка
							СерверныйИДПоследнегоПакета = Число(СерверныйИДПоследнегоПакета);
						Исключение
							Если СерверныйИДПоследнегоПакета = Неопределено Тогда
								ОписаниеОшибкиПриОтправкиПакета = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "status_description");
								КодОшибкиПриОтправкиПакета = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "status_code");
								Если ОписаниеОшибкиПриОтправкиПакета = "Recipient can not be found" Тогда
									ТекстОписанияОшибки = "В задаче " + ДокументЗадача + " указан исполнитель, который не зарегистрирован как пользователь мобильного клиента. Данная задача не будет отправлена на сервер!";
								Иначе
									ТекстОписанияОшибки = "По задаче " + ДокументЗадача + " не удалось получить ИД пакета на сервере! В файле указан: '" + СерверныйИДПоследнегоПакета + "'. Данная задача не будет отправлена на сервер!";
								КонецЕсли;
								Сообщить("" + ТекстОписанияОшибки, СтатусСообщения.Внимание);
								атл_УправлениеМобильнымиСотрудниками.СформироватьЗаписьВЛогах(Перечисления.атл_ВидыЛогов.ОшибкаОтправкиДанных, ТекстОписанияОшибки);
							КонецЕсли;
							СерверныйИДПоследнегоПакета = 0;
						КонецПопытки;
						
						Если СерверныйИДПоследнегоПакета <> 0 Тогда //иначе по сути отправки не было
							//зафиксируем в задаче, что она отправлена
							ЗадачаОбъект = ДокументЗадача.ПолучитьОбъект();
							ЗадачаОбъект.ТребуетсяОтправкаНаСервер = Ложь;
							НоваяСтрокаСИдентификатором = ЗадачаОбъект.ИдентификаторыПакетовНаСервере.Добавить();
							НоваяСтрокаСИдентификатором.ИдентификаторПакетаНаСервере = СерверныйИДПоследнегоПакета;
							ЗадачаОбъект.ОтправленаДата = ТекущаяДата();
							ЗадачаОбъект.ТекущийСтатус = атл_УправлениеМобильнымиСотрудниками.ПолучитьТекущийСтатусЗадачиУМС(ЗадачаОбъект);
							ЗадачаОбъект.Записать();
							
							МенеджерЗаписи = РегистрыСведений.атл_ПакетыНаОтправку.СоздатьМенеджерЗаписи();
							МенеджерЗаписи.ВнутреннийИдентификаторПакета = Выборка.ВнутреннийИдентификаторПакета;
							МенеджерЗаписи.Прочитать();
							
							МенеджерЗаписи.ПакетОтправлен = Истина;
							МенеджерЗаписи.ИдентификаторПакетаНаСервере = СерверныйИДПоследнегоПакета;
							МенеджерЗаписи.Записать(Истина);
							
							Если ВыводитьОтладочныеСообщения Тогда
								Сообщить("Удачно выгружен пакет по объекту " + ДокументЗадача);
							КонецЕсли;
						Иначе
							МенеджерЗаписи = РегистрыСведений.атл_ПакетыНаОтправку.СоздатьМенеджерЗаписи();
							МенеджерЗаписи.ВнутреннийИдентификаторПакета = Выборка.ВнутреннийИдентификаторПакета;
							МенеджерЗаписи.Прочитать();
							
							МенеджерЗаписи.ЕстьОшибкаПриОтправкеПакета = Истина;
							МенеджерЗаписи.КодОшибкиПриОтправкиПакета = КодОшибкиПриОтправкиПакета;
							МенеджерЗаписи.ОписаниеОшибкиПриОтправкиПакета = ОписаниеОшибкиПриОтправкиПакета;
							МенеджерЗаписи.Записать(Истина);
							
							Если ВыводитьОтладочныеСообщения Тогда
								Сообщить("Не выгружен пакет по объекту "+ДокументЗадача);
							КонецЕсли;
						КонецЕсли;
						
					Иначе
						Сообщить("Ошибка выгрузки по объекту "+ДокументЗадача, СтатусСообщения.Важное);
					КонецЕсли;
				ИначеЕсли Выборка.ВидПакета = "Завершение задачи" Тогда
					РезультатыПодготовкиПакетаДата = СформироватьПакетЗавершениеЗадачи(ДокументЗадача);
					ЛокальныйИдентификаторПакета = СтрЗаменить(Выборка.ВнутреннийИдентификаторПакета,Символы.НПП,"") + Формат(Выборка.ДатаСозданияПакета, "ДФ=dd");
					РезультатыЗаписиПакета = ЗаписатьПакет(0,"send",Выборка.ПолучательПакета,,ЛокальныйИдентификаторПакета,,,"task","update",РезультатыПодготовкиПакетаДата.ИмяФайлаПакета);
					
					РезультатыОтправки = ОтправкаДанныхНаСервер(РезультатыЗаписиПакета);
					
					Если РезультатыОтправки.ОтправкаУспешна Тогда
						ИсходныйТипXDTO = ФабрикаXDTO.Тип("response_packet_mwms","response_packet");
						СтруктураОтвета = ПрочитатьПакет(РезультатыОтправки.ИмяПринятогоФайла, , ИсходныйТипXDTO);
						Если Не СтруктураОтвета.ОшибкаЧтения = "" Тогда
							//пакет разобрать не смогли, идем дальше
							Продолжить;
						КонецЕсли;
						НоваяФабрика = СтруктураОтвета.НоваяФабрика;
						
						СерверныйИДПоследнегоПакета = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "packet_id");
						Если ТипЗнч(СерверныйИДПоследнегоПакета) = Тип("Строка") Тогда
							СерверныйИДПоследнегоПакета = Число(СерверныйИДПоследнегоПакета);
						КонецЕсли;
						
						//зафиксируем в задаче, что она отправлена
						ЗадачаОбъект = ДокументЗадача.ПолучитьОбъект();
						ЗадачаОбъект.ТребуетсяОтправкаНаСервер = Ложь;
						НоваяСтрокаСИдентификатором = ЗадачаОбъект.ИдентификаторыПакетовНаСервере.Добавить();
						НоваяСтрокаСИдентификатором.ИдентификаторПакетаНаСервере = Число(СерверныйИДПоследнегоПакета);
						ЗадачаОбъект.Записать();
						
						МенеджерЗаписи = РегистрыСведений.атл_ПакетыНаОтправку.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.ВнутреннийИдентификаторПакета = Выборка.ВнутреннийИдентификаторПакета;
						МенеджерЗаписи.Прочитать();
						
						МенеджерЗаписи.ПакетОтправлен = Истина;
						МенеджерЗаписи.ИдентификаторПакетаНаСервере = СерверныйИДПоследнегоПакета;
						МенеджерЗаписи.Записать(Истина);
						
						Если ВыводитьОтладочныеСообщения Тогда
							Сообщить("Удачно выгружен пакет по объекту "+ДокументЗадача);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Выборка.ВидПакета = "Принятие задачи" или	Выборка.ВидПакета = "Отклонение задачи" Тогда
					
					Если Выборка.ВидПакета = "Принятие задачи" Тогда
						РезультатыПодготовкиПакетаДата = СформироватьПакетПринятиеЗадачи(ДокументЗадача);
					ИначеЕсли Выборка.ВидПакета = "Отклонение задачи" Тогда
						РезультатыПодготовкиПакетаДата = СформироватьПакетОтклонениеЗадачи(ДокументЗадача);
					КонецЕсли;
					
					Если РезультатыПодготовкиПакетаДата = Неопределено Тогда
						//ошибка отправки данных
						Продолжить;
					КонецЕсли;
					
					ЛокальныйИдентификаторПакета = СтрЗаменить(Выборка.ВнутреннийИдентификаторПакета,Символы.НПП,"") + Формат(Выборка.ДатаСозданияПакета, "ДФ=dd");
					РезультатыЗаписиПакета = ЗаписатьПакет(0,"send",Выборка.ПолучательПакета,,ЛокальныйИдентификаторПакета,,,"task","update",РезультатыПодготовкиПакетаДата.ИмяФайлаПакета);
					
					РезультатыОтправки = ОтправкаДанныхНаСервер(РезультатыЗаписиПакета);
					
					Если РезультатыОтправки.ОтправкаУспешна Тогда
						ИсходныйТипXDTO = ФабрикаXDTO.Тип("response_packet_mwms","response_packet");
						СтруктураОтвета = ПрочитатьПакет(РезультатыОтправки.ИмяПринятогоФайла, , ИсходныйТипXDTO);
						Если Не СтруктураОтвета.ОшибкаЧтения = "" Тогда
							//пакет разобрать не смогли, идем дальше
							Продолжить;
						КонецЕсли;
						НоваяФабрика = СтруктураОтвета.НоваяФабрика;
						
						СерверныйИДПоследнегоПакета = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "packet_id");
						Если ТипЗнч(СерверныйИДПоследнегоПакета) = Тип("Строка") Тогда
							СерверныйИДПоследнегоПакета = Число(СерверныйИДПоследнегоПакета);
						КонецЕсли;
						
						Если РезультатыПодготовкиПакетаДата.НомерСтрокиСогласования <> 0 Тогда
							//зафиксируем в задаче, что она отправлена
							ЗадачаОбъект = ДокументЗадача.ПолучитьОбъект();
							ЗадачаОбъект.ТребуетсяОтправкаНаСервер = Ложь;
							РедактируемаяСтрокаСогласования = ЗадачаОбъект.СогласованиеРезультатовВыполненияЗадачи[РезультатыПодготовкиПакетаДата.НомерСтрокиСогласования - 1];
							РедактируемаяСтрокаСогласования.ИдентификаторПакетаНаСервере = Число(СерверныйИДПоследнегоПакета);
							ЗадачаОбъект.Записать();
						КонецЕсли;
							
						МенеджерЗаписи = РегистрыСведений.атл_ПакетыНаОтправку.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.ВнутреннийИдентификаторПакета = Выборка.ВнутреннийИдентификаторПакета;
						МенеджерЗаписи.Прочитать();
						
						МенеджерЗаписи.ПакетОтправлен = Истина;
						МенеджерЗаписи.ИдентификаторПакетаНаСервере = СерверныйИДПоследнегоПакета;
						МенеджерЗаписи.Записать(Истина);
						
						Если ВыводитьОтладочныеСообщения Тогда
							Сообщить("Удачно выгружен пакет по объекту "+ДокументЗадача);
						КонецЕсли;
					Иначе
						Сообщить("Ошибка выгрузки по объекту "+ДокументЗадача, СтатусСообщения.Важное);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	СписокВидовДанных = Новый СписокЗначений();
	СписокВидовДанных.Добавить("Сообщение");
	СписокВидовДанных.Добавить("Комментарий");
	
	Результат = СформироватьЗапросПоПакетамНаОтправку(СписокВидовДанных);
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Объект) = Тип("ДокументСсылка.атл_ЗадачаМобильномуСотруднику") и ЗначениеЗаполнено(Выборка.Объект) Тогда
			Если Выборка.ВидДанных = "Комментарий" Тогда
				ДокументЗадача = Выборка.Объект;
				
				//не отправляем комментарии, которые сделаны по неотправленным задачам
				
				РезультатыПодготовкиПакетаДата = СформироватьПакетКомментарий(ДокументЗадача, Выборка.ИдентификаторОбъекта);
				ЛокальныйИдентификаторПакета = СтрЗаменить(Выборка.ВнутреннийИдентификаторПакета,Символы.НПП,"") + Формат(Выборка.ДатаСозданияПакета, "ДФ=dd");
				РезультатыЗаписиПакета = ЗаписатьПакет(0,"send",Выборка.ПолучательПакета,,ЛокальныйИдентификаторПакета,,,"task_comment","basic",РезультатыПодготовкиПакетаДата.ИмяФайлаПакета);
				
				РезультатыОтправки = ОтправкаДанныхНаСервер(РезультатыЗаписиПакета);
				
				Если РезультатыОтправки.ОтправкаУспешна Тогда
					ИсходныйТипXDTO = ФабрикаXDTO.Тип("response_packet_mwms","response_packet");
					СтруктураОтвета = ПрочитатьПакет(РезультатыОтправки.ИмяПринятогоФайла, , ИсходныйТипXDTO);
					Если Не СтруктураОтвета.ОшибкаЧтения = "" Тогда
						//пакет разобрать не смогли, идем дальше
						Продолжить;
					КонецЕсли;
					НоваяФабрика = СтруктураОтвета.НоваяФабрика;
					
					СерверныйИДПоследнегоПакета = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "packet_id");
					Если ТипЗнч(СерверныйИДПоследнегоПакета) = Тип("Строка") Тогда
						СерверныйИДПоследнегоПакета = Число(СерверныйИДПоследнегоПакета);
					КонецЕсли;
					
					//зафиксируем в комментарии, что он отправлен
					
					МенеджерЗаписиКомментария = РегистрыСведений.атл_КомментарииКОбъектамУМС.СоздатьМенеджерЗаписи();
					МенеджерЗаписиКомментария.ИдентификаторКомментария = Выборка.ИдентификаторОбъекта;
					МенеджерЗаписиКомментария.ИдентификаторИнформационнойБазы = 0;
					МенеджерЗаписиКомментария.Объект = ДокументЗадача;
					МенеджерЗаписиКомментария.Прочитать();
					
					МенеджерЗаписиКомментария.ИдентификаторПакетаНаСервере = СерверныйИДПоследнегоПакета;
					МенеджерЗаписиКомментария.Записать();
					
					МенеджерЗаписи = РегистрыСведений.атл_ПакетыНаОтправку.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.ВнутреннийИдентификаторПакета = Выборка.ВнутреннийИдентификаторПакета;
					МенеджерЗаписи.Прочитать();
					
					МенеджерЗаписи.ПакетОтправлен = Истина;
					МенеджерЗаписи.ИдентификаторПакетаНаСервере = СерверныйИДПоследнегоПакета;
					МенеджерЗаписи.Записать(Истина);
					
					Если ВыводитьОтладочныеСообщения Тогда
						Сообщить("Удачно выгружен пакет с комментарием по объекту "+ДокументЗадача);
					КонецЕсли;
				Иначе
					Сообщить("Ошибка выгрузки пакета с комментарием по объекту "+ДокументЗадача, СтатусСообщения.Важное);
				КонецЕсли;				
				
			КонецЕсли;
			
		ИначеЕсли Выборка.ВидДанных = "Сообщение" Тогда
			РезультатыПодготовкиПакетаДата = СформироватьПакетСообщение(Выборка.ВидПакета, Выборка.ИдентификаторОбъекта, Выборка.ИдентификаторИнформационнойБазы);
			ЛокальныйИдентификаторПакета = СтрЗаменить(Выборка.ВнутреннийИдентификаторПакета,Символы.НПП,"") + Формат(Выборка.ДатаСозданияПакета, "ДФ=dd");
			РезультатыЗаписиПакета = ЗаписатьПакет(0,"send",Выборка.ПолучательПакета,,ЛокальныйИдентификаторПакета,,,"message", РезультатыПодготовкиПакетаДата.ПодтипОбъекта, РезультатыПодготовкиПакетаДата.ИмяФайлаПакета);
			
			РезультатыОтправки = ОтправкаДанныхНаСервер(РезультатыЗаписиПакета);
			
			Если РезультатыОтправки.ОтправкаУспешна Тогда
				ИсходныйТипXDTO = ФабрикаXDTO.Тип("response_packet_mwms","response_packet");
				СтруктураОтвета = ПрочитатьПакет(РезультатыОтправки.ИмяПринятогоФайла, , ИсходныйТипXDTO);
				Если Не СтруктураОтвета.ОшибкаЧтения = "" Тогда
					//пакет разобрать не смогли, идем дальше
					Продолжить;
				КонецЕсли;
				НоваяФабрика = СтруктураОтвета.НоваяФабрика;
				
				СерверныйИДПоследнегоПакета = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "packet_id");
				Если ТипЗнч(СерверныйИДПоследнегоПакета) = Тип("Строка") Тогда
					СерверныйИДПоследнегоПакета = Число(СерверныйИДПоследнегоПакета);
				ИначеЕсли СерверныйИДПоследнегоПакета = Неопределено Тогда
					ОписаниеОшибкиПриОтправкиПакета = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "status_description");
					КодОшибкиПриОтправкиПакета = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "status_code");
					Если ОписаниеОшибкиПриОтправкиПакета = "Recipient can not be found" Тогда
						Сообщить("В данных для " + Выборка.ПолучательПакета + " с идентификатором " + Выборка.ИдентификаторОбъекта + " указан исполнитель, который не зарегистрирован как пользователь мобильного клиента. Данное сообщение не будет отправлено на сервер!", СтатусСообщения.Внимание);
					Иначе
						Сообщить("Ошибка! Не удалось зафиксировать ИД пакета на сервере! В файле указан: '" + СерверныйИДПоследнегоПакета + "'");
					КонецЕсли;
					СерверныйИДПоследнегоПакета = 0;
				КонецЕсли;
				
				Если СерверныйИДПоследнегоПакета <> 0 Тогда //иначе по сути отправки не было
					//зафиксируем в сообщении, что оно отправлен
					Если Выборка.ВидПакета = "Новое сообщение" Тогда
						МенеджерЗаписиСообщения = РегистрыСведений.атл_Сообщения.СоздатьМенеджерЗаписи();
						МенеджерЗаписиСообщения.ИдентификаторИнформационнойБазы = 0;
						МенеджерЗаписиСообщения.ИдентификаторСообщения = Выборка.ИдентификаторОбъекта;
						МенеджерЗаписиСообщения.Прочитать();
						
						МенеджерЗаписиСообщения.ДатаОтправки = ТекущаяДата();
						МенеджерЗаписиСообщения.Записать();
					КонецЕсли;
					
					МенеджерЗаписи = РегистрыСведений.атл_ПакетыНаОтправку.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.ВнутреннийИдентификаторПакета = Выборка.ВнутреннийИдентификаторПакета;
					МенеджерЗаписи.Прочитать();
					
					МенеджерЗаписи.ПакетОтправлен = Истина;
					МенеджерЗаписи.ИдентификаторПакетаНаСервере = СерверныйИДПоследнегоПакета;
					МенеджерЗаписи.Записать(Истина);
				Иначе
					МенеджерЗаписи = РегистрыСведений.атл_ПакетыНаОтправку.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.ВнутреннийИдентификаторПакета = Выборка.ВнутреннийИдентификаторПакета;
					МенеджерЗаписи.Прочитать();
					
					МенеджерЗаписи.ЕстьОшибкаПриОтправкеПакета = Истина;
					МенеджерЗаписи.КодОшибкиПриОтправкиПакета = КодОшибкиПриОтправкиПакета;
					МенеджерЗаписи.ОписаниеОшибкиПриОтправкиПакета = ОписаниеОшибкиПриОтправкиПакета;
					МенеджерЗаписи.Записать(Истина);
					
					Если ВыводитьОтладочныеСообщения Тогда
						Сообщить("Не выгружен пакет 'Сообщение' с идентификатором " + Выборка.ИдентификаторОбъекта);
					КонецЕсли;
				КонецЕсли;
				
				Если ВыводитьОтладочныеСообщения Тогда
					Сообщить("Удачно выгружен пакет с сообщением (ИД "+Выборка.ИдентификаторОбъекта+").");
				КонецЕсли;
			Иначе
				Сообщить("Ошибка выгрузки пакета с сообщением (ИД "+Выборка.ИдентификаторОбъекта+")!", СтатусСообщения.Важное);
			КонецЕсли;
			
			ВыполнитьПопыткуУдаленияФайла(РезультатыОтправки.ИмяПринятогоФайла);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокВидовДанных = Новый СписокЗначений();
	СписокВидовДанных.Добавить("Расписание работы");
	//Расписание работы обрабатываем в последнюю очередь
	
	Результат = СформироватьЗапросПоПакетамНаОтправку(СписокВидовДанных);
	
	Выборка = Результат.Выбрать();
	
	//во избежание дублирующих запросов зафикисруем тех, кому расписание уже отправлялось
	СписокОбработанныхСотрудников = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		//
		РезультатыПодготовкиПакетаДата = СформироватьПакетРасписаниеРаботыСотрудника(Выборка.ПолучательПакета);
		ЛокальныйИдентификаторПакета = СтрЗаменить(Выборка.ВнутреннийИдентификаторПакета,Символы.НПП,"") + Формат(Выборка.ДатаСозданияПакета, "ДФ=dd");
		РезультатыЗаписиПакета = ЗаписатьПакет(0,"send",Выборка.ПолучательПакета,,ЛокальныйИдентификаторПакета,,,"work_schedule", , РезультатыПодготовкиПакетаДата.ИмяФайлаПакета);
		
		РезультатыОтправки = ОтправкаДанныхНаСервер(РезультатыЗаписиПакета);
		
		Если РезультатыОтправки.ОтправкаУспешна Тогда
			ИсходныйТипXDTO = ФабрикаXDTO.Тип("response_packet_mwms","response_packet");
			СтруктураОтвета = ПрочитатьПакет(РезультатыОтправки.ИмяПринятогоФайла, , ИсходныйТипXDTO);
			Если Не СтруктураОтвета.ОшибкаЧтения = "" Тогда
				//пакет разобрать не смогли, идем дальше
				Продолжить;
			КонецЕсли;
			НоваяФабрика = СтруктураОтвета.НоваяФабрика;
			
			СерверныйИДПоследнегоПакета = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "packet_id");
			Если ТипЗнч(СерверныйИДПоследнегоПакета) = Тип("Строка") Тогда
				СерверныйИДПоследнегоПакета = Число(СерверныйИДПоследнегоПакета);
			ИначеЕсли СерверныйИДПоследнегоПакета = Неопределено Тогда
				ОписаниеОшибкиПриОтправкиПакета = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "status_description");
				КодОшибкиПриОтправкиПакета = ПолучитьДанныеПоляИзПакета(НоваяФабрика, "status_code");
				Если ОписаниеОшибкиПриОтправкиПакета = "Recipient can not be found" Тогда
					Сообщить("В данных для " + Выборка.ПолучательПакета + " с идентификатором " + Выборка.ИдентификаторОбъекта + " указан исполнитель, который не зарегистрирован как пользователь мобильного клиента. Данное сообщение не будет отправлено на сервер!", СтатусСообщения.Внимание);
				Иначе
					Сообщить("Ошибка! Не удалось зафиксировать ИД пакета на сервере! В файле указан: '" + СерверныйИДПоследнегоПакета + "'");
				КонецЕсли;
				СерверныйИДПоследнегоПакета = 0;
			КонецЕсли;
			
			Если СерверныйИДПоследнегоПакета <> 0 Тогда //иначе по сути отправки не было
				
				МенеджерЗаписи = РегистрыСведений.атл_ПакетыНаОтправку.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ВнутреннийИдентификаторПакета = Выборка.ВнутреннийИдентификаторПакета;
				МенеджерЗаписи.Прочитать();
				
				МенеджерЗаписи.ПакетОтправлен = Истина;
				МенеджерЗаписи.ИдентификаторПакетаНаСервере = СерверныйИДПоследнегоПакета;
				МенеджерЗаписи.Записать(Истина);
			Иначе
				МенеджерЗаписи = РегистрыСведений.атл_ПакетыНаОтправку.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ВнутреннийИдентификаторПакета = Выборка.ВнутреннийИдентификаторПакета;
				МенеджерЗаписи.Прочитать();
				
				МенеджерЗаписи.ЕстьОшибкаПриОтправкеПакета = Истина;
				МенеджерЗаписи.КодОшибкиПриОтправкиПакета = КодОшибкиПриОтправкиПакета;
				МенеджерЗаписи.ОписаниеОшибкиПриОтправкиПакета = ОписаниеОшибкиПриОтправкиПакета;
				МенеджерЗаписи.Записать(Истина);
				
				Если ВыводитьОтладочныеСообщения Тогда
					Сообщить("Не выгружен пакет 'Сообщение' с идентификатором " + Выборка.ИдентификаторОбъекта);
				КонецЕсли;
			КонецЕсли;
			
			Если ВыводитьОтладочныеСообщения Тогда
				Сообщить("Удачно выгружен пакет с сообщением (ИД "+Выборка.ИдентификаторОбъекта+").");
			КонецЕсли;
		Иначе
			Сообщить("Ошибка выгрузки пакета с сообщением (ИД "+Выборка.ИдентификаторОбъекта+")!", СтатусСообщения.Важное);
		КонецЕсли;
		
		ВыполнитьПопыткуУдаленияФайла(РезультатыОтправки.ИмяПринятогоФайла);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьЗапросПоПакетамНаОтправку(СписокВидовДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВложенныйЗапрос.ВнутреннийИдентификаторПакета КАК ВнутреннийИдентификаторПакета,
	|	ВложенныйЗапрос.Объект,
	|	ВложенныйЗапрос.ВидПакета,
	|	ВложенныйЗапрос.ВидДанных,
	|	ВложенныйЗапрос.ДатаСозданияПакета КАК ДатаСозданияПакета,
	|	ВложенныйЗапрос.ПакетОтправлен,
	|	ВложенныйЗапрос.ПолучательПакета,
	|	ВложенныйЗапрос.ИдентификаторОбъекта,
	|	ВложенныйЗапрос.ИдентификаторИнформационнойБазы
	|ИЗ
	|	(ВЫБРАТЬ
	|		атл_ПакетыНаОтправку.ДатаСозданияПакета КАК ДатаСозданияПакета,
	|		атл_ПакетыНаОтправку.ВнутреннийИдентификаторПакета КАК ВнутреннийИдентификаторПакета,
	|		атл_ПакетыНаОтправку.ВидПакета КАК ВидПакета,
	|		атл_ПакетыНаОтправку.ВидДанных КАК ВидДанных,
	|		атл_ПакетыНаОтправку.Объект КАК Объект,
	|		атл_ПакетыНаОтправку.ПакетОтправлен КАК ПакетОтправлен,
	|		атл_ПакетыНаОтправку.ПолучательПакета КАК ПолучательПакета,
	|		атл_ПакетыНаОтправку.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
	|		атл_ПакетыНаОтправку.ИдентификаторИнформационнойБазы КАК ИдентификаторИнформационнойБазы
	|	ИЗ
	|		РегистрСведений.атл_ПакетыНаОтправку КАК атл_ПакетыНаОтправку
	|	ГДЕ
	|		атл_ПакетыНаОтправку.ЕстьОшибкаПриОтправкеПакета = ЛОЖЬ) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ПакетОтправлен = ЛОЖЬ
	|	И ВложенныйЗапрос.ВидДанных В(&СписокВидовДанных)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСозданияПакета
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("СписокВидовДанных", СписокВидовДанных);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьОбменДаннымиССервером() Экспорт
	
	Если Не РазрешенОбменДанными(Ложь) Тогда
		Если мФоновыйОбмен Тогда
			мФоновыйОбменВыполненУспешно = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОтправитьДанныеНаСервер();
	
	ПолучитьДанныеССервера();
	
	РазобратьДанныеССервера();
	
КонецПроцедуры



//выгрузка настроек пользователей


Функция СформироватьПакетСНастройкамиПользователей(Пользователь) Экспорт
	
	РезультатыПодготовкиПакетаДата = Новый Структура();
	
	ИмяФайлаПакета = ПолучитьИмяВременногоФайла("XML");
	РезультатыПодготовкиПакетаДата.Вставить("ИмяФайлаПакета", ИмяФайлаПакета);
	
	НовыйФайлДата = Новый ЗаписьXML;
	НовыйФайлДата.ОткрытьФайл(ИмяФайлаПакета);
	
	СписокНастроекТип = ФабрикаXDTO.Тип("settings_user_mwms", "settings_user");
	НастройкаТип = ФабрикаXDTO.Тип("settings_user_mwms","setting");
	
	СписокНастроекФабрика = ФабрикаXDTO.Создать(СписокНастроекТип);
	Если ЗначениеЗаполнено(Пользователь) Тогда
		СписокНастроекФабрика.uid1c = СокрЛП(Пользователь.УникальныйИдентификатор());
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗначениеНастроекПользователей.Значение КАК Значение,
	|	ЗначениеНастроекПользователей.ИзменяетсяНаМК,
	|	ЗначениеНастроекПользователей.Настройка КАК Ссылка
	|ИЗ
	|	РегистрСведений.атл_ЗначенияНастроекМобильныхСотрудниковНаМК КАК ЗначениеНастроекПользователей
	|ГДЕ
	|	ЗначениеНастроекПользователей.Пользователь = &Пользователь");
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Иначе
		Запрос.УстановитьПараметр("Пользователь", Справочники.Пользователи.ПустаяСсылка());
	КонецЕсли;
	
	Запрос.Выполнить();
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НастройкаФабрика = ФабрикаXDTO.Создать(НастройкаТип);
		
		НастройкаФабрика.value_type = "1";
		Если ТипЗнч(Выборка.Значение) = Тип("Булево") Тогда
			Если Выборка.Значение Тогда
				НастройкаФабрика.value = 1;
			Иначе
				НастройкаФабрика.value = 0;
			КонецЕсли;
		Иначе
			НастройкаФабрика.value = СокрЛП(Выборка.Значение);
		КонецЕсли;
		Если Выборка.ИзменяетсяНаМК Тогда
			НастройкаФабрика.client_change = "1";
		Иначе
			НастройкаФабрика.client_change = "0";
		КонецЕсли;
		НастройкаФабрика.description = НастройкаФабрика.name;
		
		СписокНастроекФабрика.setting.Добавить(НастройкаФабрика);
	КонецЦикла;
	
	ФабрикаXDTO.ЗаписатьXML(НовыйФайлДата,СписокНастроекФабрика);
	НовыйФайлДата.Закрыть();
	
	Возврат РезультатыПодготовкиПакетаДата;
	
КонецФункции

Процедура ВыгрузитьОбщиеНастройкиМобильныхСотрудников() Экспорт
	
	Если Не РазрешенОбменДанными() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатыПодготовкиПакетаДата = СформироватьПакетСНастройкамиПользователей(Справочники.Пользователи.ПустаяСсылка());
	
	РезультатыЗаписиПакета = ЗаписатьПакет(0,"command",,,,,"update_settings",,,РезультатыПодготовкиПакетаДата.ИмяФайлаПакета); //предудыщий пакет со списком статусов будет удален
	
	РезультатыОтправки = ОтправкаДанныхНаСервер(РезультатыЗаписиПакета);
	
	Если РезультатыОтправки.ОтправкаУспешна Тогда
		Если ВыводитьОтладочныеСообщения Тогда
			Сообщить("Запрос для обновления настроек на сервере отправлен успешно");
		КонецЕсли;
	Иначе
		Сообщить("ВНИМАНИЕ! Запрос для обновления настроек на сервере НЕ отправлен!");
	КонецЕсли;
	
	ВыполнитьПопыткуУдаленияФайла(РезультатыОтправки.ИмяПринятогоФайла);
	
КонецПроцедуры

Процедура ВыгрузитьИндивидуальныеНастройкиМобильныхСотрудниковНаМК(Пользователь) Экспорт
	
	Если Не РазрешенОбменДанными() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатыПодготовкиПакетаДата = СформироватьПакетСНастройкамиПользователей(Пользователь);
	
	РезультатыЗаписиПакета = ЗаписатьПакет(0,"command",,,,,"update_settings",,,РезультатыПодготовкиПакетаДата.ИмяФайлаПакета); //предудыщий пакет со списком статусов будет удален
	
	РезультатыОтправки = ОтправкаДанныхНаСервер(РезультатыЗаписиПакета);
	
	Если РезультатыОтправки.ОтправкаУспешна Тогда
		Если ВыводитьОтладочныеСообщения Тогда
			Сообщить("Запрос для обновления настроек на сервере отправлен успешно");
		КонецЕсли;
	Иначе
		Сообщить("ВНИМАНИЕ! Запрос для обновления настроек на сервере НЕ отправлен!");
	КонецЕсли;
	
	ВыполнитьПопыткуУдаленияФайла(РезультатыОтправки.ИмяПринятогоФайла);
	
КонецПроцедуры


//Выгрузка пользователей

Процедура ВыгрузитьПользователей(ВыгружатьЦеликом = Истина) Экспорт
	
	Если Не РазрешенОбменДанными() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатыПодготовкиПакетаДата = СформироватьПакетСправочникПользователи();
	
	РезультатыЗаписиПакета = ЗаписатьПакет(1,"send",,"Users",,,"update",,,РезультатыПодготовкиПакетаДата.ИмяФайлаПакета); //предудыщий пакет со списком статусов будет удален
	
	РезультатыОтправки = ОтправкаДанныхНаСервер(РезультатыЗаписиПакета);
	
	Если РезультатыОтправки.ОтправкаУспешна Тогда
		//Если ВыводитьОтладочныеСообщения Тогда
		Сообщить("Пользователи выгружены!");
		//КонецЕсли;
	Иначе
		Сообщить("ВНИМАНИЕ! Запрос для обновления данных о пользователях на сервере НЕ отправлен!");
	КонецЕсли;
	
	ВыполнитьПопыткуУдаленияФайла(РезультатыОтправки.ИмяПринятогоФайла);
	
	
КонецПроцедуры

Функция СформироватьПакетСправочникПользователи() Экспорт
	
	РезультатыПодготовкиПакетаДата = Новый Структура();
	
	ИмяФайлаПакета = ПолучитьИмяВременногоФайла("XML");
	РезультатыПодготовкиПакетаДата.Вставить("ИмяФайлаПакета", ИмяФайлаПакета);
	
	
	НовыйФайлДата = Новый ЗаписьXML;
	НовыйФайлДата.ОткрытьФайл(ИмяФайлаПакета);
	
	СписокПользователейТип = ФабрикаXDTO.Тип("users_mwms", "users");
	ПользовательТип = ФабрикаXDTO.Тип("users_mwms","user");
	
	СписокПользователейФабрика = ФабрикаXDTO.Создать(СписокПользователейТип);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ПометкаУдаления = ЛОЖЬ";
	
	//Только для 8.3
	//|	И Пользователи.ЭтоГруппа = ЛОЖЬ";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НайтиПользователяИБ(СокрЛП(Выборка.Ссылка.Код)) = Неопределено Тогда
			//не выгружаем пользователей, которые не пользователи БД
			Продолжить;
		КонецЕсли;
		
		ПользовательФабрика = ФабрикаXDTO.Создать(ПользовательТип);
		
		ПользовательФабрика.external_id = СокрЛП(Выборка.Ссылка.УникальныйИдентификатор());
		ПользовательФабрика.name = СокрЛП(Выборка.Наименование);
		
		СписокПользователейФабрика.user.Добавить(ПользовательФабрика);
		
	КонецЦикла;
	
	ФабрикаXDTO.ЗаписатьXML(НовыйФайлДата, СписокПользователейФабрика);
	НовыйФайлДата.Закрыть();
	
	Возврат РезультатыПодготовкиПакетаДата;
	
КонецФункции

//Выгрузка причин завершения задач мобильным сотрудникам
Процедура ВыгрузитьПричиныЗавершенияЗадач(ВыгружатьЦеликом = Истина) Экспорт
	
	Если Не РазрешенОбменДанными() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатыПодготовкиПакетаДата = СформироватьПакетСправочникПричиныЗавершенияЗадач();
	
	Если РезультатыПодготовкиПакетаДата.КоличествоЭлементовВыгружаемогоСправочника = 0 Тогда
		Сообщить("ВНИМАНИЕ! Справочник 'Причины завершения задач мобильным сотрудникам' пуст, либо все элементы помечены на удаление! Заполните справочник и повторите выгрузку. 
		|				До заполнения справочники завершить задачи на мобильном клиенте будет невозможно!", СтатусСообщения.Важное);
		
	Иначе
		РезультатыЗаписиПакета = ЗаписатьПакет(1,"send",,"completion_reasons",,,"update",,,РезультатыПодготовкиПакетаДата.ИмяФайлаПакета); //предудыщий пакет со списком статусов будет удален
		
		РезультатыОтправки = ОтправкаДанныхНаСервер(РезультатыЗаписиПакета);
		
		Если РезультатыОтправки.ОтправкаУспешна Тогда
			//Если ВыводитьОтладочныеСообщения Тогда
			Сообщить("Причины завершения работ выгружены!");
			//КонецЕсли;
		Иначе
			Сообщить("ВНИМАНИЕ! Запрос для обновления данных о причинах завершения работ на сервере НЕ отправлен!");
		КонецЕсли;
		ВыполнитьПопыткуУдаленияФайла(РезультатыОтправки.ИмяПринятогоФайла);
	КонецЕсли;
	
	
КонецПроцедуры

Функция СформироватьПакетСправочникПричиныЗавершенияЗадач()
	
	РезультатыПодготовкиПакетаДата = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПричиныЗавершенияЗадачМобильнымСотрудникам.Ссылка КАК Ссылка,
	|	ПричиныЗавершенияЗадачМобильнымСотрудникам.Наименование КАК Наименование,
	|	ПричиныЗавершенияЗадачМобильнымСотрудникам.ДоступнаПриОтклоненииМобильнымСотрудником,
	|	ПричиныЗавершенияЗадачМобильнымСотрудникам.ДоступнаПриВынужденномЗавершенииМобильнымСотрудником,
	|	ПричиныЗавершенияЗадачМобильнымСотрудникам.ДоступнаПриНормальномЗавершенииМобильнымСотрудником
	|ИЗ
	|	Справочник.атл_ПричиныЗавершенияЗадачМобильнымСотрудникам КАК ПричиныЗавершенияЗадачМобильнымСотрудникам
	|ГДЕ
	|	ПричиныЗавершенияЗадачМобильнымСотрудникам.ПометкаУдаления = ЛОЖЬ";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	КоличествоЭлементовВыгружаемогоСправочника = Выборка.Количество();
	РезультатыПодготовкиПакетаДата.Вставить("КоличествоЭлементовВыгружаемогоСправочника", КоличествоЭлементовВыгружаемогоСправочника);
	
	Если КоличествоЭлементовВыгружаемогоСправочника > 0 Тогда
		
		ИмяФайлаПакета = ПолучитьИмяВременногоФайла("XML");
		РезультатыПодготовкиПакетаДата.Вставить("ИмяФайлаПакета", ИмяФайлаПакета);
		КоличествоЭлементовВыгружаемогоСправочника = 0;
		
		НовыйФайлДата = Новый ЗаписьXML;
		НовыйФайлДата.ОткрытьФайл(ИмяФайлаПакета);
		
		СписокПричинЗавершенияРаботТип = ФабрикаXDTO.Тип("completion_reasons_mwms", "reasons");
		ПричинаЗавершенияТип = ФабрикаXDTO.Тип("completion_reasons_mwms","reason");
		
		СписокПричинЗавершенияРаботФабрика = ФабрикаXDTO.Создать(СписокПричинЗавершенияРаботТип);
		
		Пока Выборка.Следующий() Цикл
			
			ПричинаЗавершенияФабрика = ФабрикаXDTO.Создать(ПричинаЗавершенияТип);
			
			ПричинаЗавершенияФабрика.external_id = СокрЛП(Выборка.Ссылка.УникальныйИдентификатор());
			ПричинаЗавершенияФабрика.name = СокрЛП(Выборка.Наименование);
			
			ПричинаЗавершенияФабрика.accessable_when_rejection = ?(Выборка.ДоступнаПриОтклоненииМобильнымСотрудником,1,0);
			ПричинаЗавершенияФабрика.accessible_when_forced_completion = ?(Выборка.ДоступнаПриВынужденномЗавершенииМобильнымСотрудником,1,0);
			ПричинаЗавершенияФабрика.accessible_when_normal_completion = ?(Выборка.ДоступнаПриНормальномЗавершенииМобильнымСотрудником,1,0);
			
			СписокПричинЗавершенияРаботФабрика.reason.Добавить(ПричинаЗавершенияФабрика);
			
		КонецЦикла;
		
		ФабрикаXDTO.ЗаписатьXML(НовыйФайлДата, СписокПричинЗавершенияРаботФабрика);
		НовыйФайлДата.Закрыть();
		
	КонецЕсли;
	
	Возврат РезультатыПодготовкиПакетаДата;
	
КонецФункции

Функция СформироватьПакетНоваяЗадача(ДокументЗадача) Экспорт
	
	РезультатыПодготовкиПакетаДата = Новый Структура();
	
	ИмяФайлаПакета = ПолучитьИмяВременногоФайла("XML");
	РезультатыПодготовкиПакетаДата.Вставить("ИмяФайлаПакета", ИмяФайлаПакета);
	
	
	НовыйФайлДата = Новый ЗаписьXML;
	НовыйФайлДата.ОткрытьФайл(ИмяФайлаПакета);
	
	ЗадачаТип = ФабрикаXDTO.Тип("task_mwms", "task");
	
	АдресТип = ФабрикаXDTO.Тип("task_mwms", "address");
	ТелефонТип = ФабрикаXDTO.Тип("task_mwms", "рhone");
	ВнешнийИДТип = ФабрикаXDTO.Тип("task_mwms", "external_id");
	
	АвторТип = ФабрикаXDTO.Тип("task_mwms", "author");
	КлиентТип = ФабрикаXDTO.Тип("task_mwms", "client");
	КомментарийТип = ФабрикаXDTO.Тип("task_mwms", "comment");
	КоординатыТип = ФабрикаXDTO.Тип("task_mwms", "coordinates");
	ДатаКоординатыТип = ФабрикаXDTO.Тип("task_mwms", "date_coordinates");
	ПодразделениеТип = ФабрикаXDTO.Тип("task_mwms", "department");
	ЗадачаПричинаЗавершенияТип = ФабрикаXDTO.Тип("task_mwms", "task_finished_status");
	
	ДополнительныйРеквизитТип 		= ФабрикаXDTO.Тип("task_mwms", "extra_field");
	ЧислоСвойстваТип 		  		= ФабрикаXDTO.Тип("task_mwms", "number_properties");
	СтрокаСвойстваТип 		  		= ФабрикаXDTO.Тип("task_mwms", "string_properties");
	ДатаСвойстваТип 		  		= ФабрикаXDTO.Тип("task_mwms", "date_properties");
	БулевоСвойстваТип 		  		= ФабрикаXDTO.Тип("task_mwms", "bool_properties");
	ГиперссылкаСвойстваТип	  		= ФабрикаXDTO.Тип("task_mwms", "hyperlink_properties");	
	КоллекцияКартинокСвойстваТип 	= ФабрикаXDTO.Тип("task_mwms", "picture_collection_properties");
	КоординатаСвойстваТип           = ФабрикаXDTO.Тип("task_mwms", "geopoint_properties");
	СписокЗначенийСвойстваТип 	 	= ФабрикаXDTO.Тип("task_mwms", "list_properties");
	ЗначениеСпискаТип 		  		= ФабрикаXDTO.Тип("task_mwms", "list_properties_item");
	НачалоГруппыТип 		  		= ФабрикаXDTO.Тип("task_mwms", "group_begin_properties");
	КонецГруппыТип 		 	  		= ФабрикаXDTO.Тип("task_mwms", "group_end_properties");	
	
	
	ТелоЗадачиТип = ФабрикаXDTO.Тип("task_mwms", "task_body");
	
	ПакетЗадачаФабрика = ФабрикаXDTO.Создать(ЗадачаТип);
	ПакетЗадачаФабрика.external_id = ФабрикаXDTO.Создать(ВнешнийИДТип,СокрЛП(ДокументЗадача.Ссылка.УникальныйИдентификатор()));
	
	ПакетТелоЗадачиФабрика = ФабрикаXDTO.Создать(ТелоЗадачиТип);
	
	Если ЗначениеЗаполнено(ДокументЗадача.НомерМК) Тогда
		ПакетТелоЗадачиФабрика.number = СокрЛП(ДокументЗадача.НомерМК);
	Иначе
		ПакетТелоЗадачиФабрика.number = СокрЛП(ДокументЗадача.Номер);
	КонецЕсли;
	ПакетТелоЗадачиФабрика.order_number = СокрЛП(ДокументЗадача.ЗаявкаНомер);
	
	Если ДокументЗадача.ТребуетсяПроверкаДанныхОВыполненныхРаботах Тогда
		ПакетТелоЗадачиФабрика.verification_required = 1;
	Иначе
		ПакетТелоЗадачиФабрика.verification_required = 0;
	КонецЕсли;
	
	ПакетТелоЗадачиФабрика.contact_name = СокрЛП(ДокументЗадача.КонтактноеЛицо.Наименование);
	ПакетТелоЗадачиФабрика.contact_phone1 = ФабрикаXDTO.Создать(ТелефонТип,СокрЛП(ДокументЗадача.КонтактныйТелефон1));
	ПакетТелоЗадачиФабрика.contact_phone2 = ФабрикаXDTO.Создать(ТелефонТип,СокрЛП(ДокументЗадача.КонтактныйТелефон2));
	ПакетТелоЗадачиФабрика.contact_phone3 = ФабрикаXDTO.Создать(ТелефонТип,СокрЛП(ДокументЗадача.КонтактныйТелефонДляСМС));
	
	ПакетАдресФабрика = ФабрикаXDTO.Создать(КоординатыТип);
	ПакетАдресФабрика.address = ФабрикаXDTO.Создать(АдресТип,СокрЛП(ДокументЗадача.АдресВыполненияРабот));
	ПакетАдресФабрика.latitude =СокрЛП(ДокументЗадача.АдресВыполненияРаботШирота);
	ПакетАдресФабрика.longitude = СокрЛП(ДокументЗадача.АдресВыполненияРаботДолгота);
	ПакетТелоЗадачиФабрика.address = ПакетАдресФабрика;
	
	ПакетТелоЗадачиФабрика.description = СокрЛП(ДокументЗадача.ОписаниеЗадачи);
	
	Если ЗначениеЗаполнено(ДокументЗадача.ПланируемаяДатаВыполненияРабот) Тогда
		ПакетТелоЗадачиФабрика.planned_visit_datetime = ДокументЗадача.ПланируемаяДатаВыполненияРабот;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументЗадача.ПланируемаяДатаОкончанияРабот) Тогда
		ПакетТелоЗадачиФабрика.end_vizit_interval_datetime = ДокументЗадача.ПланируемаяДатаОкончанияРабот;
	КонецЕсли; 
	
	Контрагент = ДокументЗадача.Контрагент;
	ПодразделениеКонтрагента = ДокументЗадача.ПодразделениеКонтрагента;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ПакетКлиентФабрика = ФабрикаXDTO.Создать(КлиентТип);
		ПакетКлиентФабрика.external_id = ФабрикаXDTO.Создать(ВнешнийИДТип,СокрЛП(Контрагент.Ссылка.УникальныйИдентификатор()));
		ПакетКлиентФабрика.name = СокрЛП(ДокументЗадача.Контрагент.Наименование);
		
		Если ЗначениеЗаполнено(ДокументЗадача.ПодразделениеКонтрагента) Тогда
			ПакетПодразделениеФабрика = ФабрикаXDTO.Создать(ПодразделениеТип);
			ПакетПодразделениеФабрика.external_id = ФабрикаXDTO.Создать(ВнешнийИДТип,СокрЛП(ПодразделениеКонтрагента.Ссылка.УникальныйИдентификатор()));
			ПакетПодразделениеФабрика.name = СокрЛП(ДокументЗадача.ПодразделениеКонтрагента.Наименование);
			
			ПакетКлиентФабрика.department = ПакетПодразделениеФабрика;
		КонецЕсли;
		ПакетТелоЗадачиФабрика.client = ПакетКлиентФабрика;
	КонецЕсли;
	
	мГруппаДопРеквизитов = Неопределено;
	мОткрытаГруппа = Ложь;
	
	Для Каждого Стр из ДокументЗадача.ДополнительныеРеквизиты Цикл
		Если мОткрытаГруппа И НЕ Стр.Родитель = мГруппаДопРеквизитов Тогда
			// Закрываем группу.
			ПакетДополнительныйРеквизитФабрика = ФабрикаXDTO.Создать(ДополнительныйРеквизитТип);
			ПакетДополнительныйРеквизитФабрика.external_id = "";
			ПакетДополнительныйРеквизитФабрика.name	= "";
			
			ПакетДополнительныйРеквизитФабрика.input = 0;
			ПакетДополнительныйРеквизитФабрика.required = 0;
					
			ПакетДополнительныйРеквизитФабрика.type	= "group_end";
			
			ПакетСтрокаСвойстваФабрика = ФабрикаXDTO.Создать(КонецГруппыТип);			
			ПакетДополнительныйРеквизитФабрика.group_end_properties = ПакетСтрокаСвойстваФабрика;
						
			ПакетДополнительныйРеквизитФабрика.value = "";			
			
			ПакетТелоЗадачиФабрика.extra_fields.Добавить(ПакетДополнительныйРеквизитФабрика);
			
			мГруппаДопРеквизитов = Неопределено;
			мОткрытаГруппа = Ложь;
		КонецЕсли;
		
		ПакетДополнительныйРеквизитФабрика = ФабрикаXDTO.Создать(ДополнительныйРеквизитТип);
		ПакетДополнительныйРеквизитФабрика.external_id = ФабрикаXDTO.Создать(ВнешнийИДТип,СокрЛП(Стр.ДополнительныйРеквизит.УникальныйИдентификатор()));
		ПакетДополнительныйРеквизитФабрика.name	= СокрЛП(Стр.ДополнительныйРеквизит.Наименование);
		
		Если Стр.ЗаполняетсяНаМК Тогда
			ПакетДополнительныйРеквизитФабрика.input = 1;
		Иначе
			ПакетДополнительныйРеквизитФабрика.input = 0;
		КонецЕсли;
		
		Если Стр.Обязателен Тогда
			ПакетДополнительныйРеквизитФабрика.required = 1;
		Иначе
			ПакетДополнительныйРеквизитФабрика.required = 0;
		КонецЕсли;
		
		ТипЗначенияПВХ = ПолучитьТипЗначенияПВХ(Стр.ДополнительныйРеквизит);
			
		Если ТипЗначенияПВХ = "group" Тогда
			// Открываем группу.
			ПакетДополнительныйРеквизитФабрика.type	= "group_begin";
			
			ПакетСтрокаСвойстваФабрика = ФабрикаXDTO.Создать(НачалоГруппыТип);
			ПакетСтрокаСвойстваФабрика.is_expand = ?(Стр.ДополнительныйРеквизит.СворачиватьГруппуРеквизитовПоУмолчанию,0,1);			
			
			ПакетДополнительныйРеквизитФабрика.group_begin_properties = ПакетСтрокаСвойстваФабрика;			
			ПакетДополнительныйРеквизитФабрика.value = "";			
			
			ПакетТелоЗадачиФабрика.extra_fields.Добавить(ПакетДополнительныйРеквизитФабрика);
			
			мГруппаДопРеквизитов = Стр.ДополнительныйРеквизит;
			мОткрытаГруппа = Истина;

		ИначеЕсли ТипЗначенияПВХ = "number" Тогда
			ПакетДополнительныйРеквизитФабрика.type	= "number";
			
			ПакетЧислоСвойстваФабрика = ФабрикаXDTO.Создать(ЧислоСвойстваТип);
			ПакетЧислоСвойстваФабрика.digits 		  = Стр.ДополнительныйРеквизит.ТипЗначения.КвалификаторыЧисла.Разрядность;
			ПакетЧислоСвойстваФабрика.fraction_digits = Стр.ДополнительныйРеквизит.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
			Если Стр.ДополнительныйРеквизит.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак = ДопустимыйЗнак.Любой Тогда
				ПакетЧислоСвойстваФабрика.signed = 0;
			Иначе
				ПакетЧислоСвойстваФабрика.signed = 1;
			КонецЕсли;
			
			ПакетДополнительныйРеквизитФабрика.number_properties = ПакетЧислоСвойстваФабрика;
			
			Если Стр.ЗаполняетсяНаМК Тогда
				ПакетДополнительныйРеквизитФабрика.value = "";
			Иначе
				ПакетДополнительныйРеквизитФабрика.value = СокрЛП(Строка(Стр.ЗначениеРеквизита));
			КонецЕсли;
			
			ПакетТелоЗадачиФабрика.extra_fields.Добавить(ПакетДополнительныйРеквизитФабрика);
			
		ИначеЕсли ТипЗначенияПВХ = "string" Тогда
			ПакетДополнительныйРеквизитФабрика.type	= "string";
			
			ПакетСтрокаСвойстваФабрика = ФабрикаXDTO.Создать(СтрокаСвойстваТип);
			ПакетСтрокаСвойстваФабрика.length 		  = Стр.ДополнительныйРеквизит.ТипЗначения.КвалификаторыСтроки.Длина;
			ПакетДополнительныйРеквизитФабрика.string_properties = ПакетСтрокаСвойстваФабрика;
			
			Если Стр.ЗаполняетсяНаМК Тогда
				ПакетДополнительныйРеквизитФабрика.value = "";
			Иначе
				ПакетДополнительныйРеквизитФабрика.value = СокрЛП(Строка(Стр.ЗначениеРеквизита));
			КонецЕсли;
			
			ПакетТелоЗадачиФабрика.extra_fields.Добавить(ПакетДополнительныйРеквизитФабрика);
			
		ИначеЕсли ТипЗначенияПВХ = "date" Тогда
			ПакетДополнительныйРеквизитФабрика.type	= "date";
			
			ПакетДатаСвойстваФабрика = ФабрикаXDTO.Создать(ДатаСвойстваТип);
			Если Стр.ДополнительныйРеквизит.ТипЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.ДатаВремя Тогда
				ПакетДатаСвойстваФабрика.date = 1;
				ПакетДатаСвойстваФабрика.time = 1;
			ИначеЕсли Стр.ДополнительныйРеквизит.ТипЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
				ПакетДатаСвойстваФабрика.date = 1;
				ПакетДатаСвойстваФабрика.time = 0;
			ИначеЕсли Стр.ДополнительныйРеквизит.ТипЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
				ПакетДатаСвойстваФабрика.date = 0;
				ПакетДатаСвойстваФабрика.time = 1;
			КонецЕсли;
			
			ПакетДополнительныйРеквизитФабрика.date_properties = ПакетДатаСвойстваФабрика;
			
			Если Стр.ЗаполняетсяНаМК Тогда
				ПакетДополнительныйРеквизитФабрика.value = "";
			Иначе
				ПакетДополнительныйРеквизитФабрика.value = СокрЛП(Формат(Стр.ЗначениеРеквизита,"ДФ=yyyy-MM-ddTHH:mm:ss"));
			КонецЕсли;
			
			ПакетТелоЗадачиФабрика.extra_fields.Добавить(ПакетДополнительныйРеквизитФабрика);
			
		ИначеЕсли ТипЗначенияПВХ = "bool" Тогда
			ПакетДополнительныйРеквизитФабрика.type	= "bool";
			
			ПакетСтрокаСвойстваФабрика = ФабрикаXDTO.Создать(БулевоСвойстваТип);			
			ПакетДополнительныйРеквизитФабрика.bool_properties = ПакетСтрокаСвойстваФабрика;
			
			Если Стр.ЗаполняетсяНаМК Тогда
				ПакетДополнительныйРеквизитФабрика.value = "";
			Иначе
				Если Стр.ЗначениеРеквизита = Неопределено Тогда
					ПакетДополнительныйРеквизитФабрика.value = "0";	
				Иначе
					ПакетДополнительныйРеквизитФабрика.value = ?(Стр.ЗначениеРеквизита,"1","0");				
				КонецЕсли;
			КонецЕсли;
			
			ПакетТелоЗадачиФабрика.extra_fields.Добавить(ПакетДополнительныйРеквизитФабрика);
			
		ИначеЕсли ТипЗначенияПВХ = "hyperlink" Тогда
			ПакетДополнительныйРеквизитФабрика.type	= "hyperlink";
			
			ПакетСтрокаСвойстваФабрика = ФабрикаXDTO.Создать(ГиперссылкаСвойстваТип);
			ПакетСтрокаСвойстваФабрика.length 		  = Стр.ДополнительныйРеквизит.ТипЗначения.КвалификаторыСтроки.Длина;
			ПакетДополнительныйРеквизитФабрика.hyperlink_properties = ПакетСтрокаСвойстваФабрика;
			
			Если Стр.ЗаполняетсяНаМК Тогда
				ПакетДополнительныйРеквизитФабрика.value = "";
			Иначе
				ПакетДополнительныйРеквизитФабрика.value = СокрЛП(Строка(Стр.ЗначениеРеквизита));
			КонецЕсли;
			
			ПакетТелоЗадачиФабрика.extra_fields.Добавить(ПакетДополнительныйРеквизитФабрика);
			
		ИначеЕсли ТипЗначенияПВХ = "picture_collection" Тогда
			ПакетДополнительныйРеквизитФабрика.type	= "picture_collection";
			
			ПакетСтрокаСвойстваФабрика = ФабрикаXDTO.Создать(КоллекцияКартинокСвойстваТип);
			ПакетСтрокаСвойстваФабрика.length 		  = Стр.ДополнительныйРеквизит.ТипЗначения.КвалификаторыСтроки.Длина;
			ПакетДополнительныйРеквизитФабрика.picture_collection_properties = ПакетСтрокаСвойстваФабрика;
			
			Если Стр.ЗаполняетсяНаМК Тогда
				ПакетДополнительныйРеквизитФабрика.value = "";
			Иначе
				ПакетДополнительныйРеквизитФабрика.value = СокрЛП(Строка(Стр.ЗначениеРеквизита));
			КонецЕсли;
			
			ПакетТелоЗадачиФабрика.extra_fields.Добавить(ПакетДополнительныйРеквизитФабрика);
			
		ИначеЕсли ТипЗначенияПВХ = "geopoint" Тогда
			ПакетДополнительныйРеквизитФабрика.type	= "geopoint";
			
			ПакетСтрокаСвойстваФабрика = ФабрикаXDTO.Создать(КоординатаСвойстваТип);			
			ПакетДополнительныйРеквизитФабрика.geopoint_properties = ПакетСтрокаСвойстваФабрика;
			
			Если Стр.ЗаполняетсяНаМК Тогда
				ПакетДополнительныйРеквизитФабрика.value = "";
			Иначе
				ПакетДополнительныйРеквизитФабрика.value = СокрЛП(Строка(Стр.ЗначениеРеквизита));
			КонецЕсли;
			
			ПакетТелоЗадачиФабрика.extra_fields.Добавить(ПакетДополнительныйРеквизитФабрика);
			
		Иначе
			//предполагаем, что это список
			ТипСписка = ПолучитьТипСпискаПВХ(Стр.ДополнительныйРеквизит);
			
			Если Найти(ТипСписка, "СправочникСсылка.") > 0 Тогда
				Если Стр.ЗаполняетсяНаМК Тогда
					ПакетДополнительныйРеквизитФабрика.type	= "list";
				Иначе
					ПакетДополнительныйРеквизитФабрика.type	= "string";
				КонецЕсли;
				
				ПакетСписокСвойстваФабрика = ФабрикаXDTO.Создать(СписокЗначенийСвойстваТип);
				
				ПакетСписокСвойстваФабрика.type = ТипСписка;
				
				Если Строка(Стр.ДополнительныйРеквизит.ТипЗначения) = Строка(Тип("СправочникСсылка.атл_ЗначенияДополнительныхРеквизитов")) Тогда
					
					Если Стр.ЗаполняетсяНаМК Тогда
						Запрос = Новый Запрос;
						Запрос.Текст = "ВЫБРАТЬ
						               |	атл_ЗначенияДополнительныхРеквизитов.Ссылка
						               |ИЗ
						               |	Справочник.атл_ЗначенияДополнительныхРеквизитов КАК атл_ЗначенияДополнительныхРеквизитов
						               |ГДЕ
						               |	атл_ЗначенияДополнительныхРеквизитов.ПометкаУдаления = ЛОЖЬ
						               |	И атл_ЗначенияДополнительныхРеквизитов.Владелец = &Владелец
						               |
						               |УПОРЯДОЧИТЬ ПО
						               |	атл_ЗначенияДополнительныхРеквизитов.Наименование
						               |АВТОУПОРЯДОЧИВАНИЕ";
						
						Запрос.УстановитьПараметр("Владелец", Стр.ДополнительныйРеквизит);
						
						Результат = Запрос.Выполнить();
						ВыборкаДопустимыхЗначений = Результат.Выбрать();
						
						Если ВыборкаДопустимыхЗначений.Количество() = 0 Тогда
							//список допустимых значений пуст. Выгружать это поле не будем
							Продолжить;
						Иначе
							Пока ВыборкаДопустимыхЗначений.Следующий() Цикл
								ПакетЗначениеСпискаФабрика = ФабрикаXDTO.Создать(ЗначениеСпискаТип);
								ПакетЗначениеСпискаФабрика.external_id = ФабрикаXDTO.Создать(ВнешнийИДТип, СокрЛП(ВыборкаДопустимыхЗначений.Ссылка.УникальныйИдентификатор()));
								ПакетЗначениеСпискаФабрика.name 	   = СокрЛП(ВыборкаДопустимыхЗначений.Ссылка);
								
								ПакетСписокСвойстваФабрика.items.Добавить(ПакетЗначениеСпискаФабрика);
							КонецЦикла;
						КонецЕсли;
						
						ПакетДополнительныйРеквизитФабрика.list_properties = ПакетСписокСвойстваФабрика;
						
						ПакетДополнительныйРеквизитФабрика.value = "";
					Иначе
						ПакетДополнительныйРеквизитФабрика.value = СокрЛП(Строка(Стр.ЗначениеРеквизита));
					КонецЕсли;
					
					ПакетТелоЗадачиФабрика.extra_fields.Добавить(ПакетДополнительныйРеквизитФабрика);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Закроем группу, если она не была закрыта.
	Если мОткрытаГруппа Тогда
		// Закрываем группу.
		ПакетДополнительныйРеквизитФабрика = ФабрикаXDTO.Создать(ДополнительныйРеквизитТип);
		ПакетДополнительныйРеквизитФабрика.external_id = ФабрикаXDTO.Создать(ВнешнийИДТип,СокрЛП(Стр.ДополнительныйРеквизит.УникальныйИдентификатор()));
		ПакетДополнительныйРеквизитФабрика.name	= "";
		
		ПакетДополнительныйРеквизитФабрика.input = 0;
		ПакетДополнительныйРеквизитФабрика.required = 0;
				
		ПакетДополнительныйРеквизитФабрика.type	= "group_end";
		
		ПакетСтрокаСвойстваФабрика = ФабрикаXDTO.Создать(КонецГруппыТип);			
		ПакетДополнительныйРеквизитФабрика.group_end_properties = ПакетСтрокаСвойстваФабрика;
				
		ПакетДополнительныйРеквизитФабрика.value = "";			
		
		ПакетТелоЗадачиФабрика.extra_fields.Добавить(ПакетДополнительныйРеквизитФабрика);
	
	КонецЕсли;
	
	
	//Добавили тело задачи...
	ПакетЗадачаФабрика.task_body = ПакетТелоЗадачиФабрика;
	
	НаборЗаписейРегистра = РегистрыСведений.атл_КомментарииКОбъектамУМС.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.Объект.Значение      = ДокументЗадача.Ссылка;
	НаборЗаписейРегистра.Отбор.Объект.Использование = Истина;
	НаборЗаписейРегистра.Прочитать();
	
	Для Каждого Стр Из НаборЗаписейРегистра Цикл
		
		ПакетКомментарийФабрика = ФабрикаXDTO.Создать(КомментарийТип);
		ПакетКомментарийФабрика.id = Стр.ИдентификаторКомментария;		
		ПакетКомментарийФабрика.db_id = Стр.ИдентификаторИнформационнойБазы;
		
		ПакетКомментарийФабрика.text = Стр.Текст;		
		
		ПакетКомментарийДатаСозданияСКоординатамиФабрика = ФабрикаXDTO.Создать(ДатаКоординатыТип);
		ПакетКомментарийДатаСозданияСКоординатамиФабрика.datetime = Стр.ДатаСоздания;		
		ПакетКомментарийФабрика.creation = ПакетКомментарийДатаСозданияСКоординатамиФабрика;
		
		ПакетАвторФабрика = ФабрикаXDTO.Создать(АвторТип);
		ПакетАвторФабрика.external_id = ФабрикаXDTO.Создать(ВнешнийИДТип,СокрЛП(Стр.Автор.Ссылка.УникальныйИдентификатор()));		
		ПакетАвторФабрика.name = СокрЛП(Стр.Автор);
		
		ПакетКомментарийФабрика.author = ПакетАвторФабрика;
		
		ПакетЗадачаФабрика.comment.Добавить(ПакетКомментарийФабрика);
		
	КонецЦикла;
	
	//поскольку отправляем новую задачу, если успели сформироваться записи "Пакеты на отправку", то их надо удалить.
	Если НаборЗаписейРегистра.Количество() > 0 Тогда
		
		// получаем запись из регистра
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВложенныйЗапрос.ВнутреннийИдентификаторПакета КАК ВнутреннийИдентификаторПакета
		|ИЗ
		|	(ВЫБРАТЬ
		|		атл_ПакетыНаОтправку.ДатаСозданияПакета КАК ДатаСозданияПакета,
		|		атл_ПакетыНаОтправку.ВнутреннийИдентификаторПакета КАК ВнутреннийИдентификаторПакета,
		|		атл_ПакетыНаОтправку.ВидПакета КАК ВидПакета,
		|		атл_ПакетыНаОтправку.ВидДанных КАК ВидДанных,
		|		атл_ПакетыНаОтправку.Объект КАК Объект,
		|		атл_ПакетыНаОтправку.ПакетОтправлен КАК ПакетОтправлен,
		|		атл_ПакетыНаОтправку.ПолучательПакета КАК ПолучательПакета,
		|		атл_ПакетыНаОтправку.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
		|		атл_ПакетыНаОтправку.ИдентификаторИнформационнойБазы КАК ИдентификаторИнформационнойБазы
		|	ИЗ
		|		РегистрСведений.атл_ПакетыНаОтправку КАК атл_ПакетыНаОтправку) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.ПакетОтправлен = ЛОЖЬ
		|	И ВложенныйЗапрос.Объект = &Объект
		|	И ВложенныйЗапрос.ВидДанных = &ВидДанных
		|	И ВложенныйЗапрос.ВидПакета = &ВидПакета
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСозданияПакета
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("Объект", ДокументЗадача); 
		Запрос.УстановитьПараметр("ВидДанных", "Комментарий"); 
		Запрос.УстановитьПараметр("ВидПакета", "Комментарий по задаче"); 
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			НаборЗаписейРегистраПакетыНаОтправку = РегистрыСведений.атл_ПакетыНаОтправку.СоздатьНаборЗаписей();
			НаборЗаписейРегистраПакетыНаОтправку.Отбор.ВнутреннийИдентификаторПакета.Значение = Выборка.ВнутреннийИдентификаторПакета;
			НаборЗаписейРегистраПакетыНаОтправку.Отбор.ВнутреннийИдентификаторПакета.Использование = Истина;
			НаборЗаписейРегистраПакетыНаОтправку.Прочитать();
			НаборЗаписейРегистраПакетыНаОтправку.Очистить();
			НаборЗаписейРегистраПакетыНаОтправку.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	
	ФабрикаXDTO.ЗаписатьXML(НовыйФайлДата,ПакетЗадачаФабрика);
	НовыйФайлДата.Закрыть();
	
	Возврат РезультатыПодготовкиПакетаДата;
	
КонецФункции

Функция СформироватьПакетЗавершениеЗадачи(ДокументЗадача) Экспорт
	
	РезультатыПодготовкиПакетаДата = Новый Структура();
	
	ИмяФайлаПакета = ПолучитьИмяВременногоФайла("XML");
	РезультатыПодготовкиПакетаДата.Вставить("ИмяФайлаПакета", ИмяФайлаПакета);
	
	
	НовыйФайлДата = Новый ЗаписьXML;
	НовыйФайлДата.ОткрытьФайл(ИмяФайлаПакета);
	
	ЗадачаТип = ФабрикаXDTO.Тип("task_mwms", "task");
	
	ВнешнийИДТип = ФабрикаXDTO.Тип("task_mwms", "external_id");
	
	АвторТип = ФабрикаXDTO.Тип("task_mwms", "author");
	КомментарийТип = ФабрикаXDTO.Тип("task_mwms", "comment");
	КоординатыТип = ФабрикаXDTO.Тип("task_mwms", "coordinates");
	ДатаКоординатыТип = ФабрикаXDTO.Тип("task_mwms", "date_coordinates");
	СтатусЗавершенияЗадачаТип = ФабрикаXDTO.Тип("task_mwms", "task_finished_status");
	СтатусСогласованияТип = ФабрикаXDTO.Тип("task_mwms", "task_verification");
	
	ТелоЗадачиТип = ФабрикаXDTO.Тип("task_mwms", "task_body");
	
	ПакетЗадачаФабрика = ФабрикаXDTO.Создать(ЗадачаТип);
	ПакетЗадачаФабрика.external_id = ФабрикаXDTO.Создать(ВнешнийИДТип,СокрЛП(ДокументЗадача.Ссылка.УникальныйИдентификатор()));
	
	ПакетТелоЗадачиФабрика = ФабрикаXDTO.Создать(ТелоЗадачиТип);
	
	СтатусЗавершенияЗадачиФабрика = ФабрикаXDTO.Создать(СтатусЗавершенияЗадачаТип);
	
	Если ЗначениеЗаполнено(ДокументЗадача.ПричинаЗавершенияЗадачи) Тогда
		СтатусЗавершенияЗадачиФабрика.external_id = ФабрикаXDTO.Создать(ВнешнийИДТип,СокрЛП(ДокументЗадача.ПричинаЗавершенияЗадачи.УникальныйИдентификатор()));
		СтатусЗавершенияЗадачиФабрика.name = СокрЛП(ДокументЗадача.ПричинаЗавершенияЗадачи.Наименование);
	КонецЕсли;
	
	ЗавершениеФабрика = ФабрикаXDTO.Создать(ДатаКоординатыТип);
	ЗавершениеФабрика.datetime = ДокументЗадача.ЗавершилДата;		
	
	СтатусЗавершенияЗадачиФабрика.finish = ЗавершениеФабрика;
	СтатусЗавершенияЗадачиФабрика.description = СокрЛП(ДокументЗадача.ОписаниеВыполненныхРабот);
	Если ЗначениеЗаполнено(ДокументЗадача.ЗавершилАвтор) Тогда
		
		АвторЗавершенияФабрика = ФабрикаXDTO.Создать(АвторТип);
		АвторЗавершенияФабрика.external_id = ФабрикаXDTO.Создать(ВнешнийИДТип,СокрЛП(ДокументЗадача.ЗавершилАвтор.Ссылка.УникальныйИдентификатор()));
		АвторЗавершенияФабрика.name = СокрЛП(ДокументЗадача.ЗавершилАвтор.Наименование);
		
		СтатусЗавершенияЗадачиФабрика.author = АвторЗавершенияФабрика;
	КонецЕсли;
	
	ПакетТелоЗадачиФабрика.task_finished_status = СтатусЗавершенияЗадачиФабрика;
	
	Если ДокументЗадача.ТребуетсяПроверкаДанныхОВыполненныхРаботах Тогда
		//добавляем запись о том, что проверка пройдена
		СтатусСогласованияФабрика = ФабрикаXDTO.Создать(СтатусСогласованияТип);
		СтатусСогласованияФабрика.status = 1;
		СтатусСогласованияФабрика.datetime = ДокументЗадача.ЗавершилДата; //в этом случае дата завершения совпадает с датой согласования
		Если ЗначениеЗаполнено(ДокументЗадача.ЗавершилАвтор) Тогда
			Если ЗначениеЗаполнено(ДокументЗадача.ЗавершилАвтор) Тогда
				
				АвторЗавершенияФабрика = ФабрикаXDTO.Создать(АвторТип);
				АвторЗавершенияФабрика.external_id = ФабрикаXDTO.Создать(ВнешнийИДТип,СокрЛП(ДокументЗадача.ЗавершилАвтор.Ссылка.УникальныйИдентификатор()));
				АвторЗавершенияФабрика.name = СокрЛП(ДокументЗадача.ЗавершилАвтор.Наименование);
				
				СтатусСогласованияФабрика.author = АвторЗавершенияФабрика;
			КонецЕсли;
		КонецЕсли;
		
		ПакетТелоЗадачиФабрика.task_verification = СтатусСогласованияФабрика;
	КонецЕсли;
	
	
	//Добавили тело задачи...
	ПакетЗадачаФабрика.task_body = ПакетТелоЗадачиФабрика;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	атл_КомментарииКОбъектамУМС.ИдентификаторКомментария,
	|	атл_КомментарииКОбъектамУМС.ИдентификаторИнформационнойБазы,
	|	атл_КомментарииКОбъектамУМС.Текст,
	|	атл_КомментарииКОбъектамУМС.ДатаСоздания,
	|	атл_КомментарииКОбъектамУМС.Автор
	|ИЗ
	|	РегистрСведений.атл_КомментарииКОбъектамУМС КАК атл_КомментарииКОбъектамУМС
	|ГДЕ
	|	атл_КомментарииКОбъектамУМС.Объект = &Объект
	|	И атл_КомментарииКОбъектамУМС.ТипКомментария = &ТипКомментария
	|
	|УПОРЯДОЧИТЬ ПО
	|	атл_КомментарииКОбъектамУМС.ДатаРегистрации УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Объект", ДокументЗадача.Ссылка);
	Запрос.УстановитьПараметр("ТипКомментария", Перечисления.атл_ТипыКомментариевКОбъектамУМС.КомментарийКЗавершениюЗадачиМобильномуСотруднику);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		
		Выборка.Следующий();
		
		ПакетКомментарийФабрика = ФабрикаXDTO.Создать(КомментарийТип);
		ПакетКомментарийФабрика.id = Выборка.ИдентификаторКомментария;		
		ПакетКомментарийФабрика.db_id = Выборка.ИдентификаторИнформационнойБазы;
		
		ПакетКомментарийФабрика.text = Выборка.Текст;		
		
		ПакетКомментарийДатаСозданияСКоординатамиФабрика = ФабрикаXDTO.Создать(ДатаКоординатыТип);
		ПакетКомментарийДатаСозданияСКоординатамиФабрика.datetime = Выборка.ДатаСоздания;		
		ПакетКомментарийФабрика.creation = ПакетКомментарийДатаСозданияСКоординатамиФабрика;
		
		ПакетАвторФабрика = ФабрикаXDTO.Создать(АвторТип);
		ПакетАвторФабрика.external_id = ФабрикаXDTO.Создать(ВнешнийИДТип,СокрЛП(Выборка.Автор.Ссылка.УникальныйИдентификатор()));		
		ПакетАвторФабрика.name = СокрЛП(Выборка.Автор);
		
		ПакетКомментарийФабрика.author = ПакетАвторФабрика;
		
		ПакетЗадачаФабрика.comment.Добавить(ПакетКомментарийФабрика);
		
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(НовыйФайлДата,ПакетЗадачаФабрика);
	НовыйФайлДата.Закрыть();
	
	Возврат РезультатыПодготовкиПакетаДата;
	
КонецФункции

Функция СформироватьПакетПринятиеЗадачи(ДокументЗадача) Экспорт
	
	//по задаче ищем неотправленную запись о принятии
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	атл_ЗадачаМобильномуСотрудникуСогласованиеРезультатовВыполненияЗадачи.НомерСтроки,
	|	атл_ЗадачаМобильномуСотрудникуСогласованиеРезультатовВыполненияЗадачи.ДатаСобытия,
	|	атл_ЗадачаМобильномуСотрудникуСогласованиеРезультатовВыполненияЗадачи.Автор
	|ИЗ
	|	Документ.атл_ЗадачаМобильномуСотруднику.СогласованиеРезультатовВыполненияЗадачи КАК атл_ЗадачаМобильномуСотрудникуСогласованиеРезультатовВыполненияЗадачи
	|ГДЕ
	|	атл_ЗадачаМобильномуСотрудникуСогласованиеРезультатовВыполненияЗадачи.Ссылка = &Ссылка
	|	И атл_ЗадачаМобильномуСотрудникуСогласованиеРезультатовВыполненияЗадачи.ВидСобытияСогласования = &ВидСобытияСогласования
	|
	|УПОРЯДОЧИТЬ ПО
	|	атл_ЗадачаМобильномуСотрудникуСогласованиеРезультатовВыполненияЗадачи.ДатаСобытия УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументЗадача);
	Запрос.УстановитьПараметр("ВидСобытияСогласования", Перечисления.атл_ВидыСобытийСогласованияВыполненияРабот.Принятие);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
	Иначе
		//информацию о согласовании не нашли...
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатыПодготовкиПакетаДата = Новый Структура();
	
	РезультатыПодготовкиПакетаДата.Вставить("НомерСтрокиСогласования", Выборка.НомерСтроки);
	
	ИмяФайлаПакета = ПолучитьИмяВременногоФайла("XML");
	РезультатыПодготовкиПакетаДата.Вставить("ИмяФайлаПакета", ИмяФайлаПакета);
	
	
	НовыйФайлДата = Новый ЗаписьXML;
	НовыйФайлДата.ОткрытьФайл(ИмяФайлаПакета);
	
	ЗадачаТип = ФабрикаXDTO.Тип("task_mwms", "task");
	
	ВнешнийИДТип = ФабрикаXDTO.Тип("task_mwms", "external_id");
	
	АвторТип = ФабрикаXDTO.Тип("task_mwms", "author");
	КомментарийТип = ФабрикаXDTO.Тип("task_mwms", "comment");
	КоординатыТип = ФабрикаXDTO.Тип("task_mwms", "coordinates");
	ДатаКоординатыТип = ФабрикаXDTO.Тип("task_mwms", "date_coordinates");
	СтатусСогласованияТип = ФабрикаXDTO.Тип("task_mwms", "task_verification");
	
	ТелоЗадачиТип = ФабрикаXDTO.Тип("task_mwms", "task_body");
	
	ПакетЗадачаФабрика = ФабрикаXDTO.Создать(ЗадачаТип);
	ПакетЗадачаФабрика.external_id = ФабрикаXDTO.Создать(ВнешнийИДТип,СокрЛП(ДокументЗадача.Ссылка.УникальныйИдентификатор()));
	
	ПакетТелоЗадачиФабрика = ФабрикаXDTO.Создать(ТелоЗадачиТип);
	
	//добавляем запись о том, что проверка пройдена
	СтатусСогласованияФабрика = ФабрикаXDTO.Создать(СтатусСогласованияТип);
	СтатусСогласованияФабрика.status = 1;
	СтатусСогласованияФабрика.datetime = Выборка.ДатаСобытия; //в этом случае дата завершения совпадает с датой согласования
	Если ЗначениеЗаполнено(Выборка.Автор) Тогда
		АвторЗавершенияФабрика = ФабрикаXDTO.Создать(АвторТип);
		АвторЗавершенияФабрика.external_id = ФабрикаXDTO.Создать(ВнешнийИДТип,СокрЛП(Выборка.Автор.Ссылка.УникальныйИдентификатор()));
		АвторЗавершенияФабрика.name = СокрЛП(Выборка.Автор.Наименование);
		
		СтатусСогласованияФабрика.author = АвторЗавершенияФабрика;
	КонецЕсли;
	
	ПакетТелоЗадачиФабрика.task_verification = СтатусСогласованияФабрика;
	
	//Добавили тело задачи...
	ПакетЗадачаФабрика.task_body = ПакетТелоЗадачиФабрика;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	атл_КомментарииКОбъектамУМС.ИдентификаторКомментария,
	|	атл_КомментарииКОбъектамУМС.ИдентификаторИнформационнойБазы,
	|	атл_КомментарииКОбъектамУМС.Текст,
	|	атл_КомментарииКОбъектамУМС.ДатаСоздания,
	|	атл_КомментарииКОбъектамУМС.Автор
	|ИЗ
	|	РегистрСведений.атл_КомментарииКОбъектамУМС КАК атл_КомментарииКОбъектамУМС
	|ГДЕ
	|	атл_КомментарииКОбъектамУМС.Объект = &Объект
	|	И атл_КомментарииКОбъектамУМС.ТипКомментария = &ТипКомментария
	|
	|УПОРЯДОЧИТЬ ПО
	|	атл_КомментарииКОбъектамУМС.ДатаРегистрации УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Объект", ДокументЗадача.Ссылка);
	Запрос.УстановитьПараметр("ТипКомментария", Перечисления.атл_ТипыКомментариевКОбъектамУМС.КомментарийКПринятиюРезультатовВыполненияЗадачиМобильномуСотруднику);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		
		Выборка.Следующий();
		
		ПакетКомментарийФабрика = ФабрикаXDTO.Создать(КомментарийТип);
		ПакетКомментарийФабрика.id = Выборка.ИдентификаторКомментария;		
		ПакетКомментарийФабрика.db_id = Выборка.ИдентификаторИнформационнойБазы;
		
		ПакетКомментарийФабрика.text = Выборка.Текст;		
		
		ПакетКомментарийДатаСозданияСКоординатамиФабрика = ФабрикаXDTO.Создать(ДатаКоординатыТип);
		ПакетКомментарийДатаСозданияСКоординатамиФабрика.datetime = Выборка.ДатаСоздания;		
		ПакетКомментарийФабрика.creation = ПакетКомментарийДатаСозданияСКоординатамиФабрика;
		
		ПакетАвторФабрика = ФабрикаXDTO.Создать(АвторТип);
		ПакетАвторФабрика.external_id = ФабрикаXDTO.Создать(ВнешнийИДТип,СокрЛП(Выборка.Автор.Ссылка.УникальныйИдентификатор()));		
		ПакетАвторФабрика.name = СокрЛП(Выборка.Автор);
		
		ПакетКомментарийФабрика.author = ПакетАвторФабрика;
		
		ПакетЗадачаФабрика.comment.Добавить(ПакетКомментарийФабрика);
		
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(НовыйФайлДата,ПакетЗадачаФабрика);
	НовыйФайлДата.Закрыть();
	
	Возврат РезультатыПодготовкиПакетаДата;
	
КонецФункции

Функция СформироватьПакетОтклонениеЗадачи(ДокументЗадача) Экспорт
	
	//по задаче ищем неотправленную запись об отклонении
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	атл_ЗадачаМобильномуСотрудникуСогласованиеРезультатовВыполненияЗадачи.НомерСтроки,
	               |	атл_ЗадачаМобильномуСотрудникуСогласованиеРезультатовВыполненияЗадачи.ДатаСобытия,
	               |	атл_ЗадачаМобильномуСотрудникуСогласованиеРезультатовВыполненияЗадачи.Автор,
	               |	атл_ЗадачаМобильномуСотрудникуСогласованиеРезультатовВыполненияЗадачи.ПричинаОтклоненияРезультатовВыполнения,
	               |	атл_ЗадачаМобильномуСотрудникуСогласованиеРезультатовВыполненияЗадачи.ОписаниеСобытия
	               |ИЗ
	               |	Документ.атл_ЗадачаМобильномуСотруднику.СогласованиеРезультатовВыполненияЗадачи КАК атл_ЗадачаМобильномуСотрудникуСогласованиеРезультатовВыполненияЗадачи
	               |ГДЕ
	               |	атл_ЗадачаМобильномуСотрудникуСогласованиеРезультатовВыполненияЗадачи.Ссылка = &Ссылка
	               |	И атл_ЗадачаМобильномуСотрудникуСогласованиеРезультатовВыполненияЗадачи.ВидСобытияСогласования = &ВидСобытияСогласования
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	атл_ЗадачаМобильномуСотрудникуСогласованиеРезультатовВыполненияЗадачи.ДатаСобытия УБЫВ
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументЗадача);
	Запрос.УстановитьПараметр("ВидСобытияСогласования", Перечисления.атл_ВидыСобытийСогласованияВыполненияРабот.Отклонение);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
	Иначе
		//информацию о согласовании не нашли...
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатыПодготовкиПакетаДата = Новый Структура();
	
	РезультатыПодготовкиПакетаДата.Вставить("НомерСтрокиСогласования", Выборка.НомерСтроки);
	
	ИмяФайлаПакета = ПолучитьИмяВременногоФайла("XML");
	РезультатыПодготовкиПакетаДата.Вставить("ИмяФайлаПакета", ИмяФайлаПакета);
	
	
	НовыйФайлДата = Новый ЗаписьXML;
	НовыйФайлДата.ОткрытьФайл(ИмяФайлаПакета);
	
	ЗадачаТип = ФабрикаXDTO.Тип("task_mwms", "task");
	
	ВнешнийИДТип = ФабрикаXDTO.Тип("task_mwms", "external_id");
	
	АвторТип = ФабрикаXDTO.Тип("task_mwms", "author");
	КомментарийТип = ФабрикаXDTO.Тип("task_mwms", "comment");
	КоординатыТип = ФабрикаXDTO.Тип("task_mwms", "coordinates");
	ДатаКоординатыТип = ФабрикаXDTO.Тип("task_mwms", "date_coordinates");
	СтатусСогласованияТип = ФабрикаXDTO.Тип("task_mwms", "task_verification");
	
	ТелоЗадачиТип = ФабрикаXDTO.Тип("task_mwms", "task_body");
	
	ПакетЗадачаФабрика = ФабрикаXDTO.Создать(ЗадачаТип);
	ПакетЗадачаФабрика.external_id = ФабрикаXDTO.Создать(ВнешнийИДТип,СокрЛП(ДокументЗадача.Ссылка.УникальныйИдентификатор()));
	
	ПакетТелоЗадачиФабрика = ФабрикаXDTO.Создать(ТелоЗадачиТип);
	
	//добавляем запись о том, что проверка пройдена
	СтатусСогласованияФабрика = ФабрикаXDTO.Создать(СтатусСогласованияТип);
	СтатусСогласованияФабрика.status = 0;
	СтатусСогласованияФабрика.datetime = Выборка.ДатаСобытия; //в этом случае дата завершения совпадает с датой согласования
	СтатусСогласованияФабрика.description = "" + Выборка.ПричинаОтклоненияРезультатовВыполнения + ?(ЗначениеЗаполнено(Выборка.ОписаниеСобытия),": " + СокрЛП(Выборка.ОписаниеСобытия),"");
	Если ЗначениеЗаполнено(Выборка.Автор) Тогда
		АвторЗавершенияФабрика = ФабрикаXDTO.Создать(АвторТип);
		АвторЗавершенияФабрика.external_id = ФабрикаXDTO.Создать(ВнешнийИДТип,СокрЛП(Выборка.Автор.Ссылка.УникальныйИдентификатор()));
		АвторЗавершенияФабрика.name = СокрЛП(Выборка.Автор.Наименование);
		
		СтатусСогласованияФабрика.author = АвторЗавершенияФабрика;
	КонецЕсли;
	
	ПакетТелоЗадачиФабрика.task_verification = СтатусСогласованияФабрика;
	
	//Добавили тело задачи...
	ПакетЗадачаФабрика.task_body = ПакетТелоЗадачиФабрика;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	атл_КомментарииКОбъектамУМС.ИдентификаторКомментария,
	|	атл_КомментарииКОбъектамУМС.ИдентификаторИнформационнойБазы,
	|	атл_КомментарииКОбъектамУМС.Текст,
	|	атл_КомментарииКОбъектамУМС.ДатаСоздания,
	|	атл_КомментарииКОбъектамУМС.Автор
	|ИЗ
	|	РегистрСведений.атл_КомментарииКОбъектамУМС КАК атл_КомментарииКОбъектамУМС
	|ГДЕ
	|	атл_КомментарииКОбъектамУМС.Объект = &Объект
	|	И атл_КомментарииКОбъектамУМС.ТипКомментария = &ТипКомментария
	|
	|УПОРЯДОЧИТЬ ПО
	|	атл_КомментарииКОбъектамУМС.ДатаРегистрации УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Объект", ДокументЗадача.Ссылка);
	Запрос.УстановитьПараметр("ТипКомментария", Перечисления.атл_ТипыКомментариевКОбъектамУМС.КомментарийКОтклонениюРезультатовВыполненияЗадачиМобильномуСотруднику);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		
		Выборка.Следующий();
		
		ПакетКомментарийФабрика = ФабрикаXDTO.Создать(КомментарийТип);
		ПакетКомментарийФабрика.id = Выборка.ИдентификаторКомментария;		
		ПакетКомментарийФабрика.db_id = Выборка.ИдентификаторИнформационнойБазы;
		
		ПакетКомментарийФабрика.text = Выборка.Текст;		
		
		ПакетКомментарийДатаСозданияСКоординатамиФабрика = ФабрикаXDTO.Создать(ДатаКоординатыТип);
		ПакетКомментарийДатаСозданияСКоординатамиФабрика.datetime = Выборка.ДатаСоздания;		
		ПакетКомментарийФабрика.creation = ПакетКомментарийДатаСозданияСКоординатамиФабрика;
		
		ПакетАвторФабрика = ФабрикаXDTO.Создать(АвторТип);
		ПакетАвторФабрика.external_id = ФабрикаXDTO.Создать(ВнешнийИДТип,СокрЛП(Выборка.Автор.Ссылка.УникальныйИдентификатор()));		
		ПакетАвторФабрика.name = СокрЛП(Выборка.Автор);
		
		ПакетКомментарийФабрика.author = ПакетАвторФабрика;
		
		ПакетЗадачаФабрика.comment.Добавить(ПакетКомментарийФабрика);
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(НовыйФайлДата,ПакетЗадачаФабрика);
	НовыйФайлДата.Закрыть();
	
	Возврат РезультатыПодготовкиПакетаДата;
	
КонецФункции

Процедура РегистрацияИзмененийПоЗадаче(ПакетСДанными, РезультатРазбораВнешнегоПакета)
	
	СсылкаНаЗадачу = Документы.атл_ЗадачаМобильномуСотруднику.ПолучитьСсылку(Новый УникальныйИдентификатор(ПакетСДанными.external_id));
	
	ДокументЗадача = СсылкаНаЗадачу.ПолучитьОбъект();
	
	Если ДокументЗадача = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТелоЗадачи = ПакетСДанными.task_body;
	Комментарии = ПакетСДанными.comment;
	
	ДокументИзменен = Ложь;
	Свойство = "";
	
	Если ТелоЗадачи <> Неопределено Тогда
		
		Если ТелоЗадачи.read <> Неопределено Тогда
			
			ДокументЗадача.ПрочиталДата = ВозвратЗначениеПоФиксированномуМассиву(ТелоЗадачи.read.datetime);
			ДокументЗадача.ПрочиталШирота = ТелоЗадачи.read.latitude;
			ДокументЗадача.ПрочиталДолгота = ТелоЗадачи.read.longitude;
			ДокументИзменен = Истина;
			
		КонецЕсли;
		
		Если ТелоЗадачи.task_acceptance_status <> Неопределено Тогда
			
			Если ТелоЗадачи.task_acceptance_status.acceptance <> Неопределено Тогда
				ДокументЗадача.ПринялОтклонилДата = ТелоЗадачи.task_acceptance_status.acceptance.datetime;
				ДокументЗадача.ПринялОтклонилШирота = ТелоЗадачи.task_acceptance_status.acceptance.latitude;
				ДокументЗадача.ПринялОтклонилДолгота = ТелоЗадачи.task_acceptance_status.acceptance.longitude;
				
				ДокументИзменен = Истина;
			КонецЕсли;
			
			Если ТелоЗадачи.task_acceptance_status.status <> Неопределено Тогда
				Если ТелоЗадачи.task_acceptance_status.status = 1 Тогда
					ДокументЗадача.Принял = Истина;
				Иначе
					ДокументЗадача.Принял = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ДокументЗадача.Принял Тогда
				Если ТелоЗадачи.task_acceptance_status.rejection_reason <> Неопределено Тогда
					
					Если ТелоЗадачи.task_acceptance_status.rejection_reason.external_id <> Неопределено Тогда
						СсылкаНаПричинуОтклонения = Справочники.атл_ПричиныЗавершенияЗадачМобильнымСотрудникам.ПолучитьСсылку(Новый УникальныйИдентификатор(ТелоЗадачи.task_acceptance_status.rejection_reason.external_id));
						Если СсылкаНаПричинуОтклонения <> Неопределено Тогда
							ДокументЗадача.ОтклонилПричина = СсылкаНаПричинуОтклонения;
						КонецЕсли;
					КонецЕсли;
					
					Если ТелоЗадачи.task_acceptance_status.rejection_reason.description <> Неопределено Тогда
						ДокументЗадача.ОтклонилОписаниеПричины = ТелоЗадачи.task_acceptance_status.rejection_reason.description;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТелоЗадачи.departure <> Неопределено Тогда
			
			ДокументЗадача.ВыехалДата = ВозвратЗначениеПоФиксированномуМассиву(ТелоЗадачи.departure.datetime);
			ДокументЗадача.ВыехалШирота = ТелоЗадачи.departure.latitude;
			ДокументЗадача.ВыехалДолгота = ТелоЗадачи.departure.longitude;
			ДокументИзменен = Истина;
			
		КонецЕсли;
		
		Если ТелоЗадачи.arrival <> Неопределено Тогда
			
			ДокументЗадача.ПриехалДата = ВозвратЗначениеПоФиксированномуМассиву(ТелоЗадачи.arrival.datetime);
			ДокументЗадача.ПриехалШирота = ТелоЗадачи.arrival.latitude;
			ДокументЗадача.ПриехалДолгота = ТелоЗадачи.arrival.longitude;
			ДокументИзменен = Истина;
			
		КонецЕсли;
		
		Если ТелоЗадачи.task_finished_status <> Неопределено Тогда
			
			Если ТелоЗадачи.task_finished_status.finish <> Неопределено Тогда
				ДокументЗадача.ЗавершилДата = ТелоЗадачи.task_finished_status.finish.datetime;
				ДокументЗадача.ЗавершилШирота = ТелоЗадачи.task_finished_status.finish.latitude;
				ДокументЗадача.ЗавершилДолгота = ТелоЗадачи.task_finished_status.finish.longitude;
				
				Попытка
					ДокументЗадача.ЗавершилАвтор = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(РезультатРазбораВнешнегоПакета.ИдентификаторОтправителяПакета));
				Исключение
					Сообщить("В задаче " + ДокументЗадача + " не удалось определить автора завершения задачи!");
				КонецПопытки;
				ДокументИзменен = Истина;
			КонецЕсли;
			
			Если ТелоЗадачи.task_finished_status.external_id <> Неопределено Тогда
				СсылкаНаПричинуЗавершения = Справочники.атл_ПричиныЗавершенияЗадачМобильнымСотрудникам.ПолучитьСсылку(Новый УникальныйИдентификатор(ТелоЗадачи.task_finished_status.external_id));
				Если СсылкаНаПричинуЗавершения <> Неопределено Тогда
					ДокументЗадача.ПричинаЗавершенияЗадачи = СсылкаНаПричинуЗавершения;
					ДокументИзменен = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ТелоЗадачи.task_finished_status.description <> Неопределено Тогда
				ДокументЗадача.ОписаниеВыполненныхРабот = СокрЛП(ТелоЗадачи.task_finished_status.description);
				ДокументИзменен = Истина;
			КонецЕсли;
			
			Если ТелоЗадачи.task_finished_status.correction = Неопределено Тогда
				//это первое завершение
			Иначе
				//это коррекция после отклонения
				НоваяСтрокаСогласования = ДокументЗадача.СогласованиеРезультатовВыполненияЗадачи.Добавить();
				НоваяСтрокаСогласования.ДатаСобытия = ТелоЗадачи.task_finished_status.correction.datetime;
				НоваяСтрокаСогласования.Широта 		= ТелоЗадачи.task_finished_status.correction.latitude;
				НоваяСтрокаСогласования.Долгота 	= ТелоЗадачи.task_finished_status.correction.longitude;
				НоваяСтрокаСогласования.ВидСобытияСогласования = Перечисления.атл_ВидыСобытийСогласованияВыполненияРабот.ПередачаНаРассмотрение;
				
				ИдентификаторВнешнегоПакетаИзСтруктуры = Неопределено;
				Если РезультатРазбораВнешнегоПакета.Свойство("ИдентификаторПакета", ИдентификаторВнешнегоПакетаИзСтруктуры) Тогда
					Если ИдентификаторВнешнегоПакетаИзСтруктуры <> Неопределено Тогда
						Попытка
							НоваяСтрокаСогласования.ИдентификаторПакетаНаСервере = ИдентификаторВнешнегоПакетаИзСтруктуры;
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				
				Попытка
					НоваяСтрокаСогласования.Автор = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(РезультатРазбораВнешнегоПакета.ИдентификаторОтправителяПакета));
				Исключение
					Сообщить("В задаче " + ДокументЗадача + " не удалось определить автора завершения задачи!");
				КонецПопытки;
				ДокументИзменен = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		ДополнительныеРеквизиты = ТелоЗадачи.extra_fields;
		Если ДополнительныеРеквизиты <> Неопределено Тогда
			//проверяем необходимость заполнения дополнительных реквизитов
			Если ТипЗнч(ДополнительныеРеквизиты) = Тип("СписокXDTO") Тогда
				
				КоличествоЭлементовВСписке = ДополнительныеРеквизиты.Количество();
				Если КоличествоЭлементовВСписке > 0 Тогда
					Для Индекс = 0 по КоличествоЭлементовВСписке-1 Цикл
						РазобратьИнформациюПоДополнительномуРеквизитуПоЗадаче(ДокументЗадача, РезультатРазбораВнешнегоПакета, ДополнительныеРеквизиты[Индекс]);
					КонецЦикла;
				КонецЕсли;
			Иначе
				РазобратьИнформациюПоДополнительномуРеквизитуПоЗадаче(ДокументЗадача, РезультатРазбораВнешнегоПакета, ДополнительныеРеквизиты);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Комментарии <> Неопределено Тогда
		Если ТипЗнч(Комментарии) = Тип("СписокXDTO") Тогда
			
			КоличествоЭлементовВСписке = Комментарии.Количество();
			Если КоличествоЭлементовВСписке > 0 Тогда
				Для Индекс = 0 по КоличествоЭлементовВСписке-1 Цикл
					РазобратьИнформациюПоКомментариюПоЗадаче(ДокументЗадача, РезультатРазбораВнешнегоПакета, Комментарии[Индекс]);
				КонецЦикла;
			КонецЕсли;
		Иначе
			РазобратьИнформациюПоКомментариюПоЗадаче(ДокументЗадача, РезультатРазбораВнешнегоПакета, Комментарии);
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументИзменен Тогда
		ВременныйТекущийСтатус = атл_УправлениеМобильнымиСотрудниками.ПолучитьТекущийСтатусЗадачиУМС(ДокументЗадача);
		Если ВременныйТекущийСтатус <> ДокументЗадача.ТекущийСтатус Тогда
			СтарыйСтатус = ДокументЗадача.ТекущийСтатус;
			ДокументЗадача.ТекущийСтатус = ВременныйТекущийСтатус;
			//регистрируем уведомление об изменении статуса
			ИзменялсяСтатус = Истина;			
		Иначе
			ИзменялсяСтатус = Ложь;
		КонецЕсли;
		
		ДокументЗадача.Записать();
		Если ИзменялсяСтатус Тогда
			атл_УправлениеМобильнымиСотрудниками.СформироватьУведомлениеПоИзменениюСтатуса(СтарыйСтатус, ДокументЗадача.ТекущийСтатус, ДокументЗадача.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


//Комментарии к задачам

Функция СформироватьПакетКомментарий(ДокументЗадача, ИдентификаторКомментария) Экспорт
	
	РезультатыПодготовкиПакетаДата = Новый Структура();
	
	ИмяФайлаПакета = ПолучитьИмяВременногоФайла("XML");
	РезультатыПодготовкиПакетаДата.Вставить("ИмяФайлаПакета", ИмяФайлаПакета);
	
	
	НовыйФайлДата = Новый ЗаписьXML;
	НовыйФайлДата.ОткрытьФайл(ИмяФайлаПакета);
	
	ЗадачаТип = ФабрикаXDTO.Тип("task_mwms", "task");
	ВнешнийИДТип = ФабрикаXDTO.Тип("task_mwms", "external_id");
	КомментарийТип = ФабрикаXDTO.Тип("task_mwms", "comment");
	АвторТип = ФабрикаXDTO.Тип("task_mwms", "author");
	ДатаКоординатыТип = ФабрикаXDTO.Тип("task_mwms", "date_coordinates");
	
	ПакетЗадачаФабрика = ФабрикаXDTO.Создать(ЗадачаТип);
	ПакетЗадачаФабрика.external_id = ФабрикаXDTO.Создать(ВнешнийИДТип,СокрЛП(ДокументЗадача.Ссылка.УникальныйИдентификатор()));
	
	// получаем запись из регистра
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	атл_КомментарииКОбъектамУМС.Текст,
	|	атл_КомментарииКОбъектамУМС.Автор,
	|	атл_КомментарииКОбъектамУМС.ДатаСоздания
	|ИЗ
	|	РегистрСведений.атл_КомментарииКОбъектамУМС КАК атл_КомментарииКОбъектамУМС
	|ГДЕ
	|	атл_КомментарииКОбъектамУМС.ИдентификаторКомментария = &ИдентификаторКомментария
	|	И атл_КомментарииКОбъектамУМС.ИдентификаторИнформационнойБазы = &ИдентификаторИнформационнойБазы
	|	И атл_КомментарииКОбъектамУМС.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", ДокументЗадача); 
	Запрос.УстановитьПараметр("ИдентификаторИнформационнойБазы", 0);
	Запрос.УстановитьПараметр("ИдентификаторКомментария", ИдентификаторКомментария);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПакетКомментарийФабрика = ФабрикаXDTO.Создать(КомментарийТип);
		ПакетКомментарийФабрика.id = ИдентификаторКомментария;
		ПакетКомментарийФабрика.db_id=0;
		
		ПакетКомментарийФабрика.text = Выборка.Текст;		
		
		ПакетКомментарийДатаСозданияСКоординатамиФабрика = ФабрикаXDTO.Создать(ДатаКоординатыТип);
		ПакетКомментарийДатаСозданияСКоординатамиФабрика.datetime = Выборка.ДатаСоздания;		
		ПакетКомментарийФабрика.creation = ПакетКомментарийДатаСозданияСКоординатамиФабрика;
		
		ПакетАвторФабрика = ФабрикаXDTO.Создать(АвторТип);
		ПакетАвторФабрика.external_id = ФабрикаXDTO.Создать(ВнешнийИДТип,СокрЛП(Выборка.Автор.Ссылка.УникальныйИдентификатор()));		
		ПакетАвторФабрика.name = СокрЛП(Выборка.Автор);
		
		ПакетКомментарийФабрика.author = ПакетАвторФабрика;
		
		ПакетЗадачаФабрика.comment.Добавить(ПакетКомментарийФабрика);
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(НовыйФайлДата,ПакетЗадачаФабрика);
	НовыйФайлДата.Закрыть();
	
	Возврат РезультатыПодготовкиПакетаДата;
	
КонецФункции

Процедура РазобратьИнформациюПоКомментариюПоЗадаче(ДокументЗадача, РезультатРазбораВнешнегоПакета, ДанныеДляРазбора)
	
	
	
	Если ДанныеДляРазбора.db_id = 0 Тогда //информация по комментарию из 1С
		
		Если ДанныеДляРазбора.read <> Неопределено Тогда
			
			МенеджерЗаписи = РегистрыСведений.атл_КомментарииКОбъектамУМС.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ИдентификаторКомментария = ДанныеДляРазбора.id;
			МенеджерЗаписи.ИдентификаторИнформационнойБазы = ДанныеДляРазбора.db_id;
			МенеджерЗаписи.Объект = ДокументЗадача.Ссылка;
			МенеджерЗаписи.Прочитать();
			
			//фиксируем информацию о прочтении
			Если ЗначениеЗаполнено(ДанныеДляРазбора.read.datetime) Тогда
				МенеджерЗаписи.ПрочиталДата = ВозвратЗначениеПоФиксированномуМассиву(ДанныеДляРазбора.read.datetime);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеДляРазбора.read.latitude) Тогда
				МенеджерЗаписи.ПрочиталШирота = ДанныеДляРазбора.read.latitude;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеДляРазбора.read.longitude) Тогда
				МенеджерЗаписи.ПрочиталДолгота = ДанныеДляРазбора.read.longitude;
			КонецЕсли;
			
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
		
	Иначе //комментарий c мобильного клиента
		
		МенеджерЗаписи = РегистрыСведений.атл_КомментарииКОбъектамУМС.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИдентификаторКомментария = ДанныеДляРазбора.id;
		МенеджерЗаписи.ИдентификаторИнформационнойБазы = ДанныеДляРазбора.db_id;
		МенеджерЗаписи.Объект = ДокументЗадача.Ссылка;
		
		МенеджерЗаписи.Автор = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(РезультатРазбораВнешнегоПакета.ИдентификаторОтправителяПакета));
		
		Если ДанныеДляРазбора.creation <> Неопределено Тогда
			
			//фиксируем информацию о прочтении
			Если ЗначениеЗаполнено(ДанныеДляРазбора.creation.datetime) Тогда
				МенеджерЗаписи.ДатаСоздания = ВозвратЗначениеПоФиксированномуМассиву(ДанныеДляРазбора.creation.datetime);
			КонецЕсли;
			//
			//Если ЗначениеЗаполнено(ДанныеДляРазбора.creation.latitude) Тогда
			//	МенеджерЗаписи.Широта = ДанныеДляРазбора.creation.latitude;
			//КонецЕсли;
			//
			//Если ЗначениеЗаполнено(ДанныеДляРазбора.creation.longitude) Тогда
			//	МенеджерЗаписи.Долгота = ДанныеДляРазбора.creation.longitude;
			//КонецЕсли;
			//
		КонецЕсли;
		
		Если ДанныеДляРазбора.file <> Неопределено Тогда
			//есть вложенный файл
			МенеджерЗаписи.КомментарийСВложением = Истина;
			Если ДанныеДляРазбора.file.id <> Неопределено Тогда
				МенеджерЗаписи.ИдентификаторФайла = ДанныеДляРазбора.file.id;
			КонецЕсли;
			Если ДанныеДляРазбора.file.db_id <> Неопределено Тогда
				МенеджерЗаписи.ИдентификаторИнформационнойБазыФайла = ДанныеДляРазбора.file.db_id;
			КонецЕсли;			
			МенеджерЗаписи.Текст = "< ... вложенный файл ... >";
		Иначе
			МенеджерЗаписи.Текст = ДанныеДляРазбора.text;
		КонецЕсли;
		
		МенеджерЗаписи.ИдентификаторПакетаНаСервере = РезультатРазбораВнешнегоПакета.ИдентификаторПакета;
		МенеджерЗаписи.ДатаРегистрации = ТекущаяДата();
		//для комментариев от мобильных сотрудников дата получения в 1С совпадает с датой регистрации. 
		//дату прочтения при этом определять не имеет смысла, т.к. комментарий не имеет адресата
		МенеджерЗаписи.ПолучилДата = МенеджерЗаписи.ДатаРегистрации;
		
		МенеджерЗаписи.Записать();
		
		//регистрируем уведомление по комментарию
		атл_УправлениеМобильнымиСотрудниками.СформироватьУведомлениеПоНовомуКомментарию(ДокументЗадача.Ссылка, СокрЛП(МенеджерЗаписи.Текст));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДатуДоставкиПриложенногоКомментария(ДокументСсылка, ТипКомментария, ДатаДоставки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	атл_КомментарииКОбъектамУМС.ИдентификаторКомментария,
	               |	атл_КомментарииКОбъектамУМС.ИдентификаторИнформационнойБазы
	               |ИЗ
	               |	РегистрСведений.атл_КомментарииКОбъектамУМС КАК атл_КомментарииКОбъектамУМС
	               |ГДЕ
	               |	атл_КомментарииКОбъектамУМС.Объект = &Объект
	               |	И атл_КомментарииКОбъектамУМС.ТипКомментария = &ТипКомментария
	               |	И атл_КомментарииКОбъектамУМС.ПолучилДата = &ПустаяДата
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	атл_КомментарииКОбъектамУМС.ДатаРегистрации УБЫВ
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Объект", ДокументСсылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	Запрос.УстановитьПараметр("ТипКомментария", ТипКомментария);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		
		МенеджерЗаписи = РегистрыСведений.атл_КомментарииКОбъектамУМС.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИдентификаторИнформационнойБазы = Выборка.ИдентификаторИнформационнойБазы;
		МенеджерЗаписи.ИдентификаторКомментария = Выборка.ИдентификаторКомментария;
		МенеджерЗаписи.Объект = ДокументСсылка;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.ПолучилДата = ДатаДоставки;
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
КонецПроцедуры


//Обмен файлами

Процедура РазобратьИнформациюПоПакетуСЧастьюФайла(РезультатРазбораВнешнегоПакета, ИдентификаторПакетаЧастиФайла, НомерЧастиФайла);
	
	Если ИдентификаторПакетаЧастиФайла <> Неопределено Тогда 
		//регистрируем пакет
		МенеджерЗаписи = РегистрыСведений.атл_СоставныеЧастиФайловУМС.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИдентификаторОбщегоПакета = РезультатРазбораВнешнегоПакета.ИдентификаторПакета;
		МенеджерЗаписи.ИдентификаторПакетаЧастиФайла = ИдентификаторПакетаЧастиФайла;
		МенеджерЗаписи.НомерЧастиФайла = НомерЧастиФайла;
		МенеджерЗаписи.ДатаРегистрации = ТекущаяДата();
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаНеобходимостиСборкиФайла(ИдентификаторОбщегоПакета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	атл_СоставныеЧастиФайловУМС.ИдентификаторПакетаЧастиФайла КАК ИдентификаторПакетаЧастиФайла,
	|	атл_СоставныеЧастиФайловУМС.НомерЧастиФайла КАК НомерЧастиФайла,
	|	ВЫБОР
	|		КОГДА атл_СоставныеЧастиФайловУМС.ДанныеПолучены = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Получено,
	|	ВЫБОР
	|		КОГДА атл_СоставныеЧастиФайловУМС.ДанныеПолучены = ЛОЖЬ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НеПолучено
	|ИЗ
	|	РегистрСведений.атл_СоставныеЧастиФайловУМС КАК атл_СоставныеЧастиФайловУМС
	|ГДЕ
	|	атл_СоставныеЧастиФайловУМС.ИдентификаторОбщегоПакета = &ИдентификаторОбщегоПакета
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЧастиФайла
	|ИТОГИ
	|	СУММА(Получено),
	|	СУММА(НеПолучено)
	|ПО
	|	ОБЩИЕ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ИдентификаторОбщегоПакета", ИдентификаторОбщегоПакета);
	
	Результат = Запрос.Выполнить();
	ВыборкаИтога = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	УдалитьСоставныеЧастиФайла = Ложь;
	
	Пока ВыборкаИтога.Следующий() Цикл
		
		Если ВыборкаИтога.НеПолучено = 0 Тогда
			//проверяем на соответсвие файлу...
			
			ЗапросПоФайлу = Новый Запрос;
			ЗапросПоФайлу.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	атл_ФайлыУМС.ИдентификаторФайла,
			|	атл_ФайлыУМС.ИдентификаторИнформационнойБазы
			|ИЗ
			|	РегистрСведений.атл_ФайлыУМС КАК атл_ФайлыУМС
			|ГДЕ
			|	атл_ФайлыУМС.ИдентификаторОбщегоПакета = &ИдентификаторОбщегоПакета";
			
			ЗапросПоФайлу.УстановитьПараметр("ИдентификаторОбщегоПакета", ИдентификаторОбщегоПакета);
			
			РезультатПоФайлу = ЗапросПоФайлу.Выполнить();
			ВыборкаФайла = РезультатПоФайлу.Выбрать();
			
			Если ВыборкаФайла.Количество() > 0 Тогда
				ВыборкаФайла.Следующий();
				//считываем информацию о файле
				МенеджерЗаписиФайла = РегистрыСведений.атл_ФайлыУМС.СоздатьМенеджерЗаписи();
				МенеджерЗаписиФайла.ИдентификаторИнформационнойБазы = ВыборкаФайла.ИдентификаторИнформационнойБазы;
				МенеджерЗаписиФайла.ИдентификаторФайла = ВыборкаФайла.ИдентификаторФайла;
				МенеджерЗаписиФайла.Прочитать();
				
				Если МенеджерЗаписиФайла.КоличествоЧастей = ВыборкаИтога.Получено Тогда
					//все проверки выполнили, начинаем собирать части...
					
					Выборка = ВыборкаИтога.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					СтрокаДанных = "";
					
					Пока Выборка.Следующий() Цикл
						
						МенеджерЗаписи = РегистрыСведений.атл_СоставныеЧастиФайловУМС.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.ИдентификаторОбщегоПакета = ИдентификаторОбщегоПакета;
						МенеджерЗаписи.ИдентификаторПакетаЧастиФайла = Выборка.ИдентификаторПакетаЧастиФайла;
						МенеджерЗаписи.Прочитать();
						
						СтрокаДанных = СтрокаДанных + МенеджерЗаписи.Данные;
					КонецЦикла;
					
					//строку данных, возможно, необходимо расшифровать
					Если МенеджерЗаписиФайла.ТипДанных = 2 Тогда
						Попытка
							СтрокаДанныхПреобразованная = Base64Значение(СтрокаДанных);
							МенеджерЗаписиФайла.ДанныеФайла = Новый ХранилищеЗначения(СтрокаДанныхПреобразованная);
							УдалитьСоставныеЧастиФайла = Истина;
						Исключение
							//не удалось расшифровать...
							Сообщить("Не удалось собрать файл...");
							//нужно пометить запись в регистре, чтобы больше попыток разбора не было...
						КонецПопытки;
					ИначеЕсли МенеджерЗаписиФайла.ТипДанных = 3 Тогда
						ПопробоватьСобратьФайлБезРасшифровки = Ложь;
						//СтрокаДанныхПреобразованная = Base64Значение(СтрокаДанных);
						СтрокаДанныхПреобразованная = СтрокаДанных;
						ЕстьОшибкаРазбора = Ложь;
						ИмяФайла = ПолучитьИмяВременногоФайла();
						ВыполнитьРасшифровку(ИмяФайла, МенеджерЗаписиФайла.ВерсияКлюча, СтрокаДанныхПреобразованная, "", ЕстьОшибкаРазбора);
						Попытка
							МенеджерЗаписиФайла.ДанныеФайла = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяФайла), Новый СжатиеДанных);
							ВыполнитьПопыткуУдаленияФайла(ИмяФайла);
							МенеджерЗаписиФайла.ДатаРегистрацииДанных = ТекущаяДата();
							УдалитьСоставныеЧастиФайла = Истина;
						Исключение
							//возможно файл не был зашифрован...
							Сообщить("Не удалось собрать зашифрованный файл...");
							ПопробоватьСобратьФайлБезРасшифровки = Истина;
						КонецПопытки;
						
						Если ПопробоватьСобратьФайлБезРасшифровки Тогда
							Попытка
								СтрокаДанныхПреобразованная = Base64Значение(СтрокаДанных);
								МенеджерЗаписиФайла.ДанныеФайла = Новый ХранилищеЗначения(СтрокаДанныхПреобразованная);
								УдалитьСоставныеЧастиФайла = Истина;
								Сообщить("После неудачной попытки собрать без расшифровки удалось собрать зашифрованный файл...");
							Исключение
								//не удалось расшифровать...
								Сообщить("Не удалось собрать файл...");
								//нужно пометить запись в регистре, чтобы больше попыток разбора не было...
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
					
					МенеджерЗаписиФайла.Записать();
					
				Иначе
					Сообщить("Количество записанных частей файла не соответсвует заявленному количеству частей. Файл " + МенеджерЗаписиФайла.ИмяФайла + " загрузить не удалось!");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если УдалитьСоставныеЧастиФайла Тогда
		НаборЗаписей = РегистрыСведений.атл_СоставныеЧастиФайловУМС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторОбщегоПакета.Установить(ИдентификаторОбщегоПакета);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЕсли;

КонецПроцедуры

Функция ЗагрузкаСоставныхЧастейФайла(ИдентификаторОбщегоПакета, ПараметрыЗагружаемогоФайла)
	
	//закачиваем составные части файла
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	атл_СоставныеЧастиФайловУМС.ИдентификаторПакетаЧастиФайла КАК ИдентификаторПакетаЧастиФайла,
	|	атл_СоставныеЧастиФайловУМС.Данные,
	|	атл_СоставныеЧастиФайловУМС.ДанныеПолучены
	|ИЗ
	|	РегистрСведений.атл_СоставныеЧастиФайловУМС КАК атл_СоставныеЧастиФайловУМС
	|ГДЕ
	|	атл_СоставныеЧастиФайловУМС.ИдентификаторОбщегоПакета = &ИдентификаторОбщегоПакета
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторПакетаЧастиФайла
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ИдентификаторОбщегоПакета", ИдентификаторОбщегоПакета);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.атл_СоставныеЧастиФайловУМС.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИдентификаторОбщегоПакета = ИдентификаторОбщегоПакета;
		МенеджерЗаписи.ИдентификаторПакетаЧастиФайла = Выборка.ИдентификаторПакетаЧастиФайла;
		МенеджерЗаписи.Прочитать();
		
		мЗагрузкаПакета = Новый Структура;
		мЗагрузкаПакета.Вставить("ИдентификаторОбщегоПакета", ИдентификаторОбщегоПакета);
		
		ПолучитьДанныеССервераПоПакету(МенеджерЗаписи.ИдентификаторПакетаЧастиФайла);
		
	КонецЦикла;
	
	//очистим структуру
	мЗагрузкаПакета = Новый Структура;
	
КонецФункции

Процедура РегистрацияПакетаСДаннымиОФайле(ПакетСДанными, РезультатРазбораВнешнегоПакета)
	
	//проверяем есть ли уже в базе данные об этом файле. Если есть, то эту запись пропускаем...
	МенеджерЗаписиПроверки = РегистрыСведений.атл_ФайлыУМС.СоздатьМенеджерЗаписи();
	МенеджерЗаписиПроверки.ИдентификаторИнформационнойБазы = ПакетСДанными.db_id;
	МенеджерЗаписиПроверки.ИдентификаторФайла = ПакетСДанными.id;	
	МенеджерЗаписиПроверки.Прочитать();
	
	Если НЕ МенеджерЗаписиПроверки.ИмяФайла = "" Тогда
		//запись о файле уже есть. Скорее всего это пакет-дубль
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.атл_ФайлыУМС.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИдентификаторИнформационнойБазы = ПакетСДанными.db_id;
	МенеджерЗаписи.ИдентификаторФайла = ПакетСДанными.id;
	
	ПродолжитьПоиск = Истина;
	ВременноеИмяФайла = ПакетСДанными.name;
	
	//Если ЗначениеЗаполнено(ПакетСДанными.caption) Тогда
	//	МенеджерЗаписи.Подпись = ПакетСДанными.caption;
	//КонецЕсли;
	
	Пока ПродолжитьПоиск Цикл
		ПозицияСлэша = Найти(ВременноеИмяФайла,"\");
		Если ПозицияСлэша = 0 Тогда
			ПозицияСлэша = Найти(ВременноеИмяФайла,"/");
		КонецЕсли;
		Если ПозицияСлэша = 0 Тогда
			ПродолжитьПоиск = Ложь;
		Иначе
			Попытка
				ВременноеИмяФайла = Прав(ВременноеИмяФайла, СтрДлина(ВременноеИмяФайла)- ПозицияСлэша);
			Исключение
				ВременноеИмяФайла = "";
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	МенеджерЗаписи.ИмяФайла = ВременноеИмяФайла;
	
	ПараметрыЗагружаемогоФайла = Новый Структура;
	ПараметрыЗагружаемогоФайла.Вставить("ИдентификаторИнформационнойБазы", 	МенеджерЗаписи.ИдентификаторИнформационнойБазы);
	ПараметрыЗагружаемогоФайла.Вставить("ИдентификаторФайла", 				МенеджерЗаписи.ИдентификаторФайла);
	
	Если ПакетСДанными.creation <> Неопределено Тогда
		
		//фиксируем информацию о прочтении
		Если ЗначениеЗаполнено(ПакетСДанными.creation.datetime) Тогда
			МенеджерЗаписи.ДатаСоздания = ВозвратЗначениеПоФиксированномуМассиву(ПакетСДанными.creation.datetime);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПакетСДанными.creation.latitude) Тогда
			МенеджерЗаписи.Широта = ПакетСДанными.creation.latitude;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПакетСДанными.creation.longitude) Тогда
			МенеджерЗаписи.Долгота = ПакетСДанными.creation.longitude;
		КонецЕсли;
	КонецЕсли;
	
	МенеджерЗаписи.ИдентификаторОбщегоПакета = РезультатРазбораВнешнегоПакета.ИдентификаторПакета;
	МенеджерЗаписи.Отправитель = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(РезультатРазбораВнешнегоПакета.ИдентификаторОтправителяПакета));
	
	МенеджерЗаписи.ДатаРегистрации = ТекущаяДата();
	
	МенеджерЗаписи.ТипДанных = РезультатРазбораВнешнегоПакета.ТипДанных;
	Если МенеджерЗаписи.ТипДанных = 3 Тогда
		МенеджерЗаписи.ВерсияКлюча = РезультатРазбораВнешнегоПакета.ВерсияКлюча;
	КонецЕсли;
	
	МенеджерЗаписи.ТребуетсяУдалитьФайл = Ложь;
	
	Пакеты = ПакетСДанными.packets.packet_id;
	
	Если Пакеты <> Неопределено Тогда
		НомерЧастиФайла = 1;
		Если ТипЗнч(Пакеты) = Тип("СписокXDTO") Тогда
			
			КоличествоЭлементовВСписке = Пакеты.Количество();
			МенеджерЗаписи.КоличествоЧастей = КоличествоЭлементовВСписке;
			МенеджерЗаписи.Записать();
			Если КоличествоЭлементовВСписке > 0 Тогда
				Для Индекс = 0 по КоличествоЭлементовВСписке-1 Цикл
					РазобратьИнформациюПоПакетуСЧастьюФайла(РезультатРазбораВнешнегоПакета, Пакеты[Индекс], НомерЧастиФайла);
					НомерЧастиФайла = НомерЧастиФайла + 1;
				КонецЦикла;
			КонецЕсли;
		Иначе
			МенеджерЗаписи.КоличествоЧастей = 1;
			МенеджерЗаписи.Записать();
			РазобратьИнформациюПоПакетуСЧастьюФайла(РезультатРазбораВнешнегоПакета, Пакеты, НомерЧастиФайла);
		КонецЕсли;
		ЗагрузкаСоставныхЧастейФайла(РезультатРазбораВнешнегоПакета.ИдентификаторПакета, ПараметрыЗагружаемогоФайла);
		ПодтверждениеПолученияПакета(РезультатРазбораВнешнегоПакета.ИдентификаторПакета);
	Иначе
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры


//обмен сообщениями

Процедура РегистрацияПолученияПакетаССообщением(ПакетСДанными, РезультатРазбораВнешнегоПакета)
	
	ИдентификаторСообщения = Число(СокрЛП(ПакетСДанными.id));
	ИдентификаторИнформационнойБазы = Число(СокрЛП(ПакетСДанными.db_id));
	
	Если ИдентификаторИнформационнойБазы = 0 Тогда //пришла информация о доставке сообщения
		//находим сообщение
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	атл_Сообщения.Отправитель,
		|	атл_Сообщения.Получатель,
		|	атл_Сообщения.ИдентификаторСообщения,
		|	атл_Сообщения.ИдентификаторИнформационнойБазы,
		|	атл_Сообщения.ОтправительМК,
		|	атл_Сообщения.ПолучательМК
		|ИЗ
		|	РегистрСведений.атл_Сообщения КАК атл_Сообщения
		|ГДЕ
		|	атл_Сообщения.ИдентификаторСообщения = &ИдентификаторСообщения
		|	И атл_Сообщения.ИдентификаторИнформационнойБазы = &ИдентификаторИнформационнойБазы";
		
		Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
		Запрос.УстановитьПараметр("ИдентификаторИнформационнойБазы", ИдентификаторИнформационнойБазы);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Количество() = 0 Тогда // сообщение не найдено
			//это ошибка
		Иначе	
			//корректируем информацию по сообщению
			МенеджерЗаписи = РегистрыСведений.атл_Сообщения.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.ИдентификаторИнформационнойБазы = 0;
			МенеджерЗаписи.ИдентификаторСообщения = ИдентификаторСообщения;
			МенеджерЗаписи.Прочитать();
			
			Если ЗначениеЗаполнено(ПакетСДанными.delivered_datetime) Тогда
				МенеджерЗаписи.ДатаДоставки = ВозвратЗначениеПоФиксированномуМассиву(ПакетСДанными.delivered_datetime);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПакетСДанными.read_datetime) Тогда
				МенеджерЗаписи.ДатаПрочтения = ВозвратЗначениеПоФиксированномуМассиву(ПакетСДанными.read_datetime);
			КонецЕсли;
			
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
		
		
	Иначе //пришло сообщение с мобильного клиента
		//добавляем информацию по новому сообщению с мобильного устройства
		МенеджерЗаписи = РегистрыСведений.атл_Сообщения.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.ИдентификаторИнформационнойБазы = ИдентификаторИнформационнойБазы;
		МенеджерЗаписи.ИдентификаторСообщения = ИдентификаторСообщения;
		МенеджерЗаписи.Сообщение =  СокрЛП(ПакетСДанными.text);
		
		МенеджерЗаписи.Отправитель = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(РезультатРазбораВнешнегоПакета.ИдентификаторОтправителяПакета));
		МенеджерЗаписи.Получатель = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ПакетСДанными.to.external_id));
		МенеджерЗаписи.ОтправительМК = Истина;
		МенеджерЗаписи.ПолучательМК = Ложь;
		
		Если ЗначениеЗаполнено(ПакетСДанными.create_datetime) Тогда
			МенеджерЗаписи.ДатаСоздания = ВозвратЗначениеПоФиксированномуМассиву(ПакетСДанными.create_datetime);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПакетСДанными.latitude) Тогда
			МенеджерЗаписи.Широта = ПакетСДанными.latitude;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПакетСДанными.longitude) Тогда
			МенеджерЗаписи.Долгота = ПакетСДанными.longitude;
		КонецЕсли;
		
		МенеджерЗаписи.ДатаРегистрации = ТекущаяДата();
		МенеджерЗаписи.ДатаДоставки = мДатаПолученияПоследнегоПакета;
		
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПакетСообщение(ВидПакета, ИдентификаторСообщения, ИдентификаторИнформационнойБазы) Экспорт
	
	РезультатыПодготовкиПакетаДата = Новый Структура();
	
	ИмяФайлаПакета = ПолучитьИмяВременногоФайла("XML");
	РезультатыПодготовкиПакетаДата.Вставить("ИмяФайлаПакета", ИмяФайлаПакета);
	
	
	НовыйФайлДата = Новый ЗаписьXML;
	НовыйФайлДата.ОткрытьФайл(ИмяФайлаПакета);
	
	СообщениеТип = ФабрикаXDTO.Тип("message_mwms", "message");
	ПользовательТип = ФабрикаXDTO.Тип("message_mwms", "user");
	
	ПакетСообщениеФабрика = ФабрикаXDTO.Создать(СообщениеТип);
	
	// получаем запись из регистра
	Запрос = Новый Запрос;
	//сообщение с нужным идентификатором должно быть только одно
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	атл_Сообщения.ДатаСоздания КАК ДатаСоздания,
	|	атл_Сообщения.Получатель,
	|	атл_Сообщения.Отправитель,
	|	атл_Сообщения.Сообщение,
	|	атл_Сообщения.ИдентификаторСообщения,
	|	атл_Сообщения.ИдентификаторИнформационнойБазы,
	|	атл_Сообщения.ДатаДоставки,
	|	атл_Сообщения.ДатаПрочтения,
	|	атл_Сообщения.ДатаРегистрации
	|ИЗ
	|	РегистрСведений.атл_Сообщения КАК атл_Сообщения
	|ГДЕ
	|	атл_Сообщения.ИдентификаторСообщения = &ИдентификаторСообщения
	|	И атл_Сообщения.ИдентификаторИнформационнойБазы = &ИдентификаторИнформационнойБазы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ИдентификаторИнформационнойБазы", ИдентификаторИнформационнойБазы);
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ВидПакета = "Новое сообщение" Тогда
			
			ПакетСообщениеФабрика.id = ИдентификаторСообщения;
			ПакетСообщениеФабрика.db_id = 0;
			
			ПакетСообщениеФабрика.text = Выборка.Сообщение;
			ПакетСообщениеФабрика.create_datetime = Выборка.ДатаСоздания;		
			
			ПакетОтправительФабрика = ФабрикаXDTO.Создать(ПользовательТип);
			ПакетОтправительФабрика.external_id = СокрЛП(Выборка.Отправитель.Ссылка.УникальныйИдентификатор());
			ПакетОтправительФабрика.name = СокрЛП(Выборка.Отправитель);
			
			ПакетСообщениеФабрика.from = ПакетОтправительФабрика;
			РезультатыПодготовкиПакетаДата.Вставить("ПодтипОбъекта", "basic");
			
		ИначеЕсли ВидПакета = "Сообщение (дата доставки)" Тогда
			
			ПакетСообщениеФабрика.id = ИдентификаторСообщения;
			ПакетСообщениеФабрика.db_id = ИдентификаторИнформационнойБазы;
			
			ПакетСообщениеФабрика.delivered_datetime = Выборка.ДатаДоставки;		
			РезультатыПодготовкиПакетаДата.Вставить("ПодтипОбъекта", "delivered");
			
		ИначеЕсли ВидПакета = "Сообщение (дата прочтения)" Тогда
			
			ПакетСообщениеФабрика.id = ИдентификаторСообщения;
			ПакетСообщениеФабрика.db_id = ИдентификаторИнформационнойБазы;
			
			ПакетСообщениеФабрика.read_datetime = Выборка.ДатаПрочтения;		
			РезультатыПодготовкиПакетаДата.Вставить("ПодтипОбъекта", "read");
		Иначе
			РезультатыПодготовкиПакетаДата.Вставить("ПодтипОбъекта", Неопределено);
		КонецЕсли;
	Иначе
		РезультатыПодготовкиПакетаДата.Вставить("ПодтипОбъекта", Неопределено);
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(НовыйФайлДата, ПакетСообщениеФабрика);
	НовыйФайлДата.Закрыть();
	
	Возврат РезультатыПодготовкиПакетаДата;
	
КонецФункции


// Расписание работы сотрудников
Функция СформироватьПакетРасписаниеРаботыСотрудника(Сотрудник)
	
	мДеньПервый = НачалоДня(ТекущаяДата());
	мДеньПоследний = КонецДня(мДеньПервый + 7 * 86400);
	РезультатыПодготовкиПакетаДата = Новый Структура();
	
	ИмяФайлаПакета = ПолучитьИмяВременногоФайла("XML");
	РезультатыПодготовкиПакетаДата.Вставить("ИмяФайлаПакета", ИмяФайлаПакета);
	
	НовыйФайлДата = Новый ЗаписьXML;
	НовыйФайлДата.ОткрытьФайл(ИмяФайлаПакета);
	
	РасписаниеРаботыТип = ФабрикаXDTO.Тип("work_schedule_mwms", "work_schedule");
	ИнтервалРаботыТип = ФабрикаXDTO.Тип("work_schedule_mwms", "work_time");
	
	РасписаниеРаботыФабрика = ФабрикаXDTO.Создать(РасписаниеРаботыТип);
	
	// получаем запись из регистра
	Запрос = Новый Запрос;
	//сообщение с нужным идентификатором должно быть только одно
	Запрос.Текст = "ВЫБРАТЬ
	               |	атл_ДетальныйГрафикРаботыСотрудников.ВремяНачала,
	               |	атл_ДетальныйГрафикРаботыСотрудников.ВремяОкончания
	               |ИЗ
	               |	РегистрСведений.атл_ДетальныйГрафикРаботыСотрудников КАК атл_ДетальныйГрафикРаботыСотрудников
	               |ГДЕ
	               |	атл_ДетальныйГрафикРаботыСотрудников.Сотрудник = &Сотрудник
	               |	И атл_ДетальныйГрафикРаботыСотрудников.ВремяНачала МЕЖДУ &ДеньПервый И &ДеньПоследний
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ДеньПервый", мДеньПервый);
	Запрос.УстановитьПараметр("ДеньПоследний", мДеньПоследний);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ИнтервалРаботыФабрика = ФабрикаXDTO.Создать(ИнтервалРаботыТип);
		ИнтервалРаботыФабрика.start = Выборка.ВремяНачала;
		ИнтервалРаботыФабрика.finish = Выборка.ВремяОкончания;
			
		РасписаниеРаботыФабрика.work_time.Добавить(ИнтервалРаботыФабрика);
	КонецЦикла;
	
	ФабрикаXDTO.ЗаписатьXML(НовыйФайлДата, РасписаниеРаботыФабрика);
	НовыйФайлДата.Закрыть();
	
	Возврат РезультатыПодготовкиПакетаДата;
	
КонецФункции


//Активность мобильных сотрудников

Процедура ПолучитьДанныеОбАктивностиМобильныхСотрудников() Экспорт
	
	Если Не РазрешенОбменДанными(Ложь) Тогда
		Если мФоновыйОбмен Тогда
			мФоновыйОбменВыполненУспешно = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ВыводитьОтладочныеСообщения Тогда
		Сообщить("Запрошены данные об активности пользователей..." + ТекущаяДата());
	КонецЕсли;
	
	РезультатыПодготовкиПакетаДата = СформироватьПакетСЗапросомАктивностиМобильныхСотрудников();
	
	РезультатыЗаписиПакета = ЗаписатьПакет(0,"command",,,,,"get_last_user_activity",,,РезультатыПодготовкиПакетаДата.ИмяФайлаПакета);
	РезультатыОтправки = ОтправкаДанныхНаСервер(РезультатыЗаписиПакета); 
	Если РезультатыОтправки.ОтправкаУспешна Тогда
		Если ВыводитьОтладочныеСообщения Тогда
			Сообщить("Запрос получения информации об активности пользователей отправлен успешно!");
		КонецЕсли;
		ПакетСДанными = ПолучитьДанныеИзПакета(РезультатыОтправки);
		Если ПакетСДанными = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		Сообщить("ВНИМАНИЕ! НЕ УДАЛОСЬ отправить запрос получения информации об активности мобильных сотрудников!");
	КонецЕсли;
	
	ВыполнитьПопыткуУдаленияФайла(РезультатыОтправки.ИмяПринятогоФайла);
	
КонецПроцедуры

Функция СформироватьПакетСЗапросомАктивностиМобильныхСотрудников() Экспорт
	
	РезультатыПодготовкиПакетаДата = Новый Структура();
	
	ИмяФайлаПакета = ПолучитьИмяВременногоФайла("XML");
	РезультатыПодготовкиПакетаДата.Вставить("ИмяФайлаПакета", ИмяФайлаПакета);
	
	НовыйФайлДата = Новый ЗаписьXML;
	НовыйФайлДата.ОткрытьФайл(ИмяФайлаПакета);
	
	СписокПользователейТип = ФабрикаXDTO.Тип("users_activities_mwms", "users_activities");
	
	СписокПользователейФабрика = ФабрикаXDTO.Создать(СписокПользователейТип);
	
	ЗаписьРегистраСинхронизацииССервером = РегистрыСведений.атл_ПеременныеСинхронизацииССерверомУМС.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСинхронизацииССервером.Прочитать();
	мИдентификаторПоследнегоОбновленияАктивностиПользователей = ЗаписьРегистраСинхронизацииССервером.ИдентификаторПоследнегоОбновленияАктивностиПользователей;
	
	СписокПользователейФабрика.sync_id = мИдентификаторПоследнегоОбновленияАктивностиПользователей;
	
	ФабрикаXDTO.ЗаписатьXML(НовыйФайлДата,СписокПользователейФабрика);
	НовыйФайлДата.Закрыть();
	
	Возврат РезультатыПодготовкиПакетаДата;
	
КонецФункции

Функция СкорректироватьВремяСУчетомЧасовогоПояса(КорректируемоеВремя)
	
	 КорректируемоеВремя = КорректируемоеВремя + мЧасовойПояс * 3600;
	 
	 Возврат КорректируемоеВремя;
	
КонецФункции

Процедура РегистрацияПакетаСДаннымиОбАктивностиМобильныхСотрудников(ПакетСДанными, РезультатРазбораВнешнегоПакета)
	
	Если Не ПакетСДанными = Неопределено Тогда
		//заполняем список активности пользователей
		
		мИдентификаторПоследнегоОбновленияАктивностиПользователей = 0;
		Если ЗначениеЗаполнено(ПакетСДанными.sync_id) Тогда
			//регистрируем идентификатор запроса
			мИдентификаторПоследнегоОбновленияАктивностиПользователей = ПакетСДанными.sync_id;
			
			ЗаписьРегистра = РегистрыСведений.атл_ПеременныеСинхронизацииССерверомУМС.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.ИдентификаторПоследнегоОбновленияАктивностиПользователей = мИдентификаторПоследнегоОбновленияАктивностиПользователей;
			ЗаписьРегистра.Прочитать();
			
			Если ЗаписьРегистра.ИдентификаторПоследнегоОбновленияАктивностиПользователей <> мИдентификаторПоследнегоОбновленияАктивностиПользователей Тогда
				ЗаписьРегистра.ИдентификаторПоследнегоОбновленияАктивностиПользователей = мИдентификаторПоследнегоОбновленияАктивностиПользователей;
				ЗаписьРегистра.Записать(Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		ПакетСписокПользователей = ПакетСДанными.user;
		
		Если ТипЗнч(ПакетСписокПользователей) = Тип("СписокXDTO") Тогда
			КоличествоЭлементовВСписке = ПакетСписокПользователей.Количество();
			Если КоличествоЭлементовВСписке > 0 Тогда
				Для Индекс = 0 по КоличествоЭлементовВСписке-1 Цикл
					СтрокаПользователя = ПакетСписокПользователей[Индекс];
					//записать данные об активности
					Попытка 
						Пользователь = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка(СтрокаПользователя.external_id)));
					Исключение
						Пользователь = Справочники.Пользователи.ПустаяСсылка();
					КонецПопытки;
					Если ЗначениеЗаполнено(Пользователь) и Пользователь.ПолучитьОбъект() <> Неопределено Тогда
						//формируем запись
						ЗаписьРегистра = РегистрыСведений.атл_АктивностьПользователей.СоздатьМенеджерЗаписи();
						ЗаписьРегистра.Пользователь = Пользователь;
						ЗаписьРегистра.МК = Истина;
						ЗаписьРегистра.Прочитать();
						Если НЕ ЗаписьРегистра.Выбран() Тогда
							ЗаписьРегистра.Пользователь = Пользователь;
							ЗаписьРегистра.МК = Истина;
							КонецЕсли;						Если ЗначениеЗаполнено(СтрокаПользователя.activity) Тогда
							Если ТипЗнч(СтрокаПользователя.activity) = Тип("СписокXDTO") Тогда
								Если СтрокаПользователя.activity.Количество() > 0 Тогда
									СтрокаАктивности = СтрокаПользователя.activity[0];
									
									Если ЗначениеЗаполнено(СтрокаАктивности.time) Тогда
										ЗаписьРегистра.ДатаПоследнейАктивности = СкорректироватьВремяСУчетомЧасовогоПояса(ВозвратЗначениеПоФиксированномуМассиву(СтрокаАктивности.time));
									Иначе
										ЗаписьРегистра.ДатаПоследнейАктивности = Дата("00010101");
									КонецЕсли;
									
									////Устаревший функционал
									//Если СтрокаАктивности.latitude <> "" и СтрокаАктивности.longitude <> "" Тогда
									//	//т.е. последние данные содержат координату
									//	ЗаписьРегистра.ДатаПоследнейАктивностиСКоординатами = ЗаписьРегистра.ДатаПоследнейАктивности;
									//	ЗаписьРегистра.Широта 	= СтрокаАктивности.latitude;
									//	ЗаписьРегистра.Долгота 	= СтрокаАктивности.longitude;
									//Иначе
									//	//координаты в последних данных нет, поэтому в регистре их не перезаписываем
									//КонецЕсли;
									
								КонецЕсли;
							Иначе
								Если ЗначениеЗаполнено(СтрокаПользователя.time) Тогда
									ЗаписьРегистра.ДатаПоследнейАктивности = СкорректироватьВремяСУчетомЧасовогоПояса(ВозвратЗначениеПоФиксированномуМассиву(СтрокаАктивности.time));
								Иначе
									ЗаписьРегистра.ДатаПоследнейАктивности = Дата("00010101");
								КонецЕсли;
								
								////Устаревший функционал
								//Если СтрокаПользователя.latitude <> "" и СтрокаПользователя.longitude <> "" Тогда
								//	//т.е. последние данные содержат координату
								//	ЗаписьРегистра.ДатаПоследнейАктивностиСКоординатами = ЗаписьРегистра.ДатаПоследнейАктивности;
								//	ЗаписьРегистра.Широта 	= СтрокаПользователя.latitude;
								//	ЗаписьРегистра.Долгота 	= СтрокаПользователя.longitude;
								//Иначе
								//	//координаты в последних данных нет, поэтому в регистре их не перезаписываем
								//КонецЕсли;
							КонецЕсли;						
						Иначе
							ЗаписьРегистра.ДатаПоследнейАктивности = Дата("00010101");
							//координаты не перезаписываем, потому что нет даты последней активности
						КонецЕсли;
						ЗаписьРегистра.Записать();
						Если ВыводитьОтладочныеСообщения Тогда
							Сообщить("Перезаписаны данные об активности пользователя " + Пользователь);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			//один объект
			//ПрочитатьСтрокуИзПакетаСПользователями(ПакетСписокПользователей);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


//Сбор информации о перемещениях мобильных сотрудников 

Процедура ПолучитьДанныеТрекаМобильныхСотрудников() Экспорт
	
	Если Не РазрешенОбменДанными(Ложь) Тогда
		Если мФоновыйОбмен Тогда
			мФоновыйОбменВыполненУспешно = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ВыводитьОтладочныеСообщения Тогда
		Сообщить("Запрошены данные об активности пользователей (мобильных сотрудников)..." + ТекущаяДата());
	КонецЕсли;
	
	РезультатыПодготовкиПакетаДата = СформироватьПакетСЗапросомДанныхТрекаМобильныхСотрудников();
	
	РезультатыЗаписиПакета = ЗаписатьПакет(0,"command",,,,,"get_monitoring_packets",,,РезультатыПодготовкиПакетаДата.ИмяФайлаПакета);
	РезультатыОтправки = ОтправкаДанныхНаСервер(РезультатыЗаписиПакета); 
	Если РезультатыОтправки.ОтправкаУспешна Тогда
		Если ВыводитьОтладочныеСообщения Тогда
			Сообщить("Запрос получения информации о передвижении пользователей (мобильных сотрудников) отправлен успешно!");
		КонецЕсли;
		ПакетСДанными = ПолучитьДанныеИзПакета(РезультатыОтправки);
		Если ПакетСДанными = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		Сообщить("ВНИМАНИЕ! НЕ УДАЛОСЬ отправить запрос получения информации о передевижениях (треке) мобильных сотрудников!");
	КонецЕсли;
	
	ВыполнитьПопыткуУдаленияФайла(РезультатыОтправки.ИмяПринятогоФайла);
	
КонецПроцедуры

Функция СформироватьПакетСЗапросомДанныхТрекаМобильныхСотрудников() Экспорт
	
	РезультатыПодготовкиПакетаДата = Новый Структура();
	
	ИмяФайлаПакета = ПолучитьИмяВременногоФайла("XML");
	РезультатыПодготовкиПакетаДата.Вставить("ИмяФайлаПакета", ИмяФайлаПакета);
	
	НовыйФайлДата = Новый ЗаписьXML;
	НовыйФайлДата.ОткрытьФайл(ИмяФайлаПакета);
	
	ЗаписьРегистраСинхронизацииССервером = РегистрыСведений.атл_ПеременныеСинхронизацииССерверомУМС.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСинхронизацииССервером.Прочитать();
	мИдентификаторПоследнегоОбновленияТрека = ЗаписьРегистраСинхронизацииССервером.ИдентификаторПоследнегоОбновленияТрека;

	СписокДанныхПоТрекуТип = ФабрикаXDTO.Тип("monitoring_packets_mwms", "monitoring_packets");
	
	СписокДанныхПоТрекуФабрика = ФабрикаXDTO.Создать(СписокДанныхПоТрекуТип);
	
	СписокДанныхПоТрекуФабрика.sync_id = мИдентификаторПоследнегоОбновленияТрека;
	
	ФабрикаXDTO.ЗаписатьXML(НовыйФайлДата,СписокДанныхПоТрекуФабрика);
	НовыйФайлДата.Закрыть();
	
	Возврат РезультатыПодготовкиПакетаДата;
	
КонецФункции

Процедура РегистрацияПакетаСДаннымиТрекаМобильныхСотрудников_До30112015(ПакетСДанными, РезультатРазбораВнешнегоПакета, ТипОбъекта)
	
	Если Не ПакетСДанными = Неопределено Тогда
		//заполняем список активности пользователей
		
		мИдентификаторПоследнегоОбновленияТрека = 0;
		Если ЗначениеЗаполнено(ПакетСДанными.sync_id) Тогда
			//регистрируем идентификатор запроса
			мИдентификаторПоследнегоОбновленияТрека = ПакетСДанными.sync_id;
			
			мТребуетсяДополнительныйЗапрос = ПолучитьДанныеПоляИзПакета(ПакетСДанными, "more_data_available");
			
			Если мТребуетсяДополнительныйЗапрос = "1" или мТребуетсяДополнительныйЗапрос = 1 Тогда
				мВыполнитьЗапросПоДаннымТрекаМобильныхСотрудников = Истина;
			КонецЕсли;
			
			ЗаписьРегистра = РегистрыСведений.атл_ПеременныеСинхронизацииССерверомУМС.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Прочитать();
			
			Если ЗаписьРегистра.ИдентификаторПоследнегоОбновленияТрека <> мИдентификаторПоследнегоОбновленияТрека Тогда
				ЗаписьРегистра.ИдентификаторПоследнегоОбновленияТрека = мИдентификаторПоследнегоОбновленияТрека;
				ЗаписьРегистра.Записать(Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		ПакетСписокПакетов = ПакетСДанными.packets;
		
		Если ТипЗнч(ПакетСписокПакетов) = Тип("СписокXDTO") Тогда
			КоличествоЭлементовВСписке = ПакетСписокПакетов.Количество();
			Если КоличествоЭлементовВСписке > 0 Тогда
				Для Индекс = 0 по КоличествоЭлементовВСписке-1 Цикл
					СтрокаПакета = ПакетСписокПакетов[Индекс];
					мИдентификаторПользователяИзПакета = СтрокаПакета.external_id;
					Если ЗначениеЗаполнено(мИдентификаторПользователяИзПакета) Тогда
						Попытка
							мПользовательИзПакетаДляКоординат = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка(мИдентификаторПользователяИзПакета)));
							//Сообщить("Пользователь: " + мПользовательИзПакетаДляКоординат);
						Исключение
							Сообщить("Не найден пользователь из пакета с координатами. Ссылка (" + мИдентификаторПользователяИзПакета + ").");
							//переходим к другой координате
							Продолжить;
						КонецПопытки;
					КонецЕсли;
					ИмяФайлаДанных = РазобратьСодержимоеПоляДатаБезПакета(РезультатРазбораВнешнегоПакета,
																		  ПолучитьДанныеПоляИзПакета(СтрокаПакета, "data_type"), 
																		  ТипОбъекта, 
																		  ПолучитьДанныеПоляИзПакета(СтрокаПакета, "data"), 
																		  ПолучитьДанныеПоляИзПакета(СтрокаПакета, "key_version"), 
																		  мИдентификаторПользователяИзПакета);
					Если ИмяФайлаДанных = Неопределено Тогда
						//разобрать пакет с данными не удалось
						Сообщить("Разобрать пакет с данными координат не удалось!");
					Иначе
						//НаборЗаписей = РегистрыСведений.атл_КоординатыТрека.СоздатьНаборЗаписей();
						//ТаблицаНабораЗаписей = НаборЗаписей.ВыгрузитьКолонки();
						ДатаНачалаПроцедуры = ТекущаяДата();
						//Сообщить("Начало процедуры чтения координат: " + ДатаНачалаПроцедуры);
						Текст = Новый ЧтениеТекста(ИмяФайлаДанных, КодировкаТекста.ANSI);
						Стр = Текст.ПрочитатьСтроку("],[");
						Ном = 0;
						ПредыдущийПериод = "";
						КоличествоПропущенныхЗаписей = 0;
						Пока Стр <> Неопределено Цикл // строки читаются до символа перевода строки
							Ном = Ном + 1;
							//Если Ном % 10000 = 0 Тогда
							//	ТаблицаНабораЗаписей.ЗаполнитьЗначения(ТекущаяДата(),"ДатаРегистрации");
							//	НаборЗаписей.Загрузить(ТаблицаНабораЗаписей);
							//	НаборЗаписей.Записать();
							//	ТаблицаНабораЗаписей.Очистить();
							//КонецЕсли;
							
							Стр = СтрЗаменить(Стр,"""","");
							Стр = СтрЗаменить(Стр,"T","");
							Стр = СтрЗаменить(Стр,"-","");
							Стр = СтрЗаменить(Стр,":","");
							Стр = СтрЗаменить(Стр,"[","");
							Стр = СтрЗаменить(Стр,"]","");
							
							МассивПодстрок = РазложитьСтрокуВМассивПодстрок(Стр, ",");
							
							Если МассивПодстрок.Количество() > 0 Тогда
								ПреобразованныйПериод = МассивПодстрок[4];
								
								Если ПредыдущийПериод = ПреобразованныйПериод Тогда
									КоличествоПропущенныхЗаписей = КоличествоПропущенныхЗаписей + 1;
								Иначе	
									ПредыдущийПериод = ПреобразованныйПериод;
									Попытка
										НоваяЗапись = РегистрыСведений.атл_КоординатыТрека.СоздатьМенеджерЗаписи();
										НоваяЗапись.Период = ПреобразованныйПериод;
										НоваяЗапись.Пользователь = мПользовательИзПакетаДляКоординат;
										НоваяЗапись.Долгота = МассивПодстрок[0];
										НоваяЗапись.Широта = МассивПодстрок[1];
										НоваяЗапись.Высота = МассивПодстрок[2];
										НоваяЗапись.Точность = МассивПодстрок[3];
										Если МассивПодстрок[5] = "1" Тогда
											НоваяЗапись.ИсточникКоординат = Перечисления.атл_ВидыИсточниковКоординат.GPS;
										ИначеЕсли МассивПодстрок[5] = "0" Тогда
											НоваяЗапись.ИсточникКоординат = Перечисления.атл_ВидыИсточниковКоординат.Сеть;
										КонецЕсли;
										НоваяЗапись.Скорость = МассивПодстрок[6];
										НоваяЗапись.ЗарядБатареи = МассивПодстрок[7];
										НоваяЗапись.ДатаРегистрации = ТекущаяДата();
										НоваяЗапись.Записать();
									Исключение
										ТекстОписанияОшибки = "Не удалось записать координату по сотруднику " + мПользовательИзПакетаДляКоординат + ". Координата: " + Стр;
										Сообщить(ТекстОписанияОшибки);
										атл_УправлениеМобильнымиСотрудниками.СформироватьЗаписьВЛогах(Перечисления.атл_ВидыЛогов.ОшибкаРазбораДанных, ТекстОписанияОшибки,);
									КонецПопытки;
								КонецЕсли;
							КонецЕсли;
							
							Стр = Текст.ПрочитатьСтроку("],[");
							//Только для 8.3
							//Состояние("Прочитано строк: " + Ном);
						КонецЦикла;
						
						//Если ТаблицаНабораЗаписей.Количество() > 0 Тогда
						//	ТаблицаНабораЗаписей.ЗаполнитьЗначения(ТекущаяДата(),"ДатаРегистрации");
						//	НаборЗаписей.Загрузить(ТаблицаНабораЗаписей);
						//	НаборЗаписей.Записать();
						//КонецЕсли;
						
						ДатаОкончанияПроцедуры = ТекущаяДата();
						//Сообщить("Окончание процедуры чтения координат: " + ДатаОкончанияПроцедуры);
						//Сообщить("Количество пропущенных записей  координат: " + КоличествоПропущенныхЗаписей);
						
					КонецЕсли;

				КонецЦикла;
			КонецЕсли;
			
		Иначе
			//один объект
			//ПрочитатьСтрокуИзПакетаСПользователями(ПакетСписокПользователей);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РегистрацияПакетаСДаннымиТрекаМобильныхСотрудников(ПакетСДанными, РезультатРазбораВнешнегоПакета, ТипОбъекта)
	
	Если Не ПакетСДанными = Неопределено Тогда
		//заполняем список активности пользователей
		
		мИдентификаторПоследнегоОбновленияТрека = 0;
		Если ЗначениеЗаполнено(ПакетСДанными.sync_id) Тогда
			//регистрируем идентификатор запроса
			мИдентификаторПоследнегоОбновленияТрека = ПакетСДанными.sync_id;
			
			мТребуетсяДополнительныйЗапрос = ПолучитьДанныеПоляИзПакета(ПакетСДанными, "more_data_available");
			
			Если мТребуетсяДополнительныйЗапрос = "1" или мТребуетсяДополнительныйЗапрос = 1 Тогда
				мВыполнитьЗапросПоДаннымТрекаМобильныхСотрудников = Истина;
			КонецЕсли;
			
			ЗаписьРегистра = РегистрыСведений.атл_ПеременныеСинхронизацииССерверомУМС.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Прочитать();
			
			Если ЗаписьРегистра.ИдентификаторПоследнегоОбновленияТрека <> мИдентификаторПоследнегоОбновленияТрека Тогда
				ЗаписьРегистра.ИдентификаторПоследнегоОбновленияТрека = мИдентификаторПоследнегоОбновленияТрека;
				ЗаписьРегистра.Записать(Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		ПакетСписокПакетов = ПакетСДанными.packets;
		
		Если ТипЗнч(ПакетСписокПакетов) = Тип("СписокXDTO") Тогда
			КоличествоЭлементовВСписке = ПакетСписокПакетов.Количество();
			Если КоличествоЭлементовВСписке > 0 Тогда
				Для Индекс = 0 по КоличествоЭлементовВСписке-1 Цикл
					СтрокаПакета = ПакетСписокПакетов[Индекс];
					мИдентификаторПользователяИзПакета = СтрокаПакета.external_id;
					Если ЗначениеЗаполнено(мИдентификаторПользователяИзПакета) Тогда
						Попытка
							мПользовательИзПакетаДляКоординат = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка(мИдентификаторПользователяИзПакета)));
							//Сообщить("Пользователь: " + мПользовательИзПакетаДляКоординат);
						Исключение
							Сообщить("Не найден пользователь из пакета с координатами. Ссылка (" + мИдентификаторПользователяИзПакета + ").");
							//переходим к другой координате
							Продолжить;
						КонецПопытки;
					КонецЕсли;
					ИмяФайлаДанных = РазобратьСодержимоеПоляДатаБезПакета(РезультатРазбораВнешнегоПакета,
																		  ПолучитьДанныеПоляИзПакета(СтрокаПакета, "data_type"), 
																		  ТипОбъекта, 
																		  ПолучитьДанныеПоляИзПакета(СтрокаПакета, "data"), 
																		  ПолучитьДанныеПоляИзПакета(СтрокаПакета, "key_version"), 
																		  мИдентификаторПользователяИзПакета);
					Если ИмяФайлаДанных = Неопределено Тогда
						//разобрать пакет с данными не удалось
						Сообщить("Разобрать пакет с данными координат не удалось!");
					Иначе
						//НаборЗаписей = РегистрыСведений.атл_КоординатыТрека.СоздатьНаборЗаписей();
						//ТаблицаНабораЗаписей = НаборЗаписей.ВыгрузитьКолонки();
						ДатаНачалаПроцедуры = ТекущаяДата();
						//Сообщить("Начало процедуры чтения координат: " + ДатаНачалаПроцедуры);
						Текст = Новый ЧтениеТекста(ИмяФайлаДанных, КодировкаТекста.ANSI);
						Стр = Текст.ПрочитатьСтроку("],[");
						Ном = 0;
						ТекущийПериод = Дата("00010101");
						КоличествоПропущенныхЗаписей = 0;
						
						флИзменилисьКоординаты = Ложь;
						флИзмениласьИнформацияОбУстройстве = Ложь;
						флОбновиласьИнформацииОбУстройстве = Ложь;
						СтруктураЗначенийАктивности = Новый Структура;
						
						//читаем последние данные об устройстве
						Запрос = Новый Запрос;
						Запрос.Текст = "ВЫБРАТЬ
						|	атл_ИнформацияОбУстройствеСрезПоследних.Период
						|ИЗ
						|	РегистрСведений.атл_ИнформацияОбУстройстве.СрезПоследних(, Пользователь = &Пользователь) КАК атл_ИнформацияОбУстройствеСрезПоследних";
						
						Запрос.УстановитьПараметр("Пользователь", мПользовательИзПакетаДляКоординат);
						
						Результат = Запрос.Выполнить();
						Выборка = Результат.Выбрать();
						
						Если Выборка.Количество() = 0 Тогда
							СтруктураЗначенийАктивности.Вставить("ДатаНачалаПериодаПолученияИнформацииОбУстройстве", Дата("00010101"));
						Иначе
							Выборка.Следующий();						
							СтруктураЗначенийАктивности.Вставить("ДатаНачалаПериодаПолученияИнформацииОбУстройстве", Выборка.Период);
						КонецЕсли;
						
						
						//обходим строки
						Пока Стр <> Неопределено Цикл // строки читаются до символа перевода строки
							Ном = Ном + 1;
							//Если Ном % 10000 = 0 Тогда
							//	ТаблицаНабораЗаписей.ЗаполнитьЗначения(ТекущаяДата(),"ДатаРегистрации");
							//	НаборЗаписей.Загрузить(ТаблицаНабораЗаписей);
							//	НаборЗаписей.Записать();
							//	ТаблицаНабораЗаписей.Очистить();
							//КонецЕсли;
							
							Стр = СтрЗаменить(Стр,"""","");
							Стр = СтрЗаменить(Стр,"T","");
							//Стр = СтрЗаменить(Стр,"-","");
							Стр = СтрЗаменить(Стр,":","");
							Стр = СтрЗаменить(Стр,"[","");
							Стр = СтрЗаменить(Стр,"]","");
							
							мСимвол = Найти(Стр, ";");
							СтруктураЗначений = Новый Структура;
							
							Если мСимвол = 0 Тогда
								мПервыйМассив = Стр;
								мВторойМассив = ""; 
							Иначе
								мПервыйМассив = Лев(Стр, мСимвол - 2);
								мВторойМассив = Сред(Стр, мСимвол + 2);
							КонецЕсли;
							
							ПервыйМассивПодстрок = РазложитьСтрокуВМассивПодстрок(мПервыйМассив, ",");
							ВторойМассивПодстрок = РазложитьСтрокуВМассивПодстрок(мВторойМассив, ",");
							
							Если ПервыйМассивПодстрок.Количество() > 1 Тогда								
								СтруктураЗначений.Вставить("ПреобразованныйПериод", Дата(СтрЗаменить(ПервыйМассивПодстрок[0],"-","")));
								СтруктураЗначений.Вставить("ФлагНачалаМониторинга", ?(ПервыйМассивПодстрок[1] = "1", Истина, Ложь));
								
								
								Если ТекущийПериод = СтруктураЗначений.ПреобразованныйПериод Тогда
									КоличествоПропущенныхЗаписей = КоличествоПропущенныхЗаписей + 1;
								Иначе	
									ТекущийПериод = СтруктураЗначений.ПреобразованныйПериод;
									
									////флДозаполненРегистр = Ложь;
									////ЗаписьРегистраАктивность = РегистрыСведений.атл_АктивностьПользователей.СоздатьМенеджерЗаписи();
									////ЗаписьРегистраАктивность.Пользователь = мПользовательИзПакетаДляКоординат;
									////ЗаписьРегистраАктивность.МК = Истина;
									////ЗаписьРегистраАктивность.Прочитать();
									////
									////Если Не ЗначениеЗаполнено(ЗаписьРегистраАктивность.Пользователь) Тогда
									////	ЗаписьРегистраАктивность.Пользователь = мПользовательИзПакетаДляКоординат;
									////	ЗаписьРегистраАктивность.МК = Истина;
									////КонецЕсли;
									
									//Попытка
										
										Если ПервыйМассивПодстрок.Количество() > 2 Тогда
											
											СтруктураЗначений.Вставить("Долгота",	 		    ПервыйМассивПодстрок[2]);
											СтруктураЗначений.Вставить("Широта", 	  		    ПервыйМассивПодстрок[3]);											
											СтруктураЗначений.Вставить("Точность", 		  	    ПервыйМассивПодстрок[4]);
											Если ПервыйМассивПодстрок[5] = "1" Тогда
												СтруктураЗначений.Вставить("ИсточникКоординат", Перечисления.атл_ВидыИсточниковКоординат.GPS);
											ИначеЕсли ПервыйМассивПодстрок[5] = "0" Тогда
												СтруктураЗначений.Вставить("ИсточникКоординат", Перечисления.атл_ВидыИсточниковКоординат.Сеть);
											КонецЕсли;
											
											СтруктураЗначений.Вставить("МоментЗаписиКоординат", СтрЗаменить(ПервыйМассивПодстрок[6],"-",""));
											
											НоваяЗаписьКоординат = РегистрыСведений.атл_КоординатыТрека.СоздатьМенеджерЗаписи();
											НоваяЗаписьКоординат.Период 	  = ТекущийПериод;
											НоваяЗаписьКоординат.Пользователь = мПользовательИзПакетаДляКоординат;
											
											НоваяЗаписьКоординат.Долгота	 		   = СтруктураЗначений.Долгота;
											НоваяЗаписьКоординат.Широта 	  		   = СтруктураЗначений.Широта;
											НоваяЗаписьКоординат.Точность 		  	   = СтруктураЗначений.Точность;
											НоваяЗаписьКоординат.ИсточникКоординат 	   = СтруктураЗначений.ИсточникКоординат;
											НоваяЗаписьКоординат.МоментЗаписиКоординат = СтруктураЗначений.МоментЗаписиКоординат;
											
											НоваяЗаписьКоординат.ДатаРегистрации = ТекущаяДата();
											НоваяЗаписьКоординат.Записать();
											
											Если НЕ СтруктураЗначений.Долгота = "" И НЕ СтруктураЗначений.Широта = "" Тогда
												СтруктураЗначенийАктивности.Вставить("Долгота",	 		     СтруктураЗначений.Долгота);
												СтруктураЗначенийАктивности.Вставить("Широта", 	  		     СтруктураЗначений.Широта);
												СтруктураЗначенийАктивности.Вставить("Точность", 		     СтруктураЗначений.Точность);
												СтруктураЗначенийАктивности.Вставить("ИсточникКоординат", 	 СтруктураЗначений.ИсточникКоординат);
												СтруктураЗначенийАктивности.Вставить("МоментЗаписиКоординат",СтруктураЗначений.МоментЗаписиКоординат);
												СтруктураЗначенийАктивности.Вставить("ДатаПоследнейАктивностиСКоординатами", ТекущийПериод);
												флИзменилисьКоординаты = Истина;
											КонецЕсли;
											
										КонецЕсли;
										
										
										Если ВторойМассивПодстрок.Количество() > 0 Тогда //это новый период, или изменение данных.  В пакете есть данные
											Если ВторойМассивПодстрок[0] = "1" Тогда
												СтруктураЗначений.Вставить("ВключенGPS",	Перечисления.атл_ДаНет.Да); //1 - включен
											ИначеЕсли ВторойМассивПодстрок[0] = "0" Тогда
												СтруктураЗначений.Вставить("ВключенGPS",	Перечисления.атл_ДаНет.Нет); //2 - выключен
											Иначе
												СтруктураЗначений.Вставить("ВключенGPS",	Перечисления.атл_ДаНет.ПустаяСсылка()); //нет данных
											КонецЕсли;
												
											Если ВторойМассивПодстрок[1] = "1" Тогда
												СтруктураЗначений.Вставить("ВключеныСети",	Перечисления.атл_ДаНет.Да); //1 - включен
											ИначеЕсли ВторойМассивПодстрок[1] = "0" Тогда
												СтруктураЗначений.Вставить("ВключеныСети",	Перечисления.атл_ДаНет.Нет); //2 - выключен
											Иначе
												СтруктураЗначений.Вставить("ВключеныСети",	Перечисления.атл_ДаНет.ПустаяСсылка()); //нет данных
											КонецЕсли;
											
											СтруктураЗначений.Вставить("ЗарядБатареи",	ВторойМассивПодстрок[2]);
											
											Если НЕ СтруктураЗначений.ФлагНачалаМониторинга Тогда
												//корректируем предыдущую запись
											КонецЕсли;
											//формируем новую запись
											НоваяЗаписьИнформацииОбУстройстве = РегистрыСведений.атл_ИнформацияОбУстройстве.СоздатьМенеджерЗаписи();
											НоваяЗаписьИнформацииОбУстройстве.Пользователь = мПользовательИзПакетаДляКоординат;
											НоваяЗаписьИнформацииОбУстройстве.Период 	   = ТекущийПериод;
											НоваяЗаписьИнформацииОбУстройстве.ДатаОкончанияПериода  = ТекущийПериод;
											НоваяЗаписьИнформацииОбУстройстве.ФлагНачалаМониторинга = СтруктураЗначений.ФлагНачалаМониторинга;
											
											НоваяЗаписьИнформацииОбУстройстве.ЗарядБатареи 		  = СтруктураЗначений.ЗарядБатареи;
											НоваяЗаписьИнформацииОбУстройстве.ВключенGPS   		  = СтруктураЗначений.ВключенGPS;
											НоваяЗаписьИнформацииОбУстройстве.ВключеныСети 		  = СтруктураЗначений.ВключеныСети;
											НоваяЗаписьИнформацииОбУстройстве.ДатаРегистрации 	  = ТекущаяДата();
											
											НоваяЗаписьИнформацииОбУстройстве.Записать();
											
											флИзмениласьИнформацияОбУстройстве = Истина;
											СтруктураЗначенийАктивности.Вставить("ЗарядБатареи",	СтруктураЗначений.ЗарядБатареи);
											СтруктураЗначенийАктивности.Вставить("ВключенGPS", 	  	СтруктураЗначений.ВключенGPS);
											СтруктураЗначенийАктивности.Вставить("ВключеныСети", 	СтруктураЗначений.ВключеныСети);
											СтруктураЗначенийАктивности.Вставить("ДатаНачалаПериодаПолученияИнформацииОбУстройстве", ТекущийПериод); 
											СтруктураЗначенийАктивности.Вставить("ДатаПолученияИнформацииОбУстройстве",				 ТекущийПериод);
											СтруктураЗначенийАктивности.Вставить("ФлагНачалаМониторинга", СтруктураЗначений.ФлагНачалаМониторинга);
											
										Иначе
											//это старый период. Корректируем старую запись информации путем замены даты окончания
											//корректируем предыдущую запись устанавливая дату окончания периода
											
											Если ЗначениеЗаполнено(СтруктураЗначенийАктивности.ДатаНачалаПериодаПолученияИнформацииОбУстройстве) Тогда
												ВыборкаЗаписейОбУстройстве = РегистрыСведений.атл_ИнформацияОбУстройстве.Выбрать(СтруктураЗначенийАктивности.ДатаНачалаПериодаПолученияИнформацииОбУстройстве, 
																				СтруктураЗначенийАктивности.ДатаНачалаПериодаПолученияИнформацииОбУстройстве, 
																				Новый Структура("Пользователь", мПользовательИзПакетаДляКоординат));
												Если ВыборкаЗаписейОбУстройстве.Следующий() > 0 Тогда
													НоваяЗаписьИнформацииОбУстройстве = ВыборкаЗаписейОбУстройстве.ПолучитьМенеджерЗаписи();
													НоваяЗаписьИнформацииОбУстройстве.Прочитать();
													НоваяЗаписьИнформацииОбУстройстве.ДатаОкончанияПериода = ТекущийПериод;
													НоваяЗаписьИнформацииОбУстройстве.Записать();
														
													флОбновиласьИнформацииОбУстройстве = Истина;
													СтруктураЗначенийАктивности.Вставить("ДатаПолученияИнформацииОбУстройстве",	ТекущийПериод);
												КонецЕсли;
											КонецЕсли;
										КонецЕсли;
									
									//Исключение
									//	ТекстОписанияОшибки = "Не удалось записать координату или информацию об устройстве по сотруднику " + мПользовательИзПакетаДляКоординат + ". Координата: " + Стр;
									//	Сообщить(ТекстОписанияОшибки);
									//	атл_УправлениеМобильнымиСотрудниками.СформироватьЗаписьВЛогах(Перечисления.атл_ВидыЛогов.ОшибкаРазбораДанных, ТекстОписанияОшибки,);
									//КонецПопытки;
									
									////Если флДозаполненРегистр Тогда
									////	Попытка																																	
									////		ЗаписьРегистраАктивность.Записать();
									////	Исключение
									////		ТекстОписанияОшибки = "Не удалось перезаписать дополнительную информацию активности сотрудников " + мПользовательИзПакетаДляКоординат + ". Координата: " + Стр;
									////		Сообщить(ТекстОписанияОшибки);
									////		атл_УправлениеМобильнымиСотрудниками.СформироватьЗаписьВЛогах(Перечисления.атл_ВидыЛогов.ОшибкаРазбораДанных, ТекстОписанияОшибки,);	
									////	КонецПопытки;
									////КонецЕсли;
								КонецЕсли;
								
							КонецЕсли;
										
							
							Стр = Текст.ПрочитатьСтроку("],[");
							//Только для 8.3
							//Состояние("Прочитано строк: " + Ном);
						КонецЦикла;
						
						//Если ТаблицаНабораЗаписей.Количество() > 0 Тогда
						//	ТаблицаНабораЗаписей.ЗаполнитьЗначения(ТекущаяДата(),"ДатаРегистрации");
						//	НаборЗаписей.Загрузить(ТаблицаНабораЗаписей);
						//	НаборЗаписей.Записать();
						//КонецЕсли;
						
						ДатаОкончанияПроцедуры = ТекущаяДата();
						//Сообщить("Окончание процедуры чтения координат: " + ДатаОкончанияПроцедуры);
						//Сообщить("Количество пропущенных записей  координат: " + КоличествоПропущенныхЗаписей);
						
					КонецЕсли;

					Если флИзменилисьКоординаты ИЛИ флИзмениласьИнформацияОбУстройстве ИЛИ флОбновиласьИнформацииОбУстройстве Тогда
						
						//читаем, либо создаем запись по пользователю
						ЗаписьРегистраАктивность = РегистрыСведений.атл_АктивностьПользователей.СоздатьМенеджерЗаписи();
						ЗаписьРегистраАктивность.Пользователь = мПользовательИзПакетаДляКоординат;
						ЗаписьРегистраАктивность.МК = Истина;
						ЗаписьРегистраАктивность.Прочитать();
						
						Если Не ЗначениеЗаполнено(ЗаписьРегистраАктивность.Пользователь) Тогда
							ЗаписьРегистраАктивность.Пользователь = мПользовательИзПакетаДляКоординат;
							ЗаписьРегистраАктивность.МК = Истина;
						КонецЕсли;
						
						Если флИзменилисьКоординаты Тогда
							ЗаписьРегистраАктивность.Долгота 		   					  = СтруктураЗначенийАктивности.Долгота; 
							ЗаписьРегистраАктивность.Широта 		   					  = СтруктураЗначенийАктивности.Широта;
							ЗаписьРегистраАктивность.ИсточникКоординат 					  = СтруктураЗначенийАктивности.ИсточникКоординат;
							ЗаписьРегистраАктивность.Точность 		   					  = СтруктураЗначенийАктивности.Точность;
							ЗаписьРегистраАктивность.ДатаПоследнейАктивностиСКоординатами = СтруктураЗначенийАктивности.ДатаПоследнейАктивностиСКоординатами;
							ЗаписьРегистраАктивность.МоментЗаписиКоординат 				  = СтруктураЗначенийАктивности.МоментЗаписиКоординат;
						КонецЕсли;
						
						Если флИзмениласьИнформацияОбУстройстве Тогда
							ЗаписьРегистраАктивность.ЗарядБатареи 		 = СтруктураЗначенийАктивности.ЗарядБатареи;
							ЗаписьРегистраАктивность.ВключенGPS	  		 = СтруктураЗначенийАктивности.ВключенGPS;
							ЗаписьРегистраАктивность.ВключеныСети 		 = СтруктураЗначенийАктивности.ВключеныСети;
							
							ЗаписьРегистраАктивность.ДатаНачалаПериодаПолученияИнформацииОбУстройстве = СтруктураЗначенийАктивности.ДатаНачалаПериодаПолученияИнформацииОбУстройстве;
							ЗаписьРегистраАктивность.ДатаПолученияИнформацииОбУстройстве 			  = СтруктураЗначенийАктивности.ДатаПолученияИнформацииОбУстройстве;
							ЗаписьРегистраАктивность.ФлагНачалаМониторинга					 		  = СтруктураЗначенийАктивности.ФлагНачалаМониторинга;
						ИначеЕсли флОбновиласьИнформацииОбУстройстве Тогда
							ЗаписьРегистраАктивность.ДатаПолученияИнформацииОбУстройстве 			  = СтруктураЗначенийАктивности.ДатаПолученияИнформацииОбУстройстве;
						КонецЕсли;
						
						Попытка																																	
							ЗаписьРегистраАктивность.Записать();
						Исключение
							ТекстОписанияОшибки = "Не удалось перезаписать дополнительную информацию активности сотрудников " + мПользовательИзПакетаДляКоординат + ". Координата: " + Стр;
							Сообщить(ТекстОписанияОшибки);
							атл_УправлениеМобильнымиСотрудниками.СформироватьЗаписьВЛогах(Перечисления.атл_ВидыЛогов.ОшибкаРазбораДанных, ТекстОписанияОшибки,);	
						КонецПопытки;
					КонецЕсли;
					
				КонецЦикла;
				
											
			КонецЕсли;
			
		Иначе
			//один объект
			//ПрочитатьСтрокуИзПакетаСПользователями(ПакетСписокПользователей);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры



//Состояние учетной записи

Процедура ВывестиИнформациюПоПользователю(СтрокаСПользователем)
	
	Если ЗначениеЗаполнено(СтрокаСПользователем.external_id) Тогда
		Попытка
			ПользовательИзПакета = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка(СтрокаСПользователем.external_id)));
			Сообщить("Пользователь: " + ПользовательИзПакета);
		Исключение
			Сообщить("Пользователь: не найден, ссылка ("+СтрокаСПользователем.external_id+")");
		КонецПопытки;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаСПользователем.login) Тогда
		Сообщить("Логин: " + СтрокаСПользователем.login);
	КонецЕсли;
	ПользовательАвторизован = СтрокаСПользователем.authorized;
	Если ЗначениеЗаполнено(ПользовательАвторизован) Тогда
		Если ПользовательАвторизован = 0 Тогда
			Сообщить("НЕ авторизован");
		ИначеЕсли ПользовательАвторизован = 1 Тогда
			Сообщить("Авторизован");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РегистрацияПакетаСДаннымиОСостоянииУчетнойЗаписи(ПакетСДанными, РезультатРазбораВнешнегоПакета)
	
	Если Не ПакетСДанными = Неопределено Тогда
		
		Если мОтправленЗапросОКоличествеДоступныхЛогинов Тогда
			//этот пакет служебный с инфой об количестве лицензий
			Если ЗначениеЗаполнено(ПакетСДанными.licence_count) Тогда
				КоличествоДоступныхЛогинов = ПакетСДанными.licence_count;
			КонецЕсли;
			
			мОтправленЗапросОКоличествеДоступныхЛогинов = Ложь;
			Возврат;
			
		КонецЕсли;
		
		Сообщить("Получены данные о состоянии учетной записи:");
		
		Если ЗначениеЗаполнено(ПакетСДанными.licence_count) Тогда
			Сообщить("Количество лицензий: " + ПакетСДанными.licence_count);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПакетСДанными.tariff) Тогда
			Сообщить("Тариф: " + ПакетСДанными.tariff);
		КонецЕсли;
		
		АктивностьИзПакета = ПакетСДанными.active;
		Если АктивностьИзПакета <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(АктивностьИзПакета.from_datetime) Тогда
				Сообщить("Дата открытия доступа: " + ВозвратЗначениеПоФиксированномуМассиву(АктивностьИзПакета.from_datetime));
			Иначе
				Сообщить("Дата открытия доступа не указана");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(АктивностьИзПакета.to_datetime) Тогда
				Сообщить("Дата закрытия доступа: " + ВозвратЗначениеПоФиксированномуМассиву(АктивностьИзПакета.to_datetime));
			Иначе
				Сообщить("Дата закрытия доступа не указана");
			КонецЕсли;
			
		КонецЕсли;
		
		СписокМобильныхПользователей = ПакетСДанными.mobile_users;
		Если СписокМобильныхПользователей <> Неопределено Тогда
			МобильныеПользователи = СписокМобильныхПользователей.mobile_user;
			Если ЗначениеЗаполнено(МобильныеПользователи) Тогда
				Если ТипЗнч(СписокМобильныхПользователей.mobile_user) = Тип("СписокXDTO") Тогда
					КоличествоПользователейВСписке = СписокМобильныхПользователей.mobile_user.Количество();
					Для Сч = 0 по КоличествоПользователейВСписке-1 Цикл
						ВывестиИнформациюПоПользователю(СписокМобильныхПользователей.mobile_user[Сч]);
					КонецЦикла;
				ИначеЕсли ТипЗнч(СписокМобильныхПользователей.mobile_user) = Тип("ОбъектXDTO") Тогда
					ВывестиИнформациюПоПользователю(СписокМобильныхПользователей.mobile_user);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьИнформациюОСостоянииУчетнойЗаписи() Экспорт
	
	Если Не РазрешенОбменДанными() Тогда
		Возврат;
	КонецЕсли;
	
	//РезультатыПодготовкиПакетаДата = СформироватьПакетСЗапросомАктивностиМобильныхСотрудников();
	ОбновитьКукиВЗаголовкеИзРегистра();
	РезультатыЗаписиПакета = ЗаписатьПакет(0,"command",,,,,"get_company_info",,,);
	РезультатыОтправки = ОтправкаДанныхНаСервер(РезультатыЗаписиПакета);
	Если РезультатыОтправки.ОтправкаУспешна Тогда
		Если ВыводитьОтладочныеСообщения Тогда
			Сообщить("Запрос получения информации о состоянии учетной записи отправлен успешно!");
		КонецЕсли;
		ПакетСДанными = ПолучитьДанныеИзПакета(РезультатыОтправки);
		Если ПакетСДанными = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		Сообщить("ВНИМАНИЕ! НЕ УДАЛОСЬ отправить запрос получения информации о состоянии учетной записи!");
	КонецЕсли;
	
	ВыполнитьПопыткуУдаленияФайла(РезультатыОтправки.ИмяПринятогоФайла);
	
	
КонецПроцедуры


//Выгрузка логинов

Процедура ПерезаполнитьДанные1С(ТекущаяСтрока) Экспорт
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ПользовательВ1С) Тогда
		ЗаписьРегистра = РегистрыСведений.атл_НастройкиПодключенияМобильныхСотрудников.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Пользователь = ТекущаяСтрока.ПользовательВ1С;
		ЗаписьРегистра.Прочитать();
		ТекущаяСтрока.ЛогинВ1С 					 = ЗаписьРегистра.ЛогинМК;
		ТекущаяСтрока.ПарольВ1С 				 = ЗаписьРегистра.ПарольМК;
		ТекущаяСтрока.ЗаписыватьТрекПоРасписаниюВ1С 				= ЗаписьРегистра.ЗаписыватьТрекПоРасписанию;
		ТекущаяСтрока.ЗаписыватьКоординатыСобытийПоРасписаниюВ1С 	= ЗаписьРегистра.ЗаписыватьКоординатыСобытийПоРасписанию;
		ТекущаяСтрока.ПолучатьИнформациюОТекущемМестонахожденииВ1С  = ЗаписьРегистра.ПолучатьИнформациюОТекущемМестонахождении;
	Иначе
		ТекущаяСтрока.ЛогинВ1С 		= Справочники.Пользователи.ПустаяСсылка();
		ТекущаяСтрока.ПарольВ1С 	= "";
		ТекущаяСтрока.ЗаписыватьТрекПоРасписаниюВ1С 				= Ложь;
		ТекущаяСтрока.ЗаписыватьКоординатыСобытийПоРасписаниюВ1С 	= Ложь;
		ТекущаяСтрока.ПолучатьИнформациюОТекущемМестонахожденииВ1С 	= Ложь;
	КонецЕсли;	
	
КонецПроцедуры

Функция ДополнитьФабрикуНастройкамиПользователя(СписокНастроекВложенныйТип, НастройкаТип, СтрокаПользователя)
	
	СписокНастроекВложенныйФабрика			= ФабрикаXDTO.Создать(СписокНастроекВложенныйТип);
	
	НастройкиФабрика  = ФабрикаXDTO.Создать(НастройкаТип);
	НастройкиФабрика.name  = "track_location_recording";
	НастройкиФабрика.value = ?(СтрокаПользователя.ЗаписыватьТрекПоРасписаниюВ1С, "1", "0");
	СписокНастроекВложенныйФабрика.setting.Добавить(НастройкиФабрика);
	
	НастройкиФабрика  = ФабрикаXDTO.Создать(НастройкаТип);
	НастройкиФабрика.name  = "event_location_recording";
	НастройкиФабрика.value = ?(СтрокаПользователя.ЗаписыватьКоординатыСобытийПоРасписаниюВ1С, "1", "0");
	СписокНастроекВложенныйФабрика.setting.Добавить(НастройкиФабрика);
	
	НастройкиФабрика  = ФабрикаXDTO.Создать(НастройкаТип);
	НастройкиФабрика.name  = "current_location_recording";
	НастройкиФабрика.value = ?(СтрокаПользователя.ПолучатьИнформациюОТекущемМестонахожденииВ1С, "1", "0");
	СписокНастроекВложенныйФабрика.setting.Добавить(НастройкиФабрика);	
	
	НастройкиФабрика  = ФабрикаXDTO.Создать(НастройкаТип);
	НастройкиФабрика.name  = "remind_on_planned_visit";
	НастройкиФабрика.value = ?(СтрокаПользователя.НапоминатьОЗадачеВМоментЗапланированогоНачалаРаботВ1С, "1", "0");
	СписокНастроекВложенныйФабрика.setting.Добавить(НастройкиФабрика);
	
	НастройкиФабрика  = ФабрикаXDTO.Создать(НастройкаТип);
	НастройкиФабрика.name  = "remind_before_planned_visit";
	НастройкиФабрика.value = СтрокаПользователя.КоличествоМинутЗаКотороеНапоминатьОЗадачеДоЗапланированогоНачалаРаботВ1С;
	СписокНастроекВложенныйФабрика.setting.Добавить(НастройкиФабрика);
	
	НастройкиФабрика  = ФабрикаXDTO.Создать(НастройкаТип);
	НастройкиФабрика.name  = "remind_on_arrived";
	НастройкиФабрика.value = ?(СтрокаПользователя.НапоминатьОНеобходимостиИзмененияСтатусаВМоментПрибытияНаМестоВыполненияРаботВ1С, "1", "0");
	СписокНастроекВложенныйФабрика.setting.Добавить(НастройкиФабрика);
	
	НастройкиФабрика  = ФабрикаXDTO.Создать(НастройкаТип);
	НастройкиФабрика.name  = "remind_on_leave";
	НастройкиФабрика.value = ?(СтрокаПользователя.НапоминатьОНеобходимостиИзмененияСтатусаВМоментВыходаИзЗоныМестаВыполненияРаботВ1С, "1", "0");
	СписокНастроекВложенныйФабрика.setting.Добавить(НастройкиФабрика);
		
	НастройкиФабрика  = ФабрикаXDTO.Создать(НастройкаТип);
	НастройкиФабрика.name  = "remind_cycle_on_new_task";
	НастройкиФабрика.value = ?(СтрокаПользователя.ПовторятьНапоминаниеОНовойЗадачеВ1С, "1", "0");
	СписокНастроекВложенныйФабрика.setting.Добавить(НастройкиФабрика);
	
	Возврат СписокНастроекВложенныйФабрика;
	
КонецФункции

Функция СформироватьПакетСДаннымиПоСпискуПользователей() Экспорт
	
	РезультатыПодготовкиПакетаДата = Новый Структура();
	
	ИмяФайлаПакета = ПолучитьИмяВременногоФайла("XML");
	РезультатыПодготовкиПакетаДата.Вставить("ИмяФайлаПакета", ИмяФайлаПакета);
	
	НовыйФайлДата = Новый ЗаписьXML;
	НовыйФайлДата.ОткрытьФайл(ИмяФайлаПакета);
	
	СписокПользователейТип 					= ФабрикаXDTO.Тип("request_update_users_mwms", "request_update_users");
	СписокПользователейВложенныйТип 		= ФабрикаXDTO.Тип("request_update_users_mwms", "users");
	СписокНастроекВложенныйТип				= ФабрикаXDTO.Тип("request_update_users_mwms", "settings");
		
	ПользовательТип 						= ФабрикаXDTO.Тип("request_update_users_mwms", "user");
	СсылкаНаПользователяТип 				= ФабрикаXDTO.Тип("request_update_users_mwms", "order");
	НастройкаТип 							= ФабрикаXDTO.Тип("request_update_users_mwms", "setting");
	

	
	СписокПользователейФабрика 				= ФабрикаXDTO.Создать(СписокПользователейТип);
	СписокПользователейВложенныйФабрика 	= ФабрикаXDTO.Создать(СписокПользователейВложенныйТип);
	
	Для Каждого Стр из ТаблицаЛогинов Цикл
		
		//сначала обновим информацию по строке из 1с
		ПерезаполнитьДанные1С(Стр);
		
		Если Стр.ВыполняемоеДействие = Перечисления.атл_ВидыВыполняемыхСПользователямиДействий.НеВыбрано Тогда
			Продолжить;
		КонецЕсли;		
		
		ПропуститьПользователя = Ложь;
		ПользовательФабрика = ФабрикаXDTO.Создать(ПользовательТип);
		Если ЗначениеЗаполнено(Стр.ИдентификаторЛогинаНаСервере) Тогда
			
			Если Стр.ВыполняемоеДействие = Перечисления.атл_ВидыВыполняемыхСПользователямиДействий.УдалитьНаСервере Тогда
				//удаляем имеющегося пользователя
				ПользовательФабрика.action = "delete";
				Если ЗначениеЗаполнено(Стр.Идентификатор1СНаСервере) Тогда
					ПользовательФабрика.uid1c = СокрЛП(Стр.Идентификатор1СНаСервере);
				Иначе
					Если ЗначениеЗаполнено(Стр.ПользовательВ1С) Тогда
						ПользовательФабрика.uid1c = СокрЛП(Стр.ПользовательВ1С.УникальныйИдентификатор());
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Стр.ВыполняемоеДействие = Перечисления.атл_ВидыВыполняемыхСПользователямиДействий.ОтключитьУстройствоНаСервере Тогда
				//удаляем имеющегося пользователя
				ПользовательФабрика.action = "clear_authorized";
				Если ЗначениеЗаполнено(Стр.Идентификатор1СНаСервере) Тогда
					ПользовательФабрика.uid1c = СокрЛП(Стр.Идентификатор1СНаСервере);
				Иначе
					Если ЗначениеЗаполнено(Стр.ПользовательВ1С) Тогда
						ПользовательФабрика.uid1c = СокрЛП(Стр.ПользовательВ1С.УникальныйИдентификатор());
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Стр.ВыполняемоеДействие = Перечисления.атл_ВидыВыполняемыхСПользователямиДействий.ИзменитьЛогинПароль Тогда
				//изменяем имеющегося пользователя
				ПользовательФабрика.action = "update";
				ПользовательФабрика.uid1c = СокрЛП(Стр.ПользовательВ1С.УникальныйИдентификатор());
				Если Не ЗначениеЗаполнено(СокрЛП(Стр.ЛогинВ1С)) Тогда
					Сообщить("У пользователя '" + Стр.ПользовательВ1С + "' не указан логин. Пользователь пропущен!", СтатусСообщения.Важное);
					ПропуститьПользователя = Истина;
				Иначе
					ПользовательФабрика.login = СокрЛП(Стр.ЛогинВ1С);
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СокрЛП(Стр.ПарольВ1С)) Тогда
					Сообщить("У пользователя '" + Стр.ПользовательВ1С + "' не указан пароль. Пользователь пропущен!", СтатусСообщения.Важное);
					ПропуститьПользователя = Истина;
				Иначе
					ПользовательФабрика.pass  = ХэшированиеСтроки(СокрЛП(Стр.ПарольВ1С));
				КонецЕсли;
				
				Если ПропуститьПользователя Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли Стр.ВыполняемоеДействие = Перечисления.атл_ВидыВыполняемыхСПользователямиДействий.ОбновитьНастройки Тогда
				//изменяем имеющегося пользователя				
				ПользовательФабрика.action = "update";
				ПользовательФабрика.uid1c = СокрЛП(Стр.ПользовательВ1С.УникальныйИдентификатор());
				
				ПользовательФабрика.settings = ДополнитьФабрикуНастройкамиПользователя(СписокНастроекВложенныйТип, НастройкаТип, Стр);
				
			КонецЕсли;
			
		Иначе
			Если Стр.ВыполняемоеДействие = Перечисления.атл_ВидыВыполняемыхСПользователямиДействий.ДобавитьНаСервер Тогда
				//создаем нового пользователя
				Если Не ЗначениеЗаполнено(СокрЛП(Стр.ЛогинВ1С)) Тогда
					Сообщить("У пользователя '" + Стр.ПользовательВ1С + "' не указан логин. Пользователь пропущен!", СтатусСообщения.Важное);
					ПропуститьПользователя = Истина;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(СокрЛП(Стр.ПарольВ1С)) Тогда
					Сообщить("У пользователя '" + Стр.ПользовательВ1С + "' не указан пароль. Пользователь пропущен!", СтатусСообщения.Важное);
					ПропуститьПользователя = Истина;
				КонецЕсли;
				Если ПропуститьПользователя Тогда
					Продолжить;
				КонецЕсли;
				ПользовательФабрика.action = "insert";
				ПользовательФабрика.uid1c = СокрЛП(Стр.ПользовательВ1С.УникальныйИдентификатор());
				ПользовательФабрика.login = СокрЛП(Стр.ЛогинВ1С);
				ПользовательФабрика.pass = ХэшированиеСтроки(СокрЛП(Стр.ПарольВ1С));
				
				ПользовательФабрика.settings = ДополнитьФабрикуНастройкамиПользователя(СписокНастроекВложенныйТип, НастройкаТип, Стр);
				
			КонецЕсли;
		КонецЕсли;
		
		СписокПользователейВложенныйФабрика.user.Добавить(ПользовательФабрика);
	КонецЦикла;
	СписокПользователейФабрика.users = СписокПользователейВложенныйФабрика;
	
	//здесь должна быть проверка необходимости выгрузки очередности пользователей...
	СсылкаНаПользователяФабрика		  = ФабрикаXDTO.Создать(СсылкаНаПользователяТип);
	Для Каждого Стр из ТаблицаЛогинов Цикл
		Если ЗначениеЗаполнено(Стр.Идентификатор1СНаСервере) Тогда
			СсылкаНаПользователяФабрика.uid1c.Добавить(СокрЛП(Стр.Идентификатор1СНаСервере));
		Иначе
			Если ЗначениеЗаполнено(Стр.ПользовательВ1С) Тогда
				СсылкаНаПользователяФабрика.uid1c.Добавить(СокрЛП(Стр.ПользовательВ1С.УникальныйИдентификатор()));
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	СписокПользователейФабрика.ordering.Добавить(СсылкаНаПользователяФабрика);
	
	ФабрикаXDTO.ЗаписатьXML(НовыйФайлДата,СписокПользователейФабрика);
	НовыйФайлДата.Закрыть();
	
	//Проверяем есть ли что-то для выгрузки
	Если СсылкаНаПользователяФабрика.uid1c.Количество() = 0 И 
		СписокПользователейВложенныйФабрика.user.Количество() = 0 Тогда
		РезультатыПодготовкиПакетаДата.Вставить("ЕстьДанныеДляВыгрузки", Ложь);
	Иначе
		РезультатыПодготовкиПакетаДата.Вставить("ЕстьДанныеДляВыгрузки", Истина);
	КонецЕсли;
	
	Возврат РезультатыПодготовкиПакетаДата;
	
КонецФункции

Функция ПрочитатьСтрокуИзПакетаСПользователямиРезультатаСинхронизации(Элемент)
	
	ТекстСообщенияОбОшибкахПоПользователю = "";
	ДействиеПриОбновлении 		    = Элемент["action"];
	
	ОбновлениеЛогина 			    = Элемент["login_update"];
	ОбновлениеПароля 			    = Элемент["pass_update"];
	
	ОбновлениеФинализации 		    = Элемент["finalize_update"];
	
	ОшибкаПриОбновленииПользователя = Элемент["error"];
	
	Если ОшибкаПриОбновленииПользователя = Неопределено Тогда
		//ошибок нет
	Иначе
		КодОшибкиПоПользователю 	 = ОшибкаПриОбновленииПользователя.code;
		ОписаниеОшибкиПоПользователю = ОшибкаПриОбновленииПользователя.description;
		
		ТекстСообщенияОбОшибкахПоПользователю = "Обнаружена ошибка при синхронизации!
		|Код ошибки: " + КодОшибкиПоПользователю + "
		|Описание ошибки: " + ОписаниеОшибкиПоПользователю;
		Сообщить("" + ТекстСообщенияОбОшибкахПоПользователю);
		
	КонецЕсли;
	
	Возврат ТекстСообщенияОбОшибкахПоПользователю;
	
КонецФункции

Функция ЕстьОшибкиСинхронизацииПользователейССервером(РезультатыОтправки) Экспорт
	
	ЕстьОшибкиСинхронизации = Истина;
	
	ПакетСДанными = ПолучитьДанныеИзПакета(РезультатыОтправки);
	
	Если Не ПакетСДанными = Неопределено Тогда
		//Разбираем результат синхронизации
		
		ПакетСписокПользователейСинхронизацииОбщий = ПакетСДанными.users;
		ПакетСписокПользователейСинхронизации = ПакетСписокПользователейСинхронизацииОбщий.user;
		ТекстСообщенияОбОшибкахПоПользователю = "";
		
		Если ТипЗнч(ПакетСписокПользователейСинхронизации) = Тип("СписокXDTO") Тогда
			КоличествоЭлементовВСписке = ПакетСписокПользователейСинхронизации.Количество();
			Если КоличествоЭлементовВСписке > 0 Тогда
				Для Индекс = 0 по КоличествоЭлементовВСписке-1 Цикл
					Элемент = ПакетСписокПользователейСинхронизации[Индекс];
					ТекстСообщенияОбОшибкахПоПользователю = ПрочитатьСтрокуИзПакетаСПользователямиРезультатаСинхронизации(Элемент);
					Сообщить("" + ТекстСообщенияОбОшибкахПоПользователю);
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			//один объект
			ТекстСообщенияОбОшибкахПоПользователю = ПрочитатьСтрокуИзПакетаСПользователямиРезультатаСинхронизации(ПакетСписокПользователейСинхронизации);
			Сообщить("" + ТекстСообщенияОбОшибкахПоПользователю);
		КонецЕсли;
		
		ПакетОшибкиСинхронизации = ПакетСДанными.error_update_users;
		Если ПакетОшибкиСинхронизации = Неопределено Тогда
			//ошибок нет
			ЕстьОшибкиСинхронизации = Ложь;
		Иначе
			ЕстьОшибкиСинхронизации = Истина;
			КодОшибкиСинхронизации = ПакетОшибкиСинхронизации.code;
			ОписаниеОшибкиСинхронизации = ПакетОшибкиСинхронизации.description;
			Сообщить("Обнаружена ошибка при синхронизации!
			|Код ошибки: " + КодОшибкиСинхронизации + "
			|Описание ошибки: " + ОписаниеОшибкиСинхронизации);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕстьОшибкиСинхронизации;
	
КонецФункции

Функция ВыгрузитьЛогиныНаСервер() Экспорт
	
	РезультатыПодготовкиПакетаДата = СформироватьПакетСДаннымиПоСпискуПользователей();
	
	Если Не РезультатыПодготовкиПакетаДата.ЕстьДанныеДляВыгрузки Тогда
		РезультатыОтправки = Новый Структура();
		РезультатыОтправки.Вставить("ЕстьДанныеДляВыгрузки", Ложь);
		Сообщить("Нет данных для синхронизации!");
		Возврат РезультатыОтправки;	
	КонецЕсли;
	
	РезультатыЗаписиПакета = ЗаписатьПакет(0,"command",,,,,"update_users",,,РезультатыПодготовкиПакетаДата.ИмяФайлаПакета);
	
	РезультатыОтправки = ОтправкаДанныхНаСервер(РезультатыЗаписиПакета);
	РезультатыОтправки.Вставить("ЕстьДанныеДляВыгрузки", Истина);
	
	Если РезультатыОтправки.ОтправкаУспешна Тогда
		Если ВыводитьОтладочныеСообщения Тогда
			Сообщить("Запрос для обновления данных о пользователях МК на сервере отправлен успешно");
		КонецЕсли;
	Иначе
		Сообщить("ВНИМАНИЕ! Запрос для обновления данных о пользователях МК на сервере НЕ отправлен!");
	КонецЕсли;
	
	//здесь файл удалять не нужно, т.к. результат еще будет использоваться
	//ВыполнитьПопыткуУдаленияФайла(РезультатыОтправки.ИмяПринятогоФайла);
	
	Возврат РезультатыОтправки;
	
КонецФункции


//Шифрование

Функция ПолучитьКлючШифрованияПоНомеруВерсииОЛЕ(НомерВерсииКлюча)
	
	РезультатПоиска = Новый Структура;
	
	//сначала ищем в таблице ключей шифрования
	РезультатПоискаВТаблицеКлючей = мТаблицаКлючейШифрованияОЛЕ.Найти(НомерВерсииКлюча, "ВерсияКлючаШифрования");
	Если РезультатПоискаВТаблицеКлючей <> Неопределено Тогда
		Если РезультатПоискаВТаблицеКлючей.КлючМожетИспользоваться Тогда
			//ключ найден и проверен
			РезультатПоиска.Вставить("КлючОпределен", Истина);
			РезультатПоиска.Вставить("ОписаниеРезультатовПоиска", "Ключ с номером версии """ + НомерВерсииКлюча + """ найден!");
			РезультатПоиска.Вставить("КлючШифрования",  СокрЛП(РезультатПоискаВТаблицеКлючей.КлючШифрования));
			РезультатПоиска.Вставить("САКлюч", 			РезультатПоискаВТаблицеКлючей.САКлюч);
			РезультатПоиска.Вставить("Ключ", 			РезультатПоискаВТаблицеКлючей.Ключ);
			Возврат РезультатПоиска;
		Иначе
			//в ключе есть ошибка, данный ключ использоваться не может...
			РезультатПоиска.Вставить("КлючОпределен", Ложь);
			РезультатПоиска.Вставить("ОписаниеРезультатовПоиска", "Ключ с номером версии """ + НомерВерсииКлюча + """ найден!");
			РезультатПоиска.Вставить("КлючШифрования", СокрЛП(РезультатПоискаВТаблицеКлючей.КлючШифрования));
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЕсли;
	
	//найти не удалось, либо ключ неверен
	ЭлементНайденныйКлюч = Справочники.атл_КлючиШифрования.НайтиПоКоду(НомерВерсииКлюча);
	РезультатПоиска = Новый Структура;
	Если ЭлементНайденныйКлюч = Неопределено Тогда
		//неверно задан номер версии для поиска
		РезультатПоиска.Вставить("КлючОпределен", Ложь);
		РезультатПоиска.Вставить("ОписаниеРезультатовПоиска", "Неверно задан номер версии ключа для поиска ( """ + НомерВерсииКлюча + """ )!");
	ИначеЕсли Не ЗначениеЗаполнено(ЭлементНайденныйКлюч) Тогда
		//не нашли по номеру версии
		РезультатПоиска.Вставить("КлючОпределен", Ложь);
		РезультатПоиска.Вставить("ОписаниеРезультатовПоиска", "Не удалось найти номер версии ключа """ + НомерВерсииКлюча + """ !");
	Иначе
		//нашли
		//добавляем ключ в таблицу ключей, чтобы в следующий раз уже не искать...
		НовыйКлюч = мТаблицаКлючейШифрованияОЛЕ.Добавить();
		НовыйКлюч.ВерсияКлючаШифрования = НомерВерсииКлюча;
		НовыйКлюч.КлючШифрования 		= СокрЛП(ЭлементНайденныйКлюч.Наименование);
		НовыйКлюч.ЭлементКлючШифрования = ЭлементНайденныйКлюч;
		
		ТекстОЛЕ = Новый COMОбъект("System.Text.UTF8Encoding");
		КриптоSHA512 = Новый COMОбъект("System.Security.Cryptography.SHA256Managed");
		saKey  = КриптоSHA512.ComputeHash_2(ТекстОЛЕ.GetBytes_4(НовыйКлюч.КлючШифрования)).Выгрузить();
		ключ=Новый COMSafeArray("VT_UI1",32); 
		Для Ит = 0 ПО 31 Цикл 
			ключ.SetValue(Ит,saKey[Ит]);
		КонецЦикла;
		saIV=Новый COMSafeArray("VT_UI1",16); 
		Для Ит = 0 ПО 15 Цикл 
			saIV.SetValue(Ит,0);
		КонецЦикла;
		НовыйКлюч.САКлюч = saIV;
		НовыйКлюч.Ключ 	 = ключ;
		
		//выполняем проверку ключа шифрования...
		Если атл_УправлениеМобильнымиСотрудниками.ПроверитьКлючШифрования(НовыйКлюч.КлючШифрования) Тогда
			НовыйКлюч.КлючМожетИспользоваться = Истина;
			РезультатПоиска.Вставить("КлючОпределен", Истина);
			РезультатПоиска.Вставить("ОписаниеРезультатовПоиска", "Ключ с номером версии """ + НомерВерсииКлюча + """ найден!");
			РезультатПоиска.Вставить("КлючШифрования",  СокрЛП(ЭлементНайденныйКлюч.Наименование));
			РезультатПоиска.Вставить("САКлюч", 			НовыйКлюч.САКлюч);
			РезультатПоиска.Вставить("Ключ", 			НовыйКлюч.Ключ);
		Иначе
			НовыйКлюч.КлючМожетИспользоваться = Ложь;
			РезультатПоиска.Вставить("КлючОпределен", Ложь);
			РезультатПоиска.Вставить("ОписаниеРезультатовПоиска", "Ключ с номером версии """ + НомерВерсииКлюча + """ найден, но может использоваться!");
		КонецЕсли;
		//
	КонецЕсли;
	
	Возврат РезультатПоиска;
	
КонецФункции

Функция AESЗашифровать(saKey, saIV, binSrc) Экспорт
	aes = Новый COMОбъект("System.Security.Cryptography.RijndaelManaged");
	aes.Key = saKey;
	aes.IV = saIV;
	encryptor = aes.CreateEncryptor();
	binEnc = encryptor.TransformFinalBlock(binSrc, 0, binSrc.GetLength());
	aes = Неопределено;
	Возврат binEnc;
КонецФункции

Функция SafeArrayToFile(str,bin) Экспорт 
	adTypeBinary = 1;
	adSaveCreateNotExist = 1;
	objStream = Новый COMОбъект("ADODB.Stream");
	objStream.Open();
	objStream.Type = adTypeBinary;
	objStream.Write(bin);
	objStream.SaveToFile(str, adSaveCreateNotExist);
	objStream.Close();
	objStream = Неопределено;
	
	//ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	//УдалитьФайлы(ИмяВременногоФайла);
	
	//Возврат Base64Строка(ДвоичныеДанные);
КонецФункции

Функция AESРасшифровать(saKey, saIV, binEnc) Экспорт
	aes = Новый COMОбъект("System.Security.Cryptography.RijndaelManaged");
	aes.Key = saKey;
	aes.IV = saIV;
	Decryptor = aes.CreateDecryptor();
	binDec = decryptor.TransformFinalBlock(binEnc, 0, binEnc.GetLength());
	aes = Неопределено;
	Возврат binDec;
КонецФункции//	return str;

Функция FileToSafeArray(str) Экспорт 
	
	adTypeBinary = 1;
	adReadAll = -1;
	objStream = Новый COMОбъект("ADODB.Stream");
	objStream.Open();
	objStream.Type = adTypeBinary;
	objStream.LoadFromFile(str);
	bin = objStream.Read(adReadAll);
	objStream.Close();
	objStream = Неопределено;
	
	Возврат bin;
КонецФункции

Функция Base64ToSafeArray(str) Экспорт 
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные = Base64Значение(str);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	adTypeBinary = 1;
	adReadAll = -1;
	objStream = Новый COMОбъект("ADODB.Stream");
	objStream.Open();
	objStream.Type = adTypeBinary;
	objStream.LoadFromFile(ИмяВременногоФайла);
	bin = objStream.Read(adReadAll);
	objStream.Close();
	objStream = Неопределено;
	
	ВыполнитьПопыткуУдаленияФайла(ИмяВременногоФайла);
	Возврат bin;
КонецФункции


//Задачи

Функция ПолучитьТипЗначенияПВХ(ИсходныйОбъект)
	
	ТипЗначенияПВХ = "";
	Если ИсходныйОбъект.ГруппаРеквизитов Тогда
		ТипЗначенияПВХ	= "group";	
	ИначеЕсли Строка(ИсходныйОбъект.ТипЗначения) = Строка(Тип("Число")) Тогда
		ТипЗначенияПВХ	= "number";
	ИначеЕсли Строка(ИсходныйОбъект.ТипЗначения) = Строка(Тип("Строка")) Тогда
		Если ИсходныйОбъект.ОсобыйВидДополнительногоРеквизита = Перечисления.атл_ОсобыеВидыДополнительныхРеквизитов.Гиперссылка Тогда
			ТипЗначенияПВХ	= "hyperlink";
		ИначеЕсли ИсходныйОбъект.ОсобыйВидДополнительногоРеквизита = Перечисления.атл_ОсобыеВидыДополнительныхРеквизитов.КоллекцияКартинок Тогда
			ТипЗначенияПВХ	= "picture_collection";
		ИначеЕсли ИсходныйОбъект.ОсобыйВидДополнительногоРеквизита = Перечисления.атл_ОсобыеВидыДополнительныхРеквизитов.Координата Тогда
			ТипЗначенияПВХ	= "geopoint";
		Иначе
			ТипЗначенияПВХ	= "string";
		КонецЕсли;
	ИначеЕсли Строка(ИсходныйОбъект.ТипЗначения) = Строка(Тип("Дата")) Тогда
		ТипЗначенияПВХ	= "date";
	ИначеЕсли Строка(ИсходныйОбъект.ТипЗначения) = Строка(Тип("Булево")) Тогда
		ТипЗначенияПВХ	= "bool";	
	Иначе
		ТипЗначенияПВХ	= "";
	КонецЕсли;
	
	Возврат ТипЗначенияПВХ;
	
КонецФункции

Функция ПолучитьТипСпискаПВХ(ИсходныйОбъект)
	
	ТипОбъекта = ИсходныйОбъект.ТипЗначения.Типы()[0];
	ТипСпискаПВХ = "";
	//пытаем определить, является ли данный объект справочником
	Если ЗначениеЗаполнено(ТипОбъекта) Тогда
		Попытка
			СправочникСсылка = Новый(ТипОбъекта);
			ИмяСправочника = СправочникСсылка.Метаданные().Имя;
			ТипСпискаПВХ = "СправочникСсылка." + ИмяСправочника;
		Исключение
			ТипСпискаПВХ = "0";
		КонецПопытки;
	Иначе
		ТипСпискаПВХ = "0";
	КонецЕсли;
	
	Возврат ТипСпискаПВХ;
	
КонецФункции

//дополнительные реквизиты задачи
Процедура РазобратьИнформациюПоДополнительномуРеквизитуПоЗадаче(ДокументЗадача, РезультатРазбораВнешнегоПакета, ДанныеДляРазбора)
	
	Если ЗначениеЗаполнено(ДанныеДляРазбора.external_id) Тогда
		СсылкаНаДополнительныйРеквизит = ПланыВидовХарактеристик.атл_ДополнительныеРеквизитыЗадачиМобильномуСотруднику.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеДляРазбора.external_id));
		Если СсылкаНаДополнительныйРеквизит <> Неопределено Тогда
			//ищем свойство в таблице документа
			РедактируемаяСтрока = ДокументЗадача.ДополнительныеРеквизиты.Найти(СсылкаНаДополнительныйРеквизит, "ДополнительныйРеквизит");
			ПолученноеЗначение = ДанныеДляРазбора.value;
			Если РедактируемаяСтрока <> Неопределено или ПолученноеЗначение = Неопределено Тогда
				//теперь попробуем заполнить новым значением
				ТипбъектаПолученный = ДанныеДляРазбора.type;
				
				ТипОбъектаИсходный = ПолучитьТипЗначенияПВХ(СсылкаНаДополнительныйРеквизит); 
				
				Если ТипбъектаПолученный = ТипОбъектаИсходный или 
					(ТипбъектаПолученный = "list" и ТипОбъектаИсходный = "") Тогда
					
					Если ТипбъектаПолученный = "number" Тогда
						Попытка
							РедактируемаяСтрока.ЗначениеРеквизита = ПолученноеЗначение;
						Исключение
						КонецПопытки;
					ИначеЕсли ТипбъектаПолученный = "string" ИЛИ ТипбъектаПолученный = "hyperlink" Тогда
						Попытка
							РедактируемаяСтрока.ЗначениеРеквизита = ПолученноеЗначение;
						Исключение
						КонецПопытки;
					ИначеЕсли ТипбъектаПолученный = "picture_collection" Тогда
						Попытка
							РедактируемаяСтрока.ЗначениеРеквизита = ПолученноеЗначение;
							
							//дополнительно нужно разобрать список файлов
							СписокПолученныхФайлов = ДанныеДляРазбора.file;
							
							
							//удаляем старые строки
							ТаблицаСтарыхФайлов = ДокументЗадача.Файлы.Выгрузить(Новый Структура("ДополнительныйРеквизит", СсылкаНаДополнительныйРеквизит));
							
							ИндексДляУдаления = ТаблицаСтарыхФайлов.Количество();
							Пока ИндексДляУдаления > 0 Цикл 
								ДокументЗадача.Файлы.Удалить(ТаблицаСтарыхФайлов[ИндексДляУдаления - 1].НомерСтроки - 1);
								ИндексДляУдаления = ИндексДляУдаления - 1;
							КонецЦикла;
							
							ТаблицаСтарыхФайлов.Колонки.Добавить("НайденФайл", Новый ОписаниеТипов("Булево"));
							
							//заполняем список файлов по полученным данным
							Если СписокПолученныхФайлов <> Неопределено Тогда
								Если ТипЗнч(СписокПолученныхФайлов) = Тип("СписокXDTO") Тогда
									КоличествоЭлементовВСписке = СписокПолученныхФайлов.Количество();
									Если КоличествоЭлементовВСписке > 0 Тогда
										Для Индекс = 0 по КоличествоЭлементовВСписке-1 Цикл
											РазобратьИнформациюПоФайлуПоЗадаче(ДокументЗадача, СсылкаНаДополнительныйРеквизит, СписокПолученныхФайлов[Индекс], ТаблицаСтарыхФайлов)
										КонецЦикла;
									КонецЕсли;
								Иначе
									РазобратьИнформациюПоФайлуПоЗадаче(ДокументЗадача, СсылкаНаДополнительныйРеквизит, СписокПолученныхФайлов, ТаблицаСтарыхФайлов);
								КонецЕсли;
							КонецЕсли;
							
							//теперь проверим, нужно ли удалить какие-то файлы
							Для Каждого СтрокаСтарогоФайла из ТаблицаСтарыхФайлов Цикл
								Если Не СтрокаСтарогоФайла.ФайлНайден Тогда
									//удаляем файлы в базе, т.к. они не нужны...
												
									МенеджерЗаписи = РегистрыСведений.атл_ФайлыУМС.СоздатьМенеджерЗаписи();
									МенеджерЗаписи.ИдентификаторФайла 					= СтрокаСтарогоФайла.ИдентификаторФайла;
									МенеджерЗаписи.ИдентификаторИнформационнойБазыФайла = СтрокаСтарогоФайла.ИдентификаторИнформационнойБазыФайла;
									МенеджерЗаписи.Прочитать();
									
									МенеджерЗаписи.ТребуетсяУдалитьФайл = Истина;
									МенеджерЗаписи.Записать();
								КонецЕсли;
							КонецЦикла;
							
						Исключение
						КонецПопытки;
						
					ИначеЕсли ТипбъектаПолученный = "geopoint" Тогда
						//Попытка
							РедактируемаяСтрока.ЗначениеРеквизита = СформироватьПредставлениеКоординаты(ПолученноеЗначение);
						//Исключение
						//КонецПопытки;	
					ИначеЕсли ТипбъектаПолученный = "date" Тогда
						Попытка
							РедактируемаяСтрока.ЗначениеРеквизита = ПолученноеЗначение;
						Исключение
						КонецПопытки;
					ИначеЕсли ТипбъектаПолученный = "bool" Тогда
						Попытка
							РедактируемаяСтрока.ЗначениеРеквизита = ?(ПолученноеЗначение = "1", Истина, Ложь);
						Исключение
						КонецПопытки;
					ИначеЕсли ТипбъектаПолученный = "list" Тогда
						
						ТипСпискаИсходный = ПолучитьТипСпискаПВХ(СсылкаНаДополнительныйРеквизит);
						ТипСпискаПолученный = ДанныеДляРазбора.list_properties.type;
						
						Если Найти(ТипСпискаИсходный, "СправочникСсылка.") > 0 и ТипСпискаПолученный <> Неопределено Тогда
							Если ТипСпискаПолученный = ТипСпискаИсходный Тогда //проверяем равенство типов исходного и конечного
								//
								НаименованиеСписка = СтрЗаменить(ТипСпискаИсходный, "СправочникСсылка.", "");
								Если НаименованиеСписка = "атл_ЗначенияДополнительныхРеквизитов" Тогда
									//проверим соответствие типов значений передаваемого первоначально и возвращаемого
									
									//в поле value задан ссылка на элемент справочника.
									Попытка
										СсылкаНаПолученноеЗначение = Справочники.атл_ЗначенияДополнительныхРеквизитов.ПолучитьСсылку(Новый УникальныйИдентификатор(ПолученноеЗначение));
										Если ЗначениеЗаполнено(СсылкаНаПолученноеЗначение) Тогда
											РедактируемаяСтрока.ЗначениеРеквизита = СсылкаНаПолученноеЗначение;
										КонецЕсли;
									Исключение
										//не удалось найти объект по ссылке
									КонецПопытки;
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;		
						
					КонецЕсли;	
					
				Иначе
					//ошибка несоотвествия типов отправленных данных и полученных
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			//ссылку не нашли, загрузку пропускаем...
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РазобратьИнформациюПоФайлуПоЗадаче(ДокументЗадача, СсылкаНаДополнительныйРеквизит, ДанныеДляРазбора, ТаблицаСтарыхФайлов)
	
	НовыйФайлВЗадаче = ДокументЗадача.Файлы.Добавить();
	НовыйФайлВЗадаче.ДополнительныйРеквизит 			  = СсылкаНаДополнительныйРеквизит;
	НовыйФайлВЗадаче.ИдентификаторФайла 				  = ДанныеДляРазбора.id;
	НовыйФайлВЗадаче.ИдентификаторИнформационнойБазыФайла = ДанныеДляРазбора.db_id;
	НовыйФайлВЗадаче.Подпись 							  = ДанныеДляРазбора.caption;	
	
	МассивНайденныхСтрок = ТаблицаСтарыхФайлов.НайтиСтроки(Новый Структура("ИдентификаторФайла", НовыйФайлВЗадаче.ИдентификаторФайла));
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		Для Каждого НайденнаяСтрока Из МассивНайденныхСтрок Цикл
			Если НайденнаяСтрока.ИдентификаторИнформационнойБазыФайла = ДанныеДляРазбора.db_id Тогда
				НайденнаяСтрока.НайденФайл = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//вспомогательная функция
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, РазделительПодстрок = ",") Экспорт
	
	МассивПодстрок = Новый Массив();
	Если Стр = "" Тогда
		Возврат МассивПодстрок;
	Иначе
		Если РазделительПодстрок = " " Тогда
			Стр = СокрЛП(Стр);
			Пока Истина Цикл
				Поз = Найти(Стр, РазделительПодстрок);
				Если Поз=0 Тогда
					МассивПодстрок.Добавить(Стр);
					Возврат МассивПодстрок;
				КонецЕсли;
				МассивПодстрок.Добавить(Лев(Стр,Поз-1));
				Стр = СокрЛ(Сред(Стр,Поз));
			КонецЦикла;
		Иначе
			ДлинаРазделительПодстрок = СтрДлина(РазделительПодстрок);
			Пока Истина Цикл
				Поз = Найти(Стр,РазделительПодстрок);
				Если Поз=0 Тогда
					МассивПодстрок.Добавить(Стр);
					Возврат МассивПодстрок;
				КонецЕсли;
				МассивПодстрок.Добавить(Лев(Стр, Поз-1));
				Стр = Сред(Стр, Поз + ДлинаРазделительПодстрок);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция СформироватьПредставлениеКоординаты(ПолученноеЗначение)
	
	ИтоговаяСтрока = "";
	Стр = ПолученноеЗначение;
			
	Стр = СтрЗаменить(Стр,"""","");
	Стр = СтрЗаменить(Стр,"T","");
	//Стр = СтрЗаменить(Стр,"-","");
	//Стр = СтрЗаменить(Стр,":","");
	//Стр = СтрЗаменить(Стр,"[","");
	//Стр = СтрЗаменить(Стр,"]","");
						
	МассивПодстрок1 = РазложитьСтрокуВМассивПодстрок(Стр, "],");
	
	Если МассивПодстрок1.Количество() > 0 Тогда
		// количество попыток
		Стр = МассивПодстрок1[0];
		Стр = СтрЗаменить(Стр,"[","");
		ИтоговаяСтрока = ИтоговаяСтрока + "Количество попыток: " + Строка(Стр) + ", ";
	КонецЕсли;
	
	Если МассивПодстрок1.Количество() > 1 Тогда
		// количество попыток
		Стр = МассивПодстрок1[1];
		Стр = СтрЗаменить(Стр,"[","");
		Стр = СтрЗаменить(Стр,"]","");
		Стр = СтрЗаменить(Стр,":","");
		
		МассивПодстрок2 = РазложитьСтрокуВМассивПодстрок(Стр, ",");
		Если МассивПодстрок2.Количество() > 4 Тогда
			ИтоговаяСтрока = ИтоговаяСтрока + "Дата: " + Формат(Дата(СтрЗаменить(МассивПодстрок2[0],"-","")), "ДЛФ=ДВ") + ", ";			
			ИтоговаяСтрока = ИтоговаяСтрока 
							+ "Долгота: " +  МассивПодстрок2[1] + ", "
							+ "Широта: " +  МассивПодстрок2[2] + ", "
							+ "Точность: " +  МассивПодстрок2[3] + ", ";
			Если МассивПодстрок2[4] = "1" Тогда
				ИтоговаяСтрока = ИтоговаяСтрока + "Источник координат: GPS";
			ИначеЕсли МассивПодстрок2[4] = "0" Тогда
				ИтоговаяСтрока = ИтоговаяСтрока + "Источник координат: Сеть";			
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	Если МассивПодстрок1.Количество() > 2 Тогда
		Стр = МассивПодстрок1[2];
		Стр = СтрЗаменить(Стр,"[","");
		Стр = СтрЗаменить(Стр,"]","");
		МассивПодстрок3 = РазложитьСтрокуВМассивПодстрок(Стр, "},");
		Сч = 0;
		Если МассивПодстрок3.Количество() > 0 Тогда
			ИтоговаяСтрока = ИтоговаяСтрока + "Попытки получения координат: ";
			Для Каждого текПопытка Из МассивПодстрок3 Цикл
				Стр = СтрЗаменить(текПопытка,"{",""); 
				Стр = СтрЗаменить(Стр,"}",""); 
				МассивПодстрок4 = РазложитьСтрокуВМассивПодстрок(Стр, ",");
				Если МассивПодстрок4.Количество() > 3 Тогда
					Сч = Сч + 1;
					ИтоговаяСтрока = ИтоговаяСтрока + Строка(Сч) + ") ";
					
					// Дата
					Стр = МассивПодстрок4[0];
					Стр = СтрЗаменить(Стр,"-","");
					Стр = СтрЗаменить(Стр,"t:","");
					Стр = СтрЗаменить(Стр,":","");
					ИтоговаяСтрока = ИтоговаяСтрока + "Дата: " + Формат(Дата(Стр), "ДЛФ=ДВ") + ", ";
					
					// Код ошибки
					Стр = МассивПодстрок4[1];
					Стр = СтрЗаменить(Стр,"e:","");
					ИтоговаяСтрока = ИтоговаяСтрока + "Код ошибки: " + Стр +", ";
					
					// Доступен GPS
					Стр = МассивПодстрок4[2];
					Стр = СтрЗаменить(Стр,"g:","");
					ИтоговаяСтрока = ИтоговаяСтрока + "Доступен GPS: " + ?(Стр = "1", "Да", "Нет") +", ";

					// Доступна сеть
					Стр = МассивПодстрок4[3];
					Стр = СтрЗаменить(Стр,"n:","");
					ИтоговаяСтрока = ИтоговаяСтрока + "Доступна моб. сеть: " + ?(Стр = "1", "Да", "Нет") + "; ";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
																		
	Возврат ИтоговаяСтрока;	
	
КонецФункции

мЕстьПодключениеКСерверу = Ложь;
мКоличествоПопытокПодключения = 0;

мЗаголовокHTTP = Новый Соответствие();
мЗаголовокHTTP.Вставить("Content-Type", "text/xml");
мЗаголовокHTTP.Вставить("content-transfer-encoding", "binary");

мОтправленЗапросОКоличествеДоступныхЛогинов = Ложь;
мМаксимальноеКоличествоПопытокПодключения = 1;

мТаблицаКлючейШифрования = Новый ТаблицаЗначений;
мТаблицаКлючейШифрования.Колонки.Добавить("ВерсияКлючаШифрования");
мТаблицаКлючейШифрования.Колонки.Добавить("КлючШифрования");
мТаблицаКлючейШифрования.Колонки.Добавить("ЭлементКлючШифрования");
мТаблицаКлючейШифрования.Колонки.Добавить("КлючМожетИспользоваться");

мТаблицаКлючейШифрованияОЛЕ = Новый ТаблицаЗначений;
мТаблицаКлючейШифрованияОЛЕ.Колонки.Добавить("ВерсияКлючаШифрования");
мТаблицаКлючейШифрованияОЛЕ.Колонки.Добавить("КлючШифрования");
мТаблицаКлючейШифрованияОЛЕ.Колонки.Добавить("ЭлементКлючШифрования");
мТаблицаКлючейШифрованияОЛЕ.Колонки.Добавить("КлючМожетИспользоваться");
мТаблицаКлючейШифрованияОЛЕ.Колонки.Добавить("САКлюч");
мТаблицаКлючейШифрованияОЛЕ.Колонки.Добавить("Ключ");

мДатаПолученияПоследнегоПакета = ТекущаяДата();

мФоновыйОбмен = Ложь;
мКоличествоЗарегистрированныхОшибок = 0;
мКоличествоОтправленныхПакетов = 0;
мКоличествоПолученныхПакетов = 0;

мИменаФайловПакетовПриОтладке = Новый СписокЗначений;

мЗагрузкаПакета = Новый Структура;
мЗарегистрироватьИнформационнуюБазуНаСервере = Ложь;
мЧасовойПояс = 0;
мТекущийПутьИБ = ВРег(СокрЛП(СтрокаСоединенияИнформационнойБазы()));

мГлобальныхПопытокПодключения = 0;
мПрерватьОбмен = Ложь;

//Только для 8.3
ВыводитьОтладочныеСообщения = Ложь;
КоличествоДоступныхЛогинов = 0;