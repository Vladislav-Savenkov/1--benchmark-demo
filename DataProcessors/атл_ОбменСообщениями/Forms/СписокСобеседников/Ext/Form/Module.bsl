
#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяВТечениеКоторогоПользовательОнлайн = Константы.атл_ВремяВТечениеКоторогоПользовательОнлайн.Получить();
	
	ОтборПоВидуАктивности = 0;
	ДеревоПользователей.Параметры.УстановитьЗначениеПараметра("ДатаДопустимойПоследнейАктивности", ТекущаяДата() - ?(ВремяВТечениеКоторогоПользовательОнлайн = 0, 300,ВремяВТечениеКоторогоПользовательОнлайн));		
	ДеревоПользователей.Параметры.УстановитьЗначениеПараметра("ДатаДопустимойИнформацииОбУстройстве", ТекущаяДата() - ?(ВремяВТечениеКоторогоПользовательОнлайн = 0, 300*2,ВремяВТечениеКоторогоПользовательОнлайн));		
	ДеревоПользователей.Параметры.УстановитьЗначениеПараметра("ДатаДопустимойПоследнейАктивностиСКоординатами", ТекущаяДата() - ?(ВремяВТечениеКоторогоПользовательОнлайн = 0, 300*2,ВремяВТечениеКоторогоПользовательОнлайн));		
	ДеревоПользователей.Параметры.УстановитьЗначениеПараметра("ПустаяДата", Дата("00010101"));
	ДеревоПользователей.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь",ПараметрыСеанса.ТекущийПользователь);	
	ДеревоПользователей.Параметры.УстановитьЗначениеПараметра("ТолькоАктивные",ТолькоАктивные);
	ДеревоПользователей.Параметры.УстановитьЗначениеПараметра("ОтборПоВидуАктивности",ОтборПоВидуАктивности);
	  
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	КоличествоСтраницаСообщений = 0;
	
	ЗаполнитьУсловноеОформление();
	ОбновитьТаблицуСообщений();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	мПериодАвтоОбновления = атл_УправлениеМобильнымиСотрудникамиСервер.ПолучитьЗначениеКонстанты("атл_ПериодичностьОбновленияОкнаСообщений");	
	ПодключитьОбработчикОжидания("ОбновитьФормуНаКлиенте", ?(мПериодАвтоОбновления = 0, 60, мПериодАвтоОбновления));
	
	//Заново обновляем динамический список и форму, так как сохраненные значения 
	//восстанавливаются только при открытии формы
	ОбновитьФормуНаКлиенте();
	
	УстановитьОтметкиКнопокПослеВосстановленияНастроек();
	УстановитьВидимостьКолонок();
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеДиалоговПослеОтправкиСообщенияНескольким" Тогда
		ДозаполнитьТаблицуСообщенийПослеОтправкиНескольким(Параметр);
		ОбновлениеИнформацииИзТаблицыСообщений();	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиЭлементовФормы

&НаКлиенте
Процедура ДеревоПользователейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ДеревоПользователей.ТекущиеДанные <> Неопределено Тогда
		мТекущиеДанные = Элементы.ДеревоПользователей.ТекущиеДанные;
		АктивизироватьФормуСообщений(мТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницСообщенийПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	мПользователь = ПолучитьПользователяПоИмениСтраницы(ТекущаяСтраница.Имя);
	УстановитьСтатусПрочтенияДляВсехСообщенийСПользователем(мПользователь);	
	
КонецПроцедуры

	
#КонецОбласти


#Область КомандыФормы

&НаКлиенте
Процедура История(Команда)
	
	Если Элементы.ДеревоПользователей.ТекущиеДанные <> Неопределено Тогда
		мПользовательАктивнойСтроки = Элементы.ДеревоПользователей.ТекущиеДанные.Пользователь;
		ПоказатьИсторию(мПользовательАктивнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоАктивные(Команда)
	
	Кнопка = Элементы.ТолькоАктивные;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ТолькоАктивные = Кнопка.Пометка;
	
	УстановитьКартинкуКнопкиАктивности(Кнопка);
	ОбновитьФормуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНаКарте(Команда)
	
	АдресХранилища = ПолучитьСписокПользователейМК(УникальныйИдентификатор);
	ОтобразитьПользователейНаКарте(АдресХранилища);	
	
КонецПроцедуры

&НаКлиенте
Процедура Сообщение(Команда)
	
	Если Элементы.ДеревоПользователей.ТекущиеДанные <> Неопределено Тогда
		мТекущиеДанные = Элементы.ДеревоПользователей.ТекущиеДанные;
		АктивизироватьФормуСообщений(мТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеДляНескольких(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоАктивные", ТолькоАктивные);
	ПараметрыФормы.Вставить("ДатаПоследнейАктивности", ДатаПоследнейАктивности);
	
	ОткрытьФорму("Обработка.атл_ОбменСообщениями.Форма.МультиСообщение", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьГруппуСообщений(Команда)
	
	Элементы.ГруппаСообщений.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСтраницуСообщений(Команда)
	
	мИмяСтраницы = ПолучитьИмяСтраницыПоКоманде(Команда.Имя, "ЗакрытьСтраницу");
	УдалитьСтраницуВФормуСообщений(мИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьГруппуИстории(Команда)

	Элементы.ГруппаИстория.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияГруппыСообщений(Команда)
	
	мТекущаяСтраница = Элементы.ГруппаСтраницСообщений.ТекущаяСтраница;
	мПолучатель =  ПолучитьПользователяПоИмениСтраницы(мТекущаяСтраница.Имя);

	ПоказатьИсторию(мПолучатель);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНаКартеГруппыСообщений(Команда)
	
	мТекущаяСтраница = Элементы.ГруппаСтраницСообщений.ТекущаяСтраница;
	мПолучатель =  ПолучитьПользователяПоИмениСтраницы(мТекущаяСтраница.Имя);
	
	мСписок = Новый Массив;
	мСписок.Добавить(мПолучатель);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(мСписок, УникальныйИдентификатор);
	ОтобразитьПользователейНаКарте(АдресХранилища);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ОтправитьСообщение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИсторию(Команда)
	
	мПользовательАктивнойСтроки = Элементы.ДеревоПользователей.ТекущиеДанные.Пользователь;
	ОбновитьПолеИстории(мПользовательАктивнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПользователяПоВидуАктивности(Команда)
	
	Кнопка = Элементы.ОтборПользователяПоВиду;
	Если Кнопка.Заголовок = "Все" Тогда
		Кнопка.Заголовок = "1С";
		ОтборПоВидуАктивности = 1;
	ИначеЕсли Кнопка.Заголовок = "1С" Тогда
		Кнопка.Заголовок = "МК";
		ОтборПоВидуАктивности = 2;
	ИначеЕсли Кнопка.Заголовок = "МК" Тогда
		Кнопка.Заголовок = "Все";
		ОтборПоВидуАктивности = 0;
	КонецЕсли;
	
	ОбновитьФормуНаКлиенте();
	
КонецПроцедуры
	
&НаКлиенте
Процедура Настройки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗарядБатареи", ЗарядБатареи);
	ПараметрыФормы.Вставить("ДатаПоследнейАктивности", ДатаПоследнейАктивности);
	ПараметрыФормы.Вставить("Координаты", Координаты);
		
	ОповещениеФормы = Новый ОписаниеОповещения("НастройкиЗавершение", ЭтотОбъект);
		
	ОткрытьФорму("Обработка.атл_ОбменСообщениями.Форма.НастройкиСпискаСобеседников", ПараметрыФормы, ЭтаФорма,,,, ОповещениеФормы);	
	
КонецПроцедуры

#КонецОбласти


#Область ПроцедурыОтображенияЭлементовФормы

&НаКлиенте
Процедура ОбновитьФормуНаКлиенте()
	
	ДеревоПользователей.Параметры.УстановитьЗначениеПараметра("ДатаДопустимойПоследнейАктивности", ТекущаяДата() - ?(ВремяВТечениеКоторогоПользовательОнлайн = 0, 300,ВремяВТечениеКоторогоПользовательОнлайн));		
	ДеревоПользователей.Параметры.УстановитьЗначениеПараметра("ДатаДопустимойИнформацииОбУстройстве", ТекущаяДата() - ?(ВремяВТечениеКоторогоПользовательОнлайн = 0, 300*2,ВремяВТечениеКоторогоПользовательОнлайн));		
	ДеревоПользователей.Параметры.УстановитьЗначениеПараметра("ДатаДопустимойПоследнейАктивностиСКоординатами", ТекущаяДата() - ?(ВремяВТечениеКоторогоПользовательОнлайн = 0, 300*2,ВремяВТечениеКоторогоПользовательОнлайн));		
	ДеревоПользователей.Параметры.УстановитьЗначениеПараметра("ТолькоАктивные",ТолькоАктивные);
	ДеревоПользователей.Параметры.УстановитьЗначениеПараметра("ОтборПоВидуАктивности",ОтборПоВидуАктивности);
	Элементы.ДеревоПользователей.Обновить();	
	
	мКоличествоНовых = ПолучитьОбщееКоличествоНепрочитанныхСообщений(ТекущийПользователь);
	
	ОбновитьТаблицуСообщений();
	ОбновлениеИнформацииИзТаблицыСообщений();
	
	мКоличество = ПолучитьОбщееКоличествоНепрочитанныхСообщений(ТекущийПользователь);
	
	Если мКоличество = 0 Тогда
		ЭтаФорма.Заголовок = СокрЛП(ТекущийПользователь);
	Иначе
		ЭтаФорма.Заголовок = СокрЛП(ТекущийПользователь) + " (" + Строка(мКоличество) + ")";						
	КонецЕсли;
	
	Если мКоличествоНовых > 0 Тогда
		мСсылкаНаФорму = ПолучитьНавигационнуюСсылку(ЭтотОбъект);
		ПоказатьОповещениеПользователя("Новое сообщение", мСсылкаНаФорму, "Количество непрочитанных: " + Строка(мКоличествоНовых), БиблиотекаКартинок.Информация32);			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкиКнопокПослеВосстановленияНастроек()
	
	Кнопка = Элементы.ТолькоАктивные;
	Кнопка.Пометка = ТолькоАктивные;
	УстановитьКартинкуКнопкиАктивности(Кнопка);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКартинкуКнопкиАктивности(Кнопка)
	
	Если Кнопка.Пометка Тогда
		Кнопка.Картинка = БиблиотекаКартинок.атл_СтатусыАктивностиАктивен;
	Иначе
		Кнопка.Картинка = БиблиотекаКартинок.атл_СтатусыАктивностиУжатые;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКолонок()
	
	Элементы.ДеревоПользователейДатаПоследнейАктивности.Видимость = ДатаПоследнейАктивности;
	Элементы.ДеревоПользователейЗарядБатареиРезультат.Видимость = ЗарядБатареи;
	Элементы.ДеревоПользователейКоординаты.Видимость = Координаты;
	
КонецПроцедуры

	
#КонецОбласти



#Область ПрочиеПроцедурыИФукнции

&НаСервере
Процедура ЗаполнитьУсловноеОформление()
	
	ЭлементыУФ = ДеревоПользователей.УсловноеОформление.Элементы;
	ЭлементыУФ.Очистить();
	
	НовыйЭлементУФ = ЭлементыУФ.Добавить();
	
	ОтборЭлемента = НовыйЭлементУФ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЯвляетсяПользователемМК");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = НовыйЭлементУФ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЯвляетсяПользователемУСС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	НовыйЭлементУФ.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(200, 200, 200));
	
	// Если информация по батареи устрале выводим серым зачеркнутым
	НовыйЭлементУФ = ЭлементыУФ.Добавить();
	
	ПолеЭлемента = НовыйЭлементУФ.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЗарядБатареиРезультат");
	
	ОтборЭлемента = НовыйЭлементУФ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗарядБатареиУстарел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
		
	НовыйЭлементУФ.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(174,174,174));
	НовыйЭлементУФ.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,,,,Истина));
	
КонецПроцедуры

//История

&НаКлиенте
Процедура ПоказатьИсторию(Пользователь)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Пользователь", Пользователь);
		                                                    
	ОткрытьФорму("Обработка.атл_ОбменСообщениями.Форма.История", ПараметрыФормы);	
				
КонецПроцедуры

&НаСервере
Процедура ОбновитьПолеИстории(Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	атл_Сообщения.ДатаРегистрации КАК ДатаРегистрации,
	|	атл_Сообщения.ДатаСоздания КАК ДатаСоздания,
	|	атл_Сообщения.ДатаОтправки КАК ДатаОтправки,
	|	атл_Сообщения.ДатаДоставки КАК ДатаДоставки,
	|	атл_Сообщения.ДатаПрочтения КАК ДатаПрочтения,
	|	атл_Сообщения.Сообщение КАК Сообщение,
	|	атл_Сообщения.Получатель КАК Получатель,
	|	атл_Сообщения.ПолучательМК КАК ПолучательМК,
	|	атл_Сообщения.ОтправительМК КАК ОтправительМК,
	|	атл_Сообщения.ИдентификаторСообщения,
	|	атл_Сообщения.ИдентификаторИнформационнойБазы,
	|	атл_Сообщения.ЭтоСсылкаНаОбъект,
	|	атл_Сообщения.Административное,
	|	атл_Сообщения.Отправитель,
	|	атл_Сообщения.Широта,
	|	атл_Сообщения.Долгота,
	|	ВЫБОР
	|		КОГДА атл_Сообщения.Отправитель = &Пользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Полученное,
	|	ВЫБОР
	|		КОГДА атл_Сообщения.Отправитель = &Пользователь
	|			ТОГДА атл_Сообщения.Отправитель
	|		ИНАЧЕ атл_Сообщения.Получатель
	|	КОНЕЦ КАК Пользователь
	|ИЗ
	|	РегистрСведений.атл_Сообщения КАК атл_Сообщения
	|ГДЕ
	|	(атл_Сообщения.Получатель = &Пользователь
	|				И атл_Сообщения.Отправитель = &ТекущийПользователь
	|				И НЕ атл_Сообщения.УдаленоОтправителем
	|			ИЛИ атл_Сообщения.Получатель = &ТекущийПользователь
	|				И атл_Сообщения.Отправитель = &Пользователь
	|				И НЕ атл_Сообщения.УдаленоПолучателем)
	|	И атл_Сообщения.ДатаРегистрации МЕЖДУ &ПериодС И &ПериодПо
	|	И НЕ(атл_Сообщения.Получатель = &ТекущийПользователь
	|				И атл_Сообщения.ПолучательМК)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРегистрации";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ПериодС", НачалоПериодаИстория);
	Запрос.УстановитьПараметр("ПериодПо", КонецДня(КонецПериодаИстория));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	ТекстПоля = "";
	
	ТекстПоля = ПолучитьБлокТекстаПоляHTML("Заголовок");
	
	Пока Выборка.Следующий() Цикл
		//выводим сообщение из выборки
		//Если Выборка.ЭтоСсылкаНаОбъект Тогда
		//	СсылкаНаОбъект = ПолучитьСсылкуПоОписаниюСсылки(Выборка.Сообщение);
		//Иначе
		//	СсылкаНаОбъект = Неопределено;
		//КонецЕсли;
		
		ИдентификаторСообщенияНаЭкране = "s"+СокрЛП(Выборка.ИдентификаторИнформационнойБазы)+"_"+СокрЛП(Выборка.ИдентификаторСообщения);
		
		Если Выборка.Полученное Тогда
			ТекстПоля = ТекстПоля + ПолучитьБлокТекстаПоляHTML("ВходящееСообщение", Выборка.Отправитель, 
			Выборка.ДатаРегистрации,	ИдентификаторСообщенияНаЭкране, "", Выборка.Сообщение); //Выборка.СсылкаНаОбъект);

		Иначе
			//в ответ будем ждать дату доставки и дату прочтения
			СтатусВыводимогоСообщения = ПолучениеСтатусаОтправленногоСообщения(Выборка.ДатаПрочтения, Выборка.ДатаДоставки, Выборка.ДатаОтправки);

			ТекстПоля = ТекстПоля + ПолучитьБлокТекстаПоляHTML("ИсходящееСообщение", ТекущийПользователь, 
			Выборка.ДатаРегистрации,	ИдентификаторСообщенияНаЭкране, СтатусВыводимогоСообщения, Выборка.Сообщение); //Выборка.СсылкаНаОбъект);

		КонецЕсли;
							
	КонецЦикла;
	
	ТекстПоля = ТекстПоля + ПолучитьБлокТекстаПоляHTML("Подвал");
	
	ЭтаФорма.ПолеHTMLИстория = ТекстПоля;
		
КонецПроцедуры

//Обмен сообщениями

&НаСервереБезКонтекста
Функция ПолучитьОбщееКоличествоНепрочитанныхСообщений(ТекущийПользователь)	
	
	ОбщееКоличествоНепрочитанныхСообщений = 0;
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = "ВЫБРАТЬ
	                |	ЕСТЬNULL(СУММА(1),0) КАК Количество
	                |ИЗ
	                |	РегистрСведений.атл_Сообщения КАК атл_Сообщения
	                |ГДЕ
	                |	атл_Сообщения.ДатаПрочтения = &ПустаяДата
	                |	И атл_Сообщения.Получатель = &ТекущийПользователь
	                |	И НЕ атл_Сообщения.УдаленоПолучателем
	                |	И НЕ(атл_Сообщения.ПолучательМК
	                |				И атл_Сообщения.Получатель = &ТекущийПользователь)
	                |	И НЕ атл_Сообщения.Получатель = атл_Сообщения.Отправитель";
	мЗапрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	мЗапрос.УстановитьПараметр("ТекущийПользователь",ТекущийПользователь);
	мВыборка = мЗапрос.Выполнить().Выбрать();
	Если мВыборка.Следующий() Тогда
		ОбщееКоличествоНепрочитанныхСообщений = мВыборка.Количество;
	КонецЕсли;
	
	Возврат ОбщееКоличествоНепрочитанныхСообщений;
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьФормуСообщений(мТекущиеДанные)	
	
	Если Не мТекущиеДанные.ЯвляетсяПользователемМК и Не мТекущиеДанные.ЯвляетсяПользователемУСС Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выбранному пользователю недоступна система отправки сообщений!";				
		Сообщение.Сообщить();		
		Возврат;
	КонецЕсли;

	Элементы.ГруппаСообщений.Видимость = Истина;
		
	мИмяСтраницыПользователя = ПолучитьИмяСтраницыПользователя(мТекущиеДанные.Пользователь);
	Если мИмяСтраницыПользователя = Неопределено Тогда
		ДобавитьСтраницуВФормуСообщений(мТекущиеДанные.Пользователь);		
		ПолучитьСтарыеСообщенияВТаблицуСообщений(мТекущиеДанные.Пользователь);
		ОбновлениеИнформацииИзТаблицыСообщений();
	Иначе
		Элементы.ГруппаСтраницСообщений.ТекущаяСтраница = Элементы[мИмяСтраницыПользователя];
	КонецЕсли;
	ЭтаФорма.ТекущийЭлемент = Элементы[Элементы.ГруппаСтраницСообщений.ТекущаяСтраница.Имя + "Сообщение"];		
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВФормуСообщений(Пользователь, СделатьТекущей = Истина, мИмя = "")
	
	ЭлементыФормы = Элементы.ГруппаСтраницСообщений;
	мТекущаяСтраница = ЭлементыФормы.ТекущаяСтраница;
	КоличествоСтраницаСообщений = КоличествоСтраницаСообщений +1;
		
	мИмя = "Страница" + СокрЛП(КоличествоСтраницаСообщений);
	мНоваяСтраница = Элементы.Добавить(мИмя, Тип("ГруппаФормы"), ЭлементыФормы);
	мНоваяСтраница.Вид = ВидГруппыФормы.Страница;
	мНоваяСтраница.Заголовок = СокрЛП(Пользователь.Наименование);	
	
	//Добавим новую страницу в таблицу соотношений страниц и пользователей
	мНоваяСтрока = СоответствияСтраницИПользователей.Добавить();
	мНоваяСтрока.Пользователь = Пользователь;
	мНоваяСтрока.ИмяСтраницы = мИмя;
	
	мИмяПолеHTML = мИмя + "ПолеHTMLДокумента";
	КС = Новый КвалификаторыСтроки(0);
	мТипHTML = Новый ОписаниеТипов("Строка",,,,КС);
	мРеквизитПолеHTML = Новый РеквизитФормы(мИмяПолеHTML, мТипHTML);
	
	мИмяСообщение = мИмя + "Сообщение";
	КС2 = Новый КвалификаторыСтроки(1000);
	мТипСообщение = Новый ОписаниеТипов("Строка",,,,КС);
	мРеквизитСообщение = Новый РеквизитФормы(мИмяСообщение, мТипСообщение);	
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(мРеквизитПолеHTML);
	МассивРеквизитов.Добавить(мРеквизитСообщение);
	ИзменитьРеквизиты(МассивРеквизитов);

	//ПолеHTML
	ПолеHTML = Элементы.Добавить(мИмяПолеHTML,Тип("ПолеФормы"),Элементы[мИмя]);	
	ПолеHTML.Вид = ВидПоляФормы.ПолеHTMLДокумента;
	ПолеHTML.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеHTML.ПутьКДанным = мИмяПолеHTML;
	ДействиеПриНажатии = "ПолеHTMLПриНажатии"; 
	ПолеHTML.УстановитьДействие("ПриНажатии", ДействиеПриНажатии);
	ЭтаФорма[мИмяПолеHTML] = ТекстПервоначальногоЗаполнениеПоляHTML();	

	//Кнопки
	ГруппаКнопок = Элементы.Добавить(мИмя + "ГруппаКнопок",Тип("ГруппаФормы"),Элементы[мИмя]);
	ГруппаКнопок.Вид = ВидГруппыФормы.КоманднаяПанель;	
	
	КомандаИстория = Команды.Добавить(мИмя + "История");
	КомандаИстория.Действие = "ИсторияГруппыСообщений";
	КомандаИстория.Заголовок = "История";
	КомандаИстория.Картинка = БиблиотекаКартинок.Информация;
	КомандаИстория.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КнопкаИстория = Элементы.Добавить(КомандаИстория.Имя, Тип("КнопкаФормы"), ГруппаКнопок);
	КнопкаИстория.ИмяКоманды = КомандаИстория.Имя;
	КнопкаИстория.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	
	КомандаЗакрытьСтр = Команды.Добавить(мИмя + "ЗакрытьСтраницу");
	КомандаЗакрытьСтр.Действие = "ЗакрытьСтраницуСообщений";
	КомандаЗакрытьСтр.Заголовок = "Закрыть";
	КомандаЗакрытьСтр.Картинка = БиблиотекаКартинок.Закрыть;
	КомандаЗакрытьСтр.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КнопкаЗакрытьСтр = Элементы.Добавить(КомандаЗакрытьСтр.Имя, Тип("КнопкаФормы"), ГруппаКнопок);
	КнопкаЗакрытьСтр.ИмяКоманды = КомандаЗакрытьСтр.Имя;
	КнопкаЗакрытьСтр.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	
	КомандаКарта = Команды.Добавить(мИмя + "ПоказатьНаКарте");
	КомандаКарта.Действие = "ПоказатьНаКартеГруппыСообщений";
	КомандаКарта.Заголовок = "Показать на карте";
	КомандаКарта.Картинка = БиблиотекаКартинок.КонтактнаяИнформацияПерейтиПоСсылке;
	КомандаКарта.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КнопкаКарта = Элементы.Добавить(КомандаКарта.Имя, Тип("КнопкаФормы"), ГруппаКнопок);
	КнопкаКарта.ИмяКоманды = КомандаКарта.Имя;
	КнопкаКарта.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		
	//Поле сообщения
	ПолеСообщение = ЭтаФорма.Элементы.Добавить(мИмяСообщение,Тип("ПолеФормы"),Элементы[мИмя]);	
	ПолеСообщение.Вид = ВидПоляФормы.ПолеВвода;
	ПолеСообщение.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеСообщение.ПутьКДанным = мИмяСообщение;
	ПолеСообщение.МногострочныйРежим = Истина;
	ПолеСообщение.ОбновлениеТекстаРедактирования = ОбновлениеТекстаРедактирования.ПриИзмененииЗначения;
	ПолеСообщение.АвтоМаксимальнаяШирина = Ложь;

	Если СделатьТекущей Тогда
		ЭлементыФормы.ТекущаяСтраница = мНоваяСтраница;
	ИначеЕсли НЕ мТекущаяСтраница = Неопределено Тогда
		ЭлементыФормы.ТекущаяСтраница = мТекущаяСтраница;
	ИначеЕсли мТекущаяСтраница = Неопределено Тогда
		ЭлементыФормы.ТекущаяСтраница = мНоваяСтраница;	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуВФормуСообщений(мИмяСтраницы)
		
	Элементы.Удалить(Элементы[мИмяСтраницы]);
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(мИмяСтраницы + "ПолеHTMLДокумента");
	МассивРеквизитов.Добавить(мИмяСтраницы + "Сообщение");	
	ИзменитьРеквизиты(,МассивРеквизитов);

	Команды.Удалить(Команды.Найти(мИмяСтраницы + "История"));
	Команды.Удалить(Команды.Найти(мИмяСтраницы + "ЗакрытьСтраницу"));
	Команды.Удалить(Команды.Найти(мИмяСтраницы + "ПоказатьНаКарте"));
	
	//Удаляем из таблицы соответствий
	мОтбор = Новый Структура;
	мОтбор.Вставить("ИмяСтраницы", мИмяСтраницы); 
	мНайденнаяСтрока = СоответствияСтраницИПользователей.НайтиСтроки(мОтбор);
	Если мНайденнаяСтрока.Количество() > 0 Тогда
		СоответствияСтраницИПользователей.Удалить(мНайденнаяСтрока[0]);	
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницСообщений.ПодчиненныеЭлементы.Количество() <= 0 Тогда
		Элементы.ГруппаСообщений.Видимость = Ложь;	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяСтраницыПользователя(Пользователь) 
	
	мОтбор = Новый  Структура;
	мОтбор.Вставить("Пользователь", Пользователь);
	мНайденныеСтроки = СоответствияСтраницИПользователей.НайтиСтроки(мОтбор);
	Если мНайденныеСтроки.Количество() > 0 Тогда
		Возврат мНайденныеСтроки[0].ИмяСтраницы;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПолучитьИмяСтраницыПользователяНаСервере(Пользователь) 
	
	мОтбор = Новый  Структура;
	мОтбор.Вставить("Пользователь", Пользователь);
	мНайденныеСтроки = СоответствияСтраницИПользователей.НайтиСтроки(мОтбор);
	Если мНайденныеСтроки.Количество() > 0 Тогда
		Возврат мНайденныеСтроки[0].ИмяСтраницы;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПользователяПоИмениСтраницы(ИмяСтраницы) 
	
	мОтбор = Новый  Структура;
	мОтбор.Вставить("ИмяСтраницы", ИмяСтраницы);
	мНайденныеСтроки = СоответствияСтраницИПользователей.НайтиСтроки(мОтбор);
	Если мНайденныеСтроки.Количество() > 0 Тогда
		Возврат мНайденныеСтроки[0].Пользователь;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяСтраницыПоКоманде(ИмяКоманды, Подстрока)
	
	Возврат Лев(ИмяКоманды,СтрДлина(ИмяКоманды) - СтрДлина(Подстрока));
	
КонецФункции

&НаКлиенте
Процедура ОтправитьСообщение(ПолучательМК = Неопределено)
		
	мТекущаяСтраница = Элементы.ГруппаСтраницСообщений.ТекущаяСтраница;
	мПолучатель =  ПолучитьПользователяПоИмениСтраницы(мТекущаяСтраница.Имя);
	
	мИмяПоляСообщения = мТекущаяСтраница.Имя + "Сообщение";
	мТекущееСообщение = ЭтаФорма[мИмяПоляСообщения];
	Если ПустаяСтрока(мТекущееСообщение) Тогда
		Возврат;
	КонецЕсли;		
	
	Если ПолучательМК = Неопределено Тогда //пытаемся автоматически определить получателя
		ОтправляемНаМК = ОпределениеВидаПолучателя(мПолучатель);
		Если ОтправляемНаМК = Неопределено Тогда
			Возврат;
		Иначе
			ПолучательМК = ОтправляемНаМК;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьЗаписиВРегистрыПриОтправкеСообщения(мТекущееСообщение, мПолучатель, ПолучательМК);

	ВыводСообщенийВФормуСообщений(мТекущаяСтраница, мПолучатель);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводСообщенийВФормуСообщений(ТекущаяСтраница, Получатель)
	
	мИмяПоляСообщения = ТекущаяСтраница.Имя + "Сообщение";		
	мИмяПоля = ТекущаяСтраница.Имя + "ПолеHTMLДокумента";
	мТекущийЭлемент = Элементы[мИмяПоля];
	
	ИзменялсяСтатусПрочтения = Ложь;
		
	ТаблицаСообщений = Объект.ТаблицаСообщений;
	
	МассивСтрок = ТаблицаСообщений.НайтиСтроки(Новый Структура("Выведено", Ложь));
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого Стр из МассивСтрок Цикл
		
		Если Стр.Пользователь <> Получатель Тогда
			Продолжить;
		КонецЕсли;
		ТекстПоля = "";
			
		Если Стр.Полученное Тогда			
			ТекстПоля = ТекстПоля + ПолучитьБлокТекстаПоляHTML("ВходящееСообщение", Стр.Пользователь, 
			Стр.ДатаРегистрации,	Стр.ИдентификаторСообщенияНаЭкране, "", Стр.Сообщение, Стр.СсылкаНаОбъект);
						
			Если Элементы.ГруппаСтраницСообщений.ТекущаяСтраница = ТекущаяСтраница Тогда
				Стр.ДатаПрочтения = ТекущаяДата();
				УстановитьСтатусПрочтенияСообщения(Стр.ИдентификаторИнформационнойБазы, Стр.ИдентификаторСообщения, 
													Стр.Пользователь, Стр.ДатаПрочтения);	
			КонецЕсли;
			
		Иначе
			//в ответ будем ждать дату доставки и дату прочтения
			СтатусВыводимогоСообщения = ПолучениеСтатусаОтправленногоСообщения(Стр.ДатаПрочтения, Стр.ДатаДоставки, Стр.ДатаОтправки);

			ТекстПоля = ТекстПоля + ПолучитьБлокТекстаПоляHTML("ИсходящееСообщение", ТекущийПользователь, 
			Стр.ДатаРегистрации,	Стр.ИдентификаторСообщенияНаЭкране, СтатусВыводимогоСообщения, Стр.Сообщение, Стр.СсылкаНаОбъект);
		КонецЕсли;
		Стр.Выведено = Истина;		
		
		#Если ВебКлиент Тогда
			ИмеющийсяТекст = ЭтаФорма[мИмяПоля];
			НовыйТекст = СтрЗаменить(ИмеющийсяТекст, "</BODY></HTML>", ТекстПоля + "</BODY></HTML>");
			ЭтаФорма[мИмяПоля] = НовыйТекст;
			
		#Иначе	
			СтраницаПоля = мТекущийЭлемент.Документ.getElementsByTagName("body").item(0);
			
			ЭлементДляДобавления = мТекущийЭлемент.Документ.CreateElement("div");
			ЭлементДляДобавления.innerHTML = ТекстПоля;
			СтраницаПоля.appendChild(ЭлементДляДобавления);	
			Попытка
				мТекущийЭлемент.Документ.parentWindow.eval("window.scrollTo(0,document.getElementById('page').scrollHeight)");
			Исключение
				ИмеющийсяТекст = ЭтаФорма[мИмяПоля];
				НовыйТекст = СтрЗаменить(ИмеющийсяТекст, "</BODY></HTML>", ТекстПоля + "</BODY></HTML>");
				ЭтаФорма[мИмяПоля] = НовыйТекст;		
			КонецПопытки;
		#КонецЕсли
	
	КонецЦикла;

	Если ИзменялсяСтатусПрочтения Тогда
		//принудительно обновим список собеседников
		ОбновитьФормуНаКлиенте();	
	КонецЕсли;
	

	ЭтаФорма[мИмяПоляСообщения] = "";
	Элементы[мИмяПоляСообщения].ОбновитьТекстРедактирования();	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределениеВидаПолучателя(Получатель)
	
	ОпределенПолучательМК = Ложь;
	ОтправляемНаМК = Ложь;
	
	текСтрока = ПолучитьАктуальнуюИнформациюПоПользователю(Получатель);
	
	Если НЕ текСтрока = Неопределено Тогда
		Если ТекСтрока.ЯвляетсяПользователемБД и ТекСтрока.ЯвляетсяПользователемУСС Тогда
			Если ТекСтрока.ПользовательАктивен1С Тогда
				ОпределенПолучательМК = Истина; //1
				ОтправляемНаМК = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ОпределенПолучательМК Тогда  //2й проход
			Если ТекСтрока.ЯвляетсяПользователемМК Тогда
				Если ТекСтрока.ПользовательАктивенМК Тогда
					ОпределенПолучательМК = Истина; 
					ОтправляемНаМК = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ОпределенПолучательМК Тогда  //3й проход
				Если ТекСтрока.ЯвляетсяПользователемБД и ТекСтрока.ЯвляетсяПользователемУСС Тогда
					Если Не ТекСтрока.ПользовательАктивен1С Тогда //отправляем в оффлайн в 1С
						ОпределенПолучательМК = Истина; 
						ОтправляемНаМК = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если Не ОпределенПолучательМК Тогда //4й проход
					Если ТекСтрока.ЯвляетсяПользователемМК Тогда 
						Если Не ТекСтрока.ПользовательАктивенМК Тогда
							ОпределенПолучательМК = Истина; 
							ОтправляемНаМК = Истина;
						КонецЕсли;
					КонецЕсли;
					
					Если Не ОпределенПолучательМК Тогда  //не нашли, выходим...
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "Невозможно отправить сообщение пользователю: " + ТекСтрока.Пользователь + ". Пользователь пропущен.";
						Сообщение.Сообщить();						
						Возврат Неопределено;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ОтправляемНаМК;
	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьАктуальнуюИнформациюПоПользователю(Получатель)
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = "ВЫБРАТЬ
	                |	ВложенныйЗапрос.Ссылка КАК Пользователь,
	                |	ВЫБОР
	                |		КОГДА ВложенныйЗапросДатаПоследнейАктивности1С.ДатаПоследнейАктивности ЕСТЬ NULL 
	                |			ТОГДА ЛОЖЬ
	                |		ИНАЧЕ ИСТИНА
	                |	КОНЕЦ КАК ЯвляетсяПользователемБД,
	                |	ЕСТЬNULL(ВложенныйЗапросПользователиМК.ЯвляетсяПользователемМК, ЛОЖЬ) КАК ЯвляетсяПользователемМК,
	                |	ЕСТЬNULL(ВложенныйЗапросАктивныеПользователиМК.ПользовательМКАктивен, ЛОЖЬ) КАК ПользовательАктивенМК,
	                |	ЕСТЬNULL(ВложенныйЗапросАктивныеПользователи1С.Пользователь1САктивен, ЛОЖЬ) КАК ПользовательАктивен1С,
	                |	ВЫБОР
	                |		КОГДА ЕСТЬNULL(ВложенныйЗапросАктивныеПользователиМК.ПользовательМКАктивен, ЛОЖЬ)
	                |				ИЛИ ЕСТЬNULL(ВложенныйЗапросАктивныеПользователи1С.Пользователь1САктивен, ЛОЖЬ)
	                |			ТОГДА ИСТИНА
	                |		ИНАЧЕ ЛОЖЬ
	                |	КОНЕЦ КАК ПользовательАктивен,
	                |	ЕСТЬNULL(ВложенныйЗапросПользователиБД.ЯвляетсяПользователемУСС, ЛОЖЬ) КАК ЯвляетсяПользователемУСС,
	                |	ВЫБОР
	                |		КОГДА ЕСТЬNULL(ВложенныйЗапросДатаПоследнейАктивности1С.ДатаПоследнейАктивности, &ПустаяДата) > ЕСТЬNULL(ВложенныйЗапросДатаПоследнейАктивностиМК.ДатаПоследнейАктивности, &ПустаяДата)
	                |			ТОГДА ЕСТЬNULL(ВложенныйЗапросДатаПоследнейАктивности1С.ДатаПоследнейАктивности, &ПустаяДата)
	                |		ИНАЧЕ ЕСТЬNULL(ВложенныйЗапросДатаПоследнейАктивностиМК.ДатаПоследнейАктивности, &ПустаяДата)
	                |	КОНЕЦ КАК ДатаПоследнейАктивности
	                |ИЗ
	                |	(ВЫБРАТЬ
	                |		Пользователи.Ссылка КАК Ссылка
	                |	ИЗ
	                |		Справочник.Пользователи КАК Пользователи
	                |	ГДЕ
	                |		Пользователи.Ссылка = &Получатель) КАК ВложенныйЗапрос
	                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                |			ПользователиИБ.Ссылка КАК Пользователь,
	                |			ИСТИНА КАК ЯвляетсяПользователемБД,
	                |			ИСТИНА КАК ЯвляетсяПользователемУСС
	                |		ИЗ
	                |			Справочник.Пользователи КАК ПользователиИБ) КАК ВложенныйЗапросПользователиБД
	                |		ПО ВложенныйЗапрос.Ссылка = ВложенныйЗапросПользователиБД.Пользователь
	                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                |			атл_НастройкиПодключенияМобильныхСотрудников.Пользователь КАК Пользователь,
	                |			атл_НастройкиПодключенияМобильныхСотрудников.ЯвляетсяПользователемМК КАК ЯвляетсяПользователемМК
	                |		ИЗ
	                |			РегистрСведений.атл_НастройкиПодключенияМобильныхСотрудников КАК атл_НастройкиПодключенияМобильныхСотрудников
	                |		ГДЕ
	                |			атл_НастройкиПодключенияМобильныхСотрудников.ЯвляетсяПользователемМК = ИСТИНА) КАК ВложенныйЗапросПользователиМК
	                |		ПО ВложенныйЗапрос.Ссылка = ВложенныйЗапросПользователиМК.Пользователь
	                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |			атл_АктивностьПользователей.Пользователь КАК Пользователь,
	                |			ИСТИНА КАК ПользовательМКАктивен,
	                |			атл_АктивностьПользователей.ДатаПоследнейАктивности КАК ДатаПоследнейАктивности
	                |		ИЗ
	                |			РегистрСведений.атл_АктивностьПользователей КАК атл_АктивностьПользователей
	                |		ГДЕ
	                |			атл_АктивностьПользователей.ДатаПоследнейАктивности >= &ДатаДопустимойПоследнейАктивности
	                |			И атл_АктивностьПользователей.МК = ИСТИНА) КАК ВложенныйЗапросАктивныеПользователиМК
	                |		ПО ВложенныйЗапрос.Ссылка = ВложенныйЗапросАктивныеПользователиМК.Пользователь
	                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |			атл_АктивностьПользователей.Пользователь КАК Пользователь,
	                |			атл_АктивностьПользователей.ДатаПоследнейАктивности КАК ДатаПоследнейАктивности
	                |		ИЗ
	                |			РегистрСведений.атл_АктивностьПользователей КАК атл_АктивностьПользователей
	                |		ГДЕ
	                |			атл_АктивностьПользователей.МК = ИСТИНА) КАК ВложенныйЗапросДатаПоследнейАктивностиМК
	                |		ПО ВложенныйЗапрос.Ссылка = ВложенныйЗапросДатаПоследнейАктивностиМК.Пользователь
	                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                |			атл_АктивностьПользователей.Пользователь КАК Пользователь,
	                |			ИСТИНА КАК Пользователь1САктивен,
	                |			атл_АктивностьПользователей.ДатаПоследнейАктивности КАК ДатаПоследнейАктивности
	                |		ИЗ
	                |			РегистрСведений.атл_АктивностьПользователей КАК атл_АктивностьПользователей
	                |		ГДЕ
	                |			атл_АктивностьПользователей.МК = ЛОЖЬ
	                |			И атл_АктивностьПользователей.ДатаПоследнейАктивности >= &ДатаДопустимойПоследнейАктивности) КАК ВложенныйЗапросАктивныеПользователи1С
	                |		ПО ВложенныйЗапрос.Ссылка = ВложенныйЗапросАктивныеПользователи1С.Пользователь
	                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                |			атл_АктивностьПользователей.Пользователь КАК Пользователь,
	                |			атл_АктивностьПользователей.ДатаПоследнейАктивности КАК ДатаПоследнейАктивности
	                |		ИЗ
	                |			РегистрСведений.атл_АктивностьПользователей КАК атл_АктивностьПользователей
	                |		ГДЕ
	                |			атл_АктивностьПользователей.МК = ЛОЖЬ) КАК ВложенныйЗапросДатаПоследнейАктивности1С
	                |		ПО ВложенныйЗапрос.Ссылка = ВложенныйЗапросДатаПоследнейАктивности1С.Пользователь";
	
	мЗапрос.УстановитьПараметр("ДатаДопустимойПоследнейАктивности", ТекущаяДата() - 300);			
	мЗапрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	мЗапрос.УстановитьПараметр("Получатель", Получатель);	

	мВыборка = мЗапрос.Выполнить().Выбрать();
	Если мВыборка.Следующий() Тогда
		Возврат мВыборка;
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ДобавитьЗаписиВРегистрыПриОтправкеСообщения(ТекстСообщенияИзПоля, Ник, ПолучательМК = Ложь, СсылкаНаОбъект = Неопределено)
	
	ДатаСообщения = ТекущаяДата();
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		ЭтоСсылкаНаОбъект = Истина;
		ТекстСообщения = СсылкаНаОбъект.Метаданные().ПолноеИмя() + "." + Строка(СсылкаНаОбъект.УникальныйИдентификатор());
	Иначе
		ЭтоСсылкаНаОбъект = Ложь;
		ТекстСообщения = ТекстСообщенияИзПоля;
	КонецЕсли;
	
	//создание записи в регистре сообщений
	Сообщение = РегистрыСведений.атл_Сообщения.СоздатьМенеджерЗаписи();
	Сообщение.ДатаРегистрации  			= ДатаСообщения;
	Сообщение.ДатаСоздания     			= ДатаСообщения;
	Сообщение.Отправитель      			= ПараметрыСеанса.ТекущийПользователь;
	Сообщение.Получатель       			= Ник;
	Сообщение.Сообщение        			= ТекстСообщения;
	Сообщение.Административное 			= Ложь;
	Сообщение.ПолучательМК 				= ПолучательМК;
	Сообщение.ИдентификаторИнформационнойБазы = 0;
	Сообщение.ИдентификаторСообщения	= ПолучитьПоследнийИдентификаторСообщения();
	Сообщение.ЭтоСсылкаНаОбъект 		= ЭтоСсылкаНаОбъект;
	
	Если ПолучательМК Тогда
		//Формируем задание на отправку
		ЗаписьПакетаНаОтправку = РегистрыСведений.атл_ПакетыНаОтправку.СоздатьМенеджерЗаписи();
		ЗаписьПакетаНаОтправку.ВнутреннийИдентификаторПакета = ПолучитьПоследнийВнутреннийИдентификаторПакетаНаОтправку();
		ЗаписьПакетаНаОтправку.ИдентификаторОбъекта = Сообщение.ИдентификаторСообщения;
		ЗаписьПакетаНаОтправку.ИдентификаторИнформационнойБазы = 0;
		ЗаписьПакетаНаОтправку.ВидДанных = "Сообщение";
		ЗаписьПакетаНаОтправку.ВидПакета = "Новое сообщение";
		ЗаписьПакетаНаОтправку.ДатаСозданияПакета = ТекущаяДата();
		ЗаписьПакетаНаОтправку.ПолучательПакета = Ник;
		ЗаписьПакетаНаОтправку.Записать();
	Иначе
		Сообщение.ДатаДоставки = ДатаСообщения;
		Сообщение.ДатаОтправки = ДатаСообщения;
	КонецЕсли;
	
	Сообщение.Записать(Истина);	
	
	//добавляем сообщение в таблицу сообщений
	НоваяСтрока = Объект.ТаблицаСообщений.Добавить();
	НоваяСтрока.ИдентификаторСообщения = Сообщение.ИдентификаторСообщения;
	НоваяСтрока.ИдентификаторИнформационнойБазы = 0;
	НоваяСтрока.Сообщение       = ТекстСообщения;
	НоваяСтрока.Пользователь	= Ник;
	НоваяСтрока.ДатаРегистрации = ДатаСообщения;
	НоваяСтрока.ДатаСоздания 	= ДатаСообщения;
	НоваяСтрока.ПолучательМК 	= ПолучательМК;
	НоваяСтрока.ДатаДоставки 	= Сообщение.ДатаДоставки; 
	//НоваяСтрока.ДатаОтправки    = ДатаСообщения;
	
	ИдентификаторСообщенияНаЭкране = "s"+СокрЛП(Сообщение.ИдентификаторИнформационнойБазы)+"_"+СокрЛП(Сообщение.ИдентификаторСообщения);
	НоваяСтрока.ИдентификаторСообщенияНаЭкране = ИдентификаторСообщенияНаЭкране;
	НоваяСтрока.ЭтоСсылкаНаОбъект 		= ЭтоСсылкаНаОбъект;
	НоваяСтрока.СсылкаНаОбъект 			= СсылкаНаОбъект;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСтатусПрочтенияСообщения(ИдентификаторИнформационнойБазы, ИдентификаторСообщения, Пользователь, ДатаПрочтения, ОтправительМК = Ложь) 
	
	ЗаписьРегистра = РегистрыСведений.атл_Сообщения.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.ИдентификаторИнформационнойБазы = ИдентификаторИнформационнойБазы;
	ЗаписьРегистра.ИдентификаторСообщения = ИдентификаторСообщения;
	ЗаписьРегистра.Прочитать();
	
	ЗаписьРегистра.ДатаПрочтения = ДатаПрочтения;
	ИзменялсяСтатусПрочтения = Истина;
	ЗаписьРегистра.Записать();
	Если ОтправительМК Тогда //формируем задачу на отправку пакета о прочтении
		ЗаписьПакетаНаОтправку = РегистрыСведений.атл_ПакетыНаОтправку.СоздатьМенеджерЗаписи();
		ЗаписьПакетаНаОтправку.ВнутреннийИдентификаторПакета = ПолучитьПоследнийВнутреннийИдентификаторПакетаНаОтправку();
		ЗаписьПакетаНаОтправку.ИдентификаторОбъекта = ИдентификаторСообщения;
		ЗаписьПакетаНаОтправку.ИдентификаторИнформационнойБазы = ИдентификаторИнформационнойБазы;
		ЗаписьПакетаНаОтправку.ВидДанных = "Сообщение";
		ЗаписьПакетаНаОтправку.ВидПакета = "Сообщение (дата прочтения)";
		ЗаписьПакетаНаОтправку.ДатаСозданияПакета = ДатаПрочтения;
		ЗаписьПакетаНаОтправку.ПолучательПакета = Пользователь;
		ЗаписьПакетаНаОтправку.Записать();
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПоследнийИдентификаторСообщения() 
	
	//получить последний внутренний идентификатор
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	атл_Сообщения.ИдентификаторСообщения КАК ИдентификаторСообщения
	               |ИЗ
	               |	РегистрСведений.атл_Сообщения КАК атл_Сообщения
	               |ГДЕ
	               |	атл_Сообщения.ИдентификаторИнформационнойБазы = 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ИдентификаторСообщения УБЫВ
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ИдентификаторСообщения = Выборка.ИдентификаторСообщения + 1;
	Иначе
		ИдентификаторСообщения = 1;
	КонецЕсли;
	
	Возврат	ИдентификаторСообщения; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПоследнийВнутреннийИдентификаторПакетаНаОтправку() 
	
	//получить последний внутренний идентификатор
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	атл_ПакетыНаОтправку.ВнутреннийИдентификаторПакета КАК ВнутреннийИдентификаторПакета
	|ИЗ
	|	РегистрСведений.атл_ПакетыНаОтправку КАК атл_ПакетыНаОтправку
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВнутреннийИдентификаторПакета УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ВнутреннийИдентификаторПакета = Выборка.ВнутреннийИдентификаторПакета + 1;
	Иначе
		ВнутреннийИдентификаторПакета = 1;
	КонецЕсли;
	
	Возврат	ВнутреннийИдентификаторПакета; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучениеСтатусаОтправленногоСообщения(ДатаПрочтения, ДатаДоставки, ДатаОтправки)
	
	Если ЗначениеЗаполнено(ДатаПрочтения) Тогда
		СтатусВыводимогоСообщения = "(прочитано) ";
	ИначеЕсли ЗначениеЗаполнено(ДатаДоставки) Тогда
		СтатусВыводимогоСообщения = "(доставлено) ";
	ИначеЕсли ЗначениеЗаполнено(ДатаОтправки) Тогда
		СтатусВыводимогоСообщения = "(отправлено) ";
	Иначе
		СтатусВыводимогоСообщения = "(создано) ";
	КонецЕсли;
	
	Возврат СтатусВыводимогоСообщения;
	
КонецФункции

&НаСервере
Процедура ОбновитьТаблицуСообщений()
	
	ОбновитьСатусыТаблицыСообщений();
	ДобавитьНовыеПолученныеСообщения();	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНовыеПолученныеСообщения()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСообщений.ДатаРегистрации КАК ДатаРегистрации,
	|	ТаблицаСообщений.ДатаСоздания КАК ДатаСоздания,
	|	ТаблицаСообщений.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ТаблицаСообщений.ИдентификаторИнформационнойБазы КАК ИдентификаторИнформационнойБазы,
	|	ТаблицаСообщений.ДатаДоставки КАК ДатаДоставки,
	|	ТаблицаСообщений.ДатаПрочтения КАК ДатаПрочтения,
	|	ТаблицаСообщений.ПолучательМК,
	|	ТаблицаСообщений.ОтправительМК,
	|	ТаблицаСообщений.Административное,
	|	ТаблицаСообщений.Сообщение,
	|	ТаблицаСообщений.Пользователь,
	|	ТаблицаСообщений.Полученное,
	|	ТаблицаСообщений.ЭтоСсылкаНаОбъект,
	|	ТаблицаСообщений.ДатаОтправки
	|ПОМЕСТИТЬ ТаблицаСообщений
	|ИЗ
	|	&ТаблицаСообщений КАК ТаблицаСообщений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	атл_Сообщения.ИдентификаторСообщения,
	|	атл_Сообщения.ИдентификаторИнформационнойБазы,
	|	атл_Сообщения.ДатаРегистрации,
	|	атл_Сообщения.ДатаСоздания,
	|	атл_Сообщения.Отправитель,
	|	атл_Сообщения.Получатель,
	|	атл_Сообщения.ПолучательМК,
	|	атл_Сообщения.ОтправительМК,
	|	атл_Сообщения.Сообщение,
	|	атл_Сообщения.Административное,
	|	атл_Сообщения.ДатаДоставки,
	|	атл_Сообщения.ДатаПрочтения,
	|	атл_Сообщения.ЭтоСсылкаНаОбъект,
	|	атл_Сообщения.ДатаОтправки,
	|	атл_Сообщения.Широта,
	|	атл_Сообщения.Долгота
	|ПОМЕСТИТЬ СообщенияИзРегистра
	|ИЗ
	|	РегистрСведений.атл_Сообщения КАК атл_Сообщения
	|ГДЕ
	|	атл_Сообщения.ДатаПрочтения = &ПустаяДата
	|	И атл_Сообщения.Получатель = &Пользователь
	|	И НЕ атл_Сообщения.УдаленоПолучателем
	|	И НЕ(атл_Сообщения.ПолучательМК
	|				И атл_Сообщения.Получатель = &Пользователь)
	|	И НЕ атл_Сообщения.Получатель = атл_Сообщения.Отправитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ИдентификаторСообщения,
	|	ВложенныйЗапрос.ИдентификаторИнформационнойБазы,
	|	ВложенныйЗапрос.ДатаРегистрации КАК ДатаРегистрации,
	|	ВложенныйЗапрос.ДатаСоздания,
	|	ВложенныйЗапрос.ДатаДоставки,
	|	ВложенныйЗапрос.ДатаПрочтения,
	|	ВложенныйЗапрос.ПолучательМК,
	|	ВложенныйЗапрос.ОтправительМК,
	|	ВложенныйЗапрос.Административное,
	|	ВложенныйЗапрос.Сообщение,
	|	ВложенныйЗапрос.ИдентификаторСообщенияВОбработке,
	|	ВложенныйЗапрос.Пользователь КАК Пользователь,
	|	ВложенныйЗапрос.ЭтоСсылкаНаОбъект,
	|	ВложенныйЗапрос.ДатаОтправки,
	|	ВложенныйЗапрос.Широта,
	|	ВложенныйЗапрос.Долгота
	|ИЗ
	|	(ВЫБРАТЬ
	|		СообщенияИзРегистра.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|		СообщенияИзРегистра.ИдентификаторИнформационнойБазы КАК ИдентификаторИнформационнойБазы,
	|		СообщенияИзРегистра.ДатаРегистрации КАК ДатаРегистрации,
	|		СообщенияИзРегистра.ДатаСоздания КАК ДатаСоздания,
	|		СообщенияИзРегистра.ДатаДоставки КАК ДатаДоставки,
	|		СообщенияИзРегистра.ДатаПрочтения КАК ДатаПрочтения,
	|		СообщенияИзРегистра.ПолучательМК КАК ПолучательМК,
	|		СообщенияИзРегистра.ОтправительМК КАК ОтправительМК,
	|		СообщенияИзРегистра.Административное КАК Административное,
	|		СообщенияИзРегистра.Сообщение КАК Сообщение,
	|		ЕСТЬNULL(ТаблицаСообщений.ИдентификаторСообщения, 0) КАК ИдентификаторСообщенияВОбработке,
	|		СообщенияИзРегистра.Отправитель КАК Пользователь,
	|		СообщенияИзРегистра.ЭтоСсылкаНаОбъект КАК ЭтоСсылкаНаОбъект,
	|		СообщенияИзРегистра.ДатаОтправки КАК ДатаОтправки,
	|		СообщенияИзРегистра.Широта КАК Широта,
	|		СообщенияИзРегистра.Долгота КАК Долгота
	|	ИЗ
	|		СообщенияИзРегистра КАК СообщенияИзРегистра
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСообщений КАК ТаблицаСообщений
	|			ПО СообщенияИзРегистра.ИдентификаторСообщения = ТаблицаСообщений.ИдентификаторСообщения
	|				И СообщенияИзРегистра.ИдентификаторИнформационнойБазы = ТаблицаСообщений.ИдентификаторИнформационнойБазы) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ИдентификаторСообщенияВОбработке = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователь,
	|	ДатаРегистрации
	|ИТОГИ
	|	МИНИМУМ(ДатаРегистрации)
	|ПО
	|	Пользователь
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	Запрос.УстановитьПараметр("ТаблицаСообщений", Объект.ТаблицаСообщений.Выгрузить());
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);	
		
	ВыборкаПользователей = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	Пока ВыборкаПользователей.Следующий() Цикл
		
		ТекстПоля = "";
		Пользователь = ВыборкаПользователей.Пользователь;
		
		//Если форма не открыта, то получаем новые сообщения с историей переписки
		мИмяСтраницыПользователя = ПолучитьИмяСтраницыПользователяНаСервере(Пользователь);
		Если мИмяСтраницыПользователя = Неопределено Тогда		
			ПолучитьСтарыеСообщенияВТаблицуСообщений(Пользователь);
		Иначе
			Выборка = ВыборкаПользователей.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				//выводим непрочитанные сообщения в форму
				
				//Если Выборка.ЭтоСсылкаНаОбъект Тогда
				//	СсылкаНаОбъект = ПолучитьСсылкуПоОписаниюСсылки(Выборка.Сообщение);
				//Иначе
				//	СсылкаНаОбъект = Неопределено;
				//КонецЕсли;
				
				НоваяСтрока = Объект.ТаблицаСообщений.Добавить();
				НоваяСтрока.ИдентификаторСообщения = Выборка.ИдентификаторСообщения;
				НоваяСтрока.ИдентификаторИнформационнойБазы = Выборка.ИдентификаторИнформационнойБазы;
				НоваяСтрока.Сообщение       = Выборка.Сообщение;
				НоваяСтрока.Пользователь	= Выборка.Пользователь;
				
				НоваяСтрока.Полученное = Истина;
				
				НоваяСтрока.ДатаСоздания 	= Выборка.ДатаСоздания;
				НоваяСтрока.ДатаРегистрации = Выборка.ДатаРегистрации;
				НоваяСтрока.ДатаОтправки 	= Выборка.ДатаОтправки;
				НоваяСтрока.ДатаДоставки 	= Выборка.ДатаДоставки;
				
				НоваяСтрока.ПолучательМК 	= Выборка.ПолучательМК;
				НоваяСтрока.ОтправительМК 	= Выборка.ОтправительМК;
				
				НоваяСтрока.Широта		 	= Выборка.Широта;
				НоваяСтрока.Долгота		 	= Выборка.Долгота;
				
				ИдентификаторСообщенияНаЭкране = "s"+СокрЛП(Выборка.ИдентификаторИнформационнойБазы)+"_"+СокрЛП(Выборка.ИдентификаторСообщения);
				НоваяСтрока.ИдентификаторСообщенияНаЭкране = ИдентификаторСообщенияНаЭкране;
				НоваяСтрока.ЭтоСсылкаНаОбъект 		= Выборка.ЭтоСсылкаНаОбъект;
				//НоваяСтрока.СсылкаНаОбъект 			= СсылкаНаОбъект;
					
			КонецЦикла;	

		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСатусыТаблицыСообщений()
	
	Если Объект.ТаблицаСообщений.Количество() <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСообщений.ДатаРегистрации КАК ДатаРегистрации,
	|	ТаблицаСообщений.ДатаСоздания КАК ДатаСоздания,
	|	ТаблицаСообщений.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ТаблицаСообщений.ИдентификаторИнформационнойБазы КАК ИдентификаторИнформационнойБазы,
	|	ТаблицаСообщений.ДатаДоставки КАК ДатаДоставки,
	|	ТаблицаСообщений.ДатаПрочтения КАК ДатаПрочтения,
	|	ТаблицаСообщений.ПолучательМК,
	|	ТаблицаСообщений.ОтправительМК,
	|	ТаблицаСообщений.Административное,
	|	ТаблицаСообщений.Сообщение,
	|	ТаблицаСообщений.Пользователь,
	|	ТаблицаСообщений.ДатаОтправки
	|ПОМЕСТИТЬ ТаблицаСообщений
	|ИЗ
	|	&ТаблицаСообщений КАК ТаблицаСообщений
	|ГДЕ
	|	ТаблицаСообщений.ДатаПрочтения = &ПустаяДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	атл_Сообщения.ИдентификаторСообщения,
	|	атл_Сообщения.ИдентификаторИнформационнойБазы,
	|	атл_Сообщения.ДатаРегистрации,
	|	атл_Сообщения.ДатаСоздания,
	|	атл_Сообщения.Отправитель,
	|	атл_Сообщения.Получатель,
	|	атл_Сообщения.ПолучательМК,
	|	атл_Сообщения.ОтправительМК,
	|	атл_Сообщения.Сообщение,
	|	атл_Сообщения.Административное,
	|	атл_Сообщения.ДатаДоставки,
	|	атл_Сообщения.ДатаПрочтения,
	|	атл_Сообщения.ДатаОтправки
	|ПОМЕСТИТЬ СообщенияИзРегистра
	|ИЗ
	|	РегистрСведений.атл_Сообщения КАК атл_Сообщения
	|ГДЕ
	|	атл_Сообщения.Отправитель = &Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ИдентификаторСообщения,
	|	ВложенныйЗапрос.ИдентификаторИнформационнойБазы,
	|	ВложенныйЗапрос.ДатаРегистрации,
	|	ВложенныйЗапрос.ПолучательМК,
	|	ВложенныйЗапрос.ОтправительМК,
	|	ВложенныйЗапрос.Административное,
	|	ВложенныйЗапрос.Сообщение,
	|	ВложенныйЗапрос.Пользователь КАК Пользователь,
	|	ВложенныйЗапрос.ДатаОтправки,
	|	ВложенныйЗапрос.ДатаДоставки,
	|	ВложенныйЗапрос.ДатаПрочтения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаСообщений.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|		ТаблицаСообщений.ИдентификаторИнформационнойБазы КАК ИдентификаторИнформационнойБазы,
	|		ТаблицаСообщений.ДатаРегистрации КАК ДатаРегистрации,
	|		ТаблицаСообщений.ДатаСоздания КАК ДатаСозданияВТаблице,
	|		ТаблицаСообщений.ДатаОтправки КАК ДатаОтправкиВТаблице,
	|		ТаблицаСообщений.ДатаДоставки КАК ДатаДоставкиВТаблице,
	|		ТаблицаСообщений.ДатаПрочтения КАК ДатаПрочтенияВТаблице,
	|		СообщенияИзРегистра.ДатаОтправки КАК ДатаОтправки,
	|		СообщенияИзРегистра.ДатаДоставки КАК ДатаДоставки,
	|		СообщенияИзРегистра.ДатаПрочтения КАК ДатаПрочтения,
	|		ТаблицаСообщений.ПолучательМК КАК ПолучательМК,
	|		ТаблицаСообщений.ОтправительМК КАК ОтправительМК,
	|		ТаблицаСообщений.Административное КАК Административное,
	|		ТаблицаСообщений.Сообщение КАК Сообщение,
	|		ТаблицаСообщений.Пользователь КАК Пользователь,
	|		ВЫБОР
	|			КОГДА ТаблицаСообщений.ДатаОтправки <> СообщенияИзРегистра.ДатаОтправки
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ТаблицаСообщений.ДатаДоставки <> СообщенияИзРегистра.ДатаДоставки
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТаблицаСообщений.ДатаПрочтения <> СообщенияИзРегистра.ДатаПрочтения
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОНЕЦ КАК ЕстьИзмененияВСтатусах
	|	ИЗ
	|		ТаблицаСообщений КАК ТаблицаСообщений
	|			ЛЕВОЕ СОЕДИНЕНИЕ СообщенияИзРегистра КАК СообщенияИзРегистра
	|			ПО ТаблицаСообщений.ИдентификаторСообщения = СообщенияИзРегистра.ИдентификаторСообщения
	|				И ТаблицаСообщений.ИдентификаторИнформационнойБазы = СообщенияИзРегистра.ИдентификаторИнформационнойБазы) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ЕстьИзмененияВСтатусах = ИСТИНА";	
	
	ТаблицаСообщений = Объект.ТаблицаСообщений;	
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	Запрос.УстановитьПараметр("ТаблицаСообщений", ТаблицаСообщений.Выгрузить());
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		
		СтатусВыводимогоСообщения = ПолучениеСтатусаОтправленногоСообщения(Выборка.ДатаПрочтения, Выборка.ДатаДоставки, Выборка.ДатаОтправки);
			
		ИдентификаторСообщенияНаЭкране = "s"+СокрЛП(Выборка.ИдентификаторИнформационнойБазы)+"_"+СокрЛП(Выборка.ИдентификаторСообщения);
		мОтбор = Новый Структура;
		мОтбор.Вставить("ИдентификаторСообщенияНаЭкране", ИдентификаторСообщенияНаЭкране); 
		
		мНайденныеСтроки = ТаблицаСообщений.НайтиСтроки(мОтбор);		
		Если мНайденныеСтроки.Количество() > 0 Тогда
			СтрокаВТаблице = мНайденныеСтроки[0];
			
			Если СтрокаВТаблице.ДатаОтправки <> Выборка.ДатаОтправки Тогда
				СтрокаВТаблице.ДатаОтправки = Выборка.ДатаОтправки;
				СтрокаВТаблице.Выведено = Ложь;
				СтрокаВТаблице.ОбновитьСтатус = Истина;
			КонецЕсли;
			
			Если СтрокаВТаблице.ДатаДоставки <> Выборка.ДатаДоставки Тогда
				СтрокаВТаблице.ДатаДоставки = Выборка.ДатаДоставки;
				СтрокаВТаблице.Выведено = Ложь;
				СтрокаВТаблице.ОбновитьСтатус = Истина;
			КонецЕсли;
			
			Если СтрокаВТаблице.ДатаПрочтения <> Выборка.ДатаПрочтения Тогда
				СтрокаВТаблице.ДатаПрочтения = Выборка.ДатаПрочтения;
				СтрокаВТаблице.Выведено = Ложь;
				СтрокаВТаблице.ОбновитьСтатус = Истина;
			КонецЕсли;
				
		КонецЕсли;
										
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтарыеСообщенияВТаблицуСообщений(Пользователь, КоличествоВыводимыхСообщений = 5) 
	
	//если указана дата первого непрочитанного сообщения, то определяем минимальную дату, с которой надо выводить сообщения
	
	Запрос = Новый Запрос;
	
	мТекст =	
	"ВЫБРАТЬ
	|	ВложенныйЗапросВсеСообщения.ДатаРегистрации КАК ДатаРегистрации,
	|	ВложенныйЗапросВсеСообщения.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ МинимальнаяДатаЗапроса
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ВложенныйЗапрос.ДатаРегистрации КАК ДатаРегистрации,
	|		ВложенныйЗапрос.Пользователь КАК Пользователь
	|	ИЗ
	|		(ВЫБРАТЬ ПЕРВЫЕ //КоличествоВыводимыхСообщений
	|			атл_Сообщения.ДатаРегистрации КАК ДатаРегистрации,
	|			ВЫБОР
	|				КОГДА атл_Сообщения.Получатель = &Пользователь
	|					ТОГДА атл_Сообщения.Получатель
	|				ИНАЧЕ атл_Сообщения.Отправитель
	|			КОНЕЦ КАК Пользователь
	|		ИЗ
	|			РегистрСведений.атл_Сообщения КАК атл_Сообщения
	|		ГДЕ
	|			(атл_Сообщения.Получатель = &Пользователь
	|						И атл_Сообщения.Отправитель = &ТекущийПользователь
	|						И НЕ атл_Сообщения.УдаленоОтправителем
	|					ИЛИ атл_Сообщения.Получатель = &ТекущийПользователь
	|						И атл_Сообщения.Отправитель = &Пользователь
	|						И НЕ атл_Сообщения.УдаленоПолучателем)
	|			И НЕ(атл_Сообщения.ПолучательМК
	|						И атл_Сообщения.Получатель = &ТекущийПользователь)
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			ДатаРегистрации УБЫВ) КАК ВложенныйЗапрос
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		ДатаРегистрации) КАК ВложенныйЗапросВсеСообщения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВложенныйЗапросНепрочитанныеСообщения.ДатаРегистрации,
	|	ВложенныйЗапросНепрочитанныеСообщения.Пользователь
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		атл_Сообщения.ДатаРегистрации КАК ДатаРегистрации,
	|		ВЫБОР
	|			КОГДА атл_Сообщения.Получатель = &Пользователь
	|				ТОГДА атл_Сообщения.Получатель
	|			ИНАЧЕ атл_Сообщения.Отправитель
	|		КОНЕЦ КАК Пользователь
	|	ИЗ
	|		РегистрСведений.атл_Сообщения КАК атл_Сообщения
	|	ГДЕ
	|		атл_Сообщения.ДатаПрочтения = &ПустаяДата
	|		И атл_Сообщения.Получатель = &ТекущийПользователь
	|		И НЕ атл_Сообщения.УдаленоПолучателем
	|		И НЕ(атл_Сообщения.ПолучательМК
	|					И атл_Сообщения.Получатель = &ТекущийПользователь)
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		ДатаРегистрации) КАК ВложенныйЗапросНепрочитанныеСообщения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	атл_Сообщения.ИдентификаторСообщения,
	|	атл_Сообщения.ИдентификаторИнформационнойБазы,
	|	атл_Сообщения.Отправитель,
	|	атл_Сообщения.Получатель,
	|	атл_Сообщения.ПолучательМК,
	|	атл_Сообщения.ОтправительМК,
	|	ВЫРАЗИТЬ(атл_Сообщения.Сообщение КАК СТРОКА(1000)) КАК Сообщение,
	|	атл_Сообщения.Административное,
	|	атл_Сообщения.ЭтоСсылкаНаОбъект,
	|	атл_Сообщения.ДатаСоздания,
	|	атл_Сообщения.ДатаРегистрации КАК ДатаРегистрации,
	|	атл_Сообщения.ДатаОтправки,
	|	атл_Сообщения.ДатаДоставки,
	|	атл_Сообщения.ДатаПрочтения,
	|	атл_Сообщения.Широта,
	|	атл_Сообщения.Долгота
	|ИЗ
	|	РегистрСведений.атл_Сообщения КАК атл_Сообщения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальнаяДатаЗапроса КАК МинимальнаяДатаЗапроса
	|		ПО атл_Сообщения.ДатаРегистрации >= МинимальнаяДатаЗапроса.ДатаРегистрации
	|ГДЕ
	|	(атл_Сообщения.Получатель = &Пользователь
	|				И атл_Сообщения.Отправитель = &ТекущийПользователь
	|				И НЕ атл_Сообщения.УдаленоОтправителем
	|			ИЛИ атл_Сообщения.Получатель = &ТекущийПользователь
	|				И атл_Сообщения.Отправитель = &Пользователь
	|				И НЕ атл_Сообщения.УдаленоПолучателем)
	|	И НЕ(атл_Сообщения.ПолучательМК
	|				И атл_Сообщения.Получатель = &ТекущийПользователь)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРегистрации";
	
	мТекст = СтрЗаменить(мТекст, "//КоличествоВыводимыхСообщений", Строка(КоличествоВыводимыхСообщений));
	Запрос.Текст = мТекст;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		//выводим сообщение из выборки
		//Если Выборка.ЭтоСсылкаНаОбъект Тогда
		//	СсылкаНаОбъект = ПолучитьСсылкуПоОписаниюСсылки(Выборка.Сообщение);
		//Иначе
		//	СсылкаНаОбъект = Неопределено;
		//КонецЕсли;

		НоваяСтрока = Объект.ТаблицаСообщений.Добавить();
		НоваяСтрока.ИдентификаторСообщения = Выборка.ИдентификаторСообщения;
		НоваяСтрока.ИдентификаторИнформационнойБазы = Выборка.ИдентификаторИнформационнойБазы;
		НоваяСтрока.Сообщение       = Выборка.Сообщение;
		НоваяСтрока.Пользователь 	= Пользователь;
		
		Если Выборка.Отправитель = Пользователь Тогда
			НоваяСтрока.Полученное = Истина;
		КонецЕсли;
		
		НоваяСтрока.ДатаСоздания 	= Выборка.ДатаСоздания;
		НоваяСтрока.ДатаРегистрации = Выборка.ДатаРегистрации;
		НоваяСтрока.ДатаОтправки 	= Выборка.ДатаОтправки;
		НоваяСтрока.ДатаДоставки 	= Выборка.ДатаДоставки;
		НоваяСтрока.ДатаПрочтения 	= Выборка.ДатаПрочтения;
		
		НоваяСтрока.ПолучательМК 	= Выборка.ПолучательМК;
		НоваяСтрока.ОтправительМК 	= Выборка.ОтправительМК;
					
		НоваяСтрока.Широта		 	= Выборка.Широта;
		НоваяСтрока.Долгота		 	= Выборка.Долгота;
		
		ИдентификаторСообщенияНаЭкране = "s"+СокрЛП(Выборка.ИдентификаторИнформационнойБазы)+"_"+СокрЛП(Выборка.ИдентификаторСообщения);
		НоваяСтрока.ИдентификаторСообщенияНаЭкране = ИдентификаторСообщенияНаЭкране;
		НоваяСтрока.ЭтоСсылкаНаОбъект 		= Выборка.ЭтоСсылкаНаОбъект;
		//НоваяСтрока.СсылкаНаОбъект 			= СсылкаНаОбъект;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеИнформацииИзТаблицыСообщений()
	
	мОтбор = Новый Структура;
	мОтбор.Вставить("Выведено", Ложь);
	мНайденныеСтроки = Объект.ТаблицаСообщений.НайтиСтроки(мОтбор);	
	
	Для Каждого текСтрока Из мНайденныеСтроки Цикл
		Если текСтрока.ОбновитьСтатус Тогда
			//Только обновляем статус сообщения						
			СтатусВыводимогоСообщения = ПолучениеСтатусаОтправленногоСообщения(текСтрока.ДатаПрочтения, текСтрока.ДатаДоставки, текСтрока.ДатаОтправки);
			ОбновитьСтатусСообщенийВФормеСообщений(текСтрока.Пользователь, СтатусВыводимогоСообщения, текСтрока.ИдентификаторСообщенияНаЭкране);
			
			текСтрока.ОбновитьСтатус = Ложь;
			текСтрока.Выведено = Истина;
			
		Иначе
			//Выводим новое сообщение
			мИмяСтраницыПользователя = ПолучитьИмяСтраницыПользователя(текСтрока.Пользователь);
			Если мИмяСтраницыПользователя = Неопределено Тогда
				Элементы.ГруппаСообщений.Видимость = Истина;
				ДобавитьСтраницуВФормуСообщений(текСтрока.Пользователь, Ложь, мИмяСтраницыПользователя);				
			КонецЕсли;

			ВыводСообщенийВФормуСообщений(Элементы[мИмяСтраницыПользователя], текСтрока.Пользователь);
			текСтрока.Выведено = Истина;
		КонецЕсли;		
	КонецЦикла;	 
		
	//Обновляем итоговое количество сообщений для каждой страницы пользователя
	ОбновитьКоличествоНепрочитанныхСообщенийДляКаждогоПользователя();
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусСообщенийВФормеСообщений(Пользователь, СтатусВыводимогоСообщения, ИдентификаторСообщенияНаЭкране)
	
	мИмяСтраницыПользователя = ПолучитьИмяСтраницыПользователя(Пользователь);
	Если НЕ мИмяСтраницыПользователя = Неопределено Тогда
		мИмяПоля = мИмяСтраницыПользователя + "ПолеHTMLДокумента";			
		мТекущийЭлемент = Элементы[мИмяПоля].Документ.getElementById(ИдентификаторСообщенияНаЭкране);
		Попытка
			мТекущийЭлемент.innerText = СтатусВыводимогоСообщения;
		Исключение
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры
 
&НаСервере
Процедура УстановитьСтатусПрочтенияДляВсехСообщенийСПользователем(Пользователь)
	
	мОтбор = Новый Структура;
	мОтбор.Вставить("Пользователь", Пользователь);
	мОтбор.Вставить("Полученное", Истина);
	
	мНайденныеСтроки = Объект.ТаблицаСообщений.НайтиСтроки(мОтбор);
	
	Для Каждого текСтрока Из мНайденныеСтроки Цикл
		текСтрока.ДатаПрочтения = ТекущаяДата();
		УстановитьСтатусПрочтенияСообщения(текСтрока.ИдентификаторИнформационнойБазы, текСтрока.ИдентификаторСообщения, 
													текСтрока.Пользователь, текСтрока.ДатаПрочтения);
	КонецЦикла;
	
	ОбновитьКоличествоНепрочитанныхСообщенийСПользователем(Пользователь);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКоличествоНепрочитанныхСообщенийДляКаждогоПользователя()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.ИмяСтраницы,
	               |	Таблица.Пользователь,
	               |	Таблица.КоличествоНепрочитанныхСообщений,
	               |	Таблица.Изменено
	               |ПОМЕСТИТЬ Таблица
	               |ИЗ
	               |	&Таблица КАК Таблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СУММА(1), 0) КАК Количество,
	               |	атл_Сообщения.Отправитель
	               |ПОМЕСТИТЬ КоличествоСообщений
	               |ИЗ
	               |	РегистрСведений.атл_Сообщения КАК атл_Сообщения
	               |ГДЕ
	               |	атл_Сообщения.ДатаПрочтения = &ПустаяДата
	               |	И атл_Сообщения.Получатель = &ТекущийПользователь
	               |	И НЕ атл_Сообщения.УдаленоПолучателем
	               |	И НЕ(атл_Сообщения.ПолучательМК
	               |				И атл_Сообщения.Получатель = &ТекущийПользователь)
	               |	И НЕ атл_Сообщения.Получатель = атл_Сообщения.Отправитель
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	атл_Сообщения.Отправитель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Таблица.ИмяСтраницы,
	               |	Таблица.Пользователь,
	               |	КоличествоСообщений.Количество КАК КоличествоНепрочитанныхСообщений,
	               |	ВЫБОР
	               |		КОГДА КоличествоСообщений.Количество = Таблица.КоличествоНепрочитанныхСообщений
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Изменено
	               |ИЗ
	               |	Таблица КАК Таблица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоСообщений КАК КоличествоСообщений
	               |		ПО Таблица.Пользователь = КоличествоСообщений.Отправитель";
	Запрос.УстановитьПараметр("Таблица", СоответствияСтраницИПользователей.Выгрузить());	
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	СоответствияСтраницИПользователей.Загрузить(Запрос.Выполнить().Выгрузить());

	Для Каждого текПользователь Из СоответствияСтраницИПользователей Цикл		
		Если текПользователь.Изменено Тогда
			стрКоличество = ?(текПользователь.КоличествоНепрочитанныхСообщений > 0, "("+ Строка(текПользователь.КоличествоНепрочитанныхСообщений) + ") ", "");
			Элементы[текПользователь.ИмяСтраницы].Заголовок = стрКоличество + СокрЛП(текПользователь.Пользователь.Наименование);
			текПользователь.Изменено = Ложь;
		КонецЕсли;							
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьКоличествоНепрочитанныхСообщенийСПользователем(Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(СУММА(1), 0) КАК Количество	               
	               |ИЗ
	               |	РегистрСведений.атл_Сообщения КАК атл_Сообщения
	               |ГДЕ
	               |	атл_Сообщения.ДатаПрочтения = &ПустаяДата
	               |	И атл_Сообщения.Получатель = &ТекущийПользователь
	               |	И НЕ атл_Сообщения.УдаленоПолучателем
	               |	И НЕ(атл_Сообщения.ПолучательМК
	               |				И атл_Сообщения.Получатель = &ТекущийПользователь)
	               |	И НЕ атл_Сообщения.Получатель = атл_Сообщения.Отправитель
	               |	И атл_Сообщения.Отправитель = &Пользователь";	
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Выгрузка = Запрос.Выполнить().Выгрузить(); 
	
	Если Выгрузка.Количество() > 0 Тогда
		ОтборТаблицы = Новый  Структура;
		ОтборТаблицы.Вставить("Пользователь", Пользователь);
		НайденныеСтроки = СоответствияСтраницИПользователей.НайтиСтроки(ОтборТаблицы);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].КоличествоНепрочитанныхСообщений = Выгрузка[0].Количество;
			НайденныеСтроки[0].Изменено = Ложь;
			стрКоличество = ?(НайденныеСтроки[0].КоличествоНепрочитанныхСообщений > 0, "("+ Строка(НайденныеСтроки[0].КоличествоНепрочитанныхСообщений) + ") ", "");
			Элементы[НайденныеСтроки[0].ИмяСтраницы].Заголовок = стрКоличество + СокрЛП(НайденныеСтроки[0].Пользователь.Наименование);
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	pEvtObj = ДанныеСобытия.Event;
	Узел = pEvtObj.srcElement;
	
	href = "";
	
	Пока Истина Цикл
		
		Попытка
			ИмяЦели = Узел.tagName
		Исключение
			Прервать;
		КонецПопытки;
		
		Если ИмяЦели = "A" Тогда
			Попытка
				href = Узел.href;
			Исключение
			КонецПопытки;
			Прервать;
		КонецЕсли; 
		
		Узел = Узел.parentElement;
		
	КонецЦикла;
	
	pEvtObj.returnValue = Ложь; 
	
	ОбработатьКомандыПоляHTML(href);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКомандыПоляHTML(href)
			
	НачалоКоманды = Найти(href, "ОткрытьИнформациюОСообщении=");
	Если НачалоКоманды > 0 Тогда
		ОкончаниеКоманды = Найти(href, "ff*ff");
		Если ОкончаниеКоманды = 0 Тогда
			//индентификатор почему-то не нашли
		Иначе
			НачалоИдентификатора = НачалоКоманды + 28;
			ИдентификаторСообщения = Сред(href, НачалоИдентификатора, ОкончаниеКоманды - НачалоИдентификатора);						
			
			МассивСообщений = Объект.ТаблицаСообщений.НайтиСтроки(Новый Структура("ИдентификаторСообщенияНаЭкране", ИдентификаторСообщения));
			
			Если МассивСообщений.Количество() > 0 Тогда
								
				АдресХранилища = ПолучитьАдресХранилищаВыгрузкиТаблицы("ТаблицаСообщений");
				
				Если ЗначениеЗаполнено(АдресХранилища) Тогда
					ПараметрыФормы = Новый Структура;
					ПараметрыФормы.Вставить("ИдентификаторСообщенияНаЭкране", ИдентификаторСообщения);			
					ПараметрыФормы.Вставить("АдресХранилища", АдресХранилища);				
					ОткрытьФорму("Обработка.атл_ОбменСообщениями.Форма.ИнформацияОСообщении", ПараметрыФормы);
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	//отрабатываем команду "ОткрытьСсылку="
	//НачалоКоманды = Найти(href, "ОткрытьСсылку=");
	//Если НачалоКоманды > 0 Тогда
	//	ОкончаниеКоманды = Найти(href, "dd*dd");
	//	Если ОкончаниеКоманды = 0 Тогда
	//		//индентификатор почему-то не нашли
	//	Иначе
	//		НачалоИдентификатора = НачалоКоманды + 14;
	//		ОписаниеСсылкиНаОбъект = Сред(href, НачалоИдентификатора, ОкончаниеКоманды - НачалоИдентификатора);
	//		
	//		//СсылкаНаОбъект = атл_ДополнительныйМодуль.ПолучитьСсылкуПоОписаниюСсылки(ОписаниеСсылкиНаОбъект);
	//		
	//		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
	//			СсылкаНаОбъект.ПолучитьФорму().Открыть();
	//		КонецЕсли;

	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресХранилищаВыгрузкиТаблицы(ИмяТаблицы)
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Объект[ИмяТаблицы].Выгрузить(), УникальныйИдентификатор);	
	
	Возврат АдресХранилища;
	
КонецФункции

&НаСервере
Процедура ДозаполнитьТаблицуСообщенийПослеОтправкиНескольким(АдресТаблицы)
	
	ВременнаяТаблица = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	Для Каждого текСтрока Из ВременнаяТаблица Цикл
		НовСтрока = Объект.ТаблицаСообщений.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, текСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Отображение на карте

&НаКлиенте
Процедура ОтобразитьПользователейНаКарте(АдресСписокаПользователейВХранилище)
	
	АдресТаблицы = ПолучитьАдресТаблицыСписокПараметровОткрытия(АдресСписокаПользователейВХранилище);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресСпискаПараметровОткрытия", АдресТаблицы);
	ПараметрыФормы.Вставить("НеИнтерактивноеОткрытие", Истина);
	ПараметрыФормы.Вставить("ПоказыватьТекущееМестонахождение", Истина);
	
	ОткрытьФорму("Обработка.атл_ОтображениеТочекСТрекомНаКарте.Форма.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресТаблицыСписокПараметровОткрытия(АдресСписокаПользователейВХранилище)
	
	ТаблицаПараметровОткрытия = атл_УправлениеМобильнымиСотрудникамиСервер.СформироватьТаблицуСписокПараметровОткрытияДляОткрытияКарты();
	
	СписокПользователей = ПолучитьИзВременногоХранилища(АдресСписокаПользователейВХранилище);
	
	Для Каждого текПользователь Из СписокПользователей Цикл
		мНоваяСтрока = ТаблицаПараметровОткрытия.Добавить();
		мНоваяСтрока.Пользователь = текПользователь;
	КонецЦикла;

	Возврат ПоместитьВоВременноеХранилище(ТаблицаПараметровОткрытия, УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокПользователейМК(УникальныйИдентификатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	"ВЫБРАТЬ
	               	|	атл_НастройкиПодключенияМобильныхСотрудников.Пользователь КАК Пользователь,
	               	|	атл_НастройкиПодключенияМобильныхСотрудников.ЯвляетсяПользователемМК КАК ЯвляетсяПользователемМК
	               	|ИЗ
	               	|	РегистрСведений.атл_НастройкиПодключенияМобильныхСотрудников КАК атл_НастройкиПодключенияМобильныхСотрудников
	               	|ГДЕ
	               	|	атл_НастройкиПодключенияМобильныхСотрудников.ЯвляетсяПользователемМК = ИСТИНА";
	Выгрузка = Запрос.Выполнить().Выгрузить();
	мСписок = Выгрузка.ВыгрузитьКолонку("Пользователь");
	
	АдресХранилища = ПоместитьВоВременноеХранилище(мСписок, УникальныйИдентификатор);
	Возврат АдресХранилища;
	
КонецФункции

// Настройки

&НаСервере
Процедура НастройкиНаСервере()
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗарядБатареи = Результат.ЗарядБатареи;
		ДатаПоследнейАктивности = Результат.ДатаПоследнейАктивности;
		Координаты = Результат.Координаты;

		УстановитьВидимостьКолонок();
		ОбновитьФормуНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ФункцииПоРаботаHTML

&НаСервереБезКонтекста
Функция ТекстПервоначальногоЗаполнениеПоляHTML()
	
	ТекстПоля = ПолучитьБлокТекстаПоляHTML("Заголовок");
	
	ТекстПоля = ТекстПоля + ПолучитьБлокТекстаПоляHTML("Подвал");
	
	Возврат ТекстПоля;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьБлокТекстаПоляHTML(ТипБлока, Знач АвторСообщения = "", Знач ДатаРегистрации = '00010101', 
					Знач ИдентификаторСообщенияНаЭкране = "", Знач СтатусСообщения = "", Знач Сообщение = "", Знач СсылкаНаОбъект = Неопределено) Экспорт
	
	БлокТекстДляВозврата = "";
	
	Если ТипБлока = "Заголовок" Тогда
		
		БлокТекстДляВозврата = " <HTML><HEAD>
		| <META http-equiv=Content-Type content=""text/html; charset=utf-8"">
		| <STYLE>
		| div
		| {
		|  font-family: Verdana;
		|  margin:2px;
		|  font-size: 13px; 
		| }
		| .messHeader
		| {
		|  margin-top:6px;
		|  font-weight: bold;
		| }
		| .input
		| {
		|  color:#f00;
		| }
		| .output
		| {
		|  color:#00f;
		| }
		| .status
		| {
		|  color:#888;
		|  font-size: 11px; 
		| }
		| .info:LINK, .info:VISITED, .info:ACTIVE { TEXT-DECORATION: NONE;  color:#888; font-size: 11px; } 
		| .info:HOVER { TEXT-DECORATION: NONE ;COLOR:RED; } 		
		| </STYLE>
		| </HEAD>
		| <BODY id=page onload=""window.scrollTo(0,document.getElementById('page').scrollHeight)"">";	
		
	ИначеЕсли ТипБлока = "ВходящееСообщение" Тогда
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			БлокТекстДляВозврата = "   <DIV class=""messHeader input"">" + УдалитьЗапрещенныеСимволы(АвторСообщения) + " (" + УдалитьЗапрещенныеСимволы(ДатаРегистрации) + ") <a href=""#ОткрытьИнформациюОСообщении=" + УдалитьЗапрещенныеСимволы(ИдентификаторСообщенияНаЭкране) + "ff*ff"">(i)</a></DIV>
			|   <DIV><SPAN class=""status"" id=""" + УдалитьЗапрещенныеСимволы(ИдентификаторСообщенияНаЭкране) + """>"+УдалитьЗапрещенныеСимволы(СтатусСообщения)+"</SPAN><a href=""#ОткрытьСсылку=" + УдалитьЗапрещенныеСимволы(Сообщение) + "dd*dd"">"+УдалитьЗапрещенныеСимволы(СокрЛП(СсылкаНаОбъект))+"</a></DIV>";
		Иначе //обычное сообщение
			БлокТекстДляВозврата = "   <DIV class=""messHeader input"">" + УдалитьЗапрещенныеСимволы(АвторСообщения) + " (" + УдалитьЗапрещенныеСимволы(ДатаРегистрации) + ") <a href=""#ОткрытьИнформациюОСообщении=" + УдалитьЗапрещенныеСимволы(ИдентификаторСообщенияНаЭкране) + "ff*ff"">(i)</a></DIV>
			|   <DIV><SPAN class=""status"" id=""" + УдалитьЗапрещенныеСимволы(ИдентификаторСообщенияНаЭкране) + """>"+УдалитьЗапрещенныеСимволы(СтатусСообщения)+"</SPAN>" + УдалитьЗапрещенныеСимволы(Сообщение) + "</DIV>";
		КонецЕсли;
		
	ИначеЕсли ТипБлока = "ИсходящееСообщение" Тогда
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			БлокТекстДляВозврата = "   <DIV class=""messHeader output"">" + УдалитьЗапрещенныеСимволы(АвторСообщения) + " (" + УдалитьЗапрещенныеСимволы(ДатаРегистрации) + ") <a href=""#ОткрытьИнформациюОСообщении=" + УдалитьЗапрещенныеСимволы(ИдентификаторСообщенияНаЭкране) + "ff*ff"">(i)</a></DIV>
			|   <DIV><SPAN class=""status"" id=""" + УдалитьЗапрещенныеСимволы(ИдентификаторСообщенияНаЭкране) + """>"+УдалитьЗапрещенныеСимволы(СтатусСообщения)+"</SPAN><a href=""#ОткрытьСсылку=" + УдалитьЗапрещенныеСимволы(Сообщение) + "dd*dd"">"+УдалитьЗапрещенныеСимволы(СокрЛП(СсылкаНаОбъект))+"</a></DIV>";
		Иначе //обычное сообщение
			БлокТекстДляВозврата = "   <DIV class=""messHeader output"">" + УдалитьЗапрещенныеСимволы(АвторСообщения) + " (" + УдалитьЗапрещенныеСимволы(ДатаРегистрации) + ") <a href=""#ОткрытьИнформациюОСообщении=" + УдалитьЗапрещенныеСимволы(ИдентификаторСообщенияНаЭкране) + "ff*ff"">(i)</a></DIV>
			|   <DIV><SPAN class=""status"" id=""" + УдалитьЗапрещенныеСимволы(ИдентификаторСообщенияНаЭкране) + """>"+УдалитьЗапрещенныеСимволы(СтатусСообщения)+"</SPAN>" + УдалитьЗапрещенныеСимволы(Сообщение) + "</DIV>";
		КонецЕсли;
		
		
		//<a class="info" href=""#ОткрытьСсылку=" + ТекстСсылка + "dd*dd"">(i)</a>
	
	ИначеЕсли ТипБлока = "Подвал" Тогда
		
		БлокТекстДляВозврата = "</BODY></HTML>";
		
	КонецЕсли;
	
	Возврат БлокТекстДляВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция УдалитьЗапрещенныеСимволы(СтрокаДляПреобразования)
	
	СтрокаДляПреобразования = СтрЗаменить(СтрокаДляПреобразования, "&", "&amp;");
	
	СтрокаДляПреобразования = СтрЗаменить(СтрокаДляПреобразования, "<", "&lt;");
	СтрокаДляПреобразования = СтрЗаменить(СтрокаДляПреобразования, ">", "&gt;");
	СтрокаДляПреобразования = СтрЗаменить(СтрокаДляПреобразования, """", "&quot;");
	СтрокаДляПреобразования = СтрЗаменить(СтрокаДляПреобразования, "\n", "<br>");
	СтрокаДляПреобразования = СтрЗаменить(СтрокаДляПреобразования, Символы.ПС, "<br>");

	Возврат СтрокаДляПреобразования;
	
КонецФункции
	
#КонецОбласти








