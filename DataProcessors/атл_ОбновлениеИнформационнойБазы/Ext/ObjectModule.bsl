

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы атл_НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьОбновление(ПараметрыОбновления) Экспорт 

	// Обновление информационной базы.
	ПервыйЗапуск        = (Константы.атл_НомерВерсииКонфигурации.Получить() = "");
	
	Если НЕ ПустаяСтрока(Метаданные.Версия) И Константы.атл_НомерВерсииКонфигурации.Получить() <> Метаданные.Версия И ПервыйЗапуск = Ложь Тогда
		мВсеСообщения = "Изменился номер версии конфигурации. Будет выполнено обновление информационной базы." + Символы.ПС;
	Иначе
		мВсеСообщения = "";
	КонецЕсли;
		
	//Вызов функций заполнения данных для пустой информационной базы
	
	Если ПервыйЗапуск Тогда			
									
		//создаем настройки подключения к серверу
		ЗаписьРегистра = РегистрыСведений.атл_НастройкиПодсистемыУМС.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.АдресСервера = "exchange.mobiforce.ru";
		ЗаписьРегистра.ПериодичностьСинхронизацииССервером = 15;
		ЗаписьРегистра.АдресКартыДляОтображенияТочек = "http://exchange.mobiforce.ru/map/map1c.php";
		Попытка
			ЗаписьРегистра.Записать();
			
			мТекстСообщения = "Обнаружен первый запуск программы!
								|-------------------------------------------------------------------------------------------
								|Дозаполните параметры в форме настроек подсистемы ""Мобифорс""	:
								|  - Логин организации
								|  - Пароль организации
								|  - Пользователя, под которым будет выполняться обмен данными";
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = мТекстСообщения;					
			Сообщение.Сообщить();
			мВсеСообщения = мВсеСообщения + Сообщение.Текст + Символы.ПС; 
			
			ПараметрыОбновления.ПервыйЗапуск = Истина;
							
			Константы.атл_НомерВерсииКонфигурации.Установить(Метаданные.Версия); // после заполнения пустой ИБ установим последний номер версии
				
		Исключение			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Обнаружен первый запуск программы, но первоначальные настройки выполнить не удалось!!!";					
			Сообщение.Сообщить();
			мВсеСообщения = мВсеСообщения + Сообщение.Текст + Символы.ПС;
		КонецПопытки;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ     = Константы.атл_НомерВерсииКонфигурации.Получить();
	ТекущийНомерРелиза  = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	
	НоваяВерсияИБ    = Метаданные.Версия;
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");

	ПараметрыВерсии = Новый Структура;
	ПараметрыВерсии.Вставить("СтрокаВерсии", СтрокаВерсии);
	ПараметрыВерсии.Вставить("СтрокаШапки", СтрокаШапки);

	ПараметрыОбновления.ОткрытьФормуОписанияОбновлений = Ложь;
	
	Если (ТекущийНомерРелиза = "2.0.0" И НовыйНомерРелиза = "2.0.1") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выполняется " + СтрСообщения + Символы.ПС;		
		Сообщение.Сообщить();
		мВсеСообщения = мВсеСообщения + Сообщение.Текст + Символы.ПС;
			
		ПараметрыОбновления.ОткрытьФормуОписанияОбновлений = Истина;
		
		Константы.атл_НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		
	Иначе
		// Стандартоное обновление;
		Если ТекущаяВерсияИБ <> НоваяВерсияИБ Тогда
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Выполняется " + СтрСообщения + Символы.ПС;		
			Сообщение.Сообщить();
			мВсеСообщения = мВсеСообщения + Сообщение.Текст + Символы.ПС;
			
			НачатьТранзакцию();
			// Установка номера версии информационной базы
			Константы.атл_НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	КонецЕсли;
	
	
	// Проверка выполнения обновления информационной базы.
	Если Константы.атл_НомерВерсииКонфигурации.Получить() <> Метаданные.Версия Тогда		
		
		Действие = ?(ПервыйЗапуск, "начальное заполнение", "обновление");
		
		Сообщение = Новый СообщениеПользователю;		
		Сообщение.Текст = "Не выполнено " + Действие + " информационной базы .";
		Сообщение.Сообщить();
		мВсеСообщения = мВсеСообщения + Сообщение.Текст + Символы.ПС;

		ПараметрыОбновления.ТекстВопросаОЗавершенииРаботы = "Не выполнено " + Действие + " информационной базы! Завершить работу системы?";
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Обновление информационной базы выполнено успешно.";
		Сообщение.Сообщить();
		мВсеСообщения = мВсеСообщения + Сообщение.Текст + Символы.ПС;
	КонецЕсли;
	
	ПараметрыВерсии.Вставить("ТекстВсехСообщений", мВсеСообщения);
	
	ПараметрыОбновления.ПараметрыВерсии = ПараметрыВерсии;

КонецПроцедуры // ВыполнитьОбновление

// Получаем из полного номера версии конфигурации номер релиза без номера сборки.
//
// Параметры
//  НомерВерсии  – Строка – полный номер версии
//
// Возвращаемое значение:
//  Строка – номер релиза без номера сборки
//
Функция ПолучитьНомерРелиза(НомерВерсии) Экспорт
	
	КоличествоТочек = 0;
	ДлинаОписанияНомераРелиза = 0;
	
	Для х = 1 По СтрДлина(НомерВерсии) Цикл
	
		Если Сред(НомерВерсии, х, 1) = "." Тогда
			КоличествоТочек = КоличествоТочек + 1;
		КонецЕсли;
		
		Если КоличествоТочек = 3 Тогда
			ДлинаОписанияНомераРелиза = х - 1;
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Лев(НомерВерсии, ДлинаОписанияНомераРелиза);
	
КонецФункции // ПолучитьНомерРелиза()


