
#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаписьРегистра = РегистрыСведений.атл_НастройкиПодсистемыУМС.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Прочитать();
	
	ДолготаПоУмолчанию = ЗаписьРегистра.ДолготаАдресОрганизации;
	ШиротаПоУмолчанию = ЗаписьРегистра.ШиротаАдресОрганизации;
	ЛогинОрганизации = ПреобразованиеСпецСимволов(ЗаписьРегистра.ЛогинОрганизации);
	ПарольОрганизации = ПреобразованиеСпецСимволов(ЗаписьРегистра.ПарольОрганизации);
	
	// Адрес карты для веб-клиента
	Если ЗначениеЗаполнено(ЗаписьРегистра.АдресКартыДляОтображенияТочекВебКлиент) Тогда
		стрАдресКартыВебКлиент = ЗаписьРегистра.АдресКартыДляОтображенияТочекВебКлиент;	
		Если ЗначениеЗаполнено(ЗаписьРегистра.ЗапускHTTPСервисаРаботаСКартойЛогин) Тогда
			стрАдресКартыВебКлиент = СтрЗаменить(стрАдресКартыВебКлиент, "http://", "");
			стрАдресКартыВебКлиент = "http://" + ЗаписьРегистра.ЗапускHTTPСервисаРаботаСКартойЛогин.Код + ":"
									+ ЗаписьРегистра.ЗапускHTTPСервисаРаботаСКартойПароль + "@" + стрАдресКартыВебКлиент;				
		КонецЕсли;
		
		стрАдресКартыВебКлиент = стрАдресКартыВебКлиент  
								+ "?login=" + ЛогинОрганизации + "&pass=" + ПарольОрганизации;
					
		Если ЗначениеЗаполнено(ШиротаПоУмолчанию) И ЗначениеЗаполнено(ДолготаПоУмолчанию) Тогда
			стрАдресКартыВебКлиент = стрАдресКартыВебКлиент +"&longitude=" + ДолготаПоУмолчанию + "&latitude=" + ШиротаПоУмолчанию;
		КонецЕсли;
		
		стрАдресКартыВебКлиент = стрАдресКартыВебКлиент + "&httpclient=1";
	КонецЕсли;
	
	// Адрес карты для остальных режимов запуска
	Если ЗначениеЗаполнено(ЗаписьРегистра.АдресКартыДляОтображенияТочек) Тогда
		стрАдресКарты = ЗаписьРегистра.АдресКартыДляОтображенияТочек 
						+ "?login=" + ЛогинОрганизации + "&pass=" + ПарольОрганизации;				
					
		Если ЗначениеЗаполнено(ШиротаПоУмолчанию) И ЗначениеЗаполнено(ДолготаПоУмолчанию) Тогда
			стрАдресКарты = стрАдресКарты +"&longitude=" + ДолготаПоУмолчанию + "&latitude=" + ШиротаПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторСтаройТочки = 0;
	Объект.НеИнтерактивноеОткрытие = Параметры.НеИнтерактивноеОткрытие;
	Объект.ПоказыватьТрек = Параметры.ПоказыватьТрек;
	Объект.ВидТрека = Параметры.ВидТрека;
	Объект.ДатаНачала = Параметры.ДатаНачала;
	Объект.ДатаОкончания = Параметры.ДатаОкончания;
	Объект.ВводКоординаты = Параметры.ВводКоординаты;
	Объект.ПодборСотрудника = Параметры.ПодборСотрудника;
	Объект.ПоказыватьСтатусы = Параметры.ПоказыватьСтатусы;
	Объект.ПоказыватьКомментарии = Параметры.ПоказыватьКомментарии;
	ПоказыватьТекущееМестонахождение = ?(Параметры.ПоказыватьТекущееМестонахождение,1,0);
	Если НЕ Параметры.АдресСпискаПараметровОткрытия = "" Тогда
		Объект.СписокПараметровОткрытия.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресСпискаПараметровОткрытия));
	КонецЕсли;
	
	Если Объект.НеИнтерактивноеОткрытие Тогда
		Если ЗначениеЗаполнено(Параметры.ЗаголовокФормы) Тогда
			Заголовок = Параметры.ЗаголовокФормы;	
		КонецЕсли;
		
		ЗаполнитьСпискиДаннымиИзПараметровОткрытия();
		ВидимостьДоступностьЭлементовФормыПриНеИнтерактивномОткрытии();
	Иначе
		Объект.ПоказыватьТрек = Истина;
		Объект.ВидТрека = Перечисления.атл_ВидыИсточниковКоординат.GPS;
		ПоказыватьТекущееМестонахождение = 1;
		//ЗаполнитьСписокПользователей();
		
		ВидНастройки = "МаршрутСотрудника";
		Элементы.НастройкаМаршрутСотрудника.Пометка = Истина;
		ОтображениеЭлементовПоВидуНастройкиОтчета();
	КонецЕсли;
		
	ЗаполнитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ Объект.НеИнтерактивноеОткрытие Тогда
		ДоступностьЭлементовФормы();
		ПодключитьОбработчикОжидания("ОбновитьПолеHTMLДокументаДляИнтерактивногоОткрытия", 1);
	Иначе
		Если НеобходимоЗакрытиеФормы Тогда						
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ТекстСообщения", "Данных для отображения на карте нет!");
			ОткрытьФорму("Обработка.атл_ОтображениеТочекСТрекомНаКарте.Форма.ФормаСообщения", ПараметрыФормы,,,,,Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияОЗакрытии", ЭтотОбъект));			
		ИначеЕсли НеНайденыТочкиСАдресами Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ТекстСообщения", "Адрес не найден, уточните поисковый запрос.");
			ОткрытьФорму("Обработка.атл_ОтображениеТочекСТрекомНаКарте.Форма.ФормаСообщения", ПараметрыФормы);
		КонецЕсли;				
	КонецЕсли;
		
	Если НЕ НеобходимоЗакрытиеФормы Тогда
		ОткрытьКарту();
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти


#Область СобытияЭлементовФормы

&НаКлиенте
Процедура ПоказыватьТрекПриИзменении(Элемент)
	
	ДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьМестонахождениеПриИзменении(Элемент)
		
	ДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьТекущееМестонахождениеПриИзменении(Элемент)
		
	ДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСообщенияПриИзменении(Элемент)
	
	Если ПоказыватьСообщения Тогда
		ВходящиеСообщения = Истина;
		ИсходящиеСообщения = Истина;
	Иначе
		ВходящиеСообщения = Ложь;
		ИсходящиеСообщения = Ложь;
	КонецЕсли;
	
	ДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЗадачиПриИзменении(Элемент)	
		
	Если ПоказыватьЗадачи Тогда
		ДоступностьЭлементовФормы();
		ПоказыватьЗадачиПриИзмененииНаСервере();
	Иначе
		Объект.ПоказыватьСтатусы = Ложь;
		Объект.ПоказыватьКомментарии = Ложь;         
		ВходящиеКомментарии = Ложь;             
		ИсходящиеКомментарии = Ложь;
		СписокСтатусов.Очистить();            
		СписокЗадач.Очистить();
		ДоступностьЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСтатусыПриИзменении(Элемент)
	
	ДоступностьЭлементовФормы();
	
	Если Объект.ПоказыватьСтатусы Тогда
		Для Каждого текСтрока Из СписокСтатусов Цикл
			текСтрока.Флаг = Истина;
		КонецЦикла;
	Иначе
		Для Каждого текСтрока Из СписокСтатусов Цикл
			текСтрока.Флаг = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьКомментарииПриИзменении(Элемент)
	
	Если Объект.ПоказыватьКомментарии Тогда
		ВходящиеКомментарии = Истина;
		ИсходящиеКомментарии = Истина;
	Иначе
		ВходящиеКомментарии = Ложь;
		ИсходящиеКомментарии = Ложь;	
	КонецЕсли;

	ДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Если ПоказыватьЗадачи И Объект.ДатаНачала <> Дата("00010101") И Объект.ДатаОкончания <> Дата("00010101") Тогда
		ЗаполнитьСписокЗадач();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	Если ПоказыватьЗадачи И Объект.ДатаНачала <> Дата("00010101") И Объект.ДатаОкончания <> Дата("00010101") Тогда
		ЗаполнитьСписокЗадач();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейЦветНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	мТекущиеДанные = Элементы.СписокПользователей.ТекущиеДанные;
	
	Если НЕ мТекущиеДанные = Неопределено Тогда
		мПараметры = Новый Структура("НачальноеЗначение", мТекущиеДанные.Цвет);
		мДопПараметры = Новый Структура("ИдентификаторСтроки", мТекущиеДанные.ПолучитьИдентификатор());		
		мОповещение = Новый ОписаниеОповещения("СписокПользователейЦветНачалоВыбораЗавершение", ЭтотОбъект, мДопПараметры);
		
		ОткрытьФорму("Обработка.атл_ОтображениеТочекСТрекомНаКарте.Форма.ФормаВыбораЦвета", мПараметры, ЭтаФорма,,,, мОповещение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокСамостоятельныхТочекПриАктивизацииСтроки(Элемент)	
		
	ТекущиеДанныеСтроки = Элементы.СписокСамостоятельныхТочек.ТекущиеДанные;
	
	Если ТекущиеДанныеСтроки = Неопределено Тогда
		ИдентификаторТекущейТочки = 0;
		КомментарийПоТочке = "";
	Иначе
		Если ТекущиеДанныеСтроки.ЕстьКоординаты Тогда
			ИдентификаторТекущейТочки = ТекущиеДанныеСтроки.НомерСтроки;
			КомментарийПоТочке = "";
		Иначе
			ИдентификаторТекущейТочки = ТекущиеДанныеСтроки.НомерСтроки;
			КомментарийПоТочке = "Нет координат";
		КонецЕсли;
		
		Если ИдентификаторСтаройТочки <> ИдентификаторТекущейТочки Тогда
			
			КомандаДляУдаления = "";
			КомандаДляДобавления = "";
							
			Если ИдентификаторТекущейТочки = 0 Тогда
				КомандаДляДобавления = КомандаДляДобавления + "setActivePoints({});";
			Иначе
				КомандаДляДобавления = КомандаДляДобавления + "setActivePoints({params:{fromUserInput:"+?(ОбработкаТочкиКарты,"false","true")+"},points:['p" + ИдентификаторТекущейТочки + "']});";
			КонецЕсли;
			
			//Элементы.ПолеHTMLДокумента.Документ.parentWindow.eval(КомандаДляУдаления + КомандаДляДобавления);
			ПередатьКомандуКарте(КомандаДляУдаления + КомандаДляДобавления);
		КонецЕсли;
	КонецЕсли;
		
	ИдентификаторСтаройТочки = ИдентификаторТекущейТочки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLДокументаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	//ДанныеСобытия.Event.srcElement.procType
	
	//Если Элементы.ПолеHTMLДокумента.Документ.parentWindow.onload = Null Тогда
	//	Возврат;
	//КонецЕсли;
	
	Если ДанныеСобытия.Event.dataFld = "map_event" Тогда
		Если ДанныеСобытия.Event.srcElement.procType = 1 Тогда // проверка открытия карты
			Если КоличествоЗапусковКарты > 2 Тогда
				ПолеHTMLДокумента = "";
				ПоказатьПредупреждение(, "Вывести карту не удалось. Возможно проблемы в настройках браузера",,"Внимание!");
				
			ИначеЕсли ДанныеСобытия.Event.srcElement.procParam = "loadok" И Объект.НеИнтерактивноеОткрытие Тогда
				ОбновитьПолеHTMLДокументаДляНеИнтерактивногоОткрытия();
				
			ИначеЕсли ДанныеСобытия.Event.srcElement.procParam = "noVML" Тогда
				// Вырабатывается когда карта запущена без параметра, базовый тип карты не подошел, надо пробовать запустить с параметром browser=1.
				РежимЗапуска = 1;
				ОткрытьКарту();
				
			ИначеЕсли ДанныеСобытия.Event.srcElement.procParam = "noSVG" Тогда
				// Вырабатывается когда карта запущена с параметром  browser=1, тип карты не подошел, надо пробовать запустить без параметров
				РежимЗапуска = 0;
				ОткрытьКарту();
			КонецЕсли;	
			
		ИначеЕсли ДанныеСобытия.Event.srcElement.procType = 3 Тогда
			// разбор возвращенного идентификатора
			ТекущийИдентификаторТочкиКарты = ДанныеСобытия.Event.srcElement.procParam;
			ТекущийИдентификаторТочкиКарты = СтрЗаменить(ТекущийИдентификаторТочкиКарты, "p", "");
			Попытка
				ОбработкаТочкиКарты = Истина;
				АктивнаяСтрокаТочкиНаКарте = Объект.СписокСамостоятельныхТочек[Число(ТекущийИдентификаторТочкиКарты)-1].ПолучитьИдентификатор();
				Элементы.СписокСамостоятельныхТочек.ТекущаяСтрока = АктивнаяСтрокаТочкиНаКарте;				
				ОбработкаТочкиКарты = Ложь;
			Исключение
			КонецПопытки;
			
		ИначеЕсли ДанныеСобытия.Event.srcElement.procType = 4 Тогда			
			// разбор возвращенного идентификатора
			ТекущийИдентификаторТочкиКарты = ДанныеСобытия.Event.srcElement.procParam;
			ТекущийИдентификаторТочкиКарты = СтрЗаменить(ТекущийИдентификаторТочкиКарты, "p", "");
			Попытка
				мОбработкаТочкиКарты = Истина;
				АктивнаяСтрокаТочкиНаКарте = Объект.СписокСамостоятельныхТочек[Число(ТекущийИдентификаторТочкиКарты)-1].ПолучитьИдентификатор();
				Элементы.СписокСамостоятельныхТочек.ТекущаяСтрока = АктивнаяСтрокаТочкиНаКарте;
				мОбработкаТочкиКарты = Ложь;
			Исключение
			КонецПопытки;
			
		//ИначеЕсли ДанныеСобытия.Event.srcElement.procType = 5 Тогда		
		//	// разбор возвращенного идентификатора
		//	Сообщить(pEvtObj.srcElement.procParam);
		//	Полигон = Новый Массив;
		//	Стр=Сред(pEvtObj.srcElement.procParam,2,СтрДлина(pEvtObj.srcElement.procParam)-2);
		//	Буфер=стрЗаменить(Стр,"],[",Символы.ПС);
		//	Полигон.Добавить(0);
		//	Полигон.Добавить(0);
		//	Для Счетчик = 1 По СтрЧислоСтрок(Буфер) Цикл
		//		ТекСтрока = СтрПолучитьСтроку(Буфер, Счетчик);
		//		Буфер1=стрЗаменить(ТекСтрока,",",Символы.ПС);
		//		Полигон.Добавить(Число(СтрПолучитьСтроку(Буфер1, 1)));
		//		Полигон.Добавить(Число(СтрПолучитьСтроку(Буфер1, 2)));
		//	КонецЦикла;		
			
		//ИначеЕсли ДанныеСобытия.Event.srcElement.procType = 6 Тогда
		//	ТочкаКлик = Новый Массив;
		//	Стр=Сред(pEvtObj.srcElement.procParam,2,СтрДлина(pEvtObj.srcElement.procParam)-2);
		//	Буфер=стрЗаменить(Стр,",",Символы.ПС);
		//	ТочкаКлик.Добавить(Число(СтрПолучитьСтроку(Буфер, 1)));
		//	ТочкаКлик.Добавить(Число(СтрПолучитьСтроку(Буфер, 2)));
		//    // ПроверкаПринадлежностиТочкиПолигону(Полигон,ТочкаКлик)

		ИначеЕсли ДанныеСобытия.Event.srcElement.procType = 7 Тогда 
			// Ввод координаты
			Если Объект.ВводКоординаты Тогда
				Закрыть(ДанныеСобытия.Event.srcElement.procParam);
			КонецЕсли;
				
		ИначеЕсли ДанныеСобытия.Event.srcElement.procType = 8 Тогда  // Открыть задачу
			СсылкаНаЗадачу = ПолучитьСсылкуНаЗадачу(ДанныеСобытия.Event.srcElement.procParam);
			Если НЕ Найти(Строка(СсылкаНаЗадачу), "Объект не найден") > 0 Тогда				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Ключ", СсылкаНаЗадачу);
				ОткрытьФорму("Документ.атл_ЗадачаМобильномуСотруднику.Форма.ФормаДокумента", ПараметрыФормы);
			КонецЕсли;
			
		ИначеЕсли ДанныеСобытия.Event.srcElement.procType = 9 Тогда // Открыть вложение комментария
			СтрокаПараметров = ДанныеСобытия.Event.srcElement.procParam;
			НайденныйРазделитель = Найти(СтрокаПараметров, ";");
			Если НайденныйРазделитель > 0 Тогда
				стрИДФайла = Сред(СтрокаПараметров, 1, НайденныйРазделитель - 1);
				стрИДБазы = Сред(СтрокаПараметров, НайденныйРазделитель + 1);
				
				ИмяФайла = "";
				АдресФайла = "";
				ПолучитьИмяФайлаИАдресФайла(стрИДБазы, стрИДФайла, ИмяФайла, АдресФайла);			
			
				#Если ВебКлиент Тогда
					
					Если Не ПодключитьРасширениеРаботыСФайлами() Тогда 
						ПодключитьРасширениеРаботыСФайлами();								
					КонецЕсли;
					ПолучитьФайл(АдресФайла, ИмяФайла, Истина);
					
				#Иначе
					
					РабочийКаталогПользователя = КаталогВременныхФайлов();
					ПолноеИмяФайлаНаКлиенте = РабочийКаталогПользователя + ИмяФайла;		
					
					Попытка
						ФайлНаДиске = Новый Файл(ПолноеИмяФайлаНаКлиенте);				
						Если ФайлНаДиске.Существует() Тогда
							ЗапуститьПриложение(ПолноеИмяФайлаНаКлиенте);
						Иначе
							ПолучитьФайл(АдресФайла, ПолноеИмяФайлаНаКлиенте, Ложь);
							ЗапуститьПриложение(ПолноеИмяФайлаНаКлиенте);
						КонецЕсли;
					Исключение
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "Не удалось для открытия записать файл на диск!";
						Сообщение.Сообщить();				
					КонецПопытки;
					
				#КонецЕсли

				//ЗаписьФайла = РегистрыСведений.атл_ФайлыУМС.СоздатьМенеджерЗаписи();
				//ЗаписьФайла.ИдентификаторИнформационнойБазы = стрИДБазы;
				//ЗаписьФайла.ИдентификаторФайла = стрИДФайла;
				//ЗаписьФайла.Прочитать();
				//
				//Если ЗаписьФайла.Выбран() Тогда
				//	атл_УправлениеМобильнымиСотрудниками.ОткрытьФайл(ЗаписьФайла.ИмяФайла, ЗаписьФайла.ДанныеФайла);
				//КонецЕсли;

			КонецЕсли;
			
		ИначеЕсли ДанныеСобытия.Event.srcElement.procType = 10 Тогда // Выбор сотрудника
			Если Объект.ПодборСотрудника Тогда
				СсылкаНаПользователя = ПолучитьСсылкуНаПользователя(ДанныеСобытия.Event.srcElement.procParam);
				Если НЕ Найти(Строка(СсылкаНаПользователя), "Объект не найден") > 0 Тогда
					Закрыть(СсылкаНаПользователя);
				Иначе
					Закрыть();
				КонецЕсли;			
			КонецЕсли;
			
		ИначеЕсли ДанныеСобытия.Event.srcElement.procType = 11 Тогда // Поиск адреса на карте			
			ПараметрыПоиска = ДанныеСобытия.Event.srcElement.procParam;
			НайденныйСимвол1 = Найти(ПараметрыПоиска, "string"":");
			НайденныйСимвол2 = Найти(ПараметрыПоиска, "view"":[");
			Если НайденныйСимвол1 > 0 И НайденныйСимвол2 > 1 Тогда
				МассивТочекКоординат = СтрЗаменить(Сред(ПараметрыПоиска, НайденныйСимвол2 + 7),"]}", "");
				МассивТочекКоординат = СтрРазделить(МассивТочекКоординат, ",");
				АдресДляПоискаНаКарте = Сред(ПараметрыПоиска, НайденныйСимвол1 + 9, НайденныйСимвол2 - 15); 	
			КонецЕсли;
			
			ОбновитьДанныеТаблицПриПоискеАдреса(МассивТочекКоординат);
			
			Если НеНайденыТочкиСАдресами Тогда
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ТекстСообщения", "Адрес не найден, уточните поисковый запрос.");
				ОткрытьФорму("Обработка.атл_ОтображениеТочекСТрекомНаКарте.Форма.ФормаСообщения", ПараметрыФормы);
			КонецЕсли;
			Если НеобходимоОбновитьКарту Тогда
				ОбновитьПолеHTMLДокумента();
			КонецЕсли;
			
		//ИначеЕсли ДанныеСобытия.Event.srcElement.procParam = "loadok" Тогда
		//	ЭлементыФормы[ИмяПоляHTML].Документ.parentWindow.eval("showPolylineMenu();");
		//	
		//	Если ВводКоординаты Тогда
		//		ЭлементыФормы[ИмяПоляHTML].Документ.parentWindow.eval("cursorPositionInput();");
		//	КонецЕсли;
		//	Если НеИнтерактивноеОткрытие Тогда
		//		ОбновитьПолеHTMLДокумента();
		//	КонецЕсли;		
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	СписокПользователей.Очистить();
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		НовСтрока = СписокПользователей.Добавить();
		НовСтрока.Пользователь = Пользователь;
		НовСтрока.Флаг = Истина;
		НовСтрока.Цвет = "#0F04D7";
		
	ИначеЕсли Пользователь = "Все" Тогда
		ЗаполнитьСписокПользователей();	
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область КомандыФормы

&НаКлиенте
Процедура ВыборПериода(Команда)
	
	ПеременнаяТипаСтандартныйПериод = Новый СтандартныйПериод; 

	Диалог = Новый ДиалогРедактированияСтандартногоПериода(); 
	Диалог.Период.ДатаНачала = Объект.ДатаНачала; 
	Диалог.Период.ДатаОкончания = Объект.ДатаОкончания; 
	Если Диалог.Редактировать() Тогда 
		ПеременнаяТипаСтандартныйПериод = Диалог.Период;
		Объект.ДатаНачала = ПеременнаяТипаСтандартныйПериод.ДатаНачала;
		Объект.ДатаОкончания = ПеременнаяТипаСтандартныйПериод.ДатаОкончания;
	КонецЕсли;
	
	Если ПоказыватьЗадачи Тогда
		ЗаполнитьСписокЗадач();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗадач(Команда)
	
	Если СписокЗадач.Количество() > 0 Тогда
		мОповещение = Новый ОписаниеОповещения("ОбновитьСписокЗадачЗавершение", ЭтотОбъект);
		ПоказатьВопрос(мОповещение, "Табличная часть задач мобильному сотруднику будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);		
	Иначе
		ЗаполнитьСписокЗадач();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСтатусовУстановитьФлажки(Команда)
	
	Для Каждого текСтрока Из СписокСтатусов Цикл
		текСтрока.Флаг = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСтатусовСнятьФлажки(Команда)
	
	Для Каждого текСтрока Из СписокСтатусов Цикл
		текСтрока.Флаг = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейУстановитьФлажки(Команда)
		
	ЗаполнитьФлажкиСпискаПользователей(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейСнятьФлажки(Команда)
	
	ЗаполнитьФлажкиСпискаПользователей(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачУстановитьФлажки(Команда)
	
	ЗаполнитьФлажкиСпискаЗадач(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачСнятьФлажки(Команда)
	
	ЗаполнитьФлажкиСпискаЗадач(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКарту(Команда)
	
	ОбновитьКартуНаСервере();
	
	Если НетТочекНаКартеДляОтображения = Истина И СтрокаДляОтображенияЛиний = "" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекстСообщения", "Данных для отображения на карте нет!");
		ОткрытьФорму("Обработка.атл_ОтображениеТочекСТрекомНаКарте.Форма.ФормаСообщения", ПараметрыФормы);
	КонецЕсли;
	
	Если НеобходимоОбновитьКарту Тогда
		ОбновитьПолеHTMLДокумента();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастройкаМестоположениеСотрудника(Команда)
	
	Если НЕ ВидНастройки = "МаршрутСотрудника" Тогда
		УбратьПометкиВПодменюВидНастройки();
		Элементы.НастройкаМаршрутСотрудника.Пометка = Истина;
		
		ВидНастройки = "МаршрутСотрудника";
		ПоказыватьМестонахождение = Ложь;
		Объект.ПоказыватьТрек = Истина;
		Если Пользователь = "Все" Тогда
			Пользователь = Неопределено;
		КонецЕсли;
		
		ОтображениеЭлементовПоВидуНастройкиОтчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаМестонахождениеСотрудников(Команда)
	
	Если НЕ ВидНастройки = "МестонахождениеСотрудников" Тогда
		УбратьПометкиВПодменюВидНастройки();
		Элементы.НастройкаМестонахождениеСотрудников.Пометка = Истина;
		
		ВидНастройки = "МестонахождениеСотрудников";		
		ПоказыватьМестонахождение = Истина;
		Объект.ПоказыватьТрек = Ложь;
		
		ОтображениеЭлементовПоВидуНастройкиОтчета();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ЗавершениеКомандИСобытий

&НаКлиенте
Процедура ОбновитьСписокЗадачЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСписокЗадач();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейЦветНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		мТекущиеДанные = СписокПользователей.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		мТекущиеДанные.Цвет = РезультатЗакрытия;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияОЗакрытии(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма.Закрыть();	
	
КонецПроцедуры

#КонецОбласти


#Область ЗаполнениеТаблиц

&НаСервере
Процедура ЗаполнитьСписокПользователей()
	
	СписокПользователей.Очистить();
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = "ВЫБРАТЬ
	                |	Пользователи.Ссылка КАК Пользователь,
					|	""#0F04D7"" КАК Цвет,
					|	ИСТИНА КАК Флаг
	                |ИЗ
	                |	Справочник.Пользователи КАК Пользователи
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Пользователи.Наименование";	
	мВыгрузка = мЗапрос.Выполнить().Выгрузить();
	СписокПользователей.Загрузить(мВыгрузка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокЗадач()
	
	Если ПроверкаЗаполненияФормы() = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗадач.Очистить();
	
	мСписок = Новый СписокЗначений;
	мНайденныеСтроки = СписокПользователей.НайтиСтроки(Новый Структура("Флаг", Истина));
	Для Каждого текПользователь Из мНайденныеСтроки Цикл
		мСписок.Добавить(текПользователь.Пользователь);
	КонецЦикла;
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	атл_ЗадачаМобильномуСотруднику.Ссылка КАК ЗадачаМобильномуСотруднику,
					|	атл_ЗадачаМобильномуСотруднику.Исполнитель,
	                |	ИСТИНА КАК Флаг
	                |ИЗ
	                |	Документ.атл_ЗадачаМобильномуСотруднику КАК атл_ЗадачаМобильномуСотруднику
	                |ГДЕ
	                |	атл_ЗадачаМобильномуСотруднику.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания					
					|	//ДопУсловие
	                |	И атл_ЗадачаМобильномуСотруднику.Исполнитель В(&СписокПользователей)";
	мЗапрос.УстановитьПараметр("ДатаНачала", Объект.ДатаНачала);
	мЗапрос.УстановитьПараметр("ДатаОкончания", Объект.ДатаОкончания);
	мЗапрос.УстановитьПараметр("СписокПользователей", мСписок);
	
	мДопУсловие = "";
	Для Каждого текСтатус Из СписокСтатусов Цикл
		мДопУсловие = мДопУсловие + "	ИЛИ атл_ЗадачаМобильномуСотруднику." + текСтатус.ИмяРеквизита + " МЕЖДУ &ДатаНачала И &ДатаОкончания";
	КонецЦикла;
	Если НЕ мДопУсловие = "" Тогда
		мДопУсловие = мДопУсловие + ")";
		мЗапрос.Текст = СтрЗаменить(мЗапрос.Текст, "атл_ЗадачаМобильномуСотруднику.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания",
													"(атл_ЗадачаМобильномуСотруднику.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания");
	КонецЕсли;
	мЗапрос.Текст = СтрЗаменить(мЗапрос.Текст, "//ДопУсловие", мДопУсловие);											
	
	мВыгрузка = мЗапрос.Выполнить().Выгрузить();
	СписокЗадач.Загрузить(мВыгрузка);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСтатусов()
	
	СписокСтатусов.Очистить();
	
	мНоваяСтрока = СписокСтатусов.Добавить();
	мНоваяСтрока.Статус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Получил;
	мНоваяСтрока.ИмяРеквизита = "ПолучилДата";
	//мНоваяСтрока.Флаг = Истина;
	
	мНоваяСтрока = СписокСтатусов.Добавить();
	мНоваяСтрока.Статус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Прочитал;
	мНоваяСтрока.ИмяРеквизита = "ПрочиталДата";
	//мНоваяСтрока.Флаг = Истина;	
	
	мНоваяСтрока = СписокСтатусов.Добавить();
	мНоваяСтрока.Статус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Принял;
	мНоваяСтрока.ИмяРеквизита = "ПринялОтклонилДата";
	//мНоваяСтрока.Флаг = Истина;	
	
	мНоваяСтрока = СписокСтатусов.Добавить();
	мНоваяСтрока.Статус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Отклонил;
	мНоваяСтрока.ИмяРеквизита = "ПринялОтклонилДата";
	//мНоваяСтрока.Флаг = Истина;	
	
	мНоваяСтрока = СписокСтатусов.Добавить();
	мНоваяСтрока.Статус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Выехал;
	мНоваяСтрока.ИмяРеквизита = "ВыехалДата";
	//мНоваяСтрока.Флаг = Истина;
	
	мНоваяСтрока = СписокСтатусов.Добавить();
	мНоваяСтрока.Статус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Приехал;
	мНоваяСтрока.ИмяРеквизита = "ПриехалДата";
	//мНоваяСтрока.Флаг = Истина;
	
	мНоваяСтрока = СписокСтатусов.Добавить();
	мНоваяСтрока.Статус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Завершил;
	мНоваяСтрока.ИмяРеквизита = "ЗавершилДата";
	//мНоваяСтрока.Флаг = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокТочекЛиний()
	
	Объект.СписокТочекЛиний.Очистить();
		
	Если НЕ Объект.ПоказыватьТрек Тогда
		Возврат;
	КонецЕсли;
	
	мЗапрос = Новый Запрос;	
	мТекст = "ВЫБРАТЬ
	         |	Таблица.Пользователь,
	         |	Таблица.Флаг
	         |ПОМЕСТИТЬ ТаблицаПользователей
	         |ИЗ
	         |	&Таблица КАК Таблица
	         |ГДЕ
	         |	Таблица.Флаг = ИСТИНА
	         |;
	         |
	         |////////////////////////////////////////////////////////////////////////////////
	         |ВЫБРАТЬ
	         |	атл_КоординатыТрека.Период КАК Время,
			 |	РАЗНОСТЬДАТ(&ДатаНачала, атл_КоординатыТрека.Период, СЕКУНДА) КАК СдвигВремениКоординаты,
	         |	атл_КоординатыТрека.Пользователь КАК Пользователь,
	         |	атл_КоординатыТрека.Широта КАК Широта,
	         |	атл_КоординатыТрека.Долгота КАК Долгота,
	         |	атл_КоординатыТрека.Высота КАК Высота,
	         |	атл_КоординатыТрека.ИсточникКоординат КАК ИсточникКоординат,
	         |	атл_КоординатыТрека.Скорость КАК Скорость,
	         |	атл_КоординатыТрека.Точность КАК Точность,
	         //|	атл_КоординатыТрека.ЗарядБатареи КАК ЗарядБатареи,
	         |	атл_КоординатыТрека.ДатаРегистрации КАК ДатаРегистрации,
	         |	""["" + атл_КоординатыТрека.Долгота + "","" + атл_КоординатыТрека.Широта + "",_SHIFT_],"" КАК СтрокаДляОтображения
	         |ИЗ
	         |	РегистрСведений.атл_КоординатыТрека КАК атл_КоординатыТрека
	         |ГДЕ
	         |	атл_КоординатыТрека.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	         |	И атл_КоординатыТрека.Пользователь В
	         |			(ВЫБРАТЬ
	         |				ТаблицаПользователей.Пользователь
	         |			ИЗ
	         |				ТаблицаПользователей)
			 |//ДопУсловие
	         |
	         |УПОРЯДОЧИТЬ ПО
	         |	Пользователь,
	         |	Время";	        	
			 			 
	мДопУсловие = "";
	Если ЗначениеЗаполнено(Объект.ВидТрека) Тогда
		мДопУсловие = мДопУсловие + "	И атл_КоординатыТрека.ИсточникКоординат = &ВидТрека";
		мЗапрос.УстановитьПараметр("ВидТрека", Объект.ВидТрека);
	КонецЕсли;
	
	мЗапрос.УстановитьПараметр("ДатаНачала", Объект.ДатаНачала);
	мЗапрос.УстановитьПараметр("ДатаОкончания", Объект.ДатаОкончания);
	мЗапрос.УстановитьПараметр("Таблица", СписокПользователей.Выгрузить());
	
	Если НЕ мДопУсловие = "" Тогда
		мТекст = СтрЗаменить(мТекст, "//ДопУсловие", мДопУсловие);
	КонецЕсли;
	мЗапрос.Текст = мТекст;
	мВыгрузка = мЗапрос.Выполнить().Выгрузить();
	
	Объект.СписокТочекЛиний.Загрузить(мВыгрузка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСамостоятельныхТочек()
	
	Объект.СписокСамостоятельныхТочек.Очистить();		
	
	мДопУсловие = "";			   
	мНайденныеСтатусы = СписокСтатусов.НайтиСтроки(Новый Структура("Флаг", Истина));
	
	мСписокВыбранныхПользователей = Новый СписокЗначений;
	мНайденныеСтроки = СписокПользователей.НайтиСтроки(Новый Структура("Флаг", Истина));
	Для Каждого текПользователь Из мНайденныеСтроки Цикл
		мСписокВыбранныхПользователей.Добавить(текПользователь.Пользователь);
	КонецЦикла;
				
			
	// Добавляем точки с текущем местонахождением пользователей.
	Если ПоказыватьМестонахождение И мСписокВыбранныхПользователей.Количество() > 0 Тогда
		мЗапрос = Новый Запрос;
		Если ПоказыватьТекущееМестонахождение Тогда
			мЗапрос.Текст = "ВЫБРАТЬ
			                |	атл_АктивностьПользователей.Широта,
			                |	атл_АктивностьПользователей.Долгота,
			                |	атл_АктивностьПользователей.Пользователь КАК Заголовок,
			                |	атл_АктивностьПользователей.Пользователь,
			                |	атл_АктивностьПользователей.ИсточникКоординат,
							|	атл_АктивностьПользователей.Точность,
			                |	атл_АктивностьПользователей.ДатаПоследнейАктивностиСКоординатами КАК Время,
			                |	ВЫБОР
			                |		КОГДА атл_АктивностьПользователей.ДатаПоследнейАктивностиСКоординатами >= &ДатаДопустимойПоследнейАктивности
			                |			ТОГДА ИСТИНА
			                |		ИНАЧЕ ЛОЖЬ
			                |	КОНЕЦ КАК АктуальнаКоордината,
							|	ВЫБОР
			                |		КОГДА атл_АктивностьПользователей.ДатаПоследнейАктивностиСКоординатами >= &ДатаДопустимойПоследнейАктивности
			                |			ТОГДА ""#080""
			                |		ИНАЧЕ ""#BDB""
			                |	КОНЕЦ КАК Цвет,
			                |	ВЫБОР
			                |		КОГДА атл_АктивностьПользователей.ДатаПоследнейАктивности >= &ДатаДопустимойПоследнейАктивности
			                |			ТОГДА ИСТИНА
			                |		ИНАЧЕ ЛОЖЬ
			                |	КОНЕЦ КАК ПользовательАктивен,
			                |	"",point:["" + атл_АктивностьПользователей.Долгота + "","" + атл_АктивностьПользователей.Широта + ""]_TIME_,name:'"" КАК СтрокаДляОтображения
			                |ИЗ
			                |	РегистрСведений.атл_АктивностьПользователей КАК атл_АктивностьПользователей
			                |ГДЕ
			                |	атл_АктивностьПользователей.Пользователь В(&СписокПользователей)
			                |	И атл_АктивностьПользователей.Широта <> """"
							|	И атл_АктивностьПользователей.Долгота <> """"";
			мЗапрос.УстановитьПараметр("СписокПользователей", мСписокВыбранныхПользователей);
			мЗапрос.УстановитьПараметр("ДатаДопустимойПоследнейАктивности", ТекущаяДата() - ?(Константы.атл_ВремяВТечениеКоторогоПользовательОнлайн.Получить() = 0, 300, Константы.атл_ВремяВТечениеКоторогоПользовательОнлайн.Получить()));
		Иначе		
			мЗапрос.Текст = "ВЫБРАТЬ
			                |	атл_КоординатыТрекаСрезПоследних.Широта,
			                |	атл_КоординатыТрекаСрезПоследних.Долгота,
			                |	атл_КоординатыТрекаСрезПоследних.Пользователь КАК Заголовок,
			                |	атл_КоординатыТрекаСрезПоследних.Пользователь,
			                |	атл_КоординатыТрекаСрезПоследних.ИсточникКоординат,
							|	атл_КоординатыТрекаСрезПоследних.Точность,
			                |	атл_КоординатыТрекаСрезПоследних.Период КАК Время,
			                |	ВЫБОР
			                |		КОГДА атл_КоординатыТрекаСрезПоследних.Период >= &ДатаДопустимойПоследнейАктивности
			                |			ТОГДА ИСТИНА
			                |		ИНАЧЕ ЛОЖЬ
			                |	КОНЕЦ КАК АктуальнаКоордината,
							|	ВЫБОР
			                |		КОГДА атл_КоординатыТрекаСрезПоследних.Период >= &ДатаДопустимойПоследнейАктивности
			                |			ТОГДА ""#080""
			                |		ИНАЧЕ ""#BDB""
			                |	КОНЕЦ КАК Цвет,
			                |	ВЫБОР
			                |		КОГДА атл_АктивностьПользователей.ДатаПоследнейАктивности >= &ДатаДопустимойПоследнейАктивности
			                |			ТОГДА ИСТИНА
			                |		ИНАЧЕ ЛОЖЬ
			                |	КОНЕЦ КАК ПользовательАктивен,
			                |	"",point:["" + атл_КоординатыТрекаСрезПоследних.Долгота + "","" + атл_КоординатыТрекаСрезПоследних.Широта + ""]_TIME_,name:'"" КАК СтрокаДляОтображения
			                |ИЗ
			                |	РегистрСведений.атл_КоординатыТрека.СрезПоследних(&ТекущаяДата, Пользователь В (&СписокПользователей)) КАК атл_КоординатыТрекаСрезПоследних
							|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.атл_АктивностьПользователей КАК атл_АктивностьПользователей
			                |		ПО атл_КоординатыТрекаСрезПоследних.Пользователь = атл_АктивностьПользователей.Пользователь
							|		И атл_АктивностьПользователей.МК = ИСТИНА";
			мЗапрос.УстановитьПараметр("ТекущаяДата", МестонахождениеНаДату);
			мЗапрос.УстановитьПараметр("СписокПользователей", мСписокВыбранныхПользователей);
			мЗапрос.УстановитьПараметр("ДатаДопустимойПоследнейАктивности", ТекущаяДата() - ?(Константы.атл_ВремяВТечениеКоторогоПользовательОнлайн.Получить() = 0, 300, Константы.атл_ВремяВТечениеКоторогоПользовательОнлайн.Получить()));
		КонецЕсли;
		
		ВыгрузкаМестонахождения = мЗапрос.Выполнить().Выгрузить();							
	    
		Для Каждого тек Из ВыгрузкаМестонахождения Цикл
			мНоваяСтрока = Объект.СписокСамостоятельныхТочек.Добавить();
			ЗаполнитьЗначенияСвойств(мНоваяСтрока, тек);
			мНоваяСтрока.ДатаТочки = тек.Время;
			мНоваяСтрока.СтрокаДляОтображенияВКластере = мНоваяСтрока.Заголовок;
			мНоваяСтрока.СтрокаДляОтображения = СтрЗаменить(тек.СтрокаДляОтображения,"_TIME_", ",time:'" + Формат(тек.Время, "ДФ=yyyy-MM-ddTHH:mm:ss") + "'");
			Если тек.ПользовательАктивен Тогда
				ЦветАктивностиПользователя = "green";
				ТекстАктивностиПользователя = "online";
			Иначе
				ЦветАктивностиПользователя = "red";
				ТекстАктивностиПользователя = "offline";	
			КонецЕсли;
			мНоваяСтрока.ТипТочки = "Сотрудник";
			Если Объект.ПодборСотрудника Тогда
				мНоваяСтрока.Текст = СокрЛП(тек.Пользователь) + " - <span style=""color: " + ЦветАктивностиПользователя 
								+ ";font-weight: bold;"">" + ТекстАктивностиПользователя + "</span>"
								+ "<hr><span style=""font-weight: bold;"">"
								+ ?(тек.АктуальнаКоордината, "Координата (" + Формат(тек.Время, "ДФ='ЧЧ:мм'"), "Координата устарела (" + Формат(тек.Время, "ДФ='дд.ММ.гггг ЧЧ:мм'"))
								+ ")</span><br>Источник: " + ?(тек.ИсточникКоординат = Перечисления.атл_ВидыИсточниковКоординат.GPS, "GPS", "моб. сеть")
								+ "<br>Точность: " + Строка(тек.Точность) + " м.<br>"
								+ "<table width=""100%"" style=""margin-top:5px""><tr><td width=""20%"" ></td><td width=""60%"" style=""background-color:#EEE;height:21px;font-weight:bold;cursor:pointer;"" align=center onclick=""getClickBack(10,\'"
								+ тек.Пользователь.УникальныйИдентификатор() + "\')"">Подобрать</td><td width=""20%"" ></td></tr></table>";
			Иначе
				мНоваяСтрока.Текст = СокрЛП(тек.Пользователь) + " - <span style=""color: " + ЦветАктивностиПользователя 
									+ ";font-weight: bold;"">" + ТекстАктивностиПользователя + "</span><br><hr><span style=""font-weight: bold;"">"
									+ ?(тек.АктуальнаКоордината, "Координата (" + Формат(тек.Время, "ДФ='ЧЧ:мм'"), "Координата устарела (" + Формат(тек.Время, "ДФ='дд.ММ.гггг ЧЧ:мм'"))
									+ ")</span><br>Источник: " + ?(тек.ИсточникКоординат = Перечисления.атл_ВидыИсточниковКоординат.GPS, "GPS", "моб. сеть")
									+ "<br>Точность: " + Строка(тек.Точность) + " м.";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	
	// Добавляем точки по объектам.
	Если НЕ ((ПоказыватьЗадачи И мНайденныеСтатусы.Количество() > 0) ИЛИ Объект.ПоказыватьКомментарии ИЛИ ПоказыватьСообщения ИЛИ ПоискОбъектовПоИдентификатору ИЛИ Объект.ПоказыватьТрек) Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	мТекст = "ВЫБРАТЬ
               |	Таблица.ЗадачаМобильномуСотруднику,
			   |	Таблица.Исполнитель,
               |	Таблица.Флаг
               |ПОМЕСТИТЬ ТаблицаСписокЗадач
               |ИЗ
               |	&Таблица КАК Таблица
               |ГДЕ
               |	Таблица.Флаг = ИСТИНА
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////	               
			   | //ДопУсловиеПоОбъектам
               |;
               |
			   |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ТаблицаДатыЗадач.Дата,
               |	ТаблицаДатыЗадач.Пользователь,
               |	ТаблицаДатыЗадач.Получатель,
			   |	ТаблицаДатыЗадач.Автор,
			   |	ТаблицаДатыЗадач.ТипТочки,
			   |	ТаблицаДатыЗадач.СтрокаДляОтображенияВКластере,
			   |	ТаблицаДатыЗадач.Задача,
			   |	ТаблицаДатыЗадач.КомментарийСВложением,
			   |	ТаблицаДатыЗадач.ИдентификаторФайла,
			   |	ТаблицаДатыЗадач.ИдентификаторИнформационнойБазыФайла,
			   |	ТаблицаДатыЗадач.Текст,
			   |	ТаблицаДатыЗадач.Заголовок
               |ПОМЕСТИТЬ ТаблицаСтрок
               |ИЗ
               |	ТаблицаДатыЗадач КАК ТаблицаДатыЗадач
			   |ГДЕ
			   |	НЕ ТаблицаДатыЗадач.Дата = ДАТАВРЕМЯ(1, 1, 1)
			   | //ДопУсловиеПериодаЗадач
               |;
			   |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ТаблицаСтрок.Дата,
               |	ТаблицаСтрок.Пользователь
               |ПОМЕСТИТЬ ТаблицаДат
               |ИЗ
               |	ТаблицаСтрок КАК ТаблицаСтрок
			   | //ДопУсловиеПериодаТаблицыСтрок			   
               |
               |СГРУППИРОВАТЬ ПО
               |	ТаблицаСтрок.Дата,
               |	ТаблицаСтрок.Пользователь
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	атл_КоординатыТрека.Период КАК Период,
               |	атл_КоординатыТрека.Пользователь КАК Пользователь,
			   |	атл_КоординатыТрека.ИсточникКоординат,
			   |	атл_КоординатыТрека.Точность,
               |	атл_КоординатыТрека.Широта,
               |	атл_КоординатыТрека.Долгота
               |ПОМЕСТИТЬ ТаблицаРегистра
               |ИЗ
               |	РегистрСведений.атл_КоординатыТрека КАК атл_КоординатыТрека
			   |//ДопУсловиеПоВидуТрека
               |
               |ИНДЕКСИРОВАТЬ ПО
               |	Период,
               |	Пользователь
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ТаблицаДат.Дата,
               |	ТаблицаДат.Пользователь,
               |	МИНИМУМ(ТаблицаРегистра.Период) КАК ДатаРегистра
               |ПОМЕСТИТЬ ТаблицаДатыКоординат
               |ИЗ
               |	ТаблицаДат КАК ТаблицаДат
               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРегистра КАК ТаблицаРегистра
               |		ПО ТаблицаДат.Пользователь = ТаблицаРегистра.Пользователь
			   |			И РазностьДат(ТаблицаДат.Дата, ТаблицаРегистра.Период, СЕКУНДА) <= 300
               |			И ТаблицаДат.Дата <= ТаблицаРегистра.Период
               |
               |СГРУППИРОВАТЬ ПО
               |	ТаблицаДат.Пользователь,
               |	ТаблицаДат.Дата
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ТаблицаДатыКоординат.Дата,
               |	ТаблицаДатыКоординат.Пользователь,
			   |	ТаблицаРегистра.ИсточникКоординат,
               |	ТаблицаРегистра.Точность,
               |	ЕСТЬNULL(ТаблицаРегистра.Широта, """") КАК Широта,
               |	ЕСТЬNULL(ТаблицаРегистра.Долгота, """") КАК Долгота,
               |	ВЫБОР
               |		КОГДА ЕСТЬNULL(ТаблицаРегистра.Широта, """") = """" И ЕСТЬNULL(ТаблицаРегистра.Долгота, """") = """" ТОГДА
               |			ЛОЖЬ
               |		ИНАЧЕ
               |			ИСТИНА
               |	КОНЕЦ КАК ЕстьКоординаты
               |ПОМЕСТИТЬ ТаблицаИтого
               |ИЗ
               |	ТаблицаДатыКоординат КАК ТаблицаДатыКоординат
               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРегистра КАК ТаблицаРегистра
               |		ПО ТаблицаДатыКоординат.ДатаРегистра = ТаблицаРегистра.Период
               |			И ТаблицаДатыКоординат.Пользователь = ТаблицаРегистра.Пользователь
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ТаблицаСтрок.Дата КАК ДатаТочки,
			   |	""#000DFF"" КАК Цвет,
               |	ТаблицаСтрок.Пользователь,
               |	ТаблицаСтрок.Получатель,
			   |	ТаблицаСтрок.Автор,
			   |	ТаблицаСтрок.ТипТочки,
			   |	ТаблицаСтрок.СтрокаДляОтображенияВКластере,
			   |	ТаблицаСтрок.Задача,
			   |	ТаблицаСтрок.КомментарийСВложением,
			   |	ТаблицаСтрок.ИдентификаторФайла,
			   |	ТаблицаСтрок.ИдентификаторИнформационнойБазыФайла,
			   |	ТаблицаСтрок.Текст,
			   |	ТаблицаСтрок.Заголовок,
               |	ЕСТЬNULL(ТаблицаИтого.Широта, """") КАК Широта,
               |	ЕСТЬNULL(ТаблицаИтого.Долгота, """") КАК Долгота,
               |	ЕСТЬNULL(ТаблицаИтого.ИсточникКоординат, ЗНАЧЕНИЕ(Перечисление.атл_ВидыИсточниковКоординат.Сеть)) КАК ИсточникКоординат,
			   |	ЕСТЬNULL(ТаблицаИтого.Точность, 0) КАК Точность,
               |	ЕСТЬNULL(ТаблицаИтого.ЕстьКоординаты, ЛОЖЬ) КАК ЕстьКоординаты,
			   |    ВЫБОР
			   |    	КОГДА ЕСТЬNULL(ТаблицаИтого.ЕстьКоординаты, ЛОЖЬ) ТОГДА
			   |    		"",point:["" + ТаблицаИтого.Долгота + "","" + ТаблицаИтого.Широта + ""]_TIME_,name:'""
			   |        ИНАЧЕ
			   |    		""_TIME_,name:'"" 
			   |    КОНЕЦ КАК СтрокаДляОтображения			   
               |ИЗ
               |	ТаблицаСтрок КАК ТаблицаСтрок
               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИтого КАК ТаблицаИтого
               |		ПО ТаблицаСтрок.Дата = ТаблицаИтого.Дата
               |			И ТаблицаСтрок.Пользователь = ТаблицаИтого.Пользователь";
			   //|ГДЕ
			   //|	НЕ ТаблицаИтого.Широта = """" 
			   //|	И НЕ ТаблицаИтого.Долгота = """""; 	
			   
	мПервая = Истина;
	
	// Дата начал и окончания периода
	Если Объект.ПоказыватьТрек Тогда
		мПервая = Ложь;
		мДопУсловие = мДопУсловие + " ВЫБРАТЬ
		                            |	ТаблицаНачалаОкончанияПериода.Дата КАК Дата,
		                            |	ТаблицаНачалаОкончанияПериода.Пользователь КАК Пользователь,
		                            |	ТаблицаНачалаОкончанияПериода.ТипТочки КАК ТипТочки									
									|ПОМЕСТИТЬ ТаблицаНачалаОкончанияПериода
		                            |ИЗ
		                            |	&ТаблицаНачалаОкончанияПериода КАК ТаблицаНачалаОкончанияПериода
									|;
					                |
					                |////////////////////////////////////////////////////////////////////////////////
									|ВЫБРАТЬ
		                            |	ТаблицаНачалаОкончанияПериода.Дата КАК Дата,
		                            |	ТаблицаНачалаОкончанияПериода.Пользователь КАК Пользователь,
		                            |	"""" 							  КАК Получатель,
									|	"""" КАК Автор,
									|	ТаблицаНачалаОкончанияПериода.ТипТочки КАК ТипТочки,
									|	ТаблицаНачалаОкончанияПериода.ТипТочки КАК СтрокаДляОтображенияВКластере,
									|	"""" КАК Задача,
									|	ЛОЖЬ КАК КомментарийСВложением,
								    |	"""" КАК ИдентификаторФайла,
								    |	"""" КАК ИдентификаторИнформационнойБазыФайла,
		                            |	ТаблицаНачалаОкончанияПериода.ТипТочки КАК Текст,
		                            |	ТаблицаНачалаОкончанияПериода.ТипТочки КАК Заголовок
									|ПОМЕСТИТЬ ТаблицаДатыЗадач
		                            |ИЗ
		                            |	ТаблицаНачалаОкончанияПериода КАК ТаблицаНачалаОкончанияПериода";
		
		ТаблицаНачалаОкончанияПериода = Новый ТаблицаЗначений;
		КД = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
		ТаблицаНачалаОкончанияПериода.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",,,,КД));
		ТаблицаНачалаОкончанияПериода.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
		КС = Новый КвалификаторыСтроки(100);
		ТаблицаНачалаОкончанияПериода.Колонки.Добавить("ТипТочки", Новый ОписаниеТипов("Строка",,КС));
		
		Для Каждого текПользователь Из мСписокВыбранныхПользователей Цикл
			мНоваяСтрока = ТаблицаНачалаОкончанияПериода.Добавить();
			мНоваяСтрока.Дата = Объект.ДатаНачала;
			мНоваяСтрока.Пользователь = текПользователь.Значение;
			мНоваяСтрока.ТипТочки =  "Начало маршрута";			
			
			мНоваяСтрока = ТаблицаНачалаОкончанияПериода.Добавить();
			мНоваяСтрока.Дата = Объект.ДатаОкончания;
			мНоваяСтрока.Пользователь = текПользователь.Значение;
			мНоваяСтрока.ТипТочки =  "Окончание маршрута";
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ТаблицаНачалаОкончанияПериода", ТаблицаНачалаОкончанияПериода);							
	КонецЕсли;
	
	// Задачи мобильному сотруднику.	
	Для Каждого текСтатус Из мНайденныеСтатусы Цикл
		Если мПервая Тогда
			мПервая = Ложь;
			мДопУсловие = "	ВЫБРАТЬ	               
						   |	атл_ЗадачаМобильномуСотруднику." + текСтатус.ИмяРеквизита + " КАК Дата,
						   |	атл_ЗадачаМобильномуСотруднику.Исполнитель КАК Пользователь,
						   |	атл_ЗадачаМобильномуСотруднику.Исполнитель КАК Получатель,
						   |	атл_ЗадачаМобильномуСотруднику.Ответственный КАК Автор,
						   |	""Изменение статуса"" КАК ТипТочки,
						   |	""Изменен статус задачи №"" + атл_ЗадачаМобильномуСотруднику.НомерМК + "" на " + текСтатус.Статус + """ КАК СтрокаДляОтображенияВКластере,
						   |	атл_ЗадачаМобильномуСотруднику.Ссылка КАК Задача,
						   |	ЛОЖЬ КАК КомментарийСВложением,
						   |	"""" КАК ИдентификаторФайла,
						   |	"""" КАК ИдентификаторИнформационнойБазыФайла,
						   |	""" + текСтатус.Статус + """ КАК Текст,
						   |	"""+ ?(Объект.НеИнтерактивноеОткрытие, текСтатус.Статус, "Изменение статуса") + """ КАК Заголовок
			               |ПОМЕСТИТЬ ТаблицаДатыЗадач
			               |ИЗ
			               |	ТаблицаСписокЗадач КАК ТаблицаСписокЗадач
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.атл_ЗадачаМобильномуСотруднику КАК атл_ЗадачаМобильномуСотруднику
			               |		ПО ТаблицаСписокЗадач.ЗадачаМобильномуСотруднику = атл_ЗадачаМобильномуСотруднику.Ссылка";
						   
		Иначе
			мДопУсловие = мДопУсловие + "
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ	               
				   |	атл_ЗадачаМобильномуСотруднику." + текСтатус.ИмяРеквизита + ",
				   |	атл_ЗадачаМобильномуСотруднику.Исполнитель,
				   |	атл_ЗадачаМобильномуСотруднику.Исполнитель,
				   |	атл_ЗадачаМобильномуСотруднику.Ответственный,
				   |	""Изменение статуса"" КАК ТипТочки,
				   |	""Изменен статус задачи №"" + атл_ЗадачаМобильномуСотруднику.НомерМК + "" на " + текСтатус.Статус + """ КАК СтрокаДляОтображенияВКластере,
				   |	атл_ЗадачаМобильномуСотруднику.Ссылка,
				   |	ЛОЖЬ КАК КомментарийСВложением,
				   |	"""" КАК ИдентификаторФайла,
				   |	"""" КАК ИдентификаторИнформационнойБазыФайла,
				   |	""" + текСтатус.Статус + """ КАК Текст,
				   |	"""+ ?(Объект.НеИнтерактивноеОткрытие, текСтатус.Статус, "Изменение статуса") + """ КАК Заголовок
	               |ИЗ
	               |	ТаблицаСписокЗадач КАК ТаблицаСписокЗадач
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.атл_ЗадачаМобильномуСотруднику КАК атл_ЗадачаМобильномуСотруднику
	               |		ПО ТаблицаСписокЗадач.ЗадачаМобильномуСотруднику = атл_ЗадачаМобильномуСотруднику.Ссылка";
		КонецЕсли;
		Если текСтатус.Статус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Отклонил Тогда
			мДопУсловие = мДопУсловие + "	И атл_ЗадачаМобильномуСотруднику.Ссылка.Принял = ЛОЖЬ";	
		КонецЕсли;	   
	КонецЦикла;
	
	
	Если ПоискОбъектовПоИдентификатору Тогда
		мПервая = Ложь;
		мДопУсловие = мДопУсловие + "ВЫБРАТЬ
		                            |	СписокПараметровОткрытия.ВидОбъекта,
		                            |	СписокПараметровОткрытия.Идентификатор,
		                            |	СписокПараметровОткрытия.ИдентификаторИнформационнойБазы
		                            |ПОМЕСТИТЬ ТаблицаПараметров
		                            |ИЗ
		                            |	&СписокПараметровОткрытия КАК СписокПараметровОткрытия
		                            |;
		                            |
		                            |////////////////////////////////////////////////////////////////////////////////
		                            |ВЫБРАТЬ
		                            |	ТаблицаПараметров.Идентификатор,
		                            |	ТаблицаПараметров.ИдентификаторИнформационнойБазы
		                            |ПОМЕСТИТЬ ТаблицаСообщений
		                            |ИЗ
		                            |	ТаблицаПараметров КАК ТаблицаПараметров
		                            |ГДЕ
		                            |	ТаблицаПараметров.ВидОбъекта = ""Сообщение""
		                            |;
		                            |
		                            |////////////////////////////////////////////////////////////////////////////////
		                            |ВЫБРАТЬ
		                            |	ТаблицаПараметров.Идентификатор,
		                            |	ТаблицаПараметров.ИдентификаторИнформационнойБазы
		                            |ПОМЕСТИТЬ ТаблицаКомментариев
		                            |ИЗ
		                            |	ТаблицаПараметров КАК ТаблицаПараметров
		                            |ГДЕ
		                            |	ТаблицаПараметров.ВидОбъекта = ""Комментарий""
		                            |;
		                            |
		                            |////////////////////////////////////////////////////////////////////////////////
		                            |ВЫБРАТЬ
		                            |	атл_Сообщения.ДатаДоставки КАК Дата,
		                            |	атл_Сообщения.Получатель КАК Пользователь,
		                            |	атл_Сообщения.Получатель КАК Получатель,
		                            |	атл_Сообщения.Отправитель КАК Автор,
		                            |	""Получено сообщение"" КАК ТипТочки,
									|	""Получено сообщение: "" + ВЫРАЗИТЬ(атл_Сообщения.Сообщение КАК СТРОКА(30)) + ""..."" КАК СтрокаДляОтображенияВКластере,
		                            |	"""" КАК Задача,
									|	ЛОЖЬ КАК КомментарийСВложением,
								    |	"""" КАК ИдентификаторФайла,
								    |	"""" КАК ИдентификаторИнформационнойБазыФайла,
		                            |	атл_Сообщения.Сообщение КАК Текст,
		                            |	""Сообщение"" КАК Заголовок
		                            |ПОМЕСТИТЬ ТаблицаСообщенийИзРегистра
		                            |ИЗ
		                            |	ТаблицаСообщений КАК ТаблицаСообщений
		                            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.атл_Сообщения КАК атл_Сообщения
		                            |		ПО ТаблицаСообщений.Идентификатор = атл_Сообщения.ИдентификаторСообщения
		                            |			И ТаблицаСообщений.ИдентификаторИнформационнойБазы = атл_Сообщения.ИдентификаторИнформационнойБазы
		                            |			И (НЕ атл_Сообщения.ДатаДоставки = ДАТАВРЕМЯ(1, 1, 1))
		                            |
		                            |ОБЪЕДИНИТЬ ВСЕ
		                            |
		                            |ВЫБРАТЬ
		                            |	атл_Сообщения.ДатаПрочтения,
		                            |	атл_Сообщения.Получатель,
		                            |	атл_Сообщения.Получатель,
		                            |	атл_Сообщения.Отправитель,
		                            |	""Прочитано сообщение"",
									|	""Прочитано сообщение: "" + ВЫРАЗИТЬ(атл_Сообщения.Сообщение КАК СТРОКА(30)) + ""..."" КАК СтрокаДляОтображенияВКластере,
		                            |	"""",
									|	ЛОЖЬ КАК КомментарийСВложением,
								    |	"""" КАК ИдентификаторФайла,
								    |	"""" КАК ИдентификаторИнформационнойБазыФайла,
		                            |	атл_Сообщения.Сообщение,
		                            |	""Сообщение""
		                            |ИЗ
		                            |	ТаблицаСообщений КАК ТаблицаСообщений
		                            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.атл_Сообщения КАК атл_Сообщения
		                            |		ПО ТаблицаСообщений.Идентификатор = атл_Сообщения.ИдентификаторСообщения
		                            |			И ТаблицаСообщений.ИдентификаторИнформационнойБазы = атл_Сообщения.ИдентификаторИнформационнойБазы
		                            |			И (НЕ атл_Сообщения.ДатаПрочтения = ДАТАВРЕМЯ(1, 1, 1))
		                            |
		                            |ОБЪЕДИНИТЬ ВСЕ
		                            |
		                            |ВЫБРАТЬ
		                            |	атл_Сообщения.ДатаСоздания,
		                            |	атл_Сообщения.Отправитель,
		                            |	атл_Сообщения.Получатель,
		                            |	атл_Сообщения.Отправитель,
		                            |	""Создано сообщение"",
									|	""Создано сообщение: "" + ВЫРАЗИТЬ(атл_Сообщения.Сообщение КАК СТРОКА(30)) + ""..."" КАК СтрокаДляОтображенияВКластере,
		                            |	"""",
									|	ЛОЖЬ КАК КомментарийСВложением,
								    |	"""" КАК ИдентификаторФайла,
								    |	"""" КАК ИдентификаторИнформационнойБазыФайла,
		                            |	атл_Сообщения.Сообщение,
		                            |	""Сообщение""
		                            |ИЗ
		                            |	ТаблицаСообщений КАК ТаблицаСообщений
		                            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.атл_Сообщения КАК атл_Сообщения
		                            |		ПО ТаблицаСообщений.Идентификатор = атл_Сообщения.ИдентификаторСообщения
		                            |			И ТаблицаСообщений.ИдентификаторИнформационнойБазы = атл_Сообщения.ИдентификаторИнформационнойБазы
		                            |			И (НЕ атл_Сообщения.ДатаСоздания = ДАТАВРЕМЯ(1, 1, 1))
		                            |;
		                            |
		                            |////////////////////////////////////////////////////////////////////////////////
		                            |ВЫБРАТЬ
		                            |	атл_КомментарииКОбъектамУМС.ПолучилДата КАК Дата,
		                            |	атл_КомментарииКОбъектамУМС.Объект.Исполнитель КАК Пользователь,
		                            |	атл_КомментарииКОбъектамУМС.Объект.Исполнитель КАК Получатель,
		                            |	атл_КомментарииКОбъектамУМС.Автор КАК Автор,
		                            |	""Получен комментарий"" КАК ТипТочки,
									|	""Получен комментарий: "" + ВЫРАЗИТЬ(атл_КомментарииКОбъектамУМС.Текст КАК СТРОКА(30)) + ""..."" КАК СтрокаДляОтображенияВКластере,
		                            |	атл_КомментарииКОбъектамУМС.Объект КАК Задача,
									|	атл_КомментарииКОбъектамУМС.КомментарийСВложением КАК КомментарийСВложением,
								    |	атл_КомментарииКОбъектамУМС.ИдентификаторФайла КАК ИдентификаторФайла,
								    |	атл_КомментарииКОбъектамУМС.ИдентификаторИнформационнойБазыФайла КАК ИдентификаторИнформационнойБазыФайла,
		                            |	атл_КомментарииКОбъектамУМС.Текст КАК Текст,
		                            |	""Комментарий"" КАК Заголовок
		                            |ПОМЕСТИТЬ ТаблицаКомментариевИзРегистра
		                            |ИЗ
		                            |	ТаблицаКомментариев КАК ТаблицаКомментариев
		                            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.атл_КомментарииКОбъектамУМС КАК атл_КомментарииКОбъектамУМС
		                            |		ПО ТаблицаКомментариев.Идентификатор = атл_КомментарииКОбъектамУМС.ИдентификаторКомментария
		                            |			И ТаблицаКомментариев.ИдентификаторИнформационнойБазы = атл_КомментарииКОбъектамУМС.ИдентификаторИнформационнойБазы
		                            |			И (НЕ атл_КомментарииКОбъектамУМС.ПолучилДата = ДАТАВРЕМЯ(1, 1, 1))
									|			И НЕ атл_КомментарииКОбъектамУМС.Объект.Исполнитель В(&СписокПользователей)
		                            |
		                            |ОБЪЕДИНИТЬ ВСЕ
		                            |
		                            |ВЫБРАТЬ
		                            |	атл_КомментарииКОбъектамУМС.ПрочиталДата,
		                            |	атл_КомментарииКОбъектамУМС.Объект.Исполнитель,
		                            |	атл_КомментарииКОбъектамУМС.Объект.Исполнитель,
		                            |	атл_КомментарииКОбъектамУМС.Автор,
		                            |	""Прочитан комментарий"",
									|	""Прочитан комментарий: "" + ВЫРАЗИТЬ(атл_КомментарииКОбъектамУМС.Текст КАК СТРОКА(30)) + ""..."" КАК СтрокаДляОтображенияВКластере,
		                            |	атл_КомментарииКОбъектамУМС.Объект,
									|	атл_КомментарииКОбъектамУМС.КомментарийСВложением КАК КомментарийСВложением,
								    |	атл_КомментарииКОбъектамУМС.ИдентификаторФайла КАК ИдентификаторФайла,
								    |	атл_КомментарииКОбъектамУМС.ИдентификаторИнформационнойБазыФайла КАК ИдентификаторИнформационнойБазыФайла,
		                            |	атл_КомментарииКОбъектамУМС.Текст,
		                            |	""Комментарий""
		                            |ИЗ
		                            |	ТаблицаКомментариев КАК ТаблицаКомментариев
		                            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.атл_КомментарииКОбъектамУМС КАК атл_КомментарииКОбъектамУМС
		                            |		ПО ТаблицаКомментариев.Идентификатор = атл_КомментарииКОбъектамУМС.ИдентификаторКомментария
		                            |			И ТаблицаКомментариев.ИдентификаторИнформационнойБазы = атл_КомментарииКОбъектамУМС.ИдентификаторИнформационнойБазы
		                            |			И (НЕ атл_КомментарииКОбъектамУМС.ПрочиталДата = ДАТАВРЕМЯ(1, 1, 1))
									|			И НЕ атл_КомментарииКОбъектамУМС.Объект.Исполнитель В(&СписокПользователей)
		                            |
		                            |ОБЪЕДИНИТЬ ВСЕ
		                            |
		                            |ВЫБРАТЬ
		                            |	атл_КомментарииКОбъектамУМС.ДатаСоздания,
		                            |	атл_КомментарииКОбъектамУМС.Автор,
		                            |	""1С"",
		                            |	атл_КомментарииКОбъектамУМС.Автор,
		                            |	""Создан комментарий"",
									|	""Создан комментарий: "" + ВЫРАЗИТЬ(атл_КомментарииКОбъектамУМС.Текст КАК СТРОКА(30)) + ""..."" КАК СтрокаДляОтображенияВКластере,
		                            |	атл_КомментарииКОбъектамУМС.Объект,
									|	атл_КомментарииКОбъектамУМС.КомментарийСВложением КАК КомментарийСВложением,
								    |	атл_КомментарииКОбъектамУМС.ИдентификаторФайла КАК ИдентификаторФайла,
								    |	атл_КомментарииКОбъектамУМС.ИдентификаторИнформационнойБазыФайла КАК ИдентификаторИнформационнойБазыФайла,
		                            |	атл_КомментарииКОбъектамУМС.Текст,
		                            |	""Комментарий""
		                            |ИЗ
		                            |	ТаблицаКомментариев КАК ТаблицаКомментариев
		                            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.атл_КомментарииКОбъектамУМС КАК атл_КомментарииКОбъектамУМС
		                            |		ПО ТаблицаКомментариев.Идентификатор = атл_КомментарииКОбъектамУМС.ИдентификаторКомментария
		                            |			И ТаблицаКомментариев.ИдентификаторИнформационнойБазы = атл_КомментарииКОбъектамУМС.ИдентификаторИнформационнойБазы
		                            |			И (НЕ атл_КомментарииКОбъектамУМС.ДатаСоздания = ДАТАВРЕМЯ(1, 1, 1))
									|			И атл_КомментарииКОбъектамУМС.Автор В(&СписокПользователей)
		                            |;
		                            |
		                            |////////////////////////////////////////////////////////////////////////////////
		                            |ВЫБРАТЬ
		                            |	ТаблицаСообщенийИзРегистра.Дата,
		                            |	ТаблицаСообщенийИзРегистра.Пользователь,
		                            |	ТаблицаСообщенийИзРегистра.Получатель,
		                            |	ТаблицаСообщенийИзРегистра.Автор,
		                            |	ТаблицаСообщенийИзРегистра.ТипТочки,
									|	ТаблицаСообщенийИзРегистра.СтрокаДляОтображенияВКластере,
		                            |	ТаблицаСообщенийИзРегистра.Задача,
									|	ТаблицаСообщенийИзРегистра.КомментарийСВложением,
								    |	ТаблицаСообщенийИзРегистра.ИдентификаторФайла,
								    |	ТаблицаСообщенийИзРегистра.ИдентификаторИнформационнойБазыФайла,
		                            |	ТаблицаСообщенийИзРегистра.Текст,
		                            |	ТаблицаСообщенийИзРегистра.Заголовок
		                            |ПОМЕСТИТЬ ТаблицаДатыЗадач
		                            |ИЗ
		                            |	ТаблицаСообщенийИзРегистра КАК ТаблицаСообщенийИзРегистра
		                            |
		                            |ОБЪЕДИНИТЬ ВСЕ
		                            |
		                            |ВЫБРАТЬ
		                            |	ТаблицаКомментариевИзРегистра.Дата,
		                            |	ТаблицаКомментариевИзРегистра.Пользователь,
		                            |	ТаблицаКомментариевИзРегистра.Получатель,
		                            |	ТаблицаКомментариевИзРегистра.Автор,
		                            |	ТаблицаКомментариевИзРегистра.ТипТочки,
									|	ТаблицаКомментариевИзРегистра.СтрокаДляОтображенияВКластере,
		                            |	ТаблицаКомментариевИзРегистра.Задача,
									|	ТаблицаКомментариевИзРегистра.КомментарийСВложением,
								    |	ТаблицаКомментариевИзРегистра.ИдентификаторФайла,
								    |	ТаблицаКомментариевИзРегистра.ИдентификаторИнформационнойБазыФайла,
		                            |	ТаблицаКомментариевИзРегистра.Текст,
		                            |	ТаблицаКомментариевИзРегистра.Заголовок
		                            |ИЗ
		                            |	ТаблицаКомментариевИзРегистра КАК ТаблицаКомментариевИзРегистра";		
									
		Запрос.УстановитьПараметр("СписокПараметровОткрытия", Объект.СписокПараметровОткрытия.Выгрузить());
		Запрос.УстановитьПараметр("СписокПользователей", мСписокВыбранныхПользователей);
	КонецЕсли;
	
		
	// Комментарии.	
	Если Объект.ПоказыватьКомментарии Тогда
		Если ИсходящиеКомментарии Тогда
			Если мПервая Тогда
				мПервая = Ложь;
				мДопУсловие = мДопУсловие + " ВЫБРАТЬ
				                             |	атл_КомментарииКОбъектамУМС.ДатаСоздания КАК Дата,
				                            |	атл_КомментарииКОбъектамУМС.Автор КАК Пользователь,
				                            |	"""" 							  КАК Получатель,
											|	атл_КомментарииКОбъектамУМС.Автор КАК Автор,
											|	""Создан комментарий"" КАК ТипТочки,
											|	""Создан комментарий: "" + ВЫРАЗИТЬ(атл_КомментарииКОбъектамУМС.Текст КАК СТРОКА(30)) + ""..."" КАК СтрокаДляОтображенияВКластере,
											|	атл_КомментарииКОбъектамУМС.Объект КАК Задача,
											|	атл_КомментарииКОбъектамУМС.КомментарийСВложением КАК КомментарийСВложением,
										    |	атл_КомментарииКОбъектамУМС.ИдентификаторФайла КАК ИдентификаторФайла,
										    |	атл_КомментарииКОбъектамУМС.ИдентификаторИнформационнойБазыФайла КАК ИдентификаторИнформационнойБазыФайла,
				                            |	атл_КомментарииКОбъектамУМС.Текст КАК Текст,
				                            |	""Комментарий"" КАК Заголовок
											|ПОМЕСТИТЬ ТаблицаДатыЗадач
				                            |ИЗ
				                            |	ТаблицаСписокЗадач КАК ТаблицаСписокЗадач
				                            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.атл_КомментарииКОбъектамУМС КАК атл_КомментарииКОбъектамУМС
				                            |		ПО ТаблицаСписокЗадач.ЗадачаМобильномуСотруднику = атл_КомментарииКОбъектамУМС.Объект
				                            |			И ТаблицаСписокЗадач.Исполнитель = атл_КомментарииКОбъектамУМС.Автор";
			Иначе
				мДопУсловие = мДопУсловие + "
										    |ОБЪЕДИНИТЬ ВСЕ
										    |
				                            |ВЫБРАТЬ
				                            |	атл_КомментарииКОбъектамУМС.ДатаСоздания КАК Дата,
				                            |	атл_КомментарииКОбъектамУМС.Автор,
				                            |	"""",
											|	атл_КомментарииКОбъектамУМС.Автор,
											|	""Создан комментарий"",
											|	""Создан комментарий: "" + ВЫРАЗИТЬ(атл_КомментарииКОбъектамУМС.Текст КАК СТРОКА(30)) + ""..."" КАК СтрокаДляОтображенияВКластере,
											|	атл_КомментарииКОбъектамУМС.Объект,
											|	атл_КомментарииКОбъектамУМС.КомментарийСВложением КАК КомментарийСВложением,
										    |	атл_КомментарииКОбъектамУМС.ИдентификаторФайла КАК ИдентификаторФайла,
										    |	атл_КомментарииКОбъектамУМС.ИдентификаторИнформационнойБазыФайла КАК ИдентификаторИнформационнойБазыФайла,
				                            |	атл_КомментарииКОбъектамУМС.Текст,
				                            |	""Комментарий"" КАК Заголовок		                            
				                            |ИЗ
				                            |	ТаблицаСписокЗадач КАК ТаблицаСписокЗадач
				                            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.атл_КомментарииКОбъектамУМС КАК атл_КомментарииКОбъектамУМС
				                            |		ПО ТаблицаСписокЗадач.ЗадачаМобильномуСотруднику = атл_КомментарииКОбъектамУМС.Объект
				                            |			И ТаблицаСписокЗадач.Исполнитель = атл_КомментарииКОбъектамУМС.Автор";
			КонецЕсли;
		КонецЕсли;
		
		Если ВходящиеКомментарии Тогда
			Если мПервая Тогда
				мПервая = Ложь;
				мДопУсловие = мДопУсловие + " ВЫБРАТЬ
				                            |	атл_КомментарииКОбъектамУМС.ПолучилДата КАК Дата,
				                            |	ТаблицаСписокЗадач.Исполнитель КАК Пользователь,
				                            |	ТаблицаСписокЗадач.Исполнитель КАК Получатель,
											|	атл_КомментарииКОбъектамУМС.Автор КАК Автор,
											|	""Получен комментарий"" КАК ТипТочки,
											|	""Получен комментарий: "" + ВЫРАЗИТЬ(атл_КомментарииКОбъектамУМС.Текст КАК СТРОКА(30)) + ""..."" КАК СтрокаДляОтображенияВКластере,
											|	атл_КомментарииКОбъектамУМС.Объект КАК Задача,
											|	атл_КомментарииКОбъектамУМС.КомментарийСВложением КАК КомментарийСВложением,
										    |	атл_КомментарииКОбъектамУМС.ИдентификаторФайла КАК ИдентификаторФайла,
										    |	атл_КомментарииКОбъектамУМС.ИдентификаторИнформационнойБазыФайла КАК ИдентификаторИнформационнойБазыФайла,
				                            |	атл_КомментарииКОбъектамУМС.Текст КАК Текст,
				                            |	""Комментарий"" КАК Заголовок
											|ПОМЕСТИТЬ ТаблицаДатыЗадач
				                            |ИЗ
				                            |	ТаблицаСписокЗадач КАК ТаблицаСписокЗадач
				                            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.атл_КомментарииКОбъектамУМС КАК атл_КомментарииКОбъектамУМС
				                            |		ПО ТаблицаСписокЗадач.ЗадачаМобильномуСотруднику = атл_КомментарииКОбъектамУМС.Объект
				                            |			И НЕ ТаблицаСписокЗадач.Исполнитель = атл_КомментарииКОбъектамУМС.Автор											
											|
										    |ОБЪЕДИНИТЬ ВСЕ
										    |
				                            |ВЫБРАТЬ
				                            |	атл_КомментарииКОбъектамУМС.ПрочиталДата КАК Дата,
				                            |	ТаблицаСписокЗадач.Исполнитель,
				                            |	ТаблицаСписокЗадач.Исполнитель,
											|	атл_КомментарииКОбъектамУМС.Автор,
											|	""Прочитан комментарий"",
											|	""Прочитан комментарий: "" + ВЫРАЗИТЬ(атл_КомментарииКОбъектамУМС.Текст КАК СТРОКА(30)) + ""..."" КАК СтрокаДляОтображенияВКластере,
											|	атл_КомментарииКОбъектамУМС.Объект,
											|	атл_КомментарииКОбъектамУМС.КомментарийСВложением КАК КомментарийСВложением,
										    |	атл_КомментарииКОбъектамУМС.ИдентификаторФайла КАК ИдентификаторФайла,
										    |	атл_КомментарииКОбъектамУМС.ИдентификаторИнформационнойБазыФайла КАК ИдентификаторИнформационнойБазыФайла,
				                            |	атл_КомментарииКОбъектамУМС.Текст,
				                            |	""Комментарий"" КАК Заголовок		                            
				                            |ИЗ
				                            |	ТаблицаСписокЗадач КАК ТаблицаСписокЗадач
				                            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.атл_КомментарииКОбъектамУМС КАК атл_КомментарииКОбъектамУМС
				                            |		ПО ТаблицаСписокЗадач.ЗадачаМобильномуСотруднику = атл_КомментарииКОбъектамУМС.Объект
				                            |			И НЕ ТаблицаСписокЗадач.Исполнитель = атл_КомментарииКОбъектамУМС.Автор";
			Иначе
				мДопУсловие = мДопУсловие + "
										    |ОБЪЕДИНИТЬ ВСЕ
										    |
				                            |ВЫБРАТЬ
				                            |	атл_КомментарииКОбъектамУМС.ПолучилДата КАК Дата,
				                            |	ТаблицаСписокЗадач.Исполнитель,
				                            |	ТаблицаСписокЗадач.Исполнитель,
											|	атл_КомментарииКОбъектамУМС.Автор,
											|	""Получен комментарий"",
											|	""Получен комментарий: "" + ВЫРАЗИТЬ(атл_КомментарииКОбъектамУМС.Текст КАК СТРОКА(30)) + ""..."" КАК СтрокаДляОтображенияВКластере,
											|	атл_КомментарииКОбъектамУМС.Объект КАК Задача,
											|	атл_КомментарииКОбъектамУМС.КомментарийСВложением КАК КомментарийСВложением,
										    |	атл_КомментарииКОбъектамУМС.ИдентификаторФайла КАК ИдентификаторФайла,
										    |	атл_КомментарииКОбъектамУМС.ИдентификаторИнформационнойБазыФайла КАК ИдентификаторИнформационнойБазыФайла,
				                            |	атл_КомментарииКОбъектамУМС.Текст,
				                            |	""Комментарий"" КАК Заголовок		                            
				                            |ИЗ
				                            |	ТаблицаСписокЗадач КАК ТаблицаСписокЗадач
				                            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.атл_КомментарииКОбъектамУМС КАК атл_КомментарииКОбъектамУМС
				                            |		ПО ТаблицаСписокЗадач.ЗадачаМобильномуСотруднику = атл_КомментарииКОбъектамУМС.Объект
				                            |			И НЕ ТаблицаСписокЗадач.Исполнитель = атл_КомментарииКОбъектамУМС.Автор											
											|
										    |ОБЪЕДИНИТЬ ВСЕ
										    |
				                            |ВЫБРАТЬ
				                            |	атл_КомментарииКОбъектамУМС.ПрочиталДата КАК Дата,
				                            |	ТаблицаСписокЗадач.Исполнитель,
				                            |	ТаблицаСписокЗадач.Исполнитель,
											|	атл_КомментарииКОбъектамУМС.Автор,
											|	""Прочитан комментарий"",
											|	""Прочитан комментарий: "" + ВЫРАЗИТЬ(атл_КомментарииКОбъектамУМС.Текст КАК СТРОКА(30)) + ""..."" КАК СтрокаДляОтображенияВКластере,
											|	атл_КомментарииКОбъектамУМС.Объект КАК Задача,
											|	атл_КомментарииКОбъектамУМС.КомментарийСВложением КАК КомментарийСВложением,
										    |	атл_КомментарииКОбъектамУМС.ИдентификаторФайла КАК ИдентификаторФайла,
										    |	атл_КомментарииКОбъектамУМС.ИдентификаторИнформационнойБазыФайла КАК ИдентификаторИнформационнойБазыФайла,
				                            |	атл_КомментарииКОбъектамУМС.Текст,
				                            |	""Комментарий"" КАК Заголовок		                            
				                            |ИЗ
				                            |	ТаблицаСписокЗадач КАК ТаблицаСписокЗадач
				                            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.атл_КомментарииКОбъектамУМС КАК атл_КомментарииКОбъектамУМС
				                            |		ПО ТаблицаСписокЗадач.ЗадачаМобильномуСотруднику = атл_КомментарииКОбъектамУМС.Объект
				                            |			И НЕ ТаблицаСписокЗадач.Исполнитель = атл_КомментарииКОбъектамУМС.Автор";
			КонецЕсли;
		КонецЕсли;
				
	КонецЕсли;
	
	// Сообщения.
	Если ПоказыватьСообщения Тогда
		Если ИсходящиеСообщения Тогда
			Если мПервая Тогда
				мПервая = Ложь;
				мДопУсловие = мДопУсловие + " ВЫБРАТЬ
											|	атл_Сообщения.ДатаСоздания КАК Дата,
											|	атл_Сообщения.Отправитель КАК Пользователь,
											|	атл_Сообщения.Получатель  КАК Получатель,
											|	атл_Сообщения.Отправитель КАК Автор,
											|	""Создано сообщение"" КАК ТипТочки,
											|	""Создано сообщение: "" + ВЫРАЗИТЬ(атл_Сообщения.Сообщение КАК СТРОКА(30)) + ""..."" КАК СтрокаДляОтображенияВКластере,
											|	"""" КАК Задача,
											|	ЛОЖЬ КАК КомментарийСВложением,
										    |	"""" КАК ИдентификаторФайла,
										    |	"""" КАК ИдентификаторИнформационнойБазыФайла,
											|	атл_Сообщения.Сообщение КАК Текст,
											|	""Сообщение"" КАК Заголовок
											|ПОМЕСТИТЬ ТаблицаДатыЗадач
											|ИЗ
											|	РегистрСведений.атл_Сообщения КАК атл_Сообщения
				                            |ГДЕ
				                            |	атл_Сообщения.Отправитель В(&СписокПользователей)
				                            |	И атл_Сообщения.ОтправительМК = ИСТИНА";
			Иначе
				мДопУсловие = мДопУсловие + "
										    |ОБЪЕДИНИТЬ ВСЕ
										    |
				                            |ВЫБРАТЬ
				                            |	атл_Сообщения.ДатаСоздания КАК Дата,
				                            |	атл_Сообщения.Отправитель КАК Пользователь,
											|	атл_Сообщения.Получатель  КАК Получатель,
											|	атл_Сообщения.Отправитель КАК Автор,
											|	""Создано сообщение"" КАК ТипТочки,
											|	""Создано сообщение: "" + ВЫРАЗИТЬ(атл_Сообщения.Сообщение КАК СТРОКА(30)) + ""..."" КАК СтрокаДляОтображенияВКластере,
											|	"""" КАК Задача,
											|	ЛОЖЬ КАК КомментарийСВложением,
										    |	"""" КАК ИдентификаторФайла,
										    |	"""" КАК ИдентификаторИнформационнойБазыФайла,
				                            |	атл_Сообщения.Сообщение,
				                            |	""Сообщение"" КАК Заголовок		                            
				                            |ИЗ
				                            |	РегистрСведений.атл_Сообщения КАК атл_Сообщения
				                            |ГДЕ
				                            |	атл_Сообщения.Отправитель В(&СписокПользователей)
				                            |	И атл_Сообщения.ОтправительМК = ИСТИНА";
			КонецЕсли;					
		КонецЕсли;
		
		Если ВходящиеСообщения Тогда
			Если мПервая Тогда
				мПервая = Ложь;
				мДопУсловие = мДопУсловие + " ВЫБРАТЬ
											|	атл_Сообщения.ДатаДоставки КАК Дата,
											|	атл_Сообщения.Получатель КАК Пользователь,
											|	атл_Сообщения.Получатель КАК Получатель,
											|	атл_Сообщения.Отправитель КАК Автор,
											|	""Получено сообщение"" КАК ТипТочки,
											|	""Получено сообщение: "" + ВЫРАЗИТЬ(атл_Сообщения.Сообщение КАК СТРОКА(30)) + ""..."" КАК СтрокаДляОтображенияВКластере,
											|	"""" КАК Задача,
											|	ЛОЖЬ КАК КомментарийСВложением,
										    |	"""" КАК ИдентификаторФайла,
										    |	"""" КАК ИдентификаторИнформационнойБазыФайла,
											|	атл_Сообщения.Сообщение КАК Текст,
											|	""Сообщение"" КАК Заголовок
											|ПОМЕСТИТЬ ТаблицаДатыЗадач
											|ИЗ
											|	РегистрСведений.атл_Сообщения КАК атл_Сообщения
				                            |ГДЕ
				                            |	атл_Сообщения.Получатель В(&СписокПользователей)
											|	И атл_Сообщения.ПолучательМК = ИСТИНА
											|
										    |ОБЪЕДИНИТЬ ВСЕ
										    |
				                            |ВЫБРАТЬ
				                            |	атл_Сообщения.ДатаПрочтения КАК Дата,
				                            |	атл_Сообщения.Получатель,
											|	атл_Сообщения.Получатель,
											|	атл_Сообщения.Отправитель КАК Автор,
											|	""Прочитано сообщение"" КАК ТипТочки,
											|	""Прочитано сообщение: "" + ВЫРАЗИТЬ(атл_Сообщения.Сообщение КАК СТРОКА(30)) + ""..."" КАК СтрокаДляОтображенияВКластере,
											|	"""" КАК Задача,
											|	ЛОЖЬ КАК КомментарийСВложением,
										    |	"""" КАК ИдентификаторФайла,
										    |	"""" КАК ИдентификаторИнформационнойБазыФайла,
				                            |	атл_Сообщения.Сообщение,
				                            |	""Сообщение"" КАК Заголовок		                            
				                            |ИЗ
				                            |	РегистрСведений.атл_Сообщения КАК атл_Сообщения
				                            |ГДЕ
				                            |	атл_Сообщения.Получатель В(&СписокПользователей)
				                            |	И атл_Сообщения.ПолучательМК = ИСТИНА";
			Иначе
				мДопУсловие = мДопУсловие + "
										    |ОБЪЕДИНИТЬ ВСЕ
										    |
											|ВЫБРАТЬ
											|	атл_Сообщения.ДатаДоставки,
											|	атл_Сообщения.Получатель,
											|	атл_Сообщения.Получатель,
											|	атл_Сообщения.Отправитель,
											|	""Получено сообщение"" КАК ТипТочки,
											|	""Получено сообщение: "" + ВЫРАЗИТЬ(атл_Сообщения.Сообщение КАК СТРОКА(30)) + ""..."" КАК СтрокаДляОтображенияВКластере,
											|	"""" КАК Задача,
											|	ЛОЖЬ КАК КомментарийСВложением,
										    |	"""" КАК ИдентификаторФайла,
										    |	"""" КАК ИдентификаторИнформационнойБазыФайла,
											|	атл_Сообщения.Сообщение,
											|	""Сообщение"" 
											|ИЗ
											|	РегистрСведений.атл_Сообщения КАК атл_Сообщения
				                            |ГДЕ
				                            |	атл_Сообщения.Получатель В(&СписокПользователей)
											|	И атл_Сообщения.ПолучательМК = ИСТИНА
											|
										    |ОБЪЕДИНИТЬ ВСЕ
										    |
				                            |ВЫБРАТЬ
				                            |	атл_Сообщения.ДатаПрочтения КАК Дата,
				                            |	атл_Сообщения.Получатель,
				                            |	атл_Сообщения.Получатель,
											|	атл_Сообщения.Отправитель КАК Автор,
											|	""Прочитано сообщение"" КАК ТипТочки,
											|	""Прочитано сообщение: "" + ВЫРАЗИТЬ(атл_Сообщения.Сообщение КАК СТРОКА(30)) + ""..."" КАК СтрокаДляОтображенияВКластере,
											|	"""" КАК Задача,
											|	ЛОЖЬ КАК КомментарийСВложением,
										    |	"""" КАК ИдентификаторФайла,
										    |	"""" КАК ИдентификаторИнформационнойБазыФайла,
				                            |	атл_Сообщения.Сообщение,
				                            |	""Сообщение"" КАК Заголовок		                            
				                            |ИЗ
				                            |	РегистрСведений.атл_Сообщения КАК атл_Сообщения
				                            |ГДЕ
				                            |	атл_Сообщения.Получатель В(&СписокПользователей)
				                            |	И атл_Сообщения.ПолучательМК = ИСТИНА";
			КонецЕсли;					
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СписокПользователей", мСписокВыбранныхПользователей);
	КонецЕсли;
	
	Если НЕ Объект.НеИнтерактивноеОткрытие Тогда
		мТекст = СтрЗаменить(мТекст, "//ДопУсловиеПериодаЗадач", "	И ТаблицаДатыЗадач.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания");
		мТекст = СтрЗаменить(мТекст, "//ДопУсловиеПериодаТаблицыСтрок", "ГДЕ
			   														|	ТаблицаСтрок.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания");
		Запрос.УстановитьПараметр("ДатаНачала", Объект.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", Объект.ДатаОкончания);
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(Объект.ВидТрека) Тогда
	//	мТекст = СтрЗаменить(мТекст, "//ДопУсловиеПоВидуТрека", "	ГДЕ
	//          	 												|		атл_КоординатыТрека.ИсточникКоординат = &ВидТрека");
	//	Запрос.УстановитьПараметр("ВидТрека", Объект.ВидТрека);
	//КонецЕсли;
	
	мТекст = СтрЗаменить(мТекст, "//ДопУсловиеПоОбъектам", мДопУсловие);
	мТекст = мТекст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаТочки";
	
	Запрос.Текст = мТекст;		
	Запрос.УстановитьПараметр("Таблица", СписокЗадач.Выгрузить());
	Выгрузка = Запрос.Выполнить().Выгрузить();
		
	Для Каждого текСтрока Из Выгрузка Цикл
		мНоваяСтрока = Объект.СписокСамостоятельныхТочек.Добавить();
		ЗаполнитьЗначенияСвойств(мНоваяСтрока, текСтрока);
		мНоваяСтрока.СтрокаДляОтображения = СтрЗаменить(текСтрока.СтрокаДляОтображения,"_TIME_", ",time:'" + Формат(текСтрока.ДатаТочки, "ДФ=yyyy-MM-ddTHH:mm:ss") + "'");				
		
		Если текСтрока.Заголовок = "Комментарий" Тогда				
			мНоваяСтрока.Текст = "<div style=""margin-bottom: 5px;font-weight: bold;"">" + текСтрока.ТипТочки + "</div>";
			Если текСтрока.КомментарийСВложением Тогда						
				ЗаписьФайла = РегистрыСведений.атл_ФайлыУМС.СоздатьМенеджерЗаписи();
				ЗаписьФайла.ИдентификаторИнформационнойБазы = текСтрока.ИдентификаторИнформационнойБазыФайла;
				ЗаписьФайла.ИдентификаторФайла = текСтрока.ИдентификаторФайла;
				ЗаписьФайла.Прочитать();
				
				мНоваяСтрока.Текст = мНоваяСтрока.Текст +
				"<a href=""#"" onclick=""openPicture(\'" + СокрЛП(текСтрока.ИдентификаторФайла) + 
				"\',\'" + СокрЛП(текСтрока.ИдентификаторИнформационнойБазыФайла) +
				"\')"">"+
				"<img width=100 src=""data:image/jpeg;base64,"+СтрЗаменить(СтрЗаменить(Base64Строка(ЗаписьФайла.ДанныеФайла.Получить()),Символы.ВК,""),Символы.ПС,"")+""">"+
				"</a>";//Открыть прикрепленное изображение
			Иначе
				мНоваяСтрока.Текст = мНоваяСтрока.Текст + "<span style=""font-style: italic;"">" + ПреобразоватьТекстДляОтображенияНаКарте(текСтрока.Текст) + "</span>";
			КонецЕсли;
			мНоваяСтрока.Текст = мНоваяСтрока.Текст +
			"<div style=""text-align: right;padding-top: 5px;"">" + Формат(текСтрока.ДатаТочки, "ДФ=""дддд, дд ММММ ЧЧ:мм""") +
			"</div><hr><a href=""#"" onclick=""openTask(\'" + текСтрока.Задача.УникальныйИдентификатор() + 
			"\')"">Открыть задачу №" + СокрЛП(текСтрока.Задача.НомерМК) +
			"</a><span style=""font-weight: bold;""></span><br>Автор: " + текСтрока.Автор +
			"<br>Источник: " + ?(текСтрока.ИсточникКоординат = Перечисления.атл_ВидыИсточниковКоординат.GPS, "GPS", "моб. сеть") +  "<br>" + 
			"Точность: " + Строка(текСтрока.Точность) + " м.";	
					
		ИначеЕсли текСтрока.Заголовок = "Сообщение" Тогда
			мНоваяСтрока.Текст = "<div style=""margin-bottom: 5px;font-weight: bold;"">" + текСтрока.ТипТочки +
			"</div><span style=""font-style: italic;"">" + ПреобразоватьТекстДляОтображенияНаКарте(текСтрока.Текст) +
			"</span><div style=""text-align: right;padding-top: 5px;"">" + Формат(текСтрока.ДатаТочки, "ДФ=""дддд, дд ММММ ЧЧ:мм""") +
			"</div><hr><span style=""font-weight: bold;""></span><br>Автор: " + текСтрока.Автор +
			"<br>Источник: " + ?(текСтрока.ИсточникКоординат = Перечисления.атл_ВидыИсточниковКоординат.GPS, "GPS", "моб. сеть") +  "<br>" + 
			"Точность: " + Строка(текСтрока.Точность) + " м.";
			
		ИначеЕсли текСтрока.ТипТочки = "Изменение статуса" Тогда
			мНоваяСтрока.Текст = "<div style=""margin-bottom: 5px;font-weight: bold;"">Изменен статус задачи</div>" +
			"<span style=""font-style: italic;"">Задача переведена в статус: " + ПреобразоватьТекстДляОтображенияНаКарте(текСтрока.Текст) + "</span>" +		
			"<div style=""text-align: right;padding-top: 5px;"">" + Формат(текСтрока.ДатаТочки, "ДФ=""дддд, дд ММММ ЧЧ:мм""") +
			"</div><hr><a href=""#"" onclick=""openTask(\'" + текСтрока.Задача.УникальныйИдентификатор() + 
			"\')"">Открыть задачу №" + СокрЛП(текСтрока.Задача.НомерМК) +
			"</a><span style=""font-weight: bold;""></span><br>Автор: " + текСтрока.Автор +
			"<br>Источник: " + ?(текСтрока.ИсточникКоординат = Перечисления.атл_ВидыИсточниковКоординат.GPS, "GPS", "моб. сеть") +  "<br>" + 
			"Точность: " + Строка(текСтрока.Точность) + " м.";
			
		Иначе
			мНоваяСтрока.Текст = ?(текСтрока.ТипТочки = "", "", текСтрока.ТипТочки + ": ") + 
			Формат(текСтрока.ДатаТочки, "ДЛФ=ДВ") + "<br>" + 
			ПреобразоватьТекстДляОтображенияНаКарте(текСтрока.Текст) +  "<br>" + 
			"Автор: " + текСтрока.Автор +  "<br>" + 
			"Источник: " + ?(текСтрока.ИсточникКоординат = Перечисления.атл_ВидыИсточниковКоординат.GPS, "GPS", "моб. сеть") +  "<br>" + 
			"Точность: " + Строка(текСтрока.Точность);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиДаннымиИзПараметровОткрытия()
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = "ВЫБРАТЬ
	                |	Таблица.Пользователь
	                |ПОМЕСТИТЬ ТаблицаПользователей
	                |ИЗ
	                |	&Таблица КАК Таблица
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	Пользователи.Ссылка КАК Пользователь,
	                |	""#0F04D7"" КАК Цвет,
	                |	ВЫБОР
	                |		КОГДА ТаблицаПользователей.Пользователь ЕСТЬ NULL 
	                |			ТОГДА ЛОЖЬ
	                |		ИНАЧЕ ИСТИНА
	                |	КОНЕЦ КАК Флаг
	                |ИЗ
	                |	Справочник.Пользователи КАК Пользователи
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПользователей КАК ТаблицаПользователей
	                |		ПО Пользователи.Ссылка = ТаблицаПользователей.Пользователь
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Пользователи.Наименование";
	мЗапрос.УстановитьПараметр("Таблица", Объект.СписокПараметровОткрытия.Выгрузить());				
	мВыгрузка = мЗапрос.Выполнить().Выгрузить();
	
	СписокПользователей.Загрузить(мВыгрузка);
	
	ПоказыватьМестонахождение = ПоказыватьТекущееМестонахождение;
	
	Для Каждого текСтрока Из Объект.СписокПараметровОткрытия Цикл
		Если текСтрока.ВидОбъекта = "ЗадачаМобильномуСотруднику" Тогда			
			
			мНоваяЗадача = СписокЗадач.Добавить();
			мНоваяЗадача.ЗадачаМобильномуСотруднику = текСтрока.Объект;
			мНоваяЗадача.Исполнитель = текСтрока.Пользователь;
			мНоваяЗадача.Флаг = Истина;
			
			ПоказыватьЗадачи = Истина;			
			Объект.ВидТрека = Перечисления.атл_ВидыИсточниковКоординат.GPS;
			
			Если Объект.ПоказыватьКомментарии Тогда
				ВходящиеКомментарии = Истина;
				ИсходящиеКомментарии = Истина;
			КонецЕсли;
			
		ИначеЕсли текСтрока.ВидОбъекта = "Комментарий" ИЛИ текСтрока.ВидОбъекта = "Сообщение" Тогда
			ПоискОбъектовПоИдентификатору = Истина;
			Объект.ВидТрека = Перечисления.атл_ВидыИсточниковКоординат.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ПоказыватьСтатусы Тогда
		ЗаполнитьСписокСтатусов();
		Для Каждого текСтрока Из СписокСтатусов Цикл
			текСтрока.Флаг = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ПоказыватьЗадачи Тогда 
		ЗаполнитьПериодПоСпискуЗадач(Объект.СписокПараметровОткрытия.Выгрузить(, "Объект"));		
	КонецЕсли;
	
	Если Объект.ПоказыватьТрек Тогда
		ЗаполнитьСписокТочекЛиний();
	КонецЕсли;
	
	Если НЕ Объект.ВводКоординаты Тогда
		ЗаполнитьСписокСамостоятельныхТочек();
	КонецЕсли;
	ДозаполнитьСписокСамостоятельныхТочекПоКоординатам();
	
	СформироватьСтрокиДляОтображения();
	
	НеобходимоОбновитьКарту = Истина;
	
	// При не интерактивное открытие, если вообще нет координат, то не открывать карту. Кроме случаев, когда это ввод координаты
	Если НЕ Объект.ВводКоординаты Тогда
		флЕстьКоординаты = Ложь;
		Для Каждого тек Из Объект.СписокСамостоятельныхТочек Цикл
			Если тек.Широта <> "" И тек.Долгота <> "" Тогда
				флЕстьКоординаты = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Объект.СписокТочекЛиний.Количество() = 0 И флЕстьКоординаты = Ложь Тогда						
			НеобходимоЗакрытиеФормы = Истина;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ДозаполнитьСписокСамостоятельныхТочекПоКоординатам()
	
	НайденныеСтроки = Объект.СписокПараметровОткрытия.НайтиСтроки(Новый Структура("ВидОбъекта", "ТочкаНаКарте"));
	Для Каждого текСтрока Из НайденныеСтроки Цикл		
		Если ЗначениеЗаполнено(текСтрока.Долгота) И ЗначениеЗаполнено(текСтрока.Широта) Тогда
			НоваяСтрокаТаблицы =  Объект.СписокСамостоятельныхТочек.Добавить();
			НоваяСтрокаТаблицы.ТипТочки = "ТочкаНаКарте";
			НоваяСтрокаТаблицы.Долгота = текСтрока.Долгота;
			НоваяСтрокаТаблицы.Широта = текСтрока.Широта;
			НоваяСтрокаТаблицы.Заголовок = Строка(текСтрока.Объект);
			НоваяСтрокаТаблицы.ДатаТочки = текСтрока.ДатаТочки;
			НоваяСтрокаТаблицы.СтрокаДляОтображения = ",point:[" + текСтрока.Долгота + "," + 
														 текСтрока.Широта + "],time:'" + 
														 ?(НоваяСтрокаТаблицы.ДатаТочки = Дата("00010101"), "", Формат(НоваяСтрокаТаблицы.ДатаТочки, "ДФ=yyyy-MM-ddTHH:mm:ss")) + 
														 "'" + ",name:'";													 			
			Если НЕ ЗначениеЗаполнено(текСтрока.Объект) Тогда
				НоваяСтрокаТаблицы.Текст = "Местоположение";
				НоваяСтрокаТаблицы.СтрокаДляОтображенияВКластере = "Местоположение";
			Иначе
				НоваяСтрокаТаблицы.Текст = Строка(текСтрока.Объект);
				НоваяСтрокаТаблицы.СтрокаДляОтображенияВКластере = Строка(текСтрока.Объект);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НайденныеСтроки = Объект.СписокПараметровОткрытия.НайтиСтроки(Новый Структура("ВидОбъекта", "КоординатаДопРеквизита"));
	Для Каждого текСтрока Из НайденныеСтроки Цикл		
		Если ЗначениеЗаполнено(текСтрока.Долгота) И ЗначениеЗаполнено(текСтрока.Широта) Тогда
			НоваяСтрокаТаблицы =  Объект.СписокСамостоятельныхТочек.Добавить();
			НоваяСтрокаТаблицы.ТипТочки = "ТочкаНаКарте";
			НоваяСтрокаТаблицы.Долгота = текСтрока.Долгота;
			НоваяСтрокаТаблицы.Широта = текСтрока.Широта;
			НоваяСтрокаТаблицы.Заголовок = Строка(текСтрока.Объект.Контрагент);
			НоваяСтрокаТаблицы.ДатаТочки = текСтрока.ДатаТочки;
			НоваяСтрокаТаблицы.ИсточникКоординат = текСтрока.ИсточникКоординат;
			НоваяСтрокаТаблицы.Точность = текСтрока.Точность;
					
			НоваяСтрокаТаблицы.СтрокаДляОтображения = ",point:[" + текСтрока.Долгота + "," + 
														 текСтрока.Широта + "],time:'" + 
														 ?(НоваяСтрокаТаблицы.ДатаТочки = Дата("00010101"), "", Формат(НоваяСтрокаТаблицы.ДатаТочки, "ДФ=yyyy-MM-ddTHH:mm:ss")) + 
														 "'" + ",name:'";
			
			НоваяСтрокаТаблицы.Текст = "<span style=""font-weight: bold;""></span><br>Дата получения координат: " + текСтрока.ДатаТочки +
			"<br>Автор: " + текСтрока.Пользователь +
			"<br>Источник: " + ?(текСтрока.ИсточникКоординат = Перечисления.атл_ВидыИсточниковКоординат.GPS, "GPS", "моб. сеть") +  
			"<br>Точность: " + Строка(текСтрока.Точность) + " м.";
			
			НоваяСтрокаТаблицы.СтрокаДляОтображенияВКластере = Строка(текСтрока.Объект.Контрагент);
			
		КонецЕсли;
	КонецЦикла;
		
	НайденныеСтроки = Объект.СписокПараметровОткрытия.НайтиСтроки(Новый Структура("ВидОбъекта", "АдресДляПоискаНаКарте"));
	Для Каждого текСтрока Из НайденныеСтроки Цикл		
		Если НЕ ЗначениеЗаполнено(текСтрока.Долгота) И НЕ ЗначениеЗаполнено(текСтрока.Широта) И ЗначениеЗаполнено(текСтрока.Примечание) Тогда
			АдресДляПоискаНаКарте = СокрЛП(текСтрока.Примечание);
			ДозаполнитьСписокСамостоятельныхТочекНайденнымиТочкамиСАдресами();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДозаполнитьСписокСамостоятельныхТочекНайденнымиТочкамиСАдресами(МассивТочекКоординат = Неопределено)
		
	стрАдресаДляЗапроса = ПреобразоватьСтрокуДляГеокодера(АдресДляПоискаНаКарте);
	
	Если ЗначениеЗаполнено(МассивТочекКоординат) Тогда
		флОшибкаПреобразования = Ложь;
		Попытка
			чТочка1 = Число(МассивТочекКоординат[0]);
		Исключение
			флОшибкаПреобразования = Истина;
		КонецПопытки;
		
		Попытка
			чТочка2 = Число(МассивТочекКоординат[1]);
		Исключение
			флОшибкаПреобразования = Истина;
		КонецПопытки;
		
		Попытка
			чТочка3 = Число(МассивТочекКоординат[2]);
		Исключение
			флОшибкаПреобразования = Истина;
		КонецПопытки;
		
		Попытка
			чТочка4 = Число(МассивТочекКоординат[3]);
		Исключение
			флОшибкаПреобразования = Истина;
		КонецПопытки;
				                   
		Если НЕ флОшибкаПреобразования Тогда
			стрДиапозонПоиска = "&viewbox=" + Строка(чТочка1-1) + ";" + Строка(чТочка2+1) + ";"
								+ Строка(чТочка3+1) + ";" + Строка(чТочка4-1);
			стрДиапозонПоиска = СтрЗаменить(стрДиапозонПоиска, ",", ".");					
			стрДиапозонПоиска = "&viewbox=" + СтрЗаменить(стрДиапозонПоиска, ";", ",")+ "&bounded=1";
		КонецЕсли;
		
	Иначе
		Попытка
			чДолгота = Число(ДолготаПоУмолчанию);
		Исключение
			чДолгота = Неопределено;
		КонецПопытки;
		
		Попытка
			чШирота = Число(ШиротаПоУмолчанию);
		Исключение
			чШирота = Неопределено;		
		КонецПопытки;
		
		стрДиапозонПоиска = "";
		Если ЗначениеЗаполнено(чДолгота) И ЗначениеЗаполнено(чШирота) Тогда
			стрДиапозонПоиска = Строка(чДолгота - 1) + ";" + Строка(чШирота + 1) + ";"
								+ Строка(чДолгота + 1) + ";" + Строка(чШирота - 1);
			стрДиапозонПоиска = СтрЗаменить(стрДиапозонПоиска, ",", ".");					
			стрДиапозонПоиска = "&viewbox=" + СтрЗаменить(стрДиапозонПоиска, ";", ",")+ "&bounded=1";
		КонецЕсли;	
	КонецЕсли;

	НеНайденыТочкиСАдресами = НЕ ОтправитьИРазобратьЗапросГеокодеру(стрАдресаДляЗапроса, стрДиапозонПоиска);
		
КонецПроцедуры

#КонецОбласти


#Область ПрочиеПроцедурыИФункции

&НаКлиенте
Процедура ДоступностьЭлементовФормы()
	
	Элементы.ВидТрека.Доступность = Объект.ПоказыватьТрек;
	//Элементы.ПоказыватьТекущееМестонахождение.Доступность = ПоказыватьМестонахождение;
	Элементы.МестонахождениеНаДату.Доступность = (ПоказыватьМестонахождение И НЕ ПоказыватьТекущееМестонахождение);
	Элементы.МестонахождениеНаДату.АвтоОтметкаНезаполненного = (ПоказыватьМестонахождение И НЕ ПоказыватьТекущееМестонахождение);
		
	Элементы.ВходящиеСообщения.Доступность = ПоказыватьСообщения;	
	Элементы.ИсходящиеСообщения.Доступность = ПоказыватьСообщения;
	
	Элементы.ПоказыватьКомментарии.Доступность = ПоказыватьЗадачи;
	Элементы.ПоказыватьСтатусы.Доступность = ПоказыватьЗадачи;
	Элементы.СписокЗадач.ТолькоПросмотр = НЕ ПоказыватьЗадачи;
	Элементы.СписокСтатусов.ТолькоПросмотр = НЕ Объект.ПоказыватьСтатусы;	

	Элементы.ВходящиеКомментарии.Доступность = Объект.ПоказыватьКомментарии;	
	Элементы.ИсходящиеКомментарии.Доступность = Объект.ПоказыватьКомментарии;	
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьДоступностьЭлементовФормыПриНеИнтерактивномОткрытии()
	
	Элементы.ГруппаНастройки.Видимость = Ложь;
	Элементы.ГруппаОтборПоОбъектам.Видимость = Ложь;
	Элементы.ГруппаСписокСамостоятельныхТочек.Видимость = Ложь;	
	
	Элементы.Шапка.Видимость = Ложь;		
	Элементы.ФормаОбновитьКарту.Видимость = Ложь;	
	
КонецПроцедуры

&НаСервере
Функция ПроверкаЗаполненияФормы()
	
	фл = Истина;
	
	Если Объект.ПоказыватьТрек ИЛИ ПоказыватьЗадачи ИЛИ ПоказыватьСообщения ИЛИ Объект.ПоказыватьКомментарии Тогда
		Если Объект.ДатаНачала = Дата("00010101") Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не указано начало периода!";			
			Сообщение.Сообщить();			
			фл = Ложь;	
		КонецЕсли;
		
		Если Объект.ДатаОкончания = Дата("00010101") Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не указано окончание периода!";			
			Сообщение.Сообщить();			
			фл = Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	Если ПоказыватьМестонахождение И (НЕ ПоказыватьТекущееМестонахождение) И МестонахождениеНаДату = Дата("00010101") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указана дата, на которую необходимо показать местонахождение пользователей!";			
		Сообщение.Сообщить();		
		фл = Ложь;	
	КонецЕсли;
	
	Если ВидНастройки = "МаршрутСотрудника" Тогда
		Если Не ЗначениеЗаполнено(Пользователь) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не указан пользователь!";			
			Сообщение.Сообщить();		
			фл = Ложь;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат фл;
	
КонецФункции

&НаСервере
Процедура ПоказыватьЗадачиПриИзмененииНаСервере()
	
	ЗаполнитьСписокСтатусов();      
	ЗаполнитьСписокЗадач();	
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФлажкиСпискаПользователей(ЗначениеФлага)
	
	Для Каждого текСтрока Из СписокПользователей Цикл
		текСтрока.Флаг = ЗначениеФлага;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФлажкиСпискаЗадач(ЗначениеФлага)
	
	Для Каждого текСтрока Из СписокЗадач Цикл
		текСтрока.Флаг = ЗначениеФлага;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЦветПользователя(Пользователь)
	
	мНайденнаяСтрока = СписокПользователей.НайтиСтроки(Новый Структура("Пользователь", Пользователь));
	Если мНайденнаяСтрока.Количество() > 0 И ЗначениеЗаполнено(мНайденнаяСтрока[0].Цвет) Тогда
		Возврат мНайденнаяСтрока[0].Цвет;
	Иначе
		Возврат "#000000";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПолеHTMLДокумента() 
		
	//Элементы.ПолеHTMLДокумента.Документ.parentWindow.eval("removeAll('all')");
	//
	//Элементы.ПолеHTMLДокумента.Документ.parentWindow.eval(СтрокаДляОтображенияЛиний);		
	//Элементы.ПолеHTMLДокумента.Документ.parentWindow.eval("showLine();");
	//
	//Элементы.ПолеHTMLДокумента.Документ.parentWindow.eval(СтрокаДляОтображенияТочек);		
	//
	//Если ВыведеныДанныеНаКарту Тогда		
	//	Элементы.ПолеHTMLДокумента.Документ.parentWindow.eval("renewMapArea();");
	//	Если Объект.СписокТочекЛиний.Количество() > 0 Тогда
	//		Элементы.ПолеHTMLДокумента.Документ.parentWindow.eval("showPlayer();");
	//	Иначе
	//		Элементы.ПолеHTMLДокумента.Документ.parentWindow.eval("hidePlayer();");
	//	КонецЕсли;
	//КонецЕсли;
	
	ПередатьКомандуКарте("removeAll('all')");
	
	ПередатьКомандуКарте(СтрокаДляОтображенияЛиний);
	ПередатьКомандуКарте("showLine();");
	
	ПередатьКомандуКарте(СтрокаДляОтображенияТочек);
	
	Если ВыведеныДанныеНаКарту Тогда		
		ПередатьКомандуКарте("renewMapArea();");
		Если Объект.СписокТочекЛиний.Количество() > 0 Тогда
			ПередатьКомандуКарте("showPlayer();");
		Иначе
			ПередатьКомандуКарте("hidePlayer();");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьКомандыПослеЗагрузкиКарты()
	
	//Элементы.ПолеHTMLДокумента.Документ.parentWindow.eval("showPolylineMenu();");
	//
	//Если Объект.ВводКоординаты Тогда
	//	Элементы.ПолеHTMLДокумента.Документ.parentWindow.eval("cursorPositionInput();");	
	//КонецЕсли;
	
	Если Объект.ВводКоординаты Тогда				
		ПередатьКомандуКарте("showSearch(""" + СтрЗаменить(АдресДляПоискаНаКарте, """", "\""") + """);");				
	КонецЕсли;
	
	ПередатьКомандуКарте("showPolylineMenu();");
	
	Если Объект.ВводКоординаты Тогда
		ПередатьКомандуКарте("cursorPositionInput();");	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьКартуНаСервере()
	
	Если Не ПроверкаЗаполненияФормы() Тогда
		НеобходимоОбновитьКарту = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаКарта;
	
	ЗаполнитьСписокТочекЛиний();
	ЗаполнитьСписокСамостоятельныхТочек();
	СформироватьСтрокиДляОтображения();
	
	НеобходимоОбновитьКарту = Истина;

КонецПроцедуры

&НаСервере
Процедура СформироватьСтрокиДляОтображения()
	
	мКолонкаПользователей = Объект.СписокТочекЛиний.Выгрузить(,"Пользователь");
	мКолонкаПользователей.Свернуть("Пользователь");
	мКолвоПользователей = мКолонкаПользователей.Количество();
	
	СтрокаДляОтображения = "";
	ВыведеныДанныеНаКарту = Ложь;	
	
	Если Объект.СписокТочекЛиний.Количество() > 0 Тогда
		
		//0 - Долгота
		//1	- Широта
		//2 - Высота
		//3 - Точность
		//4 - Время
		//5 - Скорость
		//6 - ЗарядБатареи
		
		Сч = 1;
		СчСтрок = 0;
		мПользователь = Объект.СписокТочекЛиний[0].Пользователь;		
		СтрокаДляОтображения = "addLine({id:'l" + Сч + "',timestamp:'" + Формат(Объект.ДатаНачала, "ДФ=yyyy-MM-ddTHH:mm:ss") + "',fixes:[";
		
		
		Для Каждого Стр из Объект.СписокТочекЛиний Цикл
			Если Стр.НомерСтроки%100000 = 0 ИЛИ Стр.Пользователь <> мПользователь Тогда 
				мЦвет = ПолучитьЦветПользователя(мПользователь);
				СтрокаДляОтображения = СтрЗаменить(СтрокаДляОтображения, Символы.НПП, "");
				СтрокаДляОтображения = Лев(СтрокаДляОтображения, СтрДлина(СтрокаДляОтображения)-1);
				СтрокаДляОтображения = СтрокаДляОтображения + "],style:{color:'" + мЦвет + "'}})";
				Сч = Сч +1;
				мПользователь = Стр.Пользователь;
				СтрокаДляОтображения = "addLine({id:'l" + Сч + "',timestamp:'" + Формат(Объект.ДатаНачала, "ДФ=yyyy-MM-ddTHH:mm:ss") + "',fixes:[";
			КонецЕсли;
			СтрокаДляОтображенияПоТочке = СтрЗаменить(Стр.СтрокаДляОтображения,"_SHIFT_]", Стр.СдвигВремениКоординаты + "]");
			СтрокаДляОтображения = СтрокаДляОтображения + СтрокаДляОтображенияПоТочке;			
		КонецЦикла;
				
		мЦвет = ПолучитьЦветПользователя(мПользователь);
		СтрокаДляОтображения = СтрЗаменить(СтрокаДляОтображения, Символы.НПП, "");
		СтрокаДляОтображения = Лев(СтрокаДляОтображения, СтрДлина(СтрокаДляОтображения)-1);
		СтрокаДляОтображения = СтрокаДляОтображения + "],style:{color:'" + мЦвет + "'}})";
		ВыведеныДанныеНаКарту = Истина;
		
	КонецЕсли;
	СтрокаДляОтображенияЛиний = СтрокаДляОтображения;
			
	
	// Добавление отдельных точек.
	флПроверкиОтображения = 0;
	Если Объект.СписокСамостоятельныхТочек.Количество() > 0 Тогда		
		СтрокаДляОтображения = "";		
		Ном = 0;
		Для Каждого Стр из Объект.СписокСамостоятельныхТочек Цикл		
						
			Если Стр.ТипТочки = "Создан комментарий" ИЛИ Стр.ТипТочки = "Создано сообщение" Тогда
				СтильТочки = "radius:8,color:'#FFFFFF', fillColor:'#5D76CB',fillOpacity:1,opacity:1,weight:2";
			ИначеЕсли Стр.ТипТочки = "Прочитан комментарий" ИЛИ Стр.ТипТочки = "Прочитано сообщение" Тогда				
				СтильТочки = "radius:8,color:'#FFFFFF', fillColor:'#00BFFF',fillOpacity:1,opacity:1,weight:2";
			ИначеЕсли Стр.ТипТочки = "Получен комментарий"  ИЛИ Стр.ТипТочки = "Получено сообщение" Тогда
				СтильТочки = "radius:8,color:'#FFFFFF', fillColor:'#AFDAFC',fillOpacity:1,opacity:1,weight:2";
			ИначеЕсли Стр.ТипТочки = "Начало маршрута" Тогда
				СтильТочки = "radius:8,color:'#FFFFFF', fillColor:'#B00000',fillOpacity:1,opacity:1,weight:2";
				флПроверкиОтображения = флПроверкиОтображения + 1;
			ИначеЕсли Стр.ТипТочки = "Окончание маршрута" Тогда
				СтильТочки = "radius:8,color:'#FFFFFF', fillColor:'#B00000',fillOpacity:1,opacity:1,weight:2";
				флПроверкиОтображения = флПроверкиОтображения + 1;
			ИначеЕсли Стр.ТипТочки = "Сотрудник" Тогда
				СтильТочки = "radius:12,color:'#FFFFFF', fillColor:'"+ Стр.Цвет + "',fillOpacity:1,opacity:1,weight:4";
			ИначеЕсли Стр.ТипТочки = "ТочкаНаКарте" Тогда
				СтильТочки = "radius:10,color:'#FFFFFF', fillColor:'#FF9900',fillOpacity:1,opacity:1,weight:3";
			Иначе
				СтильТочки = "radius:10,color:'#FFFFFF', fillColor:'#FF9900',fillOpacity:1,opacity:1,weight:3";
			КонецЕсли;
						
			ТочкаДляОтображения = "{id:'p" + Стр.НомерСтроки + "'" + Стр.СтрокаДляОтображения +
			Стр.Заголовок + 
			"',tableLine:'<td>" + Формат(Стр.ДатаТочки, "ДФ='дд.ММ.гг ЧЧ:мм'") + 			
			"</td><td>" + ПреобразоватьТекстДляОтображенияНаКарте(Стр.СтрокаДляОтображенияВКластере) +
			"</td>',description:'" + Стр.Текст + 
			"',style:{" + СтильТочки + "}}";			
			СтрокаДляОтображения = СтрокаДляОтображения + ТочкаДляОтображения + ",";			
					
		КонецЦикла;
		СтрокаДляОтображения = Лев(СтрокаДляОтображения, СтрДлина(СтрокаДляОтображения)-1);
		СтрокаДляОтображения = "addPoints([" + СтрокаДляОтображения + "])";
		ВыведеныДанныеНаКарту = Истина;
	КонецЕсли;
	СтрокаДляОтображенияТочек = СтрокаДляОтображения;
	
	Если Объект.СписокСамостоятельныхТочек.Количество() = 0 ИЛИ Объект.СписокСамостоятельныхТочек.Количество() = флПроверкиОтображения Тогда
		НетТочекНаКартеДляОтображения = Истина;
	Иначе
		НетТочекНаКартеДляОтображения = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодПоСпискуЗадач(ВыбранныеЗадачи)
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = "ВЫБРАТЬ
	                |	атл_ЗадачаМобильномуСотруднику.Ссылка,
	                |	атл_ЗадачаМобильномуСотруднику.ВыехалДата КАК Дата,
	                |	""Выехал"" КАК ТипТочки
	                |ИЗ
	                |	Документ.атл_ЗадачаМобильномуСотруднику КАК атл_ЗадачаМобильномуСотруднику
	                |ГДЕ
	                |	атл_ЗадачаМобильномуСотруднику.Ссылка В(&Список)
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	атл_ЗадачаМобильномуСотруднику.Ссылка,
	                |	атл_ЗадачаМобильномуСотруднику.ПриехалДата,
	                |	""Приехал""
	                |ИЗ
	                |	Документ.атл_ЗадачаМобильномуСотруднику КАК атл_ЗадачаМобильномуСотруднику
	                |ГДЕ
	                |	атл_ЗадачаМобильномуСотруднику.Ссылка В(&Список)";
	мЗапрос.УстановитьПараметр("Список", ВыбранныеЗадачи);
	мВыгрузка = мЗапрос.Выполнить().Выгрузить();
	
	Если мВыгрузка.Количество() > 0 Тогда
		мВыгрузка.Сортировать("Дата Возр");
		Объект.ДатаНачала = мВыгрузка[0].Дата;
		
		мВыгрузка.Сортировать("Дата Убыв");
		Объект.ДатаОкончания = мВыгрузка[0].Дата;
		
		Если Объект.ДатаНачала = Дата("00010101") И Объект.ДатаОкончания = Дата("00010101") Тогда
			Объект.ДатаНачала = ТекущаяДата();		
			Объект.ДатаОкончания = ТекущаяДата();
			Объект.ПоказыватьТрек = Ложь;
		ИначеЕсли Объект.ДатаНачала = Дата("00010101") И НЕ Объект.ДатаОкончания = Дата("00010101") Тогда
			Объект.ДатаНачала = Объект.ДатаОкончания;
			Объект.ПоказыватьТрек = Ложь;
		ИначеЕсли НЕ Объект.ДатаНачала = Дата("00010101") И Объект.ДатаОкончания = Дата("00010101") Тогда
			Объект.ДатаОкончания = Объект.ДатаНачала;	
			Объект.ПоказыватьТрек = Ложь;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПолеHTMLДокументаДляНеИнтерактивногоОткрытия() //Экспорт
	
	//Если НЕ Элементы.ПолеHTMLДокумента.Документ.parentWindow.onload = Null Тогда
		
		ПередатьКомандыПослеЗагрузкиКарты();		
		//ОбновитьКартуНаСервере();
		
		Если НеобходимоОбновитьКарту Тогда
			ОбновитьПолеHTMLДокумента();
		КонецЕсли;
		
		//ОтключитьОбработчикОжидания("ОбновитьПолеHTMLДокументаДляНеИнтерактивногоОткрытия");
	//КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПолеHTMLДокументаДляИнтерактивногоОткрытия() Экспорт
	
	#Если ВебКлиент Тогда
		
		Попытка
			ОбъектBody = Элементы.ПолеHTMLДокумента.Документ.parentWindow.document.body;
		Исключение
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(ОбъектBody) Тогда
			Попытка
				ОбъектBody = Элементы.ПолеHTMLДокумента.Документ.body;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектBody) Тогда
			ПередатьКомандыПослеЗагрузкиКарты();		
					
			ОтключитьОбработчикОжидания("ОбновитьПолеHTMLДокументаДляИнтерактивногоОткрытия");
		КонецЕсли;
		
	#Иначе
			
		Если НЕ Элементы.ПолеHTMLДокумента.Документ.parentWindow.onload = Null Тогда
			
			ПередатьКомандыПослеЗагрузкиКарты();		
					
			ОтключитьОбработчикОжидания("ОбновитьПолеHTMLДокументаДляИнтерактивногоОткрытия");
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловноеОформление()
	
	ЭлементыУФ = УсловноеОформление.Элементы;
	ЭлементыУФ.Очистить();
	
	НовыйЭлементУФ = ЭлементыУФ.Добавить();
	
	ПолеЭлемента = НовыйЭлементУФ.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокСамостоятельныхТочек");

	ОтборЭлемента = НовыйЭлементУФ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СписокСамостоятельныхТочек.ЕстьКоординаты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	НовыйЭлементУФ.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 218, 185));
	
КонецПроцедуры

&НаСервере
Функция ПреобразованиеСпецСимволов(Текст)

    стрСимволов = "%00%01%02%03%04%05%06%07%08%09%0A%0B%0C%0D%0E%0F%10%11%12%13%14" +
            "%15%16%17%18%19%1A%1B%1C%1D%1E%1F%20%21%22%23%24%25%26%27%28" +
            "%29%2A%2B%2C%2D%2E%2F%30%31%32%33%34%35%36%37%38%39%3A%3B%3C" +
            "%3D%3E%3F%40%41%42%43%44%45%46%47%48%49%4A%4B%4C%4D%4E%4F%50" +
            "%51%52%53%54%55%56%57%58%59%5A%5B%5C%5D%5E%5F%60%61%62%63%64" +
            "%65%66%67%68%69%6A%6B%6C%6D%6E%6F%70%71%72%73%74%75%76%77%78" +
            "%79%7A%7B%7C%7D%7E%7F%80%81%82%83%84%85%86%87%88%89%8A%8B%8C" +
            "%8D%8E%8F%90%91%92%93%94%95%96%97%98%99%9A%9B%9C%9D%9E%9F%A0" +
            "%A1%A2%A3%A4%A5%A6%A7%A8%A9%AA%AB%AC%AD%AE%AF%B0%B1%B2%B3%B4" +
            "%B5%B6%B7%B8%B9%BA%BB%BC%BD%BE%BF%C0%C1%C2%C3%C4%C5%C6%C7%C8" +
            "%C9%CA%CB%CC%CD%CE%CF%D0%D1%D2%D3%D4%D5%D6%D7%D8%D9%DA%DB%DC" +
            "%DD%DE%DF%E0%E1%E2%E3%E4%E5%E6%E7%E8%E9%EA%EB%EC%ED%EE%EF%F0" +
            "%F1%F2%F3%F4%F5%F6%F7%F8%F9%FA%FB%FC%FD%FE%FF";
    
    Результат = "";        
            
    Для Сч = 1 По СтрДлина(Текст) Цикл        
        текСимвол = Сред(Текст, Сч, 1);       
        текКод = КодСимволаASCII(текСимвол);
        Результат = Результат + Сред(стрСимволов, текКод*3 + 1, 3 );        
    КонецЦикла;
    
    Возврат Результат;
	
КонецФункции

&НаСервере
Функция КодСимволаASCII(Символ) 
	
	КодЮникод = КодСимвола(Символ); 
	Если ((КодЮникод > 1039) И (КодЮникод < 1104)) Тогда 
		Возврат (КодЮникод - 848); 
	ИначеЕсли КодЮникод = 8470 Тогда 
		Возврат 185; 
	ИначеЕсли КодЮникод = 1105 Тогда 
		Возврат 184; 
	ИначеЕсли КодЮникод = 1025 Тогда 
		Возврат 168; 
	Иначе 
		Возврат КодЮникод; 
	КонецЕсли; 
	
КонецФункции

&НаСервере
Функция ПреобразоватьТекстДляОтображенияНаКарте(Текст)
	
	Текст = СтрЗаменить(Текст, Символы.ПС, "");
	Текст = СтрЗаменить(Текст, "'", "\'");
	
	Возврат Текст;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаПользователя(ИДПользователя)
	
	Возврат Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДПользователя));
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаЗадачу(ИДЗадачи)
	
	Возврат Документы.атл_ЗадачаМобильномуСотруднику.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДЗадачи));
	
КонецФункции

&НаСервере
Процедура ПолучитьИмяФайлаИАдресФайла(ИдентификаторИнформационнойБазы, ИдентификаторФайла, ИмяФайла, АдресФайла)
	
	ЗаписьФайла = РегистрыСведений.атл_ФайлыУМС.СоздатьМенеджерЗаписи();
	ЗаписьФайла.ИдентификаторИнформационнойБазы = ИдентификаторИнформационнойБазы;
	ЗаписьФайла.ИдентификаторФайла = ИдентификаторФайла;
	ЗаписьФайла.Прочитать();
	
	ИмяФайла = ЗаписьФайла.ИмяФайла;
	ДвоичныеДанные = ЗаписьФайла.ДанныеФайла.Получить();
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьКомандуКарте(ИмяКоманды)
	
	#Если ВебКлиент Тогда
		Попытка
			ОбъектBody = Элементы.ПолеHTMLДокумента.Документ.parentWindow.document.body;
		Исключение
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(ОбъектBody) Тогда
			Попытка
				ОбъектBody = Элементы.ПолеHTMLДокумента.Документ.body;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОбъектBody) Тогда
			Сообщить("Не удалось подключить карту");
		Иначе
			ОбъектBody.eval3(ИмяКоманды);
		КонецЕсли;
	  
	#Иначе
		Если РежимЗапуска = 1 Тогда
			Элементы.ПолеHTMLДокумента.Документ.parentWindow.eval2(ИмяКоманды);
		Иначе
			Элементы.ПолеHTMLДокумента.Документ.parentWindow.eval(ИмяКоманды);			
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарту()
	
	текАдресКарты = "";
	
	#Если ВебКлиент Тогда
		
		Если НЕ ЗначениеЗаполнено(стрАдресКартыВебКлиент) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не заполнен адрес карты для отображения точек в режиме веб-клиента!";				
			Сообщение.Сообщить();
		Иначе
			текАдресКарты = стрАдресКартыВебКлиент;	
		КонецЕсли;
		
	#Иначе
		
		Если НЕ ЗначениеЗаполнено(стрАдресКарты) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не заполнен адрес карты для отображения!";				
			Сообщение.Сообщить();
		Иначе
			текАдресКарты = стрАдресКарты;
						
			Если НЕ РежимЗапуска = 0 Тогда
				текАдресКарты = текАдресКарты + "&browser=" + СокрЛП(РежимЗапуска);
			КонецЕсли;					
		КонецЕсли;
		
	#КонецЕсли
	
	ПолеHTMLДокумента = текАдресКарты;
		
	КоличествоЗапусковКарты = КоличествоЗапусковКарты + 1;
			
КонецПроцедуры

&НаКлиенте
Процедура УбратьПометкиВПодменюВидНастройки()
	
	Для Каждого текМеню Из Элементы.ВидНастройки.ПодчиненныеЭлементы Цикл
		текМеню.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтображениеЭлементовПоВидуНастройкиОтчета()
	
	Если ВидНастройки = "МаршрутСотрудника" Тогда
		ЭтаФорма.Заголовок = "Маршрут сотрудника";
		Элементы.ДатаНачала.Видимость = Истина;	
		Элементы.ДатаОкончания.Видимость = Истина;
		Элементы.ВыборПериода.Видимость = Истина;
		Элементы.Пользователь.Видимость = Истина;
		Элементы.ФормаОбновитьКарту.Видимость = Истина;
		Элементы.ГруппаСписокСамостоятельныхТочек.Видимость = Ложь;
		Элементы.МестонахождениеНаДату.Видимость = Ложь;
		Элементы.ПоказыватьТекущееМестонахождение.Видимость = Ложь;
		
		Элементы.Пользователь.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокПользователей());
		
	ИначеЕсли ВидНастройки = "МестонахождениеСотрудников" Тогда
		ЭтаФорма.Заголовок = "Местонахождение сотрудников";
		Элементы.ДатаНачала.Видимость = Ложь;	
		Элементы.ДатаОкончания.Видимость = Ложь;
		Элементы.ВыборПериода.Видимость = Ложь;
		Элементы.Пользователь.Видимость = Истина;
		Элементы.ФормаОбновитьКарту.Видимость = Истина;
		Элементы.ГруппаСписокСамостоятельныхТочек.Видимость = Ложь;
		Элементы.МестонахождениеНаДату.Видимость = Истина;
		Элементы.ПоказыватьТекущееМестонахождение.Видимость = Истина;
		
		Элементы.Пользователь.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокПользователей());
		Элементы.Пользователь.СписокВыбора.Вставить(0, "Все");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокПользователей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	                 |	Пользователи.Ссылка
	                 |ИЗ
	                 |	Справочник.Пользователи КАК Пользователи";
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Возврат Выгрузка.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Функция ПреобразоватьСтрокуДляГеокодера(СтрокаПоиска)
		
	Текст = СтрЗаменить(СтрокаПоиска, ",", " ");
	Текст = СтрЗаменить(Текст, ".", " ");
	Текст = СтрЗаменить(Текст, " д ", "");	
	Текст = КодироватьСтроку(Текст,СпособКодированияСтроки.КодировкаURL);
	
	Возврат Текст;

КонецФункции

&НаСервере
Процедура ОбновитьДанныеТаблицПриПоискеАдреса(МассивТочекКоординат)
	
	ЗаполнитьСписокТочекЛиний();
	ЗаполнитьСписокСамостоятельныхТочек();
	ДозаполнитьСписокСамостоятельныхТочекНайденнымиТочкамиСАдресами(МассивТочекКоординат);
	СформироватьСтрокиДляОтображения();
	
	НеобходимоОбновитьКарту = Истина;

КонецПроцедуры

&НаСервере
Функция ОтправитьИРазобратьЗапросГеокодеру(стрАдресаДляЗапроса, стрДиапозонПоиска)
	
	флНайденыТочки = Ложь;
	
	Соединение = Новый HTTPСоединение("nominatim.openstreetmap.org"); 
	имяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");	

	Соединение.Получить("search?format=xml&q=" + стрАдресаДляЗапроса + стрДиапозонПоиска, имяВыходногоФайла);
	
	ЧтениеФайла = Новый ЧтениеXML;
	ЧтениеФайла.ОткрытьФайл(имяВыходногоФайла);
	
	Фабрика = Новый ФабрикаXDTO;
	ФабрикаФайла = Фабрика.ПрочитатьXML(ЧтениеФайла);
		
	Если ФабрикаФайла.Свойства().Получить("place") <> Неопределено Тогда
		Место = ФабрикаФайла.place;
		СписокМест = Новый Массив();
		Если ТипЗнч(Место) <> Тип("СписокXDTO") Тогда			
			СписокМест.Добавить(Место);
		Иначе
			СписокМест = Место;
		КонецЕсли;
		
		Для Каждого текТочка Из СписокМест Цикл
			флНайденыТочки = Истина;
			НоваяСтрокаТаблицы =  Объект.СписокСамостоятельныхТочек.Добавить();
			НоваяСтрокаТаблицы.ТипТочки = "ТочкаНаКарте";
			НоваяСтрокаТаблицы.Долгота = текТочка.ПолучитьXDTO("lon").Значение;
			НоваяСтрокаТаблицы.Широта = текТочка.ПолучитьXDTO("lat").Значение;
			НоваяСтрокаТаблицы.Заголовок = "";
			НоваяСтрокаТаблицы.СтрокаДляОтображения = ",point:[" + НоваяСтрокаТаблицы.Долгота + "," + 
												 НоваяСтрокаТаблицы.Широта + "],time:'" + 														 
												 "'" + ",name:'";			
			НоваяСтрокаТаблицы.Текст = текТочка.ПолучитьXDTO("display_name").Значение;
			НоваяСтрокаТаблицы.СтрокаДляОтображенияВКластере = ?(СтрДлина(НоваяСтрокаТаблицы.Текст) > 50, 
												Лев(НоваяСтрокаТаблицы.Текст,50)+"...", НоваяСтрокаТаблицы.Текст);
		КонецЦикла;
		
	КонецЕсли;
	
	ЧтениеФайла.Закрыть();
	
	Возврат флНайденыТочки;
	
КонецФункции

#КонецОбласти
