#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Проведение

// Функция возвращает параметры проведения.
Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Дата,
	|	Реквизиты.Организация,
	|	Реквизиты.Здание,
	|	Реквизиты.ЛицевойСчет,
	|	Реквизиты.КатегорияВыполняемыхРабот,
	|	Реквизиты.СтатусВыполнения
	|ИЗ
	|	Документ.КВП_ЗаявкаНаВыполнениеРабот КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Реквизиты = Новый Структура("Ссылка,Дата,Организация,Здание,ЛицевойСчет,КатегорияВыполняемыхРабот,СтатусВыполнения");
	
	ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
	
	ПараметрыПроведения.Вставить("Реквизиты", Реквизиты);
	
	Возврат ПараметрыПроведения;
	
КонецФункции

// Функция получает структуру задолженность/валюта по текущему лицевому счету.
//
Функция ПолучитьСтруктуруДолгВалюта(Организация, ЛицевойСчет, Дата) Экспорт
	
	ЗапросПоНачислениям = Новый Запрос;
	ЗапросПоНачислениям.УстановитьПараметр("Организация",   Организация);
	ЗапросПоНачислениям.УстановитьПараметр("ДатаДокумента", Дата);
	ЗапросПоНачислениям.УстановитьПараметр("ЛицевойСчет",   ЛицевойСчет);
	
	ЗапросПоНачислениям.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК СуммаДолга
	|ПОМЕСТИТЬ втОстаток
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|				И ЛицевойСчет = &ЛицевойСчет) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор.ВалютаВзаиморасчетов.Ссылка КАК Валюта,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет
	|ПОМЕСТИТЬ втВалютаДляВзаиморасчетов
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
	|			&ДатаДокумента,
	|			ЛицевойСчет = &ЛицевойСчет
	|				И Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|ГДЕ
	|	НЕ УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОстаток.ЛицевойСчет КАК ЛицевойСчет,
	|	СУММА(втОстаток.СуммаДолга) КАК СуммаДолга,
	|	втВалютаДляВзаиморасчетов.Валюта
	|ИЗ
	|	втОстаток КАК втОстаток
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВалютаДляВзаиморасчетов КАК втВалютаДляВзаиморасчетов
	|		ПО втОстаток.ЛицевойСчет = втВалютаДляВзаиморасчетов.ЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	втОстаток.ЛицевойСчет,
	|	втВалютаДляВзаиморасчетов.Валюта";
	Выборка = ЗапросПоНачислениям.Выполнить().Выбрать();
	
	СтруктураДолгВалюта = Новый Структура;
	СтруктураДолгВалюта.Вставить("Долг",   0);
	СтруктураДолгВалюта.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	
	Если Выборка.Следующий() Тогда
		СтруктураДолгВалюта.Вставить("Долг",   Выборка.СуммаДолга);
		СтруктураДолгВалюта.Вставить("Валюта", Выборка.Валюта);
	КонецЕсли;
	
	Возврат СтруктураДолгВалюта;
	
КонецФункции // ПолучитьСтруктуруДолгВалюта()

// Функция возвращает склад, за которым закреплен мастер заявки АДС.
//
Функция ПолучитьСкладПоОтветственномуМастеру(Период, Мастер) Экспорт
	
	Склад = Справочники.Склады.ПустаяСсылка();
	
	// Получение и заполнение склада, закрепленного за ответственным мастером по заявке АДС.
	// Получаются только оптовые склады или склады с незаполненным типом склада.
	ЗапросПоСкладу = Новый Запрос;
	ЗапросПоСкладу.Текст =
	"ВЫБРАТЬ
	|	ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница
	|ИЗ
	|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&Период, ФизическоеЛицо = &Мастер) КАК ОтветственныеЛицаСрезПоследних
	|ГДЕ
	|	(ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.ОптовыйСклад)
	|			ИЛИ ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.ПустаяСсылка))";
	
	ЗапросПоСкладу.УстановитьПараметр("Период", Период);
	ЗапросПоСкладу.УстановитьПараметр("Мастер", Мастер);
	
	// Если складов несколько, то пользователь должен будет сам заполнить склад,
	// в таком случае возвращается пустая ссылка.
	ВыборкаПоСкладу = ЗапросПоСкладу.Выполнить().Выбрать();
	Если ВыборкаПоСкладу.Количество() = 1 Тогда
		ВыборкаПоСкладу.Следующий();
		Склад = ВыборкаПоСкладу.СтруктурнаяЕдиница;
	КонецЕсли;
	
	Возврат Склад;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ

// Функция формирует табличный документ заявки.
Функция ПечатьНарядЗаказ(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
//	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НарядЗаказ";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекОбъект Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекОбъект);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КВП_ЗаявкаНаВыполнениеРабот.Номер,
		|	КВП_ЗаявкаНаВыполнениеРабот.Дата,
		|	КВП_ЗаявкаНаВыполнениеРабот.Организация,
		|	КВП_ЗаявкаНаВыполнениеРабот.КатегорияВыполняемыхРабот,
		|	КВП_ЗаявкаНаВыполнениеРабот.ЛицевойСчет,
		|	КВП_ЗаявкаНаВыполнениеРабот.Здание,
		|	КВП_ЗаявкаНаВыполнениеРабот.ТекстЗаявки,
		|	КВП_ЗаявкаНаВыполнениеРабот.Телефон,
		|	ПРЕДСТАВЛЕНИЕ(КВП_ЗаявкаНаВыполнениеРабот.ДоговорКонтрагента) КАК ДоговорКонтрагентаПредставление,
		|	КВП_ЗаявкаНаВыполнениеРабот.ОтветственныйЗаВыполнение,
		|	КВП_ЗаявкаНаВыполнениеРабот.Ответственный,
		|	КВП_ЗаявкаНаВыполнениеРабот.Адрес,
		|	ПРЕДСТАВЛЕНИЕ(КВП_ЗаявкаНаВыполнениеРабот.КонтактноеЛицоЛицевогоСчета) КАК КонтактноеЛицо,
		|	КВП_ЗаявкаНаВыполнениеРабот.ПервичноеОбращение,
		|	ЕСТЬNULL(КВП_ЗаявкаНаВыполнениеРабот.Подъезд.КодДомофона, """") КАК КодДомофона,
		|	КВП_ЗаявкаНаВыполнениеРабот.ВремяУдобноеДляЗаказчика КАК ВремяУдобноеДляЗаказчикаНачалоРабот,
		|	КВП_ЗаявкаНаВыполнениеРабот.ВремяУдобноеДляЗаказчикаОкончаниеРабот,
		|	КВП_ЗаявкаНаВыполнениеРабот.ВремяФактическогоНачалаРабот,
		|	КВП_ЗаявкаНаВыполнениеРабот.ВремяФактическогоОкончанияРабот
		|ИЗ
		|	Документ.КВП_ЗаявкаНаВыполнениеРабот КАК КВП_ЗаявкаНаВыполнениеРабот
		|ГДЕ
		|	КВП_ЗаявкаНаВыполнениеРабот.Ссылка = &ТекущийДокумент";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Работы.ВидРабот,
		|	Работы.НомерСтроки
		|ИЗ
		|	Документ.КВП_ЗаявкаНаВыполнениеРабот.Работы КАК Работы
		|ГДЕ
		|	Работы.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Работы.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПризнакиНеисправностей.ПризнакНеисправности,
		|	ПризнакиНеисправностей.НомерСтроки
		|ИЗ
		|	Документ.КВП_ЗаявкаНаВыполнениеРабот.ПризнакиНеисправностей КАК ПризнакиНеисправностей
		|ГДЕ
		|	ПризнакиНеисправностей.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПризнакиНеисправностей.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НарядЗаказ.Номенклатура.Код КАК Код,
		|	НарядЗаказ.Номенклатура КАК Материал,
		|	НарядЗаказ.ЕдиницаИзмерения КАК ЕдИзм,
		|	НарядЗаказ.Цена КАК Цена,
		|	СУММА(НарядЗаказ.КоличествоПлан) КАК КолвоПлан,
		|	СУММА(НарядЗаказ.Количество) КАК КолвоФакт,
		|	СУММА(НарядЗаказ.СуммаПлан) КАК СуммаПлан,
		|	СУММА(НарядЗаказ.Сумма) КАК СуммаФакт
		|ИЗ
		|	Документ.КВП_ЗаявкаНаВыполнениеРабот.НарядЗаказ КАК НарядЗаказ
		|ГДЕ
		|	НарядЗаказ.Ссылка = &ТекущийДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	НарядЗаказ.Номенклатура.Код,
		|	НарядЗаказ.Номенклатура,
		|	НарядЗаказ.ЕдиницаИзмерения,
		|	НарядЗаказ.Цена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоставЗвена.Мастер.ФИО КАК ФИОМастера
		|ИЗ
		|	Документ.КВП_ЗаявкаНаВыполнениеРабот.СоставЗвена КАК СоставЗвена
		|ГДЕ
		|	СоставЗвена.Ссылка = &ТекущийДокумент";
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ВыборкаПоВидамРабот             = РезультатЗапроса[0].Выбрать();
		ВыборкаПоПризнакамНеисправности = РезультатЗапроса[1].Выбрать();
		ВыборкаПоНоменклатуре           = РезультатЗапроса[2].Выбрать();
		ВыборкаИсполнителей             = РезультатЗапроса[3].Выбрать();
		
		// Вывод заголовка
		Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Документ.КВП_ЗаявкаНаВыполнениеРабот.ПФ_MXL_НарядЗаказ");
		ОблШапка = Макет.ПолучитьОбласть("ШапкаЗаказчик");
		
		ПараметрыШапки = Новый Структура;
		ПараметрыШапки.Вставить("НомерДокумента", ВРег(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьНомерНаПечать(ТекОбъект.Номер, Истина, Истина)));
		ПараметрыШапки.Вставить("ДатаДокумента",  ВРег(Формат(Шапка.Дата, "ДЛФ=Д")));
		ПараметрыШапки.Вставить("Организация",    Шапка.Организация);
		
		Если ТекОбъект.ВидОперации = Перечисления.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоЛицевомуСчету Тогда
			
			СтрокаДолга = "";
			
			ТекущийДолгПоЛС = ПолучитьСтруктуруДолгВалюта(Шапка.Организация, Шапка.ЛицевойСчет, Шапка.Дата);
			Если ТекущийДолгПоЛС.Долг > 0 Тогда
				СтрокаДолга = "задолженность - " + ТекущийДолгПоЛС.Долг + " " + ТекущийДолгПоЛС.Валюта;
			ИначеЕсли ТекущийДолгПоЛС.Долг < 0 Тогда
				СтрокаДолга = "переплата - " + (-ТекущийДолгПоЛС.Долг) + " " + ТекущийДолгПоЛС.Валюта;
			КонецЕсли;
			
			СтрокаЗаказчика = Строка(Шапка.ЛицевойСчет)
							+ "; адрес - " + Шапка.Адрес
							+ ?(ЗначениеЗаполнено(Шапка.ДоговорКонтрагентаПредставление), "; договор - " + Шапка.ДоговорКонтрагентаПредставление, "")
							+ ?(Не ПустаяСтрока(СтрокаДолга), "; " + СтрокаДолга, "");
		Иначе
			СтрокаЗаказчика = Строка(Шапка.Адрес);
		КонецЕсли;
		
		Если Не Шапка.КодДомофона = "" Тогда
			СтрокаЗаказчика = СтрокаЗаказчика + " (домофон " + Шапка.КодДомофона + ")";
		КонецЕсли;
		
		ПараметрыШапки.Вставить("Заказчик", СтрокаЗаказчика);
		
		ОблШапка.Параметры.Заполнить(ПараметрыШапки);
		ТабличныйДокумент.Вывести(ОблШапка);
		
		// Выводим строку контактных данных только для работ по лицевому счету.
		Если ТекОбъект.ВидОперации = Перечисления.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоЛицевомуСчету Тогда
			
			ОблШапка = Макет.ПолучитьОбласть("ШапкаКонтактныеДанные");
			КонтактныеДанные = Шапка.КонтактноеЛицо;
			Если ЗначениеЗаполнено(Шапка.Телефон) Тогда
				КонтактныеДанные = КонтактныеДанные + ", тел. " + Шапка.Телефон;
			КонецЕсли;
			
			ПараметрыШапки = Новый Структура;
			ПараметрыШапки.Вставить("КонтактныеДанные", КонтактныеДанные);
			
			ОблШапка.Параметры.Заполнить(ПараметрыШапки);
			ТабличныйДокумент.Вывести(ОблШапка);
			
		КонецЕсли;
		
		ОблШапка = Макет.ПолучитьОбласть("ШапкаПрочаяИнформация");
		ОблШапка.Параметры.Заполнить(Шапка);
		
		// Вывод даты и времени работ, удобных для заказчика, в формате "[ДатаНачала]-[ДатаОкончания]".
		ВремяУдобноеДляЗаказчика = "";
		Если Не Шапка.ВремяУдобноеДляЗаказчикаНачалоРабот = Дата(1,1,1) Тогда
			
			ВремяУдобноеДляЗаказчика = Формат(Шапка.ВремяУдобноеДляЗаказчикаНачалоРабот, "ДФ='dd.MM.yyyy HH:mm'");
			Если Не Шапка.ВремяУдобноеДляЗаказчикаОкончаниеРабот = Дата(1,1,1)
				И Не Шапка.ВремяУдобноеДляЗаказчикаНачалоРабот = Шапка.ВремяУдобноеДляЗаказчикаОкончаниеРабот Тогда
				ВремяУдобноеДляЗаказчика = ВремяУдобноеДляЗаказчика + " - " + Формат(Шапка.ВремяУдобноеДляЗаказчикаОкончаниеРабот, "ДФ='dd.MM.yyyy HH:mm'");
			КонецЕсли;
		КонецЕсли;
		ОблШапка.Параметры.ВремяУдобноеДляЗаказчика = ВремяУдобноеДляЗаказчика;
		
		ПараметрыШапки = Новый Структура;
		ПараметрыШапки.Вставить("ТекстЗаявки", СтрЗаменить(Шапка.ТекстЗаявки, Символы.ПС, " "));
		
		МассивСтрокИсполнителей = Новый Массив;
		Пока ВыборкаИсполнителей.Следующий() Цикл
			МассивСтрокИсполнителей.Добавить(УПЖКХ_ТиповыеМетодыСервер.ФамилияИнициалыФизЛица(ВыборкаИсполнителей.ФИОМастера));
		КонецЦикла;
		
		ПараметрыШапки.Вставить("СоставЗвена", УПЖКХ_ТиповыеМетодыКлиентСервер.СтрокаИзМассиваПодстрок(МассивСтрокИсполнителей, "; ", Истина));
		
		ОблШапка.Параметры.Заполнить(ПараметрыШапки);
		ТабличныйДокумент.Вывести(ОблШапка);
		
		// Первичное обращение.
		Если ЗначениеЗаполнено(Шапка.ПервичноеОбращение) Тогда
			ОблПовторноеОбращение = Макет.ПолучитьОбласть("ПовторнаяЗаявка");
			ОблПовторноеОбращение.Параметры.Заполнить(Шапка);
			ТабличныйДокумент.Вывести(ОблПовторноеОбращение);
		КонецЕсли;
		
		// Признаки неисправности.
		ОписаниеПризнаковНеисправности = "";
		НомерПризнакаНеисправности = 1;
		Пока ВыборкаПоПризнакамНеисправности.Следующий() Цикл
			
			ОписаниеПризнаковНеисправности = ОписаниеПризнаковНеисправности
										   + ВыборкаПоПризнакамНеисправности.ПризнакНеисправности
										   + ?(НомерПризнакаНеисправности < ВыборкаПоПризнакамНеисправности.Количество(), ", ", "");
			НомерПризнакаНеисправности = НомерПризнакаНеисправности + 1;
			
		КонецЦикла;
		
		Область = Макет.ПолучитьОбласть("ПризнакиНеисправности");
		Область.Параметры.ПризнакиНеисправности = НРег(ОписаниеПризнаковНеисправности);
		ТабличныйДокумент.Вывести(Область);
		
		// Виды выполняемых работ.
		ОблШапкаВидыРабот = Макет.ПолучитьОбласть("ШапкаВидыРабот");
		ТабличныйДокумент.Вывести(ОблШапкаВидыРабот);
		
		Пока ВыборкаПоВидамРабот.Следующий() Цикл
		
			Область = Макет.ПолучитьОбласть("ВидРабот");
			Область.Параметры.Заполнить(ВыборкаПоВидамРабот);
			ТабличныйДокумент.Вывести(Область);
			
		КонецЦикла;
		
		// Вывод шапки таблицы
		ОблШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОблШапкаТаблицы);
		
		ИтогоСуммаПлан = 0;
		ИтогоСуммаФакт = 0;
		
		Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		
			Область = Макет.ПолучитьОбласть("Строка");
			Область.Параметры.Заполнить(ВыборкаПоНоменклатуре);
			ТабличныйДокумент.Вывести(Область);
			ИтогоСуммаПлан = ИтогоСуммаПлан + ВыборкаПоНоменклатуре.СуммаПлан;
			ИтогоСуммаФакт = ИтогоСуммаФакт + ВыборкаПоНоменклатуре.СуммаФакт;
			
		КонецЦикла;
		
		// Вывод итогов
		ОблИтогТаблицы = Макет.ПолучитьОбласть("Итог");
		
		СтруктураИтогов = Новый Структура;
		СтруктураИтогов.Вставить("ИтогоСуммаПлан", ИтогоСуммаПлан);
		СтруктураИтогов.Вставить("ИтогоСуммаФакт", ИтогоСуммаФакт);
		
		ОблИтогТаблицы.Параметры.Заполнить(СтруктураИтогов);
		ТабличныйДокумент.Вывести(ОблИтогТаблицы);
		
		// Вывод подвала
		Область = Макет.ПолучитьОбласть("Подвал");
		Область.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(Область);
		
	КонецЦикла;
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб    = Истина;
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьСписаниеТоваров()

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НарядЗаказ") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "НарядЗаказ", "Наряд-заказ", ПечатьНарядЗаказ(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли