
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мВалютаРегламентированногоУчета Экспорт; //Хранит валюту регламентного учета.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

#Область ПроцедурыИФункцииДляОбеспеченияПроведения

// Процедура выполняет движения по регистрам.
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ДвиженияРасходМатериалов = Движения.КВП_РасходМатериаловПоВыполненнымРаботам;
	
	Для Каждого ТекСтрокаРаботы Из Работы Цикл
		
		ВидРабот        = ТекСтрокаРаботы.ВидРабот;
		КоличествоРабот = ТекСтрокаРаботы.ОбъемФакт;
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ВидРабот", ТекСтрокаРаботы.ВидРабот);
		
		СтрокиРасхода = НарядЗаказ.НайтиСтроки(ПараметрыПоиска);
		
		Для Каждого ТекСтрока Из СтрокиРасхода Цикл
			
			Если ТекСтрока.КоличествоПлан = 0 И ТекСтрока.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
		
			НовоеДвижение = ДвиженияРасходМатериалов.Добавить();
			НовоеДвижение.Период = СтруктураШапкиДокумента.Дата;
			НовоеДвижение.Организация     = СтруктураШапкиДокумента.Организация;
			Если ВидОперации = Перечисления.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоЛицевомуСчету Тогда
				НовоеДвижение.Объект      = СтруктураШапкиДокумента.ЛицевойСчет;
			Иначе
				НовоеДвижение.Объект      = СтруктураШапкиДокумента.Здание;
			КонецЕсли;
			
			НовоеДвижение.КатегорияВыполняемыхРабот = СтруктураШапкиДокумента.КатегорияВыполняемыхРабот;
			НовоеДвижение.Номенклатура    = ТекСтрока.Номенклатура;
			НовоеДвижение.ВидРабот        = ТекСтрокаРаботы.ВидРабот;
			
			НовоеДвижение.КоличествоРабот = ТекСтрокаРаботы.ОбъемФакт;
			НовоеДвижение.КоличествоПлан  = ТекСтрока.КоличествоПлан;
			НовоеДвижение.СуммаПлан       = ТекСтрока.СуммаПлан;
			
			Если СтруктураШапкиДокумента.СтатусВыполнения = Перечисления.КВП_ВидыСтатусовВыполненияРабот.Выполнено Тогда
				НовоеДвижение.КоличествоФакт  = ТекСтрока.Количество;
				НовоеДвижение.СуммаФакт       = ТекСтрока.Сумма;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет общие для всех документов действия связанные с пометкой на удаление.
//
Процедура СинхронизацияПометкиНаУдалениеТиповыхДокументов(Отказ = Ложь)
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// Сравнение пометки на удаление ссылки и текущего документа (который будет записан в базу).
	// Если она изменилась - необходимо выполнить изменение в связанных документах.
	Если ПометкаУдаления <> УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Ссылка, "ПометкаУдаления") Тогда
		
		МассивПомечаемыхДокументов = Новый Массив;
		
		// Обработка документа "Реализация товаров и услуг".
		Если Не РеализацияТоваровУслуг.Пустая() Тогда
			Попытка
				ОбъектРТиУ = РеализацияТоваровУслуг.ПолучитьОбъект();
				ОбъектРТиУ.УстановитьПометкуУдаления(ПометкаУдаления);
				МассивПомечаемыхДокументов.Добавить(РеализацияТоваровУслуг);
			Исключение
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбработатьИсключениеЗаписиТиповогоДокумента(ОбъектРТиУ, ОписаниеОшибки, Отказ);
			КонецПопытки;
		КонецЕсли;
		
		// Обработка документа "Требование-накладная".
		Если Не ТребованиеНакладная.Пустая() Тогда
			Попытка
				ОбъектТребование = ТребованиеНакладная.ПолучитьОбъект();
				ОбъектТребование.УстановитьПометкуУдаления(ПометкаУдаления);
				МассивПомечаемыхДокументов.Добавить(ТребованиеНакладная);
			Исключение
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбработатьИсключениеЗаписиТиповогоДокумента(ОбъектТребование, ОписаниеОшибки, Отказ);
			КонецПопытки;
		КонецЕсли;
		
		// Обработка документов "Оказание производственных услуг".
		Для Каждого ТекСтрока Из ДокументыОтраженияОтгрузкиПроизводственныхУслуг Цикл
			Попытка
				ТекДокументОказаниеУслуг = ТекСтрока.ДокументОказанияПроизводственныхУслуг.ПолучитьОбъект();
				ТекДокументОказаниеУслуг.УстановитьПометкуУдаления(ПометкаУдаления);
				МассивПомечаемыхДокументов.Добавить(ТекСтрока.ДокументОказанияПроизводственныхУслуг);
			Исключение
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбработатьИсключениеЗаписиТиповогоДокумента(ТекДокументОказаниеУслуг, ОписаниеОшибки, Отказ);
			КонецПопытки;
		КонецЦикла;
		
		// Вывод сообщений о помеченных типовых документах.
		Если МассивПомечаемыхДокументов.Количество() > 0 Тогда
			
			Если ПометкаУдаления Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Установлена пометка удаления следующих связанных типовых документов:");
			Иначе
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Снята пометка удаления следующих связанных типовых документов:");
			КонецЕсли;
			
			Для Каждого ТекСсылка Из МассивПомечаемыхДокументов Цикл
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(Строка(ТекСсылка), ТекСсылка);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СинхронизацияПометкиНаУдаление()

// Заносит запись в журнал регистрации об ошибках установки пометки на удаление в связанных типовых документах.
//
Процедура ОбработатьИсключениеЗаписиТиповогоДокумента(ДокОбъект, ТекстОписанияОшибки, Отказ = Ложь)
	
	Отказ = Истина;
	
	ТекстОшибки = НСтр("ru = 'Не удалось записать документ.
	                    |%1'");
	ОписаниеОшибки = СтрШаблон(ТекстОшибки, ТекстОписанияОшибки);
	
	ЗаписьЖурналаРегистрации(
		НСТр("ru = 'Синхронизация пометки на удаление документов, связанных с документом ""Заявка на выполнение работ""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
		УровеньЖурналаРегистрации.Ошибка,
		ДокОбъект.Метаданные(),
		ДокОбъект.Ссылка, 
		ОписаниеОшибки);
	
КонецПроцедуры // ОбработатьИсключениеЗаписиТиповогоДокумента()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОКУМЕНТА

#Область ОбработчикиСобытийДокумента

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	// По умолчанию сумма включает НДС (по аналогии с типовыми документами).
	СуммаВключаетНДС = Истина;
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Обработчик события "ПриКопировании" документа.
Процедура ПриКопировании(ОбъектКопирования)
	
	// При копировании заявки ссылки на документы отражения заявки в регл. учета нужно очистить.
	ТребованиеНакладная    = Неопределено;
	РеализацияТоваровУслуг = Неопределено;
	ДокументыОтраженияОтгрузкиПроизводственныхУслуг.Очистить();
	
КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Организация");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйЗаВыполнение");
	
	// Укажем, что надо проверить:
	Если ВидОперации = Перечисления.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоЛицевомуСчету Тогда
		ПроверяемыеРеквизиты.Добавить("ЛицевойСчет");
	Иначе
		ПроверяемыеРеквизиты.Добавить("Здание");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПередЗаписью" документа.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонтактноеЛицоЛицевогоСчета) И Не ПустаяСтрока(Удалить_КонтактноеЛицо) Тогда
		Удалить_КонтактноеЛицо = "";
	КонецЕсли;
	
	Склад = ПолучитьСкладМастера();
	
	СинхронизацияПометкиНаУдалениеТиповыхДокументов();
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения".
Процедура ОбработкаПроведения(Отказ, РежимЗаписи, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПараметрыПроведения = Документы.КВП_ЗаявкаНаВыполнениеРабот.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ПараметрыПроведения.Реквизиты;
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Функция получает склад, за которым закреплен мастер АДС.
Функция ПолучитьСкладМастера()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница КАК Склад
	|ИЗ
	|	РегистрСведений.ОтветственныеЛица.СрезПоследних(, ) КАК ОтветственныеЛицаСрезПоследних
	|ГДЕ
	|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо = &Мастер";
	Запрос.УстановитьПараметр("Мастер", ОтветственныйЗаВыполнение);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Склад;
	Иначе
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции // ПолучитьСкладМастера()

#КонецОбласти

#Область ИнициализацияПеременных

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

#КонецОбласти

#КонецЕсли