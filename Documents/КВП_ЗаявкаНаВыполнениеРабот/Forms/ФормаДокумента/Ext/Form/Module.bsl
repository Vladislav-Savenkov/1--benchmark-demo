
////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ВНЕШНИМ ВИДОМ ФОРМЫ

#Область УправлениеВнешнимВидомФормы

&НаКлиентеНаСервереБезКонтекста
// Процедура управляет видимостью и доступностью элементов формы.
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ПервичноеОбращение.Видимость = Форма.ЭтоПовторноеОбращение;
	
	Элементы.КомандаОчиститьРеализациюТоваровУслуг.Видимость = Не Объект.РеализацияТоваровУслуг.Пустая();
	Элементы.КомандаОчиститьТребованиеНакладную.Видимость    = Не Объект.ТребованиеНакладная.Пустая();
	
	Элементы.ВремяУдобноеДляЗаказчикаОкончаниеРабот.Доступность = (Не Объект.ВремяУдобноеДляЗаказчика = Дата(1,1,1));
	
	// Колонки налога показываем только тогда, когда его учитываем.
	Элементы.НарядЗаказСтавкаНДС.Видимость = Не Объект.ДокументБезНДС;
	Элементы.НарядЗаказСуммаНДС.Видимость  = Не Объект.ДокументБезНДС;
	
	ЗаявкаВыполнена = (Объект.СтатусВыполнения = ПредопределенноеЗначение("Перечисление.КВП_ВидыСтатусовВыполненияРабот.Выполнено"));
	
	Элементы.ВремяФактическогоОкончанияРабот.Доступность = ЗаявкаВыполнена;
	Элементы.ОценкаВыполнения.Доступность                = ЗаявкаВыполнена;
	Элементы.КомментарийПоВыполнению.Доступность         = ЗаявкаВыполнена;
	
	// Реквизит оставлен для совместимости. Показываем его только в случае заполненности.
	Элементы.КонтактноеЛицоСтрокой.Видимость = Не ПустаяСтрока(Объект.Удалить_КонтактноеЛицо);
	
	// Отражение в регл. учете через документ "Оказание производственных услуг"
	// должно быть доступно только при установленной настройке ведения производственной деятельности.
	Если НЕ ВедетсяПроизводственнаяДеятельность() Тогда
		Элементы.ДокументыОтраженияОтгрузкиУслуг.Доступность = Ложь;
		Элементы.ДокументыОтраженияОтгрузкиУслугКомандаСформироватьАктыОказанияУслуг.Доступность = Ложь;
	Иначе
		Элементы.ДекорацияПодсказкаНастройкиФункциональности.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаИтогиВсегоНДС.Видимость = Не Объект.ДокументБезНДС;
	
	ОбновитьИтоги(Форма);
	
	СформироватьНадписьЦеныИВалюта(Форма);
	
КонецПроцедуры

// Функция возвращает значение константы "ВедетсяПроизводственнаяДеятельность".
&НаСервереБезКонтекста
Функция ВедетсяПроизводственнаяДеятельность()
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ВедетсяПроизводственнаяДеятельность.Получить()
	
КонецФункции // ВедетсяПроизводственнаяДеятельность()

&НаКлиентеНаСервереБезКонтекста
// Процедура управляет видимостью и доступностью элементов формы.
Процедура УправлениеВидимостьюЭлементовФормы(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоДому") Тогда
		
		Элементы.ВключатьОборудованиеУстановленноеНаПодчиненныеОбъекты.Видимость = Истина;
		
		Элементы.ЛицевойСчет.Видимость        = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.ГруппаДолгПоЛС.Видимость     = Ложь;
		Элементы.Помещение.Видимость          = Ложь;
		Элементы.КонтактноеЛицо.Видимость     = Ложь;
		
		Элементы.ГруппаТелефон.Видимость        = Ложь;
		Элементы.ОткрытьПримечанияКЛС.Видимость = Ложь;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоЛицевомуСчету") Тогда
		
		Элементы.ВключатьОборудованиеУстановленноеНаПодчиненныеОбъекты.Видимость = Ложь;
		
		Элементы.ЛицевойСчет.Видимость        = Истина;
		Элементы.ДоговорКонтрагента.Видимость = Истина;
		Элементы.ГруппаДолгПоЛС.Видимость     = Истина;
		Элементы.Помещение.Видимость          = Истина;
		Элементы.КонтактноеЛицо.Видимость     = Истина;
		
		Элементы.ГруппаТелефон.Видимость        = Истина;
		Элементы.ОткрытьПримечанияКЛС.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
// Формирует текст про требование-накладную для показа в форме документа
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Текстовая строка про требование-накладную.
//
Функция ПолучитьТекстТребованияНакладной()

	Если Не Объект.ТребованиеНакладная.Пустая() Тогда
		
		ТекстГиперссылки = Строка(Объект.ТребованиеНакладная);
		Если Объект.ТребованиеНакладная.ПометкаУдаления Тогда
			ТекстГиперссылки = ТекстГиперссылки + " (помечен на удаление)";
		ИначеЕсли Не Объект.ТребованиеНакладная.Проведен Тогда
			ТекстГиперссылки = ТекстГиперссылки + " (не проведен)";
		КонецЕсли;
		
		Возврат ТекстГиперссылки;
	Иначе
		Возврат "Ввести требование-накладную";
	КонецЕсли;

КонецФункции // ПолучитьТекстТребованияНакладной()

&НаСервере
// Заполняет текст про требование-накладную в форме документа.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроТребованиеНакладную()
	
	ГиперссылкаТребованиеНакладная = ПолучитьТекстТребованияНакладной();
	
КонецПроцедуры // ЗаполнитьТекстПроТребованиеНакладную()

&НаСервере
// Формирует текст про РеализациюТоваровУслуг для показа в форме документа
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Текстовая строка про требование-накладную.
//
Функция ПолучитьТекстРеализацииТоваровУслуг()

	Если Не Объект.РеализацияТоваровУслуг.Пустая() Тогда
		
		ТекстГиперссылки = Строка(Объект.РеализацияТоваровУслуг);
		Если Объект.РеализацияТоваровУслуг.ПометкаУдаления Тогда
			ТекстГиперссылки = ТекстГиперссылки + " (помечен на удаление)";
		ИначеЕсли Не Объект.РеализацияТоваровУслуг.Проведен Тогда
			ТекстГиперссылки = ТекстГиперссылки + " (не проведен)";
		КонецЕсли;
		
		Возврат ТекстГиперссылки;
	Иначе
		Возврат "Ввести реализацию товаров и услуг";
	КонецЕсли;

КонецФункции // ПолучитьТекстРеализацииТоваровУслуг()

&НаСервере
// Заполняет текст про РеализациюТоваровУслуг в форме документа.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроРеализациюТоваровУслуг()
	
	ГиперссылкаРеализацияТоваровУслуг = ПолучитьТекстРеализацииТоваровУслуг();
	
КонецПроцедуры // ЗаполнитьТекстПроРеализациюТоваровУслуг()

&НаСервереБезКонтекста
// Возвращает контактное лицо по лицевому счету.
//
Функция ПолучитьКонтактноеЛицоПоЛицевомуСчетуНаСервере(ЛицевойСчет, Период)
	
	ОтветственныйСобственникЛС = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(ЛицевойСчет, Период);
	Если ТипЗнч(ОтветственныйСобственникЛС) = Тип("СправочникСсылка.Контрагенты") Тогда
		КонтактноеЛицоЛицевогоСчета = Справочники.КонтактныеЛица.КонтактноеЛицоПоУмолчанию(ОтветственныйСобственникЛС);
	Иначе
		КонтактноеЛицоЛицевогоСчета = ОтветственныйСобственникЛС;
	КонецЕсли;
	
	Возврат КонтактноеЛицоЛицевогоСчета;
	
КонецФункции  //ПолучитьАдресПомещенияНаСервере()

&НаСервереБезКонтекста
// Определяет адрес квартиры, включающий адрес дома.
//
// Параметры
//  Квартира  – СправочникСсылка.УПЖКХ_Помещения – квартира, для которой определяется адрес.
//
// Возвращаемое значение:
//  Строка – адрес квартиры, включающий адрес дома.
//
Функция ПолучитьАдресПомещенияНаСервере(АдресДома, Помещение)
	
	Возврат ПолучитьАдресПомещения(АдресДома, Помещение);
	
КонецФункции  //ПолучитьАдресПомещенияНаСервере()

&НаКлиенте
// Процедура заполняет поля адреса заявки по адресным объектам учета, указанным в заявке.
Процедура ОбновитьАдресЗаявки()
	
	// Теперь адрес дома берется из наименования здания, так как представление
	// здания сейчас определяется произвольно с возможностью выбора из вариантов представления адреса.
	
	// Заполнение адреса по заявке.
	СтруктАдрес = Неопределено;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоДому") Тогда
		
		Если ЗначениеЗаполнено(Объект.Здание) Тогда
			
			АдресДома = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьЗначениеРеквизита(Объект.Здание, "Наименование");
			
			Подъезд     = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Подъезд, "Наименование");
			тмАдрес     = АдресДома + ?(ЗначениеЗаполнено(Подъезд), ", " + НРег(Подъезд), "");
			Если НЕ Объект.Адрес = тмАдрес Тогда
				Объект.Адрес = тмАдрес;
			КонецЕсли;
		Иначе
			Объект.Адрес = "";
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоЛицевомуСчету") Тогда
		
		АдресДома = "";
		
		Если ЗначениеЗаполнено(Объект.ЛицевойСчет) Тогда
			ПомещениеПоЛС = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ЛицевойСчет, "Адрес");
			ЗданиеПоПомещению = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ПомещениеПоЛС, "Владелец");
			АдресДома = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьЗначениеРеквизита(ЗданиеПоПомещению, "Наименование");
		ИначеЕсли ЗначениеЗаполнено(Объект.Здание) Тогда
			АдресДома = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьЗначениеРеквизита(Объект.Здание, "Наименование");
		Иначе
			Объект.Адрес = "";
		КонецЕсли;
		
		Если Не ПустаяСтрока(АдресДома) Тогда
			Подъезд     = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Подъезд, "Наименование");
			тмАдрес     = АдресДома + ?(ЗначениеЗаполнено(Подъезд), ", " + НРег(Подъезд), "");
			тмАдрес     = ПолучитьАдресПомещенияНаСервере(тмАдрес, ?(ЗначениеЗаполнено(Объект.ЛицевойСчет), УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ЛицевойСчет, "Адрес"), Объект.Помещение));
			Если НЕ Объект.Адрес = тмАдрес Тогда
				Объект.Адрес = тмАдрес;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьАдресЗаявки()

&НаСервереБезКонтекста
// Функция возвращает массив номеров телефонов из табличной части "КонтактнаяИнформация" элемента справочника
// "Контактные лица".
Функция ПолучитьСписокНомеровТелефоновКонтактногоЛица(ЛицевойСчет, КонтактноеЛицо)
	
	СписокНомеров = Новый СписокЗначений;
	
	МассивВидовКИ = Новый Массив;
	Если ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
		МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица);
		МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
		ОтборПоКонтактномуЛицу = КонтактноеЛицо.ФизЛицо;
		ТипСправочника = "Справочник.ФизическиеЛица";
	ИначеЕсли ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийКонтактныеЛица);
		МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйКонтактныеЛица);
		ОтборПоКонтактномуЛицу = КонтактноеЛицо;
		ТипСправочника = "Справочник.КонтактныеЛица";
	Иначе
		// Если тип контактного лица не определен,
		// то запрос по КИ выполнять нельзя.
		Возврат СписокНомеров;
	КонецЕсли;
	
	ЗапросТелефонов = Новый Запрос;
	ЗапросТелефонов.Текст =
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.Вид
	|ИЗ
	|	&ТипСправочника.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Отбор
	|	И КонтактнаяИнформация.Тип = &ТипКИ
	|	И КонтактнаяИнформация.Вид В(&ВидКИ)";
	
	ЗапросТелефонов.УстановитьПараметр("ВидКИ", МассивВидовКИ);
	ЗапросТелефонов.УстановитьПараметр("Отбор", ОтборПоКонтактномуЛицу);
	ЗапросТелефонов.УстановитьПараметр("ТипКИ", Перечисления.ТипыКонтактнойИнформации.Телефон);
	ЗапросТелефонов.Текст = СтрЗаменить(ЗапросТелефонов.Текст, "&ТипСправочника", ТипСправочника);
	
	ВыборкаНомеров = ЗапросТелефонов.Выполнить().Выбрать();
	
	Пока ВыборкаНомеров.Следующий() Цикл
		Если ВыборкаНомеров.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийКонтактныеЛица Или 
			ВыборкаНомеров.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица Тогда
			ПредставлениеНомера = СокрЛП(ВыборкаНомеров.Представление) + " (раб.)";
		ИначеЕсли ВыборкаНомеров.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица Тогда
			ПредставлениеНомера = СокрЛП(ВыборкаНомеров.Представление) + " (дом.)";
		ИначеЕсли ВыборкаНомеров.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйКонтактныеЛица Тогда
			ПредставлениеНомера = СокрЛП(ВыборкаНомеров.Представление) + " (моб.)";
		Иначе
			ПредставлениеНомера =  СокрЛП(ВыборкаНомеров.Представление);
		КонецЕсли;
		СписокНомеров.Добавить(ВыборкаНомеров.Представление, ПредставлениеНомера);
	КонецЦикла;
	
	Если СписокНомеров.Количество() = 0 Тогда
		СписокНомеров.Добавить(ЛицевойСчет.Телефон, ЛицевойСчет.Телефон);
	КонецЕсли;
	
	Возврат СписокНомеров;
	
КонецФункции // ПолучитьМассивНомеровТелефоновКонтактногоЛица()

&НаСервереБезКонтекста
// Выводит сумму долга по лицевому счету.
Функция РассчитатьСуммуДолгаПоЛС(Организация, ЛицевойСчет, Дата)
	
	// Определим сумму долга по начислениям для текущего лицевого счета.
	Долг   = 0;
	Валюта = "";
	
	Если НЕ ЛицевойСчет.Пустая() Тогда
		СтруктураДолгВалюта = Документы.КВП_ЗаявкаНаВыполнениеРабот.ПолучитьСтруктуруДолгВалюта(Организация, ЛицевойСчет, Дата);
		
		Долг   = СтруктураДолгВалюта.Долг;
		Валюта = СтруктураДолгВалюта.Валюта;
		
	КонецЕсли;
	
	Если Долг > 0 Тогда
		ИнфСтрока = "Долг = " + Строка(Долг);
		ЦветНадписи = Новый Цвет(255, 0, 0); // красный
	ИначеЕсли Долг < 0 Тогда
		ИнфСтрока = "Переплата = " + Строка(-Долг);
		ЦветНадписи = Новый Цвет(0, 0, 128); // синий
	Иначе
		ИнфСтрока = "";
		ЦветНадписи = Новый Цвет(0, 0, 0);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("СтрокаДолга", ИнфСтрока);
	СтруктураВозврата.Вставить("ЦветНадписи", ЦветНадписи);
	СтруктураВозврата.Вставить("Валюта",      Валюта);
	
	Возврат СтруктураВозврата;
	
КонецФункции //РассчитатьСуммуДолгаПоЛС()

&НаКлиенте
// Процедура выводит сумму долга по лицевому счету.
Процедура ВывестиСуммуДолгаПоЛС()
	
	ДолгПоЛС = РассчитатьСуммуДолгаПоЛС(Объект.Организация, Объект.ЛицевойСчет, Объект.Дата);
	Если ЗначениеЗаполнено(ДолгПоЛС.Валюта) Тогда
		ДолгПоТекущемуЛС = ДолгПоЛС.СтрокаДолга + " " +  ДолгПоЛС.Валюта;
	Иначе
		ДолгПоТекущемуЛС = ДолгПоЛС.СтрокаДолга;
	КонецЕсли;
	
	Элементы.ДолгПоТекущемуЛС.ЦветТекста = ДолгПоЛС.ЦветНадписи;
	
КонецПроцедуры // ВывестиСуммуДолга()

&НаКлиенте
// Процедура заполняет телефон из контактного лица.
Процедура ОбновитьТелефонКонтактногоЛица()
	
	Объект.Телефон = "";
	
	Если ЗначениеЗаполнено(Объект.КонтактноеЛицоЛицевогоСчета) Тогда
		
		СписокНомеровТелефоновКонтактногоЛица = ПолучитьСписокНомеровТелефоновКонтактногоЛица(Объект.ЛицевойСчет, Объект.КонтактноеЛицоЛицевогоСчета);
		
		Если СписокНомеровТелефоновКонтактногоЛица.Количество() > 0 Тогда
			Объект.Телефон = СписокНомеровТелефоновКонтактногоЛица.Получить(0).Значение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьТелефонКонтактногоЛица()

&НаКлиенте
// Процедура рассчитывает поля табличной части "Работы".
Процедура РассчитатьСтрокуТабЧастиРаботы(СтрокаТабЧасти)
	
	СтрокаТабЧасти.ВремяПлан = СтрокаТабЧасти.ОбъемПлан * СтрокаТабЧасти.НормаТруда;
	
	// Заполняем фактическое время, только если оно не заполнено.
	Если СтрокаТабЧасти.ВремяФакт = 0 Тогда
		СтрокаТабЧасти.ВремяФакт = СтрокаТабЧасти.ОбъемФакт * СтрокаТабЧасти.НормаТруда;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Процедура рассчитывает поля табличной части "НарядЗаказ".
Процедура РассчитатьСтрокуТабЧастиНарядЗаказ(СтрокаТабЧасти, СуммаВключаетНДС)
	
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабЧасти);
	
	Если СтрокаТабЧасти.Свойство("СуммаНДС") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабЧасти, СуммаВключаетНДС);
	КонецЕсли;
	
	СтрокаТабЧасти.СуммаПлан = СтрокаТабЧасти.Цена * СтрокаТабЧасти.КоличествоПлан;
	
КонецПроцедуры

&НаСервере
// Процедура заполнения состава заказ-наряда на сервере.
Процедура ЗаполнитьСоставЗаказНарядаНаСервере()
	
	// Очистим таблицы уточнения материалов и наряд-заказа.
	Объект.УточнениеМатериалов.Очистить();
	Объект.НарядЗаказ.Очистить();
	
	ТаблицаРабот       = Объект.Работы.Выгрузить();
	МассивОборудования = Объект.Оборудование.Выгрузить().ВыгрузитьКолонку("Оборудование");
	
	// Алгоритм подбора материалов (номенклатуры):
	// 1. По видам работ определяем состав материалов. Если материал является ссылкой на справочник "Номенклатура", то выбираем его.
	// 2. Если материал является ссылкой на справочник "Виды материалов", тогда по регистру сведений
	// "Сведения о материалах используемых при проведении работ" и используемому оборудованию определяем совместимые материалы.
	// 3. Если совместимый материал найден один, то выбираем его. Если совместимых материалов подобрано несколько, то выбираем все материалы.
	// 4. Если не найдено ни одного совместимого материала, то осуществляем подбор всех материалов, указанных для вида материалов.
	
	Запрос = Новый Запрос;
	
	// Определим массив оборудования.
	МассивОборудования = Объект.Оборудование.Выгрузить().ВыгрузитьКолонку("Оборудование");
	
	// Получим таблицу оборудования с иерархией.
	ТаблицаУстановленногоОборудования = ПолучитьТаблицуУстановленногоОборудованияСГруппами(МассивОборудования);
	
	// Дополним массив оборудования группами иерархии оборудования.
	Для Каждого ТекСтрокаОборудования Из ТаблицаУстановленногоОборудования Цикл
		МассивОборудования.Добавить(ТекСтрокаОборудования.ГруппаОборудования);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивОборудования", МассивОборудования);
	
	Запрос.УстановитьПараметр("втТаблицаРабот",     ТаблицаРабот);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втТаблицаРабот.ВидРабот,
	|	втТаблицаРабот.ОбъемПлан,
	|	втТаблицаРабот.ОбъемФакт
	|ПОМЕСТИТЬ втТаблицаРабот
	|ИЗ
	|	&втТаблицаРабот КАК втТаблицаРабот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВидыРаботСоставРабот.Ссылка КАК ВидРабот,
	|	КВП_ВидыРаботСоставРабот.Номенклатура,
	|	ВЫБОР
	|		КОГДА КВП_ВидыРаботСоставРабот.Номенклатура ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоНоменклатура,
	|	КВП_ВидыРаботСоставРабот.Коэффициент,
	|	КВП_ВидыРаботСоставРабот.ЕдиницаИзмерения,
	|	КВП_ВидыРаботСоставРабот.Количество,
	|	втТаблицаРабот.ОбъемПлан,
	|	втТаблицаРабот.ОбъемФакт
	|ПОМЕСТИТЬ втСоставРабот
	|ИЗ
	|	Справочник.КВП_ВидыРабот.СоставРабот КАК КВП_ВидыРаботСоставРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТаблицаРабот КАК втТаблицаРабот
	|		ПО КВП_ВидыРаботСоставРабот.Ссылка = втТаблицаРабот.ВидРабот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_СведенияОМатериалахИспользуемыхПриПроведенииРаботСОборудованием.ВидМатериала,
	|	УПЖКХ_СведенияОМатериалахИспользуемыхПриПроведенииРаботСОборудованием.Номенклатура
	|ПОМЕСТИТЬ втМатериалыОборудования
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОМатериалахИспользуемыхПриПроведенииРаботСОборудованием КАК УПЖКХ_СведенияОМатериалахИспользуемыхПриПроведенииРаботСОборудованием
	|ГДЕ
	|	УПЖКХ_СведенияОМатериалахИспользуемыхПриПроведенииРаботСОборудованием.Оборудование В(&МассивОборудования)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСоставРабот.ВидРабот,
	|	втСоставРабот.Номенклатура,
	|	втСоставРабот.Коэффициент,
	|	втСоставРабот.ЕдиницаИзмерения,
	|	втСоставРабот.Количество,
	|	втСоставРабот.ОбъемПлан,
	|	втСоставРабот.ОбъемФакт,
	|	ЕСТЬNULL(втМатериалыОборудования.ВидМатериала, ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыМатериалов.ПустаяСсылка)) КАК ВидМатериала,
	|	ЕСТЬNULL(втМатериалыОборудования.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Материал
	|ПОМЕСТИТЬ втСоставРаботСВидамиМатериалов
	|ИЗ
	|	втСоставРабот КАК втСоставРабот
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМатериалыОборудования КАК втМатериалыОборудования
	|		ПО (НЕ втСоставРабот.ЭтоНоменклатура)
	|			И втСоставРабот.Номенклатура = втМатериалыОборудования.ВидМатериала
	|ГДЕ
	|	НЕ втСоставРабот.ЭтоНоменклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСоставРаботСВидамиМатериалов.ВидРабот,
	|	втСоставРаботСВидамиМатериалов.Коэффициент,
	|	втСоставРаботСВидамиМатериалов.ЕдиницаИзмерения,
	|	втСоставРаботСВидамиМатериалов.Количество,
	|	втСоставРаботСВидамиМатериалов.ОбъемПлан,
	|	втСоставРаботСВидамиМатериалов.ОбъемФакт,
	|	ЕСТЬNULL(УПЖКХ_ВидыМатериаловМатериалы.Ссылка, втСоставРаботСВидамиМатериалов.Номенклатура) КАК ВидМатериала,
	|	УПЖКХ_ВидыМатериаловМатериалы.Номенклатура КАК Материал
	|ПОМЕСТИТЬ врСоставРаботСВидамиМатериаловОбщий
	|ИЗ
	|	втСоставРаботСВидамиМатериалов КАК втСоставРаботСВидамиМатериалов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_ВидыМатериалов.Материалы КАК УПЖКХ_ВидыМатериаловМатериалы
	|		ПО (втСоставРаботСВидамиМатериалов.ВидМатериала = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыМатериалов.ПустаяСсылка))
	|			И втСоставРаботСВидамиМатериалов.Номенклатура = УПЖКХ_ВидыМатериаловМатериалы.Ссылка
	|ГДЕ
	|	втСоставРаботСВидамиМатериалов.ВидМатериала = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыМатериалов.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСоставРабот.ВидРабот КАК ВидРабот,
	|	втСоставРабот.Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыМатериалов.ПустаяСсылка) КАК ВидМатериала,
	|	втСоставРабот.Коэффициент,
	|	втСоставРабот.ЕдиницаИзмерения,
	|	втСоставРабот.Количество,
	|	втСоставРабот.ОбъемПлан,
	|	втСоставРабот.ОбъемФакт
	|ПОМЕСТИТЬ врТаблицаНарядЗаказа
	|ИЗ
	|	втСоставРабот КАК втСоставРабот
	|ГДЕ
	|	втСоставРабот.ЭтоНоменклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втСоставРаботСВидамиМатериалов.ВидРабот,
	|	втСоставРаботСВидамиМатериалов.Материал,
	|	втСоставРаботСВидамиМатериалов.ВидМатериала,
	|	втСоставРаботСВидамиМатериалов.Коэффициент,
	|	втСоставРаботСВидамиМатериалов.ЕдиницаИзмерения,
	|	втСоставРаботСВидамиМатериалов.Количество,
	|	втСоставРаботСВидамиМатериалов.ОбъемПлан,
	|	втСоставРаботСВидамиМатериалов.ОбъемФакт
	|ИЗ
	|	втСоставРаботСВидамиМатериалов КАК втСоставРаботСВидамиМатериалов
	|ГДЕ
	|	НЕ втСоставРаботСВидамиМатериалов.ВидМатериала = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыМатериалов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	врСоставРаботСВидамиМатериаловОбщий.ВидРабот,
	|	врСоставРаботСВидамиМатериаловОбщий.Материал,
	|	врСоставРаботСВидамиМатериаловОбщий.ВидМатериала,
	|	врСоставРаботСВидамиМатериаловОбщий.Коэффициент,
	|	врСоставРаботСВидамиМатериаловОбщий.ЕдиницаИзмерения,
	|	врСоставРаботСВидамиМатериаловОбщий.Количество,
	|	врСоставРаботСВидамиМатериаловОбщий.ОбъемПлан,
	|	врСоставРаботСВидамиМатериаловОбщий.ОбъемФакт
	|ИЗ
	|	врСоставРаботСВидамиМатериаловОбщий КАК врСоставРаботСВидамиМатериаловОбщий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаНарядЗаказа.ВидРабот КАК ВидРабот,
	|	врТаблицаНарядЗаказа.Номенклатура,
	|	врТаблицаНарядЗаказа.ВидМатериала КАК ВидМатериала,
	|	врТаблицаНарядЗаказа.Коэффициент,
	|	врТаблицаНарядЗаказа.Количество,
	|	врТаблицаНарядЗаказа.ОбъемПлан,
	|	врТаблицаНарядЗаказа.ОбъемФакт,
	|	ВЫБОР
	|		КОГДА врТаблицаНарядЗаказа.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|			ТОГДА СправочникНоменклатура.ЕдиницаИзмерения
	|		ИНАЧЕ врТаблицаНарядЗаказа.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.ВидСтавкиНДС КАК ВидСтавкиНДС
	|ИЗ
	|	врТаблицаНарядЗаказа КАК врТаблицаНарядЗаказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО врТаблицаНарядЗаказа.Номенклатура = СправочникНоменклатура.Ссылка
	|ИТОГИ ПО
	|	ВидРабот,
	|	ВидМатериала";
	
	ВыборкаВидовРабот = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВидовРабот.Следующий() Цикл
		
		ВыборкаВидовМатериалов = ВыборкаВидовРабот.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидовМатериалов.Следующий() Цикл
			
			ВыборкаДеталей = ВыборкаВидовМатериалов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если ВыборкаДеталей.Количество() = 1 Или Не ЗначениеЗаполнено(ВыборкаВидовМатериалов.ВидМатериала) Тогда
				
				Пока ВыборкаДеталей.Следующий() Цикл
					
					НоваяСтрока = Объект.НарядЗаказ.Добавить();
					
					НоваяСтрока.ВидРабот         = ВыборкаДеталей.ВидРабот;
					НоваяСтрока.ВидМатериала     = ВыборкаДеталей.ВидМатериала;
					НоваяСтрока.Номенклатура     = ВыборкаДеталей.Номенклатура;
					НоваяСтрока.ЕдиницаИзмерения = ВыборкаДеталей.ЕдиницаИзмерения;
					НоваяСтрока.СтавкаНДС        = Перечисления.СтавкиНДС.СтавкаНДС(ВыборкаДеталей.ВидСтавкиНДС, Объект.Дата);
					
					// Если объем выполняемых работ равен 0
					Если ВыборкаДеталей.Коэффициент = 0 Тогда
						НоваяСтрока.КоличествоПлан = 0;
						НоваяСтрока.Количество     = 0;
					Иначе
						НоваяСтрока.КоличествоПлан   = ВыборкаДеталей.Количество 
													 / ВыборкаДеталей.Коэффициент 
													 * ВыборкаДеталей.ОбъемПлан;
						НоваяСтрока.Количество       = ВыборкаДеталей.Количество 
													 / ВыборкаДеталей.Коэффициент 
													 * ВыборкаДеталей.ОбъемФакт;
					КонецЕсли;
					
					ДополнитьСведенияОНоменклатуре(НоваяСтрока);
					
				КонецЦикла;
				
			Иначе
				
				ЭтоПервыйМатериал = Истина;
				
				// Помещаем данные для уточнения в табличную часть.
				Пока ВыборкаДеталей.Следующий() Цикл
					
					// Добавим строку в наряд-заказ для последующего уточнения номенклатуры.
					Если ЭтоПервыйМатериал Тогда
						
						НоваяСтрока = Объект.НарядЗаказ.Добавить();
						
						НоваяСтрока.ВидРабот     = ВыборкаДеталей.ВидРабот;
						НоваяСтрока.ВидМатериала = ВыборкаДеталей.ВидМатериала;
						
						// Если объем выполняемых работ равен 0
						Если ВыборкаДеталей.Коэффициент = 0 Тогда
							НоваяСтрока.КоличествоПлан = 0;
							НоваяСтрока.Количество     = 0;
						Иначе
							НоваяСтрока.КоличествоПлан   = ВыборкаДеталей.Количество 
														 / ВыборкаДеталей.Коэффициент 
														 * ВыборкаДеталей.ОбъемПлан;
							НоваяСтрока.Количество       = ВыборкаДеталей.Количество 
														 / ВыборкаДеталей.Коэффициент 
														 * ВыборкаДеталей.ОбъемФакт;
						КонецЕсли;
						
						ЭтоПервыйМатериал = Ложь;
						
					КонецЕсли;
					
					// Добавим данные в таблицу уточнения.
					НоваяСтрока = Объект.УточнениеМатериалов.Добавить();
					НоваяСтрока.ВидРабот         = ВыборкаДеталей.ВидРабот;
					НоваяСтрока.ВидМатериала     = ВыборкаДеталей.ВидМатериала;
					НоваяСтрока.Номенклатура     = ВыборкаДеталей.Номенклатура;
					НоваяСтрока.ЕдиницаИзмерения = ВыборкаДеталей.ЕдиницаИзмерения;
					НоваяСтрока.СтавкаНДС        = Перечисления.СтавкиНДС.СтавкаНДС(ВыборкаДеталей.ВидСтавкиНДС, Объект.Дата);
					
					// Если объем выполняемых работ равен 0
					Если ВыборкаДеталей.Коэффициент = 0 Тогда
						НоваяСтрока.КоличествоПлан = 0;
						НоваяСтрока.Количество     = 0;
					Иначе
						НоваяСтрока.КоличествоПлан   = ВыборкаДеталей.Количество 
													 / ВыборкаДеталей.Коэффициент 
													 * ВыборкаДеталей.ОбъемПлан;
						НоваяСтрока.Количество       = ВыборкаДеталей.Количество 
													 / ВыборкаДеталей.Коэффициент 
													 * ВыборкаДеталей.ОбъемФакт;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработка изменения цен и валюты.
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ТипЦен, ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",      Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",     Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",        Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",    ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены",      ПересчитатьЦены);
	СтруктураПараметров.Вставить("ТипЦен",               ТипЦен);
	СтруктураПараметров.Вставить("ДокументБезНДС",       Объект.ДокументБезНДС);
	
	// 2. Открываем форму "Цены и Валюта".
	ДополнительныеПараметры = Новый Структура;
	
	Если ИспользоватьТипыЦенНоменклатуры Тогда
		ОткрыватьИзМеню = Ложь;
	Иначе
		ОткрыватьИзМеню = Истина;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКоманды", СтруктураПараметров);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОткрыватьИзМеню Тогда
		
		СписокКоманд = Новый СписокЗначений;
		
		Если Не ПлательщикНДС Тогда
			СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС"));
		КонецЕсли;
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
		
		ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Элементы.ЦеныИВалюта);
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обновляет значения сумм и цен на основе выбранных параметров.
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Если РезультатЗакрытия = Неопределено Тогда 
			Возврат;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС = Истина;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС   = Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС = Истина;
		Иначе
			СтруктураЦеныИВалюта.ДокументБезНДС   = Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС = Ложь;
		КонецЕсли;
		
		СтруктураЦеныИВалюта.Вставить("ПересчитатьНДС",       СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
		
	Иначе
		СтруктураЦеныИВалюта = РезультатЗакрытия;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
		
		НаборОбязательныхСвойств = Новый Массив;
		НаборОбязательныхСвойств.Добавить("ТипЦен");
		НаборОбязательныхСвойств.Добавить("ВалютаДокумента");
		НаборОбязательныхСвойств.Добавить("СуммаВключаетНДС");
		НаборОбязательныхСвойств.Добавить("ПересчитатьНДС");
		
		Для Каждого Ключ Из НаборОбязательныхСвойств Цикл
			Если СтруктураЦеныИВалюта.Свойство(Ключ) = Неопределено Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Внимание! Пересчет НДС не может быть выполнен по причине отсутствия в общей форме ""ФормаЦеныИВалюта"" свойства """ 
				+ Ключ + """.");
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		ВалютаДоИзменения    = Объект.ВалютаДокумента;
		КурсДоИзменения      = 1;
		КратностьДоИзменения = 1;
		
		Объект.ТипЦен           = СтруктураЦеныИВалюта.ТипЦен;
		Объект.ВалютаДокумента  = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.СуммаВключаетНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.ДокументБезНДС   = СтруктураЦеныИВалюта.ДокументБезНДС;
		
		Модифицированность = Истина;
		
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения,
			КурсДоИзменения,
			КратностьДоИзменения,
			СтруктураЦеныИВалюта.ПересчитатьНДС);
		
		Для Каждого ТекСтрока Из Объект.НарядЗаказ Цикл
			РассчитатьСтрокуТабЧастиНарядЗаказ(ТекСтрока, Объект.СуммаВключаетНДС);
		КонецЦикла;
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура получает цены номенклатуры, учитывая курс валюты.
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПересчитатьНДС = Ложь)
	
	Перем ТаблицаЦенНоменклатуры;
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.НарядЗаказ, "Номенклатура", Истина),
			Объект.ТипЦен,
			Объект.Дата);
	Иначе
		ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатурыДокументов(
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.НарядЗаказ, "Номенклатура", Истина),
			Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам,
			Объект.Дата);
	КонецЕсли;
	
	Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
		СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
	Иначе
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
	КонецЕсли;
	
	Для Каждого Строка Из Объект.НарядЗаказ Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПересчитатьНДС, Истина, 1);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет строки поля "НарядЗаказ".
Процедура ЗаполнитьРассчитатьСуммыВСтроке(
	Строка,
	ТаблицаЦенНоменклатуры,
	ВалютаПередИзменением,
	СтруктураКурса,
	ПересчитатьНДС,
	ЕстьНДС,
	ЗначениеПустогоКоличества)

	НайденнаяСтрока = ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
	Если НайденнаяСтрока <> Неопределено Тогда
		
		Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
			1, НайденнаяСтрока.Кратность, 1);
		ЦенаВключаетНДС = НайденнаяСтрока.ЦенаВключаетНДС;
		
	Иначе
		
		Цена = 0;
		
		// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
		Иначе
			ЦенаВключаетНДС = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьНДС Тогда
		
		Если Объект.ДокументБезНДС Тогда
			Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС);
		Строка.Цена     = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС, ЗначениеСтавкиНДС);
		Строка.Сумма    = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
		Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма, Объект.СуммаВключаетНДС, ЗначениеСтавкиНДС);
		
	Иначе
		
		Строка.Цена  = Цена;
		Строка.Сумма = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Формирует надпись цен и валюты.
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС, ДокументБезНДС",
		Объект.ВалютаДокумента,
		1,
		1,
		Объект.СуммаВключаетНДС,
		Объект.ДокументБезНДС);
	
	Если Форма.ИспользоватьТипыЦенНоменклатуры Тогда
		СтруктураНадписи.Вставить("ТипЦен", Объект.ТипЦен);
	КонецЕсли;
	
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Обновляет итоги табличной части.
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;
	
	Форма.ИтогиВсего    = Объект.НарядЗаказ.Итог("Сумма");
	Форма.ИтогиВсегоНДС = Объект.НарядЗаказ.Итог("СуммаНДС");
	
КонецПроцедуры

&НаСервере
// Включает отборы при выборе помещения.
//
Процедура УстановитьСвязиПараметровВыбораПомещенияНаСервере()
	
	Если Не Объект.Здание.Пустая() Тогда
		
		СвязьПоЗданию = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Здание");
		
		МассивСвязи = Новый Массив();
		МассивСвязи.Добавить(СвязьПоЗданию);
		
		Если Не Объект.Подъезд.Пустая() Тогда
			СвязьПоПодъезду = Новый СвязьПараметраВыбора("Отбор.Подъезд", "Объект.Подъезд");
			МассивСвязи.Добавить(СвязьПоПодъезду);
		КонецЕсли;
		
		ОтборПоЗданиюИПодъезду = Новый ФиксированныйМассив(МассивСвязи);
		Элементы.Помещение.СвязиПараметровВыбора = ОтборПоЗданиюИПодъезду;
	Иначе
		Элементы.Помещение.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
КонецПроцедуры // УстановитьСвязиПараметровВыбораПомещенияНаСервере()

&НаСервере
// Устанавливает параметры связи поля выбора лицевого счета.
//
Процедура УстановитьПараметрыСвязиПоляВыбораЛицевогоСчетаНаСервере()
	
	ОтветственныйСобственникЛС = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(Объект.ЛицевойСчет, Объект.Дата);
	
	// Установка ограничения типа.
	МассивТипов = Новый Массив;
	Если ТипЗнч(ОтветственныйСобственникЛС) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.УПЖКХ_Жильцы"));
		Элементы.КонтактноеЛицо.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		Элементы.КонтактноеЛицо.ВыбиратьТип = Ложь;
	ИначеЕсли ТипЗнч(ОтветственныйСобственникЛС) = Тип("СправочникСсылка.Контрагенты") Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.КонтактныеЛица"));
		Элементы.КонтактноеЛицо.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		Элементы.КонтактноеЛицо.ВыбиратьТип = Ложь;
	Иначе
		Элементы.КонтактноеЛицо.ОграничениеТипа = Новый ОписаниеТипов;
		Элементы.КонтактноеЛицо.ВыбиратьТип = Истина;
	КонецЕсли;
	
	// Установка связей параметров выбора.
	МассивСвязей = Новый Массив;
	Если ТипЗнч(ОтветственныйСобственникЛС) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ЛицевойСчет"));
		
	ИначеЕсли ТипЗнч(ОтветственныйСобственникЛС) = Тип("СправочникСсылка.Контрагенты") Тогда
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.ОбъектВладелец", "ОтветственныйСобственникЛС"));
		
	КонецЕсли;
	
	Элементы.КонтактноеЛицо.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Получает массив лицевых счетов в помещении, здании или подъезде.
//
Функция ПолучитьМассивЛС(Параметр, Период, НаименованиеОтбора)
	
	СписокПараметров = Новый СписокЗначений;
	СписокПараметров.Добавить(Параметр);
	
	Если НаименованиеОтбора = "Помещение" Тогда
		СписокЛС = КВП_ПолучитьСписокЛицевыхСчетовПоПомещениям(СписокПараметров, Период);
	ИначеЕсли НаименованиеОтбора = "Подъезд" Тогда
		СписокЛС = КВП_ПолучитьСписокЛицевыхСчетовПоПодъездам(СписокПараметров, Период);
	ИначеЕсли НаименованиеОтбора = "Здание" Тогда
		СписокЛС = КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям(СписокПараметров, Период);
	КонецЕсли;
	
	Возврат СписокЛС.ВыгрузитьЗначения();
	
КонецФункции // ПолучитьМассивЛС()

&НаКлиенте
// Процедура обрабатывает изменение времени фактического выполнения работ.
Процедура ОбработатьИзменениеВремениФактическогоВыполненияРабот()
	
	Если Не Объект.ВремяФактическогоОкончанияРабот = Дата(1,1,1)
	   И Объект.ВремяФактическогоНачалаРабот > Объект.ВремяФактическогоОкончанияРабот Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Время окончания работ не может быть меньше времени начала работ!");
			Объект.ВремяФактическогоОкончанияРабот = Объект.ВремяФактическогоНачалаРабот;
			
	КонецЕсли;
	
	ЗаполнитьСтрокуСводныхТрудозатрат();
	
КонецПроцедуры

&НаКлиенте
// Заполняет строку "Трудозатраты по заявке".
//
Процедура ЗаполнитьСтрокуСводныхТрудозатрат()
	
	ВремяНачала    = Объект.ВремяФактическогоНачалаРабот;
	ВремяОкончания = Объект.ВремяФактическогоОкончанияРабот;
	
	СтрокаТрудозатрат = "";
	
	Если Не ЗначениеЗаполнено(ВремяНачала) Или Не ЗначениеЗаполнено(ВремяОкончания) Тогда
		Трудозатраты = СтрокаТрудозатрат;
		Возврат;
	КонецЕсли;
	
	РазницаВМинутах = Окр((ВремяОкончания - ВремяНачала) / 60);
	ПолныхДней   = Цел(РазницаВМинутах / (60 * 24));
	ПолныхЧасов  = Цел((РазницаВМинутах - ПолныхДней * 60 * 24) / 60);
	ОстатокМинут = Цел(РазницаВМинутах - ПолныхДней * 60 * 24 - ПолныхЧасов * 60);
	
	Если ПолныхДней > 0 Тогда
		СтрокаТрудозатрат = Строка(ПолныхДней) + " дн. ";
	КонецЕсли;
	
	Если ПолныхЧасов > 0 Тогда
		СтрокаТрудозатрат = СтрокаТрудозатрат + Строка(ПолныхЧасов) + " ч. ";
	КонецЕсли;
	
	СтрокаТрудозатрат = СтрокаТрудозатрат + Строка(ОстатокМинут) + " мин.";
	
	Трудозатраты = "Время выполнения работ - " + СтрокаТрудозатрат;
	
КонецПроцедуры // ЗаполнитьСтрокуСводныхТрудозатрат()

&НаСервереБезКонтекста
// Функция возвращает тип цен продажи по мастеру из заявки.
//
Функция ПолучитьТипЦеныПродажиСкладаМастераНаСервере(Период, Мастер)
	
	ТипЦенПродажи = Неопределено;
	
	СкладМастера = Документы.КВП_ЗаявкаНаВыполнениеРабот.ПолучитьСкладПоОтветственномуМастеру(Период, Мастер);
	Если ЗначениеЗаполнено(СкладМастера) Тогда
		ТипЦенПродажи = СкладМастера.ТипЦенРозничнойТорговли;
	КонецЕсли;
	
	Возврат ТипЦенПродажи;
	
КонецФункции

&НаСервере
// Процедура получает значения функциональных опций.
//
Процедура ПолучитьФункциональныеОпцииФормы()
	
	ПлательщикНДС                   = УПЖКХ_ТиповыеМетодыСервер.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ИспользоватьТипыЦенНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");
	
КонецПроцедуры

&НаСервере
// Процедура получает сведения о номенклатуре.
//
// Параметры:
// СтрокаТабличнойЧасти - Структура - Содержит данные строки табличной части "НарядЗаказ".
// ДанныеОбъекта - Структура - Содержит данные объекта документа.
//
Процедура ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Цена      = СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет сведения о номенклатуре в строке табличной части "НарядЗаказ".
//
// Параметры:
// СтрокаТабличнойЧасти - ДанныеФормыЭлементКоллекции - Строка табличной части "НарядЗаказ".
//
Процедура ДополнитьСведенияОНоменклатуре(СтрокаТабличнойЧасти)
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Цена, Сумма, СуммаПлан, Количество, КоличествоПлан, СтавкаНДС, СуммаНДС");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ТипЦен, ВалютаДокумента, СуммаВключаетНДС, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ПолучитьСведенияОНоменклатуре(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	РассчитатьСтрокуТабЧастиНарядЗаказ(ДанныеСтрокиТаблицы, Объект.СуммаВключаетНДС);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаСервере
// Процедура пересчитывает суммы в строках табличной части "НарядЗаказ" после установки типа цен
// при изменении ответственного за выполнение заявки мастера.
//
Процедура ПересчитатьСуммыНарядЗаказаПриИзмененииОтветственного()
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.НарядЗаказ Цикл
		ДополнитьСведенияОНоменклатуре(СтрокаТабличнойЧасти)
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ОБОРУДОВАНИЯ, ПРИЗНАКОВ НЕИСПРАВНОСТЕЙ И ВИДОВ РАБОТ

#Область ЗаполнениеДокумента

&НаСервере
// Функция возвращает массив объектов установки оборудования.
//
Функция ПолучитьМассивОбъектовУстановкиОборудования()
	
	МассивОбъектов = Новый Массив;
	ВключатьПодчиненныеОбъекты = (Объект.ВидОперации = Перечисления.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоДому)
									И Объект.ВключатьОборудованиеУстановленноеНаПодчиненныеОбъекты;
	
	Если ЗначениеЗаполнено(Объект.ЛицевойСчет) Тогда
		
		МассивОбъектов.Добавить(Объект.ЛицевойСчет.Адрес);
		МассивОбъектов.Добавить(Объект.ЛицевойСчет.Адрес.Подъезд);
		МассивОбъектов.Добавить(Объект.ЛицевойСчет.Адрес.Владелец);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Помещение) Тогда
		
		МассивОбъектов.Добавить(Объект.Помещение);
		МассивОбъектов.Добавить(Объект.Помещение.Подъезд);
		МассивОбъектов.Добавить(Объект.Помещение.Владелец);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Подъезд) Тогда
		
		МассивОбъектов.Добавить(Объект.Подъезд);
		МассивОбъектов.Добавить(Объект.Здание);
		
		Если ВключатьПодчиненныеОбъекты Тогда
			СписокПомещений = КВП_ПолучитьСписокПомещенийПоПодъездам(Объект.Подъезд);
			Для Каждого ТекПомещение Из СписокПомещений Цикл
				МассивОбъектов.Добавить(ТекПомещение.Значение);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Здание) Тогда
		
		МассивОбъектов.Добавить(Объект.Здание);
		
		Если ВключатьПодчиненныеОбъекты Тогда
		
			СписокПодъездов = КВП_ПолучитьСписокПодъездовПоЗданиям(Объект.Здание);
			Для Каждого ТекПодъезд Из СписокПодъездов Цикл
				МассивОбъектов.Добавить(ТекПодъезд.Значение);
			КонецЦикла;
			
			СписокПомещений = КВП_ПолучитьСписокПомещенийПоЗданиям(Объект.Здание);
			Для Каждого ТекПомещение Из СписокПомещений Цикл
				МассивОбъектов.Добавить(ТекПомещение.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивОбъектов;
	
КонецФункции // ПолучитьМассивОбъектовУстановкиОборудования()

&НаСервере
// Функция возвращает таблицу установленного оборудования, отвечающего критериям отбора
// по видам работ и признакам неисправности.
//
Функция ПолучитьМассивУстановленногоОборудованияПоОбъектуЗаявкиНаСервере()
	
	// Получим массив объектов установки оборудования.
	ОбъектыУстановки = ПолучитьМассивОбъектовУстановкиОборудования();
	
	// Получим таблицу установленного на объекты оборудования.
	врТаблицаУстановленногоОборудования = УПЖКХ_УчетОборудованияНаОбъектахУчетаСервер.ПолучитьОборудованиеУстановленноеНаОбъектУчета(ОбъектыУстановки, Объект.Дата);
	МассивОборудования = врТаблицаУстановленногоОборудования.ВыгрузитьКолонку("Оборудование");
	
	// Получим таблицу оборудования с иерархией.
	ТаблицаУстановленногоОборудования = ПолучитьТаблицуУстановленногоОборудованияСГруппами(МассивОборудования);
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОборудования.Оборудование,
	|	ТаблицаОборудования.ГруппаОборудования
	|ПОМЕСТИТЬ втТаблицаОборудования
	|ИЗ
	|	&ТаблицаОборудования КАК ТаблицаОборудования
	|;";
	
	Запрос.УстановитьПараметр("ТаблицаОборудования", ТаблицаУстановленногоОборудования);
	
	ТекстСоединенияПризнакиНеисправности = "";
	Если Объект.ПризнакиНеисправностей.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("ПризнакиНеисправностей", Объект.ПризнакиНеисправностей.Выгрузить().ВыгрузитьКолонку("ПризнакНеисправности"));
		ТекстЗапроса = ТекстЗапроса +
		"
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_ПрочиеОбъектыУчетаПризнакиНеисправностей.Ссылка КАК ОборудованияИлиГруппаОборудования
		|ПОМЕСТИТЬ втПризнакиНеисправностиОборудования
		|ИЗ
		|	Справочник.УПЖКХ_ПрочиеОбъектыУчета.ПризнакиНеисправностей КАК УПЖКХ_ПрочиеОбъектыУчетаПризнакиНеисправностей
		|ГДЕ
		|	УПЖКХ_ПрочиеОбъектыУчетаПризнакиНеисправностей.ПризнакНеисправности В(&ПризнакиНеисправностей)
		|;";
		
		ТекстСоединенияПризнакиНеисправности =
		"
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПризнакиНеисправностиОборудования КАК втПризнакиНеисправностиОборудования
		|		ПО втТаблицаОборудования.Оборудование = втПризнакиНеисправностиОборудования.ОборудованияИлиГруппаОборудования
		|			ИЛИ втТаблицаОборудования.ГруппаОборудования = втПризнакиНеисправностиОборудования.ОборудованияИлиГруппаОборудования";
		
	КонецЕсли;
	
	ТекстСоединенияВидыРабот = "";
	Если Объект.Работы.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("ВидыРабот", Объект.Работы.Выгрузить().ВыгрузитьКолонку("ВидРабот"));
		
		ТекстЗапроса = ТекстЗапроса +
		"
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_СведенияОВидахРаботВыполняемыхСОборудованием.Оборудование КАК ОборудованияИлиГруппаОборудования
		|ПОМЕСТИТЬ втВидыРаботОборудования
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОВидахРаботВыполняемыхСОборудованием КАК УПЖКХ_СведенияОВидахРаботВыполняемыхСОборудованием
		|ГДЕ
		|	УПЖКХ_СведенияОВидахРаботВыполняемыхСОборудованием.ВидРабот В (&ВидыРабот)
		|;";
		
		ТекстСоединенияВидыРабот =
		"
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВидыРаботОборудования КАК втВидыРаботОборудования
		|		ПО (втТаблицаОборудования.Оборудование = втВидыРаботОборудования.ОборудованияИлиГруппаОборудования
		|				ИЛИ втТаблицаОборудования.ГруппаОборудования = втВидыРаботОборудования.ОборудованияИлиГруппаОборудования)";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втТаблицаОборудования.Оборудование
	|ИЗ
	|	втТаблицаОборудования КАК втТаблицаОборудования";
	
	ТекстЗапроса = ТекстЗапроса + ТекстСоединенияПризнакиНеисправности + ТекстСоединенияВидыРабот;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Оборудование");
	
КонецФункции // ПолучитьМассивУстановленногоОборудованияПоОбъектуЗаявкиНаСервере()

&НаСервере
// Функция возвращает таблицу признаков неисправности, отвечающих критериям отбора по видам работ и оборудованию.
//
Функция ПолучитьМассивПризнаковНеисправностиОборудованияНаСервере()
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	УПЖКХ_ПризнакиНеисправностей.Ссылка КАК ПризнакНеисправности
	|ПОМЕСТИТЬ втПризнакиНеисправности
	|ИЗ
	|	Справочник.УПЖКХ_ПризнакиНеисправностей КАК УПЖКХ_ПризнакиНеисправностей
	|ГДЕ
	|	НЕ УПЖКХ_ПризнакиНеисправностей.ПометкаУдаления
	|;";
	
	СтрокаСоединенияОборудование = "";
	Если Объект.Оборудование.Количество() > 0 Тогда
		
		// Определим массив оборудования.
		МассивОборудования = Объект.Оборудование.Выгрузить().ВыгрузитьКолонку("Оборудование");
		
		// Получим таблицу оборудования с иерархией.
		ТаблицаУстановленногоОборудования = ПолучитьТаблицуУстановленногоОборудованияСГруппами(МассивОборудования);
		
		// Дополним массив оборудования группами иерархии оборудования.
		Для Каждого ТекСтрокаОборудования Из ТаблицаУстановленногоОборудования Цикл
			МассивОборудования.Добавить(ТекСтрокаОборудования.ГруппаОборудования);
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ОборудованияИлиГруппаОборудования", МассивОборудования);
		
		ТекстЗапроса = ТекстЗапроса +
		"
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_ПрочиеОбъектыУчетаПризнакиНеисправностей.ПризнакНеисправности
		|ПОМЕСТИТЬ втПризнакиНеисправностиОборудования
		|ИЗ
		|	Справочник.УПЖКХ_ПрочиеОбъектыУчета.ПризнакиНеисправностей КАК УПЖКХ_ПрочиеОбъектыУчетаПризнакиНеисправностей
		|ГДЕ
		|	УПЖКХ_ПрочиеОбъектыУчетаПризнакиНеисправностей.Ссылка В(&ОборудованияИлиГруппаОборудования)
		|;";
		
		СтрокаСоединенияОборудование =
		"
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПризнакиНеисправностиОборудования КАК втПризнакиНеисправностиОборудования
		|		ПО втПризнакиНеисправности.ПризнакНеисправности = втПризнакиНеисправностиОборудования.ПризнакНеисправности";
		
	КонецЕсли;
	
	СтрокаСоединенияВидыРабот = "";
	Если Объект.Работы.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("ВидыРабот", Объект.Работы.Выгрузить().ВыгрузитьКолонку("ВидРабот"));
		
		ТекстЗапроса = ТекстЗапроса +
		"
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_ПризнакиНеисправностейВидыРабот.Ссылка КАК ПризнакНеисправности
		|ПОМЕСТИТЬ втПризнакиНеисправностиВидовРабот
		|ИЗ
		|	Справочник.УПЖКХ_ПризнакиНеисправностей.ВидыРабот КАК УПЖКХ_ПризнакиНеисправностейВидыРабот
		|ГДЕ
		|	УПЖКХ_ПризнакиНеисправностейВидыРабот.ВидРабот В(&ВидыРабот)
		|;";
		
		СтрокаСоединенияВидыРабот =
		"
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПризнакиНеисправностиВидовРабот КАК втПризнакиНеисправностиВидовРабот
		|		ПО втПризнакиНеисправности.ПризнакНеисправности = втПризнакиНеисправностиВидовРабот.ПризнакНеисправности";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втПризнакиНеисправности.ПризнакНеисправности
	|ИЗ
	|	втПризнакиНеисправности КАК втПризнакиНеисправности";
	
	ТекстЗапроса = ТекстЗапроса + СтрокаСоединенияОборудование + СтрокаСоединенияВидыРабот;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПризнакНеисправности");
	
КонецФункции // ПолучитьМассивПризнаковНеисправностиОборудованияНаСервере()

&НаСервере
// Функция возвращает таблицу видов работ, отвечающих критериям отбора по признакам неисправности и оборудованию.
//
Функция ПолучитьМассивВидовРаботНаСервере()
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КВП_ВидыРабот.Ссылка КАК ВидРабот
	|ПОМЕСТИТЬ втВидыРабот
	|ИЗ
	|	Справочник.КВП_ВидыРабот КАК КВП_ВидыРабот
	|ГДЕ
	|	НЕ КВП_ВидыРабот.ПометкаУдаления
	|;";
	
	СтрокаСоединенияОборудование = "";
	Если Объект.Оборудование.Количество() > 0 Тогда
		
		// Определим массив оборудования.
		МассивОборудования = Объект.Оборудование.Выгрузить().ВыгрузитьКолонку("Оборудование");
		
		// Получим таблицу оборудования с иерархией.
		ТаблицаУстановленногоОборудования = ПолучитьТаблицуУстановленногоОборудованияСГруппами(МассивОборудования);
		
		// Дополним массив оборудования группами иерархии оборудования.
		Для Каждого ТекСтрокаОборудования Из ТаблицаУстановленногоОборудования Цикл
			МассивОборудования.Добавить(ТекСтрокаОборудования.ГруппаОборудования);
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ОборудованияИлиГруппаОборудования", МассивОборудования);
		
		ТекстЗапроса = ТекстЗапроса +
		"
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_СведенияОВидахРаботВыполняемыхСОборудованием.ВидРабот
		|ПОМЕСТИТЬ втВидыРаботОборудования
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОВидахРаботВыполняемыхСОборудованием КАК УПЖКХ_СведенияОВидахРаботВыполняемыхСОборудованием
		|ГДЕ
		|	УПЖКХ_СведенияОВидахРаботВыполняемыхСОборудованием.Оборудование В (&ОборудованияИлиГруппаОборудования)
		|;";
		
		СтрокаСоединенияОборудование =
		"
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВидыРаботОборудования КАК втВидыРаботОборудования
		|		ПО втВидыРабот.ВидРабот = втВидыРаботОборудования.ВидРабот";
		
	КонецЕсли;
	
	СтрокаСоединенияПризнакиНеисправности = "";
	Если Объект.ПризнакиНеисправностей.Количество() > 0  Тогда
		
		Запрос.УстановитьПараметр("ПризнакиНеисправностей", Объект.ПризнакиНеисправностей.Выгрузить().ВыгрузитьКолонку("ПризнакНеисправности"));
		
		ТекстЗапроса = ТекстЗапроса +
		"
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_ПризнакиНеисправностейВидыРабот.ВидРабот
		|ПОМЕСТИТЬ втВидыРаботПризнаковНеисправности
		|ИЗ
		|	Справочник.УПЖКХ_ПризнакиНеисправностей.ВидыРабот КАК УПЖКХ_ПризнакиНеисправностейВидыРабот
		|ГДЕ
		|	УПЖКХ_ПризнакиНеисправностейВидыРабот.Ссылка В(&ПризнакиНеисправностей)
		|;";
		
		СтрокаСоединенияПризнакиНеисправности =
		"
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВидыРаботПризнаковНеисправности КАК втВидыРаботПризнаковНеисправности
		|		ПО втВидыРабот.ВидРабот = втВидыРаботПризнаковНеисправности.ВидРабот";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втВидыРабот.ВидРабот
	|ИЗ
	|	втВидыРабот КАК втВидыРабот";
	
	ТекстЗапроса = ТекстЗапроса + СтрокаСоединенияОборудование + СтрокаСоединенияПризнакиНеисправности;
	
	Запрос.Текст = ТекстЗапроса;
	
	МассивВидовРабот = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРабот");
	
	///////////////////////////////////////////////////////////////////////
	// Получим виды работ оборудования, для которого не заданы виды работ,
	// но в признаках неисправности они есть.
	
	Если Объект.Оборудование.Количество() > 0 Тогда
		
		// Определим массив оборудования.
		МассивОборудования = Объект.Оборудование.Выгрузить().ВыгрузитьКолонку("Оборудование");
		
		Для Каждого ТекОборудование Из МассивОборудования Цикл
			
			врМассивОборудование = Новый Массив;
			врМассивОборудование.Добавить(ТекОборудование);
			
			// Получим таблицу оборудования с иерархией.
			ТаблицаУстановленногоОборудования = ПолучитьТаблицуУстановленногоОборудованияСГруппами(ТекОборудование);
			
			// Дополним массив оборудования группами иерархии оборудования.
			Для Каждого ТекСтрокаОборудования Из ТаблицаУстановленногоОборудования Цикл
				врМассивОборудование.Добавить(ТекСтрокаОборудования.ГруппаОборудования);
			КонецЦикла;
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("ОборудованияИлиГруппаОборудования", врМассивОборудование);
			
			врМассивПризнаковНеисправности = Объект.ПризнакиНеисправностей.Выгрузить().ВыгрузитьКолонку("ПризнакНеисправности");
			Запрос.УстановитьПараметр("ПризнакиНеисправности",         врМассивПризнаковНеисправности);
			Запрос.УстановитьПараметр("ПризнакиНеисправностиНеЗаданы", (врМассивПризнаковНеисправности.Количество() = 0));
			
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК ПризнакНаличияВидовРаботОборудования
			|ПОМЕСТИТЬ втВидыРаботОборудования
			|ИЗ
			|	РегистрСведений.УПЖКХ_СведенияОВидахРаботВыполняемыхСОборудованием КАК УПЖКХ_СведенияОВидахРаботВыполняемыхСОборудованием
			|ГДЕ
			|	УПЖКХ_СведенияОВидахРаботВыполняемыхСОборудованием.Оборудование В(&ОборудованияИлиГруппаОборудования)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	УПЖКХ_ПрочиеОбъектыУчетаПризнакиНеисправностей.ПризнакНеисправности
			|ПОМЕСТИТЬ втПризнакиНеисправностиОборудования
			|ИЗ
			|	Справочник.УПЖКХ_ПрочиеОбъектыУчета.ПризнакиНеисправностей КАК УПЖКХ_ПрочиеОбъектыУчетаПризнакиНеисправностей
			|ГДЕ
			|	УПЖКХ_ПрочиеОбъектыУчетаПризнакиНеисправностей.Ссылка В(&ОборудованияИлиГруппаОборудования)
			|	И (&ПризнакиНеисправностиНеЗаданы
			|			ИЛИ УПЖКХ_ПрочиеОбъектыУчетаПризнакиНеисправностей.ПризнакНеисправности В (&ПризнакиНеисправности))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	УПЖКХ_ПризнакиНеисправностейВидыРабот.ВидРабот КАК ВидРабот
			|ИЗ
			|	Справочник.УПЖКХ_ПризнакиНеисправностей.ВидыРабот КАК УПЖКХ_ПризнакиНеисправностейВидыРабот
			|ГДЕ
			|	УПЖКХ_ПризнакиНеисправностейВидыРабот.Ссылка В
			|			(ВЫБРАТЬ
			|				втПризнакиНеисправностиОборудования.ПризнакНеисправности
			|			ИЗ
			|				втПризнакиНеисправностиОборудования КАК втПризнакиНеисправностиОборудования)
			|	И НЕ ИСТИНА В
			|				(ВЫБРАТЬ
			|					втВидыРаботОборудования.ПризнакНаличияВидовРаботОборудования
			|				ИЗ
			|					втВидыРаботОборудования КАК втВидыРаботОборудования)";
			
			ВыборкаВидовРабот = Запрос.Выполнить().Выбрать();
			Пока ВыборкаВидовРабот.Следующий() Цикл
				Если МассивВидовРабот.Найти(ВыборкаВидовРабот.ВидРабот) = Неопределено Тогда
					МассивВидовРабот.Добавить(ВыборкаВидовРабот.ВидРабот);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивВидовРабот;
	
КонецФункции // ПолучитьМассивВидовРаботНаСервере()

/////////////////////////////////////////////////
// Получение таблицы оборудования с иерархией

&НаСервере
// Функция возвращает таблицу оборудования с группами иерархии оборудования.
//
Функция ПолучитьТаблицуУстановленногоОборудованияСГруппами(МассивОборудования)
	
	// Определим результирующую таблицу.
	ТаблицаУстановленногоОборудования = Новый ТаблицаЗначений;
	ТаблицаУстановленногоОборудования.Колонки.Добавить("Оборудование",       Новый ОписаниеТипов("СправочникСсылка.УПЖКХ_ПрочиеОбъектыУчета"));
	ТаблицаУстановленногоОборудования.Колонки.Добавить("ГруппаОборудования", Новый ОписаниеТипов("СправочникСсылка.УПЖКХ_ПрочиеОбъектыУчета"));
	
	// Получим структуру иерархии установленного оборудования.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОборудования", МассивОборудования);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_ПрочиеОбъектыУчета.Ссылка КАК Оборудование,
	|	УПЖКХ_ПрочиеОбъектыУчета.ЭтоГруппа
	|ИЗ
	|	Справочник.УПЖКХ_ПрочиеОбъектыУчета КАК УПЖКХ_ПрочиеОбъектыУчета
	|ГДЕ
	|	УПЖКХ_ПрочиеОбъектыУчета.Ссылка В(&МассивОборудования)
	|
	|УПОРЯДОЧИТЬ ПО
	|	УПЖКХ_ПрочиеОбъектыУчета.Родитель,
	|	Оборудование
	|ИТОГИ ПО
	|	Оборудование ТОЛЬКО ИЕРАРХИЯ";
	
	ДеревоУстановленногоОборудования = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	// Заполним таблицу оборудования с группами иерархии по дерееву оборудования.
	ДополнитьТаблицуОборудованияДаннымиГруппы(ТаблицаУстановленногоОборудования, Новый Массив, ДеревоУстановленногоОборудования.Строки);
	
	Возврат ТаблицаУстановленногоОборудования;
	
КонецФункции

&НаСервере
// Процедура дополняет таблицу оборудования элементами оборудования
// и всеми группами, к которым оборудование относится. В качестве источника
// используются строки дерева значений с иерархией.
Процедура ДополнитьТаблицуОборудованияДаннымиГруппы(ТаблицаУстановленногоОборудования, МассивГрупп, СтрокиДереваУстановленногоОборудования)
	
	Для Каждого ТекСтрока Из СтрокиДереваУстановленногоОборудования Цикл
		
		Если ТекСтрока.ЭтоГруппа = Ложь Тогда
			
			// Добавим текущий объект с его иерархией.
			Для Каждого ТекГруппа Из МассивГрупп Цикл
				НоваяСтрока = ТаблицаУстановленногоОборудования.Добавить();
				НоваяСтрока.Оборудование       = ТекСтрока.Оборудование;
				НоваяСтрока.ГруппаОборудования = ТекГруппа;
			КонецЦикла;
			
		Иначе
			
			// Добавим текущую группу в массив групп.
			МассивГрупп.Добавить(ТекСтрока.Оборудование);
			
			// Вызовем рекурсивно процедуру обработку вложенных строк дерева.
			ДополнитьТаблицуОборудованияДаннымиГруппы(ТаблицаУстановленногоОборудования, МассивГрупп, ТекСтрока.Строки);
			
			// Удалим текущую группу из массива групп, так как группа уже обработана.
			ИндексТекГруппы = МассивГрупп.Найти(ТекСтрока.Оборудование);
			Если Не ИндексТекГруппы = Неопределено Тогда
				МассивГрупп.Удалить(ИндексТекГруппы);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С УТОЧНЕНИЕМ МАТЕРИАЛОВ

#Область РаботаСУточнениемМатериалов

&НаСервере
// Процедура сохраняет настройки уточнения в хранилище.
//
Функция СохранитьНастройкиУточненияМатериалов(ВидРабот, ВидМатериала)
	
	СтруктураОтбораУточнения = Новый Структура("ВидРабот, ВидМатериала", ВидРабот, ВидМатериала);
	СтрокиНастроек = Объект.УточнениеМатериалов.НайтиСтроки(СтруктураОтбораУточнения);
	Возврат ПоместитьВоВременноеХранилище(Объект.УточнениеМатериалов.Выгрузить(СтрокиНастроек), Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
// Получает результаты уточнения номенклатуры.
//
Процедура ПолучитьРезультатУточненияНоменклатуры(АдресНастроекУточненияМатериалов, СтруктураОтбораУточнения)
	
	НастройкиУточненияМатериалов = ПолучитьИзВременногоХранилища(АдресНастроекУточненияМатериалов);
	
	Если ТипЗнч(НастройкиУточненияМатериалов) = Тип("ТаблицаЗначений") Тогда
		
		// 1. Обновим настройки уточнения в ТЧ из полученных настроек.
		Для Каждого ТекСтрокаНастройки Из НастройкиУточненияМатериалов Цикл
			
			// Используем имеющуюся настройку.
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ВидРабот",     СтруктураОтбораУточнения.ВидРабот);
			СтруктураПоиска.Вставить("ВидМатериала", СтруктураОтбораУточнения.ВидМатериала);
			СтруктураПоиска.Вставить("Номенклатура", ТекСтрокаНастройки.Номенклатура);
			
			СтрокиУточнения = Объект.УточнениеМатериалов.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокиУточнения.Количество() > 0 Тогда
				СтрокиУточнения[0].Использовать = ТекСтрокаНастройки.Использовать;
			КонецЕсли;
			
		КонецЦикла;
		
		// 2. Применим новые настройки уточнения в таблице наряд-заказа.
		СтруктураПоискаДействующихНастроек = Новый Структура;
		СтруктураПоискаДействующихНастроек.Вставить("ВидРабот",     СтруктураОтбораУточнения.ВидРабот);
		СтруктураПоискаДействующихНастроек.Вставить("ВидМатериала", СтруктураОтбораУточнения.ВидМатериала);
		СтруктураПоискаДействующихНастроек.Вставить("Использовать", Истина);
		
		СтрокиДействующихУточнений = Объект.УточнениеМатериалов.НайтиСтроки(СтруктураПоискаДействующихНастроек);
		
		// Если есть установленные настройки уточнения, то обновим строки наряд-заказа.
		Если СтрокиДействующихУточнений.Количество() > 0 Тогда
			
			// Удалим имеющиеся строки в наряд заказе.
			СтрокиНарядЗаказаКУдалению = Объект.НарядЗаказ.НайтиСтроки(СтруктураОтбораУточнения);
			Для Каждого ТекСтрокаУдаления Из СтрокиНарядЗаказаКУдалению Цикл
				Объект.НарядЗаказ.Удалить(ТекСтрокаУдаления);
			КонецЦикла;
			
			// Добавим новые уточнения в наряд-заказ.
			Для Каждого ТекСтрокаУточнения Из СтрокиДействующихУточнений Цикл
				
				НоваяСтрока = Объект.НарядЗаказ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаУточнения);
				
				ДополнитьСведенияОНоменклатуре(НоваяСтрока);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ДОКУМЕНТОВ

#Область ФормированиеДокументов

&НаКлиентеНаСервереБезКонтекста
// Возвращает массив видов договоров реализации.
Функция ПолучитьМассивВидовДоговоровРеализации(ВидОперации, ДеятельностьНаПатенте)

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	Если НЕ ВидОперации = 
				ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности")
		И НЕ ДеятельностьНаПатенте Тогда
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	КонецЕсли;

	Возврат СписокВидовДоговоров;

КонецФункции

&НаСервереБезКонтекста
// Устанавливает договор контрагента реализации.
Процедура УстановитьДоговорКонтрагентаРеализации(ДоговорКонтрагента, Контрагент,
													Организация, ВидОперации, ДеятельностьНаПатенте)
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьДоговорКонтрагента(ДоговорКонтрагента,
			Контрагент, Организация, ПолучитьМассивВидовДоговоровРеализации(ВидОперации, ДеятельностьНаПатенте));
	
КонецПроцедуры

&НаСервереБезКонтекста
// Устанавливает банковский счет организации.
Процедура УстановитьБанковскийСчетРеализации(БанковскийСчетОрганизации, Организация, ВалютаДокумента)
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьБанковскийСчет(БанковскийСчетОрганизации, 
														Организация, 
														ВалютаДокумента);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Заполняет счета учетов реализации.
Процедура ЗаполнитьСчетаУчетаРасчетов(Организация, Контрагент, ДоговорКонтрагента, ВидОперации,
				СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам, СпособЗачетаАвансов,
				СчетУчетаРасчетовПоТаре) //, СчетУчетаРасходовПоТаре, СчетУчетаДоходовПоТаре
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		Организация, Контрагент, ДоговорКонтрагента);
	
	Если (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности) Тогда
		СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	Иначе
		СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
		Если (СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически)
			ИЛИ (СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу) Тогда
			СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
		Иначе
			СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	СчетУчетаРасчетовПоТаре      = СчетаУчета.СчетУчетаТарыПокупателя;
	//СчетУчетаРасходовПоТаре      = СчетаУчета.СчетУчетаРасходовПоТаре;
	//СчетУчетаДоходовПоТаре       = СчетаУчета.СчетУчетаДоходовПоТаре;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Возвращает счета учета номенклатуры на сервере.
Функция ПолучитьСчетаУчетаНоменклатурыНаСервере(Организация, Номенклатура)
	
	Возврат УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура);
	
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает виды субконто счета.
Функция ТипСубконтоСчетаДоходовНоменклатурнаяГруппа(СчетУчета)
	
	Если Не СчетУчета.Пустая() Тогда
		
		ВидыСубконтоСчета = СчетУчета.ВидыСубконто;
		
		Если ВидыСубконтоСчета.Количество() > 0 Тогда
			
			Если ТипЗнч(Новый(ВидыСубконтоСчета[0].ВидСубконто.ТипЗначения.Типы()[0])) =
					Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
// Заполняет форму нового документа реализации.
Процедура ВвестиРеализациюТоваровУслуг()
	
	// Вводим новый документ на основании нашего.
	Если Модифицированность Тогда
		ПоказатьПредупреждение(Неопределено, "Необходимо записать заявку перед формирование документов отражения!");
		Возврат;
	КонецЕсли;
	
	ФормаДокумента = ПолучитьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДокументаОбщая", , ЭтаФорма);
	
	ОбъектДокумента = ФормаДокумента.Объект;
	
	// Поскольку объект создаем из формы, вид операции установим как в объекте, так и в форме -
	// реквизиту "ВидОперацииПриОткрытии" - он необходим для корректного срабатывания проверок при записи документа.
	ОбъектДокумента.ВидОперации           = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ПродажаКомиссия");
	ФормаДокумента.ВидОперацииПриОткрытии = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ПродажаКомиссия");
	
	ОбъектДокумента.Организация = Объект.Организация;
	
	Если Объект.ВидОперации = 
			ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоЛицевомуСчету")Тогда
		ОбъектДокумента.Контрагент = 
			УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(Объект.ЛицевойСчет, Объект.Организация,
																							Объект.Дата, "Контрагент");
		УстановитьДоговорКонтрагентаРеализации(ОбъектДокумента.ДоговорКонтрагента, ОбъектДокумента.Контрагент,
												ОбъектДокумента.Организация, ОбъектДокумента.ВидОперации, ОбъектДокумента.ДеятельностьНаПатенте);
	КонецЕсли;

	ОбъектДокумента.Склад = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	
	ОбъектДокумента.ВалютаДокумента         = Объект.ВалютаДокумента;
	ОбъектДокумента.КурсВзаиморасчетов      = 1;
	ОбъектДокумента.КратностьВзаиморасчетов = 1;
	
	ОбъектДокумента.ТипЦен           = Объект.ТипЦен;
	ОбъектДокумента.СуммаВключаетНДС = Объект.СуммаВключаетНДС;
	ОбъектДокумента.ДокументБезНДС   = Ложь;
	РеализацияТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(ФормаДокумента);
	
	ОбъектДокумента.Комментарий   = "Введен на основании документа " + Строка(Объект.Ссылка);
	
	УстановитьБанковскийСчетРеализации(ОбъектДокумента.БанковскийСчетОрганизации, 
										Объект.Организация, 
										Объект.ВалютаДокумента);
	
	ЗаполнитьСчетаУчетаРасчетов(ОбъектДокумента.Организация, ОбъектДокумента.Контрагент,
								ОбъектДокумента.ДоговорКонтрагента, ОбъектДокумента.ВидОперации,
								ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом, ОбъектДокумента.СчетУчетаРасчетовПоАвансам,
								ОбъектДокумента.СпособЗачетаАвансов, ОбъектДокумента.СчетУчетаРасчетовПоТаре);
	

	// Табличная часть документа.
	Для Каждого ТекСтрока Из Объект.НарядЗаказ Цикл
		
		Если ТекСтрока.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоУслуга = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "Услуга");
		Если ЭтоУслуга = Истина Тогда
			НоваяСтрока = ОбъектДокумента.Услуги.Добавить();
			
			ПолноеНаименованиеНоменклатуры =
				УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "НаименованиеПолное");
			
			Если ПустаяСтрока(ПолноеНаименованиеНоменклатуры) Тогда
				НоваяСтрока.Содержание = ТекСтрока.Номенклатура.Наименование;
			Иначе
				НоваяСтрока.Содержание = ПолноеНаименованиеНоменклатуры;
			КонецЕсли;
			ИмяТабличнойЧасти = "Услуги";
		Иначе
			НоваяСтрока = ОбъектДокумента.Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
			ИмяТабличнойЧасти = "Товары";
		КонецЕсли;
		
		НоваяСтрока.Номенклатура         = ТекСтрока.Номенклатура;
		НоваяСтрока.СтавкаНДС            = ТекСтрока.СтавкаНДС;
		НоваяСтрока.Количество           = ТекСтрока.Количество;
		НоваяСтрока.Цена                 = ТекСтрока.Цена;
		НоваяСтрока.Сумма                = ТекСтрока.Сумма;
		НоваяСтрока.СуммаНДС             = УПЖКХ_ТиповыеМетодыКлиентСервер.РассчитатьСуммуНДС(НоваяСтрока.Сумма,
										  Объект.СуммаВключаетНДС, 
										  УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		НоваяСтрока.Всего                = НоваяСтрока.Сумма + ?(ОбъектДокумента.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
		
		// счета учета номенклатуры
		СчетаУчета = ПолучитьСчетаУчетаНоменклатурыНаСервере(Объект.Организация, НоваяСтрока.Номенклатура);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СчетаУчета);
		НоваяСтрока.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСпродажи;
		
		Если ТипСубконтоСчетаДоходовНоменклатурнаяГруппа(НоваяСтрока.СчетДоходов) Тогда
			
			НоваяСтрока.Субконто = 
				УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(НоваяСтрока.Номенклатура, "НоменклатурнаяГруппа");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ФормаДокумента.ИтогиВсего    = ОбъектДокумента.Товары.Итог("Всего");
	ФормаДокумента.ИтогиВсегоНДС = ОбъектДокумента.Товары.Итог("СуммаНДС");
	
	Если НЕ ФормаДокумента.ЭтоОтгрузка Тогда
		ФормаДокумента.ИтогиВсего = ФормаДокумента.ИтогиВсего
			+ ОбъектДокумента.Услуги.Итог("Всего");
		ФормаДокумента.ИтогиВсегоНДС = ФормаДокумента.ИтогиВсегоНДС
			+ ОбъектДокумента.Услуги.Итог("СуммаНДС");
	КонецЕсли;
	
	// Откроем форму для редактирования
	ФормаДокумента.Модифицированность = Истина;
	ФормаДокумента.Открыть();
	
КонецПроцедуры // ВвестиРеализациюТоваровУслуг()

&НаКлиенте
// Заполняет форму нового документа требования-накладной.
Процедура ВвестиТребованиеНакладную()
	
	// Вводим новый документ на основании нашего.
	Если Модифицированность Тогда
		ПоказатьПредупреждение(Неопределено, "Необходимо записать заявку перед формирование документов отражения!");
		Возврат;
	КонецЕсли;
	
	// Заполнение требования-накладной выполняется в обработке заполнения документа.
	// Для этого передаем ссылку на заявку в служебном параметре.
	СтруктураЗаполнения = Новый Структура("ОснованиеЗаполнения", Объект.Ссылка);
	ОткрытьФорму("Документ.ТребованиеНакладная.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", СтруктураЗаполнения), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ТипДокумента = ТипЗнч(Источник);
	
	Если ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Объект.РеализацияТоваровУслуг = Источник;
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		ЗаполнитьТекстПроРеализациюТоваровУслуг();

	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		Объект.ТребованиеНакладная = Источник;
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		ЗаполнитьТекстПроТребованиеНакладную();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция формирует документы оказания производственных услуг по заявке
// и возвращает массив ссылок сформированных документов.
//
Функция СформироватьДокументыОказанияПроизводственныхУслугНаСервере(Заявка)
	
	// Возвращаемое значение.
	МассивСформированныхДокументов = Новый Массив;
	
	// Получение данных для заполнения реквизитов документа.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Заявка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЗаявкаНаВыполнениеРабот.Ссылка КАК СсылкаНаЗаявку,
	|	ПРЕДСТАВЛЕНИЕ(КВП_ЗаявкаНаВыполнениеРабот.Ссылка) КАК ПредставлениеСсылки,
	|	КВП_ЗаявкаНаВыполнениеРабот.Дата КАК Дата,
	|	КВП_ЗаявкаНаВыполнениеРабот.ВремяФактическогоОкончанияРабот КАК ВремяФактическогоОкончанияРабот,
	|	КВП_ЗаявкаНаВыполнениеРабот.Организация КАК Организация,
	|	КВП_ЗаявкаНаВыполнениеРабот.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ЗаявкаНаВыполнениеРабот.ТипЦен КАК ТипЦен,
	|	КВП_ЗаявкаНаВыполнениеРабот.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	КВП_ЗаявкаНаВыполнениеРабот.ОтветственныйЗаВыполнение КАК ОтветственныйЗаВыполнение
	|ИЗ
	|	Документ.КВП_ЗаявкаНаВыполнениеРабот КАК КВП_ЗаявкаНаВыполнениеРабот
	|ГДЕ
	|	КВП_ЗаявкаНаВыполнениеРабот.Ссылка = &Ссылка";
	
	// Реквизиты шапки заявки.
	РеквизитыЗаявкиАДС = Запрос.Выполнить().Выбрать();
	РеквизитыЗаявкиАДС.Следующий();
	
	// Получение реквизитов покупателя услуг.
	КонтрагентВзаиморасчетов = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(РеквизитыЗаявкиАДС.ЛицевойСчет, РеквизитыЗаявкиАДС.Организация,
																												РеквизитыЗаявкиАДС.Дата, "Контрагент");
	ДоговорВзаиморасчетов    = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(РеквизитыЗаявкиАДС.ЛицевойСчет, РеквизитыЗаявкиАДС.Организация,
																												РеквизитыЗаявкиАДС.Дата, "Договор");
	
	ОтветственныйМастер = УПЖКХ_ТиповыеМетодыВызовСервера.ДанныеФизЛица(РеквизитыЗаявкиАДС.Организация, РеквизитыЗаявкиАДС.ОтветственныйЗаВыполнение, РеквизитыЗаявкиАДС.Дата);
	
	// Получение данных для заполнения таблицы услуг документа.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ЗаявкаНаВыполнениеРаботРаботы.ВидРабот.НоменклатураРабот.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	КВП_ЗаявкаНаВыполнениеРаботРаботы.ВидРабот.НоменклатураРабот КАК Номенклатура,
	|	СУММА(КВП_ЗаявкаНаВыполнениеРаботРаботы.ОбъемПлан) КАК Количество
	|ИЗ
	|	Документ.КВП_ЗаявкаНаВыполнениеРабот.Работы КАК КВП_ЗаявкаНаВыполнениеРаботРаботы
	|ГДЕ
	|	КВП_ЗаявкаНаВыполнениеРаботРаботы.Ссылка = &Ссылка
	|	И КВП_ЗаявкаНаВыполнениеРаботРаботы.Выполнена
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ЗаявкаНаВыполнениеРаботРаботы.ВидРабот.НоменклатураРабот,
	|	КВП_ЗаявкаНаВыполнениеРаботРаботы.ВидРабот.НоменклатураРабот.НоменклатурнаяГруппа
	|ИТОГИ ПО
	|	НоменклатурнаяГруппа";
	
	ВыборкаНоменклатурныхГрупп = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатурныхГрупп.Следующий() Цикл
		
		// Для каждой номенклатурной группы формируем один документ.
		ДокументОказанияУслуг = Документы.АктОбОказанииПроизводственныхУслуг.СоздатьДокумент();
		
		// Заполнение реквизитов шапки документа.
		ЗаполнитьЗначенияСвойств(ДокументОказанияУслуг, РеквизитыЗаявкиАДС);
		
		ДокументОказанияУслуг.Дата                 = РеквизитыЗаявкиАДС.ВремяФактическогоОкончанияРабот;
		ДокументОказанияУслуг.Контрагент           = КонтрагентВзаиморасчетов;
		ДокументОказанияУслуг.ДоговорКонтрагента   = ДоговорВзаиморасчетов;
		ДокументОказанияУслуг.НоменклатурнаяГруппа = ВыборкаНоменклатурныхГрупп.НоменклатурнаяГруппа;
		ДокументОказанияУслуг.Комментарий          = "Введен на основании документа " + РеквизитыЗаявкиАДС.ПредставлениеСсылки;
		
		// Фрагмент типового механизма заполнения данных в строке услуг документа.
		ДанныеОбъекта = Новый Структура("Дата, Организация, ДеятельностьНаПатенте, ТипЦенПлановойСебестоимости, Реализация, ТипЦен, СуммаВключаетНДС");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ДокументОказанияУслуг);
		ДанныеОбъекта.ТипЦенПлановойСебестоимости = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
		ДанныеОбъекта.Реализация = Истина;
		Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
			ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
		КонецЕсли;
		ДанныеОбъекта.Вставить("СпособЗаполненияПлановойСебестоимости", Перечисления.СпособыЗаполненияЦен.ПоПлановымЦенам);
		
		// Обход услуг по текущей номенклатурной группе.
		ВыборкаУслуг = ВыборкаНоменклатурныхГрупп.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаУслуг.Следующий() Цикл
			
			// Добавление и заполнение новой строки услуги.
			НоваяСтрокаУслуги = ДокументОказанияУслуг.Услуги.Добавить();
			НоваяСтрокаУслуги.Номенклатура = ВыборкаУслуг.Номенклатура;
			НоваяСтрокаУслуги.Количество   = ВыборкаУслуг.Количество;
			
			// Типовое получение сведений о номенклатуре и заполнение данных в строке.
			
			СведенияОНоменклатуре = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСведенияОНоменклатуре(НоваяСтрокаУслуги.Номенклатура, ДанныеОбъекта);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаУслуги.Цена                 = СведенияОНоменклатуре.Цена;
			НоваяСтрокаУслуги.СтавкаНДС            = СведенияОНоменклатуре.СтавкаНДС;
			НоваяСтрокаУслуги.ПлановаяСтоимость    = СведенияОНоменклатуре.ПлановаяСтоимость;
			НоваяСтрокаУслуги.НоменклатурнаяГруппа = СведенияОНоменклатуре.НоменклатурнаяГруппа;
			НоваяСтрокаУслуги.Спецификация         = СведенияОНоменклатуре.ОсновнаяСпецификацияНоменклатуры;
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрокаУслуги, 1);
			УПЖКХ_ТиповыеМетодыКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаУслуги, ДанныеОбъекта.СуммаВключаетНДС);
			УПЖКХ_ТиповыеМетодыКлиентСервер.ПересчитатьПлановуюСумму(НоваяСтрокаУслуги, 1);
			
			Документы.АктОбОказанииПроизводственныхУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
				ДокументОказанияУслуг, НоваяСтрокаУслуги, "Услуги", СведенияОНоменклатуре);
			
		КонецЦикла;
		
		// Заполнение подразделения затрат подразделением организации, в котором ответственный мастер
		// является сотрудником по виду занятости "Основное место работы".
		Если Не ОтветственныйМастер.ПодразделениеОрганизации = Неопределено Тогда
			ДокументОказанияУслуг.ПодразделениеЗатрат = ОтветственныйМастер.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Типовое заполнение реквизитов документа.
		ДокументОказанияУслуг.Заполнить(Неопределено);
		
		// Дополнительно заполним признаки включения НДС в стоимость и тип цены,
		// так как данные параметры могут быть сброшены при типовом заполнении документа.
		ДокументОказанияУслуг.ТипЦен           = РеквизитыЗаявкиАДС.ТипЦен;
		ДокументОказанияУслуг.СуммаВключаетНДС = РеквизитыЗаявкиАДС.СуммаВключаетНДС;
		
		// Запишем документ, чтобы получить ссылку на него.
		Если КВП_ЗаписатьОбъект(ДокументОказанияУслуг, РежимЗаписиДокумента.Запись) Тогда
			
			МассивСформированныхДокументов.Добавить(ДокументОказанияУслуг.Ссылка);
			// Если какие-то обязательные реквизиты не заполнены, то оставим документ без проведения, иначе проведем его.
			// Типовой механизм проверки заполнения выведет сообщения о незаполненных полях.
			Если НЕ ДокументОказанияУслуг.ПроверитьЗаполнение() Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не удалось провести документ оказания производственных услуг """ + ДокументОказанияУслуг.Ссылка + """, т.к. не заполнены обязательные реквизиты!", ДокументОказанияУслуг.Ссылка);
			Иначе
				КВП_ЗаписатьОбъект(ДокументОказанияУслуг, РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось сформировать документ оказания производственных услуг по номенклатурной группе """ + ВыборкаНоменклатурныхГрупп.НоменклатурнаяГруппа + """!");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивСформированныхДокументов;
	
КонецФункции

&НаСервере
// Функция возвращает "Истина", если требуемые данные по видам работ заполнены, иначе возвращает "Ложь".
Функция ТребуемыеДанныеПоВидамРаботЗаполнены()
	
	Результат = Истина;
	
	Для Каждого Работа Из Объект.Работы Цикл
		
		Если НЕ ЗначениеЗаполнено(Работа.ВидРабот.НоменклатураРабот) Тогда
			Результат = Ложь;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("У вида работ " + Работа.ВидРабот + " не заполнена номенклатура работ.", Работа.ВидРабот);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ТребуемыеДанныеПоВидамРаботЗаполнены()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
	ПолучитьФункциональныеОпцииФормы();
	
	// Перезаполним гиперссылки, так как в случае установки пометки на удаление текст гиперссылок должен меняться.
	ЗаполнитьТекстПроРеализациюТоваровУслуг();
	ЗаполнитьТекстПроТребованиеНакладную();
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Устанавливаем значение по умолчанию.
	Если Объект.Ссылка.Пустая() Тогда
		
		Если Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект, УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
			
			Объект.Приоритет                 = Перечисления.КВП_ВидыПриоритетовВыполненияРабот.Средний;
			Объект.КатегорияВыполняемыхРабот = Справочники.УПЖКХ_КатегорииРабот.ТекущийРемонт;
			Объект.ВремяУдобноеДляЗаказчика  = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
			
		КонецЕсли;
		
		Объект.СтатусВыполнения = Перечисления.КВП_ВидыСтатусовВыполненияРабот.НоваяЗаявка;
		Объект.ВалютаДокумента  = Константы.ВалютаРегламентированногоУчета.Получить();
		
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
		
		ЗаполнитьТекстПроТребованиеНакладную();
		ЗаполнитьТекстПроРеализациюТоваровУслуг();
		
		ПолучитьФункциональныеОпцииФормы();
		
	КонецЕсли;
	
	УстановитьСвязиПараметровВыбораПомещенияНаСервере();
	
	Если Объект.ВремяУдобноеДляЗаказчикаОкончаниеРабот = Дата(1,1,1) Тогда
		Объект.ВремяУдобноеДляЗаказчикаОкончаниеРабот = Объект.ВремяУдобноеДляЗаказчика;
	КонецЕсли;
	
	мВидРабот = Справочники.КВП_ВидыРабот.ПустаяСсылка();
	
	ЭтоПовторноеОбращение = Не Объект.ПервичноеОбращение.Пустая();
	
	// Установить видимость реквизитов и заголовков колонок.
	УправлениеФормой(ЭтаФорма);
	УправлениеВидимостьюЭлементовФормы(ЭтаФорма);
	
	// Установим свойства поля выбора лицевого счета.
	УстановитьПараметрыСвязиПоляВыбораЛицевогоСчетаНаСервере();
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ВывестиСуммуДолгаПоЛС();
	ЗаполнитьСтрокуСводныхТрудозатрат();
	
	// Установим начальную страницу заявки.
	Если Объект.Работы.Количество() = 0 Тогда
		ТекущаяСтраница = Элементы.СтраницаОсновныеСведения;
	ИначеЕсли Объект.НарядЗаказ.Количество() = 0 Тогда
		ТекущаяСтраница = Элементы.СтраницаОборудованияИРабот;
	ИначеЕсли Объект.СтатусВыполнения = ПредопределенноеЗначение("Перечисление.КВП_ВидыСтатусовВыполненияРабот.НоваяЗаявка")
		  Или Объект.СтатусВыполнения = ПредопределенноеЗначение("Перечисление.КВП_ВидыСтатусовВыполненияРабот.Принята") Тогда
		ТекущаяСтраница = Элементы.СтраницаНарядЗаказ;
	Иначе
		ТекущаяСтраница = Элементы.СтраницаВыполнение;
	КонецЕсли;
	Элементы.ОсновнаяПанель.ТекущаяСтраница = ТекущаяСтраница;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриЗакрытии" формы.
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// Здесь необходимо всегда принудительно выполнять отключение пессимистической
	// объектной блокировки, так как в некоторых случаях документ может блокироваться
	// текущим сеансом, после чего он становится заблокированным, даже если форма уже закрыта.
	// Проблема возникает в следующей ситуации:
	// 1. Пользователь открыл документ, заполнил таблицу "Признаки неисправности"
	// через команду "Заполнить", когда таблица была не пуста.
	// 2. Пользователь закрыл документ без сохранения (или с сохранением).
	// 3. Пользователь открыл документ заново и просто записывает его, в этом момент
	// возникает сообщении о том, что документ уже редактируется.
	// В итоге проблема пока решена текущим способом.
	Если Не ЗавершениеРаботы Тогда
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	КонтактноеЛицоЗаполнено = ЗначениеЗаполнено(Объект.КонтактноеЛицоЛицевогоСчета) ИЛИ Не ПустаяСтрока(Объект.Удалить_КонтактноеЛицо);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоЛицевомуСчету") И Не КонтактноеЛицоЗаполнено Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указано контактное лицо!", Отказ);
	КонецЕсли;
	
	Если ЭтоПовторноеОбращение И Объект.ПервичноеОбращение.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указано первичное обращение!", Отказ);
	КонецЕсли;
	
	ДатаДляСравнения = Объект.ВремяУдобноеДляЗаказчика;
	Если Не Объект.ВремяУдобноеДляЗаказчикаОкончаниеРабот = Дата(1,1,1) Тогда
		ДатаДляСравнения = Объект.ВремяУдобноеДляЗаказчикаОкончаниеРабот;
	КонецЕсли;
	Если Объект.СтатусВыполнения = ПредопределенноеЗначение("Перечисление.КВП_ВидыСтатусовВыполненияРабот.Выполнено")
	 И Объект.ВремяФактическогоОкончанияРабот > ДатаДляСравнения Тогда
		Объект.Просрочена = Истина;
	Иначе
		Объект.Просрочена = Ложь;
	КонецЕсли;
	
	Если Объект.ВидОперации = 
	  ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоДому") 
	  И ЗначениеЗаполнено(Объект.ЛицевойСчет) Тогда
		Объект.ЛицевойСчет                 = ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка");
		Объект.Помещение                   = ПредопределенноеЗначение("Справочник.УПЖКХ_Помещения.ПустаяСсылка");
		Объект.Телефон                     = "";
		Объект.ДоговорКонтрагента          = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		Объект.КонтактноеЛицоЛицевогоСчета = ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПослеЗаписи" формы.
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	ПолучитьФункциональныеОпцииФормы();
	
	Если ПлательщикНДС Тогда
		Объект.ДокументБезНДС = Ложь;
	КонецЕсли;
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
	ВывестиСуммуДолгаПоЛС();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидОперации".
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоДому") Тогда
		Объект.Помещение          = "";
		Объект.ЛицевойСчет        = "";
		Объект.ДоговорКонтрагента = "";
	Иначе
		Объект.ВключатьОборудованиеУстановленноеНаПодчиненныеОбъекты = Ложь;
	КонецЕсли;
	
	УправлениеВидимостьюЭлементовФормы(ЭтаФорма);
	ОбновитьАдресЗаявки();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПолучитьФункциональныеОпцииФормы();
	
	Если ПлательщикНДС Тогда
		Объект.ДокументБезНДС = Ложь;
	КонецЕсли;
	
	ВывестиСуммуДолгаПоЛС();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Здание".
Процедура ЗданиеПриИзменении(Элемент)
	
	Если Не Объект.Здание.Пустая() И Не Объект.Здание = мЗдание Тогда
		Объект.Подъезд            = "";
		Объект.Помещение          = "";
		Объект.ЛицевойСчет        = "";
		Объект.ДоговорКонтрагента = "";
	КонецЕсли;
	
	ОбновитьАдресЗаявки();
	
	УстановитьСвязиПараметровВыбораПомещенияНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Здание".
Процедура ЗданиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мЗдание = Объект.Здание;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "При изменении" реквизита "Подъезд"
//
Процедура ПодъездПриИзменении(Элемент)
	
	Если Не Объект.Подъезд.Пустая() И Не Объект.Подъезд = мПодъезд Тогда
		Объект.Помещение          = "";
		Объект.ЛицевойСчет        = "";
		Объект.ДоговорКонтрагента = "";
	КонецЕсли;
	
	УстановитьСвязиПараметровВыбораПомещенияНаСервере();
	ОбновитьАдресЗаявки();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" реквизита "Подъезд"
//
Процедура ПодъездНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мПодъезд = Объект.Подъезд;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "При изменении" реквизита "Помещение."
//
Процедура ПомещениеПриИзменении(Элемент)
	
	Если Не Объект.Помещение.Пустая() И Не Объект.Помещение = мПомещение Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Здание) Тогда
			Объект.Здание = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Помещение, "Владелец")
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Подъезд) Тогда
			Объект.Подъезд = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Помещение, "Подъезд");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ЛицевойСчет) Тогда
			Объект.ЛицевойСчет        = "";
			Объект.ДоговорКонтрагента = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Объект.Помещение.Пустая() Тогда
		
		МассивЛицевыхСчетов = ПолучитьМассивЛС(Объект.Помещение, Объект.Дата, "Помещение");
		Если МассивЛицевыхСчетов.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В выбранном помещении нет открытых лицевых счетов.");
		ИначеЕсли МассивЛицевыхСчетов.Количество() = 1 Тогда
			Элементы.ЛицевойСчет.РежимВыбораИзСписка = Ложь;
			Элементы.ЛицевойСчет.КнопкаВыбора        = Истина;
			Объект.ЛицевойСчет = МассивЛицевыхСчетов[0];
			ЛицевойСчетПриИзменении(Элементы.ЛицевойСчет);
		Иначе
			Элементы.ЛицевойСчет.СписокВыбора.Очистить();
			Элементы.ЛицевойСчет.РежимВыбораИзСписка = Истина;
			Элементы.ЛицевойСчет.КнопкаВыбора        = Ложь;
			Для Каждого ЛицевойСчет Из МассивЛицевыхСчетов Цикл
				Элементы.ЛицевойСчет.СписокВыбора.Добавить(ЛицевойСчет);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьАдресЗаявки();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" реквизита "Помещение".
//
Процедура ПомещениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мПомещение = Объект.Помещение;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ЛицевойСчет".
Процедура ЛицевойСчетПриИзменении(Элемент)
	
	Если Не Объект.ЛицевойСчет.Пустая() И Не Объект.ЛицевойСчет = мЛицевойСчет Тогда
		
		Помещение = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ЛицевойСчет, "Адрес");
		
		Если Не ЗначениеЗаполнено(Объект.Помещение) Тогда
			Объект.Помещение = Помещение;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Здание) Тогда
			Объект.Здание = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Помещение, "Владелец")
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Подъезд) Тогда
			Объект.Подъезд = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Помещение, "Подъезд");
		КонецЕсли;
		
		// Заполнение договора взаиморасчетов.
		Объект.ДоговорКонтрагента = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(Объект.ЛицевойСчет, Объект.Организация,
																													Объект.Дата, "Договор");
		
		// Заполнение контактного лица.
		Объект.КонтактноеЛицоЛицевогоСчета = ПолучитьКонтактноеЛицоПоЛицевомуСчетуНаСервере(Объект.ЛицевойСчет, Объект.Дата);
		
	КонецЕсли;
	
	ОбновитьАдресЗаявки();
	ОбновитьТелефонКонтактногоЛица();
	
	ВывестиСуммуДолгаПоЛС();
	
	УстановитьПараметрыСвязиПоляВыбораЛицевогоСчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" реквизита "ЛицевойСчет".
Процедура ЛицевойСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мЛицевойСчет = Объект.ЛицевойСчет;
	Если Объект.Помещение.Пустая() Тогда
		
		Если Не Объект.Подъезд.Пустая() Тогда
			МассивЛицевыхСчетов = ПолучитьМассивЛС(Объект.Подъезд, Объект.Дата, "Подъезд");
		ИначеЕсли ЗначениеЗаполнено(Объект.Здание) Тогда
			МассивЛицевыхСчетов = ПолучитьМассивЛС(Объект.Здание, Объект.Дата, "Здание");
		КонецЕсли;
		
		Если Не МассивЛицевыхСчетов = Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			
			ЗначениеОтбора = Новый Структура("Ссылка", МассивЛицевыхСчетов);
			ПараметрыОткрытия = Новый Структура("РежимВыбора, ВыборГруппИЭлементов, ИерархическийПросмотр, Отбор", Истина, Ложь, Ложь, ЗначениеОтбора);
			
			ОткрытьФорму("Справочник.КВП_ЛицевыеСчета.Форма.ФормаВыбора", ПараметрыОткрытия, Элемент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" реквизитов формы.
Процедура РеквизитОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ЛицевойСчет                 = "";
	Объект.КонтактноеЛицоЛицевогоСчета = "";
	ДолгПоТекущемуЛС                   = "";
	Объект.ДоговорКонтрагента          = "";
	
	Если Элемент.Имя = "Подъезд" Тогда
		Объект.Помещение = "";
	ИначеЕсли Элемент.Имя = "Здание" Тогда
		Объект.Подъезд   = "";
		Объект.Помещение = "";
	КонецЕсли;
	
	ОбновитьАдресЗаявки();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Нажатие" поля "ГиперссылкаРеализацияТоваровУслуг".
Процедура ГиперссылкаРеализацияТоваровУслугНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если (Объект.ПометкаУдаления) И Не ЗначениеЗаполнено(Объект.РеализацияТоваровУслуг) Тогда
		ПоказатьПредупреждение(Неопределено, "Реализацию товаров и услуг нельзя вводить на основании документа, помеченного на удаление.");
		Возврат;
	КонецЕсли;
	
	Если Объект.РеализацияТоваровУслуг.Пустая() Тогда
		ВвестиРеализациюТоваровУслуг();
	Иначе
		ПоказатьЗначение(Неопределено, Объект.РеализацияТоваровУслуг);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Нажатие" поля "ГиперссылкаТребованиеНакладная".
Процедура ГиперссылкаТребованиеНакладнаяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если (Объект.ПометкаУдаления) И Не ЗначениеЗаполнено(Объект.ТребованиеНакладная) Тогда
		ПоказатьПредупреждение(Неопределено, "Требование-накладную нельзя вводить на основании документа, помеченного на удаление");
		Возврат;
	КонецЕсли;

	Если Объект.ТребованиеНакладная.Пустая() Тогда
		ВвестиТребованиеНакладную();
	Иначе
		ПоказатьЗначение(Неопределено, Объект.ТребованиеНакладная);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "КонтактноеЛицо".
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	ОбновитьТелефонКонтактногоЛица();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// Закладка "Основные сведения".

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ОтветственныйЗаВыполнение".
Процедура ОтветственныйЗаВыполнениеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ОтветственныйЗаВыполнение) Тогда
		
		Объект.СтатусВыполнения = ПредопределенноеЗначение("Перечисление.КВП_ВидыСтатусовВыполненияРабот.Принята");
		
		// Если ответственный за выполнение указан, а тип цен продажи материалов
		// не заполнен, то попробуем заполнить тип цены продажи из склада
		// за которым ответственен мастер. Выполняется при условии исользования
		// типов цен номенклатуры.
		Если Объект.ТипЦен.Пустая() И ИспользоватьТипыЦенНоменклатуры Тогда
			
			ТипЦенПродажи = ПолучитьТипЦеныПродажиСкладаМастераНаСервере(Объект.Дата, Объект.ОтветственныйЗаВыполнение);
			
			Если ЗначениеЗаполнено(ТипЦенПродажи) Тогда
				
				// Обновим тип цен в реквизите документа.
				Объект.ТипЦен = ТипЦенПродажи;
				
				// Пересчитаем суммы в строках наряд-заказа.
				ПересчитатьСуммыНарядЗаказаПриИзмененииОтветственного();
				
				// Обновим и итоги и представление настроек цены и валюты.
				ОбновитьИтоги(ЭтаФорма);
				СформироватьНадписьЦеныИВалюта(ЭтаФорма);
				
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Тип цены продажи заполнен в соответствии с настройками склада ответственного мастера.
																	 |Суммы в наряд-заказе пересчитаны автоматически.");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ЭтоПовторноеОбращение".
Процедура ЭтоПовторноеОбращениеПриИзменении(Элемент)
	
	Если Не ЭтоПовторноеОбращение Тогда
		Объект.ПервичноеОбращение = ПредопределенноеЗначение("Документ.КВП_ЗаявкаНаВыполнениеРабот.ПустаяСсылка");
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПервичноеОбращение".
Процедура ПервичноеОбращениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Создаем массив наименований всех возможных отборов.
	МассивПараметровОтбора = Новый Массив;
	МассивПараметровОтбора.Добавить("ВидОперации");
	МассивПараметровОтбора.Добавить("КатегорияВыполняемыхРабот");
	МассивПараметровОтбора.Добавить("Здание");
	МассивПараметровОтбора.Добавить("Подъезд");
	МассивПараметровОтбора.Добавить("Помещение");
	МассивПараметровОтбора.Добавить("ЛицевойСчет");
	
	// Записываем в структуру только те отборы, которые заполнены.
	СтруктураПараметровОтбора = Новый Структура;
	
	Для Каждого ЭлементОтбора Из МассивПараметровОтбора Цикл
		Если ЗначениеЗаполнено(Объект[ЭлементОтбора]) Тогда
			СтруктураПараметровОтбора.Вставить(ЭлементОтбора, Объект[ЭлементОтбора]);
		КонецЕсли;
	КонецЦикла;
	
	// Получаем форму, устанавливаем отборы и открываем.
	ПараметрыОткрытия = Новый Структура("РежимВыбора, Отбор", Истина, СтруктураПараметровОтбора);
	ФормаВыбора = ПолучитьФорму("ЖурналДокументов.КВП_ЗаявкиНаВыполнениеРабот.Форма.ФормаСписка", ПараметрыОткрытия, Элемент);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПервичноеОбращение".
Процедура ПервичноеОбращениеПриИзменении(Элемент)
	
	Если Объект.ПервичноеОбращение = Объект.Ссылка Тогда
		
		Объект.ПервичноеОбращение = ПредопределенноеЗначение("Документ.КВП_ЗаявкаНаВыполнениеРабот.ПустаяСсылка");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В качестве первичного обращения нельзя указывать текущий документ!");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Телефон".
Процедура ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокНомеровТелефоновКонтактногоЛица = ПолучитьСписокНомеровТелефоновКонтактногоЛица(Объект.ЛицевойСчет, Объект.КонтактноеЛицоЛицевогоСчета);
	НачальноеЗначение = СписокНомеровТелефоновКонтактногоЛица.НайтиПоЗначению(Объект.Телефон);
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ОбработатьВыборТелефона", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзСписка(ОповещениеОВыборе, СписокНомеровТелефоновКонтактногоЛица, Элемент, НачальноеЗначение);
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет заполнение реквизита "Телефон" выбранным из списка значением.
//
Процедура ОбработатьВыборТелефона(РезультатВыбора, ДопПараметры) Экспорт
	
	Если Не РезультатВыбора = Неопределено Тогда
		Объект.Телефон = РезультатВыбора.Значение;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборТелефона()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "ВремяУдобноеДляЗаказчика".
//
Процедура ВремяУдобноеДляЗаказчикаПриИзменении(Элемент)
	
	ОбработатьИзменениеДатыВремениУдобногоДляЗаказчика();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "ВремяУдобноеДляЗаказчикаОкончаниеРабот".
//
Процедура ВремяУдобноеДляЗаказчикаОкончаниеРаботПриИзменении(Элемент)
	
	ОбработатьИзменениеДатыВремениУдобногоДляЗаказчика(Истина);
	
КонецПроцедуры

&НаКлиенте
// Проверяет, не указана ли дата окончания работ ранее, чем дата начала работ.
//
Процедура ОбработатьИзменениеДатыВремениУдобногоДляЗаказчика(ПоказатьСообщение = Ложь)
	
	Если (Объект.ВремяУдобноеДляЗаказчика = Дата(1,1,1)
		ИЛИ Объект.ВремяУдобноеДляЗаказчика > Объект.ВремяУдобноеДляЗаказчикаОкончаниеРабот)
		И Не Объект.ВремяУдобноеДляЗаказчикаОкончаниеРабот = Дата(1,1,1) Тогда
		
		Если ПоказатьСообщение Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Время начала работ не может быть больше времени окончания работ!");
		КонецЕсли;
		Объект.ВремяУдобноеДляЗаказчикаОкончаниеРабот = Объект.ВремяУдобноеДляЗаказчика;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры // ОбработатьИзменениеДатыВремениУдобногоДляЗаказчика()

//////////////////////////////////////////////////////////////////////////////
// Закладка "Оборудование и работы".

&НаКлиенте
// Обработчик события "ПриИзменении" поля "РаботыВидРабот".
Процедура РаботыВидРаботПриИзменении(Элемент)
	
	ТекСтрокаТабЧасти = Элементы.Работы.ТекущиеДанные;
	ТекСтрокаТабЧасти.НормаТруда = 
		УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекСтрокаТабЧасти.ВидРабот, "НормаТрудаРабочих");
	
	РассчитатьСтрокуТабЧастиРаботы(ТекСтрокаТабЧасти);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "РаботыОбъемПлан".
Процедура РаботыОбъемПланПриИзменении(Элемент)
	
	ТекСтрокаТабЧасти = Элементы.Работы.ТекущиеДанные;
	РассчитатьСтрокуТабЧастиРаботы(ТекСтрокаТабЧасти);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "РаботыОбъемФакт".
Процедура РаботыВремяПланПриИзменении(Элемент)
	
	ТекСтрокаТабЧасти = Элементы.Работы.ТекущиеДанные;
	Если Не ТекСтрокаТабЧасти.НормаТруда = 0 Тогда
		ТекСтрокаТабЧасти.ОбъемПлан = ТекСтрокаТабЧасти.ВремяПлан / ТекСтрокаТабЧасти.НормаТруда;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "РаботыОбъемФакт".
Процедура РаботыОбъемФактПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		УстановитьПризнакВыполненияРаботыВСтрокеТаблицыРабот(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "РаботыВремяФакт".
Процедура РаботыВремяФактПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		УстановитьПризнакВыполненияРаботыВСтрокеТаблицыРабот(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает признак выполнения работы в строке таблицы "Работы".
//
Процедура УстановитьПризнакВыполненияРаботыВСтрокеТаблицыРабот(ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Признак выполнения работы по фактическим данным.
	РаботаВыполненаПоФакту = (Не ДанныеСтроки.ОбъемФакт = 0 И Не ДанныеСтроки.ВремяФакт = 0);
	
	// Установим признак выполнения работы, если заполнены
	// фактические объем и время выполнения работ.
	Если РаботаВыполненаПоФакту И Не ДанныеСтроки.Выполнена Тогда
		ДанныеСтроки.Выполнена = Истина;
	КонецЕсли;
	
	// Сбросим признак выполнения работы, если заполнены
	// фактические объем и время выполнения работ.
	Если Не РаботаВыполненаПоФакту И ДанныеСтроки.Выполнена Тогда
		ДанныеСтроки.Выполнена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "РаботыВремяФакт".
Процедура РаботыВыполненаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено
	   И ТекущиеДанные.Выполнена
	   И (ТекущиеДанные.ОбъемФакт = 0 Или ТекущиеДанные.ВремяФакт = 0) Тогда
		
		ТекущиеДанные.Выполнена = Ложь;
		ПоказатьПредупреждение(Неопределено, "Признак выполнения работы можно установить только после заполнения
											 |фактического объема и времени выполнения работ!");
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// Закладка "Наряд-заказ".

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НарядЗаказ".
Процедура НарядЗаказПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" поля "НарядЗаказ".
Процедура НарядЗаказПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущаяСтрока = Элементы.Работы.ТекущаяСтрока;
	Если Не Копирование И Не ТекущаяСтрока = Неопределено Тогда
		ЗаполнитьПолеВидРаботНовойСтрокиНарядЗаказ(Отказ, ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры // НарядЗаказПередНачаломДобавления

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НарядЗаказКоличествоПлан".
Процедура НарядЗаказКоличествоПланПриИзменении(Элемент)
	
	ТекСтрокаТабЧасти = Элементы.НарядЗаказ.ТекущиеДанные;
	РассчитатьСтрокуТабЧастиНарядЗаказ(ТекСтрокаТабЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НарядЗаказКоличество".
Процедура НарядЗаказКоличествоПриИзменении(Элемент)
	
	ТекСтрокаТабЧасти = Элементы.НарядЗаказ.ТекущиеДанные;
	РассчитатьСтрокуТабЧастиНарядЗаказ(ТекСтрокаТабЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НарядЗаказЦена".
Процедура НарядЗаказЦенаПриИзменении(Элемент)
	
	ТекСтрокаТабЧасти = Элементы.НарядЗаказ.ТекущиеДанные;
	РассчитатьСтрокуТабЧастиНарядЗаказ(ТекСтрокаТабЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НарядЗаказСтавкаНДС".
Процедура НарядЗаказСтавкаНДСПриИзменении(Элемент)
	
	ТекСтрокаТабЧасти = Элементы.НарядЗаказ.ТекущиеДанные;
	РассчитатьСтрокуТабЧастиНарядЗаказ(ТекСтрокаТабЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаСервере
// Процедура заполняет поле "ВидРабот" таблицы "НарядЗаказ" текущим значением 
// соответствующего поля таблицы "Работы".
//
Процедура ЗаполнитьПолеВидРаботНовойСтрокиНарядЗаказ(Отказ, НомерСтроки)
	
	ТекСтрока            = Объект.Работы.Получить(НомерСтроки);
	НоваяСтрока          = Объект.НарядЗаказ.Добавить();
	НоваяСтрока.ВидРабот = ТекСтрока.ВидРабот;
	Отказ                = Истина;
	
КонецПроцедуры // ЗаполнитьПолеВидРаботНовойСтрокиНарядЗаказ()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НарядЗаказНоменклатура".
Процедура НарядЗаказНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НарядЗаказ.ТекущиеДанные;
	ВидРабот      = ТекущиеДанные.ВидРабот;
	Номенклатура  = ТекущиеДанные.Номенклатура;
	
	Если Не Номенклатура = Неопределено И Не Номенклатура.Пустая() Тогда
		
		ЗаполнитьДанныеНоменклатурыНарядЗаказа(ВидРабот, Номенклатура);
		
	Иначе
		ТекущиеДанные.ЕдиницаИзмерения = "";
		ТекущиеДанные.Количество       = 0;
		ТекущиеДанные.КоличествоПлан   = 0;
		ТекущиеДанные.СтавкаНДС        = "";
		ТекущиеДанные.Сумма            = 0;
		ТекущиеДанные.СуммаНДС         = 0;
		ТекущиеДанные.СуммаПлан        = 0;
		ТекущиеДанные.Цена             = 0;
	КонецЕсли;
	
КонецПроцедуры // НарядЗаказНоменклатураПриИзменении()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Номенклатура" таблицы "НарядЗаказ".
//
Процедура НарядЗаказНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НарядЗаказ.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		Если ТекущиеДанные.Номенклатура.Пустая() И ЗначениеЗаполнено(ТекущиеДанные.ВидМатериала) Тогда
			
			СтандартнаяОбработка = Ложь;
			
			// Сохраним настройки уточнения в хранилище.
			АдресНастроекУточненияМатериалов = СохранитьНастройкиУточненияМатериалов(ТекущиеДанные.ВидРабот, ТекущиеДанные.ВидМатериала);
			
			// Откроем форму настроек уточнения.
			СтруктураОтбораУточнения = Новый Структура("ВидРабот, ВидМатериала", ТекущиеДанные.ВидРабот, ТекущиеДанные.ВидМатериала);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаЗавершенияУточненияНоменклатуры", ЭтотОбъект, СтруктураОтбораУточнения);
			ОткрытьФорму("Документ.КВП_ЗаявкаНаВыполнениеРабот.Форма.ФормаУточненияМатериалов", Новый Структура("АдресНастроекУточненияМатериалов", АдресНастроекУточненияМатериалов), , , , , ОписаниеОповещения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения уточнения номенклатуры.
//
Процедура ОбработкаЗавершенияУточненияНоменклатуры(АдресНастроекУточненияМатериалов, СтруктураОтбораУточнения) Экспорт
	
	Если Не АдресНастроекУточненияМатериалов = Неопределено Тогда
		
		ПолучитьРезультатУточненияНоменклатуры(АдресНастроекУточненияМатериалов, СтруктураОтбораУточнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет строку поля "НарядЗаказ" данными выбранного элемента "Номенклатура".
Процедура ЗаполнитьДанныеНоменклатурыНарядЗаказа(ВидРабот, Номенклатура)
	
	ПараметрыОтбора                = Новый Структура("ВидРабот, Номенклатура");
	ПараметрыОтбора.ВидРабот       = ВидРабот;
	ПараметрыОтбора.Номенклатура   = Номенклатура;
	НайденныеСтроки                = Объект.НарядЗаказ.НайтиСтроки(ПараметрыОтбора);
	
	Если Не НайденныеСтроки.Количество() = 0 Тогда
		
		Для Каждого ТекущиеДанные Из НайденныеСтроки Цикл
			
			Номенклатура                   = ТекущиеДанные.Номенклатура;
			ТекущийВидРаботНарядЗаказ      = ТекущиеДанные.ВидРабот;
			ТекущиеДанные.ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
			ТекущиеДанные.СтавкаНДС        = Перечисления.СтавкиНДС.СтавкаНДС(Номенклатура.ВидСтавкиНДС, Объект.Дата);;
			
			СтрокаТаблицыРаботыПоВидуРабот = Объект.Работы.Выгрузить().Найти(ТекущийВидРаботНарядЗаказ, "ВидРабот");
			Если Не СтрокаТаблицыРаботыПоВидуРабот = Неопределено Тогда
				ОбъемПлан = СтрокаТаблицыРаботыПоВидуРабот.ОбъемПлан;
				ОбъемФакт = СтрокаТаблицыРаботыПоВидуРабот.ОбъемФакт;
			Иначе
				ОбъемПлан = 0;
				ОбъемФакт = 0;
			КонецЕсли;
			
			СтрокаПоиска = ТекущийВидРаботНарядЗаказ.СоставРабот.Найти(Номенклатура, "Номенклатура");
			Если Не СтрокаПоиска = Неопределено Тогда
				// Если объем выполняемых работ равен 0
				Если СтрокаПоиска.Коэффициент = 0 Тогда
					ТекущиеДанные.КоличествоПлан = 0;
					ТекущиеДанные.Количество     = 0;
				Иначе
					ТекущиеДанные.КоличествоПлан = СтрокаПоиска.Количество 
												   / СтрокаПоиска.Коэффициент 
												   * ОбъемПлан;
					ТекущиеДанные.Количество     = СтрокаПоиска.Количество 
												   / СтрокаПоиска.Коэффициент 
												   * ОбъемФакт;
				КонецЕсли;
			КонецЕсли;
			
			ДополнитьСведенияОНоменклатуре(ТекущиеДанные);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДанныеНоменклатурыНарядЗаказа()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "НарядЗаказВидМатериала".
//
Процедура НарядЗаказВидМатериалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// Закладка "Выполнение".

&НаКлиенте
// Обработчик события "ПриИзменении" поля "СтатусВыполнения".
Процедура СтатусВыполненияПриИзменении(Элемент)
	
	// Заполнение фактического времени начала и окончания работ
	// по умолчанию по времени, удобному для заказчика.
	
	ЕстьИзмененияВремениФактическогоВыполненияРабот = Ложь;
	
	Если Объект.ВремяФактическогоНачалаРабот = Дата(1,1,1) Тогда
		Объект.ВремяФактическогоНачалаРабот = Объект.ВремяУдобноеДляЗаказчика;
		ЕстьИзмененияВремениФактическогоВыполненияРабот = Истина;
	КонецЕсли;
	
	Если Объект.ВремяФактическогоОкончанияРабот = Дата(1,1,1) Тогда
		Объект.ВремяФактическогоОкончанияРабот = Объект.ВремяУдобноеДляЗаказчикаОкончаниеРабот;
		ЕстьИзмененияВремениФактическогоВыполненияРабот = Истина;
	КонецЕсли;
	
	Если ЕстьИзмененияВремениФактическогоВыполненияРабот Тогда
		ОбработатьИзменениеВремениФактическогоВыполненияРабот();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	Если Объект.СтатусВыполнения = ПредопределенноеЗначение("Перечисление.КВП_ВидыСтатусовВыполненияРабот.Выполнено")Тогда
		Объект.ОценкаВыполнения = ?(ЗначениеЗаполнено(Объект.ОценкаВыполнения), 
									Объект.ОценкаВыполнения, 
									ПредопределенноеЗначение("Перечисление.КВП_ВидыОценокВыполненияРабот.Хорошо"));
		Объект.ФлагВыполнения = Истина;
	Иначе
		Объект.ФлагВыполнения = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" элементов дат начала и окончания работ.
Процедура ВремяНачалаОкончанияРаботПриИзменении(Элемент)
	
	ОбработатьИзменениеВремениФактическогоВыполненияРабот();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "КнопкаФактПоПлану".
Процедура КнопкаФактПоПлану(Команда)
	
	Для Каждого ТекСтрока Из Объект.Работы Цикл
		ТекСтрока.ОбъемФакт = ТекСтрока.ОбъемПлан;
		РассчитатьСтрокуТабЧастиРаботы(ТекСтрока);
		УстановитьПризнакВыполненияРаботыВСтрокеТаблицыРабот(ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
Процедура КомандаЗаполнить(Команда)
	
	Если Объект.НарядЗаказ.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаЗаполнитьЗавершение", ЭтотОбъект),
					   "Табличная часть """"Наряд-Заказ"""" содержит строки! Очистить?", 
					   РежимДиалогаВопрос.ДаНет, , 
					   КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьФрагмент();
	
КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "КомандаЗаполнить()".
Процедура КомандаЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьФрагмент();
	
КонецПроцедуры // КомандаЗаполнитьЗавершение()

&НаКлиенте
// Процедура заполняет таблицу "НарядЗаказ".
Процедура КомандаЗаполнитьФрагмент()
	
	ЗаполнитьСоставЗаказНарядаНаСервере();
	
	// Перейдем на страницу "Наряд-заказ", если текущая страница оборудования и работ.
	Если Не Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаНарядЗаказ Тогда
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаНарядЗаказ;
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьФрагмент()

&НаКлиенте
// Обработчик команды "ОткрытьПримечанияКЛС".
Процедура ОткрытьПримечанияКЛС(Команда)
	
	ФормаПримечаний = 
		ПолучитьФорму("РегистрСведений.КВП_ПримечанияКЛицевымСчетам.ФормаСписка", 
						Новый Структура("Отбор", Новый Структура("ЛицевойСчет", Объект.ЛицевойСчет)), ЭтаФорма);
	ФормаПримечаний.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ЦеныИВалютаНажатие".
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ТипЦен);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
// Обработчик команды "КомандаСформироватьДокументыОказанияУслуг".
//
Процедура КомандаСформироватьДокументыОказанияУслуг(Команда)
	
	Отказ = Ложь;
	
	// Перед формированием документов заявку необходимо записать.
	Если Модифицированность Тогда
		ПоказатьПредупреждение(Неопределено, "Необходимо записать заявку перед формирование документов отражения!");
		Отказ = Истина;
	КонецЕсли;
	
	// Проверка отметки выполнения работ.
	Если Объект.Работы.НайтиСтроки(Новый Структура("Выполнена", Истина)).Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблице работ ни для одного вида работ не установлена отметка о выполнении.", Отказ);
	КонецЕсли;
	
	// Если уже есть сформированные документы, то новое формирование выполнять нельзя.
	Если Объект.ДокументыОтраженияОтгрузкиПроизводственныхУслуг.Количество() > 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("По заявке уже есть сформированные документы оказания производственных услуг.", Отказ);
	КонецЕсли;
	
	// Заявка должна быть выполнена, а время выполнения заполнено.
	Если Не Объект.СтатусВыполнения = ПредопределенноеЗначение("Перечисление.КВП_ВидыСтатусовВыполненияРабот.Выполнено")
		Или Объект.ВремяФактическогоОкончанияРабот = Дата(1,1,1) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для формирования документов оказания производственных услуг заявка должна иметь статус ""Выполнено"", а время окончания работ заполнено.", Отказ);
	КонецЕсли;
	
	Если НЕ ТребуемыеДанныеПоВидамРаботЗаполнены() Тогда
		ТекстПредупреждения = "Документы оказания производственных услуг не сформированы, т.к. не заполнены обязательные данные."
							  + Символы.ПС
							  + "Для перехода к незаполненным объектам необходимо дважды кликнуть по соответствующим сообщениям.";
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование документов.
	МассивСформированныхДокументов = СформироватьДокументыОказанияПроизводственныхУслугНаСервере(Объект.Ссылка);
	
	Если МассивСформированныхДокументов.Количество() > 0 Тогда
		
		// Заполнение ссылок на сформированные документы в заявке.
		Для Каждого ТекСформированныйДокумент Из МассивСформированныхДокументов Цикл
			НоваяСтрока = Объект.ДокументыОтраженияОтгрузкиПроизводственныхУслуг.Добавить();
			НоваяСтрока.ДокументОказанияПроизводственныхУслуг = ТекСформированныйДокумент;
		КонецЦикла;
		
		// Запись текущей заявки для сохранения ссылок на сформированные документы.
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		
		Состояние("Формирование актов оказания производственных услуг завершено.");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОткрытьМастерОбеспеченияЗаявокАДС".
// 
Процедура ОткрытьМастерОбеспеченияЗаявокАДС(Команда)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Организация",     Объект.Организация);
	СтруктураПараметров.Вставить("Мастер",          Объект.ОтветственныйЗаВыполнение);
	СтруктураПараметров.Вставить("ПериодНачало",    Объект.ВремяУдобноеДляЗаказчика);
	СтруктураПараметров.Вставить("ПериодОкончание", Объект.ВремяУдобноеДляЗаказчикаОкончаниеРабот);
	
	ФормаМастера = ОткрытьФорму("Обработка.УПЖКХ_МастерОбеспеченияЗаявокАДС.Форма", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры // ОткрытьМастерОбеспеченияЗаявокАДС()

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

&НаКлиенте
// Обработчик команды "КомандаФактическиеОбъемыРаботПоВремениВыполненияЗаявки".
//
Процедура КомандаФактическиеОбъемыРаботПоВремениВыполненияЗаявки(Команда)
	
	Если Объект.ВремяФактическогоНачалаРабот = Дата('00010101') Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не заполнены дата и время фактического начала работ", , "Объект.ВремяФактическогоНачалаРабот");
		Возврат;
	КонецЕсли;
	
	Если Объект.ВремяФактическогоОкончанияРабот = Дата('00010101') Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не заполнены дата и время фактического окончания работ", , "Объект.ВремяФактическогоОкончанияРабот");
		Возврат;
	КонецЕсли;
	
	// Разность получается в секундах, а затем переводится в часы.
	ВремяВыполненияЗаявки = (Объект.ВремяФактическогоОкончанияРабот - Объект.ВремяФактическогоНачалаРабот) / 3600;
	
	ПлановоеВремяКРаспределению = 0;
	
	// Из времени выполнения заявки будем вычитать фактическое время установленное пользователем вручную.
	// Также подсчитаем общее плановое время к распределению.
	// В тех строках, где заполнено фактическое время выполнения, плановое время учитывать не будем.
	Для Каждого СтрокаТЧ Из Объект.Работы Цикл
		
		// Заполним плановое время работ.
		СтрокаТЧ.ВремяПлан = СтрокаТЧ.ОбъемПлан * СтрокаТЧ.НормаТруда;
		
		Если СтрокаТЧ.ВремяФакт = 0 Тогда
			ПлановоеВремяКРаспределению = ПлановоеВремяКРаспределению + СтрокаТЧ.ВремяПлан;
		Иначе
			ВремяВыполненияЗаявки = ВремяВыполненияЗаявки - СтрокаТЧ.ВремяФакт;
		КонецЕсли;
		
	КонецЦикла;
	
	// Будем запоминать количество распределенного времени из времени выполнения заявки.
	ВсегоРаспределено = 0;
	
	// Распределим время выполнения заявки по строкам ТЧ "Работы" с незаполненным фактическим временем пропорционально
	// плановому времени к распределению. Если не заполнен фактический объем, сделаем его равным плановому объему.
	Для Каждого СтрокаТЧ Из Объект.Работы Цикл
		
		Если СтрокаТЧ.ВремяФакт = 0 Тогда
			
			СтрокаТЧ.ВремяФакт = ВремяВыполненияЗаявки * (СтрокаТЧ.ВремяПлан / ?(ПлановоеВремяКРаспределению = 0, 1, ПлановоеВремяКРаспределению));
			
			ВсегоРаспределено = ВсегоРаспределено + СтрокаТЧ.ВремяФакт;
			
			// Запомним строку, на которую произошло распределение для того, чтобы
			// впоследствии добавить на нее погрешность распределения, если погрешность появится.
			СтрокаКРаспределениюПогрешности = СтрокаТЧ;
			
		КонецЕсли;
		
		Если СтрокаТЧ.ОбъемФакт = 0 Тогда
			СтрокаТЧ.ОбъемФакт = СтрокаТЧ.ОбъемПлан;
		КонецЕсли;
		
		// Если заполнены фактический объем и фактическое время в строке,
		// то установим признак выполненной работы.
		УстановитьПризнакВыполненияРаботыВСтрокеТаблицыРабот(СтрокаТЧ);
		
	КонецЦикла;
	
	ПогрешностьРаспределения = ВремяВыполненияЗаявки - ВсегоРаспределено;
	
	// Если выполнили распределение хотя бы на одну строку и появилась погрешность,
	// то отнесем ее на ту строку, на которую распределение выполнялось последним.
	Если ПогрешностьРаспределения > 0 И ВсегоРаспределено > 0 Тогда
		СтрокаКРаспределениюПогрешности.ВремяФакт = СтрокаКРаспределениюПогрешности.ВремяФакт + ПогрешностьРаспределения;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С БЛОКОМ УЧЕТА КОМПЛЕКТАЦИИ ОБОРУДОВАНИЯ

#Область ПроцедурыИФункцииРаботыСБлокомУчетаКомплектацииОборудования

/////////////////////////////////////////////////
// Таблица оборудования

&НаКлиенте
// Обработчик команды "ЗаполнитьОборудованиие".
//
Процедура КомандаЗаполнитьОборудование(Команда)
	
	Если Объект.Оборудование.Количество() > 0 Тогда
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("КомандаЗаполнитьОборудованиеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОЗакрытии, "Таблица оборудования будет очищена! Продолжить?", РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуОборудования();
	
КонецПроцедуры

&НаКлиенте
// Процедура обрабатывает ответ пользователя на вопрос об очистке ТЧ "Оборудование".
//
Процедура КомандаЗаполнитьОборудованиеЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Оборудование.Очистить();
		ЗаполнитьТаблицуОборудования();
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьОборудованиеЗавершение()

&НаКлиенте
// Процедура производит заполнение таблицы "Оборудование".
//
Процедура ЗаполнитьТаблицуОборудования()
	
	МассивОборудования = ПолучитьМассивУстановленногоОборудованияПоОбъектуЗаявкиНаСервере();
	Для Каждого ТекОборудование Из МассивОборудования Цикл
		НоваяСтрока = Объект.Оборудование.Добавить();
		НоваяСтрока.Оборудование = ТекОборудование;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуОборудования()

&НаКлиенте
// Обработчик команды "ПодборОборудования".
//
Процедура КомандаПодборОборудования(Команда)
	
	// Список доступного оборудования.
	СписокДоступногоОборудования = Новый СписокЗначений;
	СписокДоступногоОборудования.ЗагрузитьЗначения(ПолучитьМассивУстановленногоОборудованияПоОбъектуЗаявкиНаСервере());
	
	// Список уже выбранного оборудования.
	СписокВыбранногоОборудования = Новый СписокЗначений;
	Для Каждого ТекСтрока Из Объект.Оборудование Цикл
		СписокВыбранногоОборудования.Добавить(ТекСтрока.Оборудование);
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СписокДоступногоОборудования", СписокДоступногоОборудования);
	СтруктураПараметров.Вставить("СписокВыбранногоОборудования", СписокВыбранногоОборудования);
	
	ОткрытьФорму("Справочник.УПЖКХ_ПрочиеОбъектыУчета.Форма.ФормаПодбора", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ПодборОборудованияЗакрытиеФормыВыбора", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Процедура обрабатывает закрытие формы подбора оборудования.
//
Процедура ПодборОборудованияЗакрытиеФормыВыбора(РезультатПодбора, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатПодбора) = Тип("СписокЗначений") Тогда
		
		Для Каждого ЭлементСписка Из РезультатПодбора Цикл
			Если Объект.Оборудование.НайтиСтроки(Новый Структура("Оборудование", ЭлементСписка.Значение)).Количество() = 0 Тогда
				СтрокаОборудования = Объект.Оборудование.Добавить();
				СтрокаОборудования.Оборудование = ЭлементСписка.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПодборОборудованияЗакрытиеФормыВыбора()

/////////////////////////////////////////////////
// Таблица признаков неисправности

&НаКлиенте
// Обработчик команды "ЗаполнитьПризнакиНеисправности".
//
Процедура КомандаЗаполнитьПризнакиНеисправности(Команда)
	
	Если Объект.ПризнакиНеисправностей.Количество() > 0 Тогда
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("КомандаЗаполнитьПризнакиНеисправностиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОЗакрытии, "Таблица признаков неисправности будет очищена! Продолжить?", РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуПризнаковНеисправности();
	
КонецПроцедуры

&НаКлиенте
// Процедура обрабатывает ответ пользователя на вопрос об очистке ТЧ "ПризнакиНеисправностей".
//
Процедура КомандаЗаполнитьПризнакиНеисправностиЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ПризнакиНеисправностей.Очистить();
		ЗаполнитьТаблицуПризнаковНеисправности();
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьПризнакиНеисправностиЗавершение()

&НаКлиенте
// Процедура производит заполнение таблицы "Признаки неисправности".
//
Процедура ЗаполнитьТаблицуПризнаковНеисправности()
	
	МассивПризнаковНеисправности = ПолучитьМассивПризнаковНеисправностиОборудованияНаСервере();
	Для Каждого ТекПризнакНеисправности Из МассивПризнаковНеисправности Цикл
		НоваяСтрока = Объект.ПризнакиНеисправностей.Добавить();
		НоваяСтрока.ПризнакНеисправности = ТекПризнакНеисправности;
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьТаблицуПризнаковНеисправности()

&НаКлиенте
// Обработчик команды "ПодборПризнаковНеисправности".
//
Процедура КомандаПодборПризнаковНеисправности(Команда)
	
	// Список доступных признаков неисправности.
	СписокДоступныхПризнаковНеисправности = Новый СписокЗначений;
	СписокДоступныхПризнаковНеисправности.ЗагрузитьЗначения(ПолучитьМассивПризнаковНеисправностиОборудованияНаСервере());
	
	// Список уже выбранного оборудования.
	СписокВыбранныхПризнаковНеисправности = Новый СписокЗначений;
	Для Каждого ТекСтрока Из Объект.ПризнакиНеисправностей Цикл
		СписокВыбранныхПризнаковНеисправности.Добавить(ТекСтрока.ПризнакНеисправности);
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СписокДоступныхПризнаковНеисправности", СписокДоступныхПризнаковНеисправности);
	СтруктураПараметров.Вставить("СписокВыбранныхПризнаковНеисправности", СписокВыбранныхПризнаковНеисправности);
	
	ОткрытьФорму("Справочник.УПЖКХ_ПризнакиНеисправностей.Форма.ФормаПодбора", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ПодборПризнаковНеисправностиЗакрытиеФормыВыбора", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Процедура обрабатывает закрытие формы подбора признаков неисправности.
//
Процедура ПодборПризнаковНеисправностиЗакрытиеФормыВыбора(РезультатПодбора, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатПодбора) = Тип("СписокЗначений") Тогда
		
		Для Каждого ЭлементСписка Из РезультатПодбора Цикл
			Если Объект.ПризнакиНеисправностей.НайтиСтроки(Новый Структура("ПризнакНеисправности", ЭлементСписка.Значение)).Количество() = 0 Тогда
				СтрокаОборудования = Объект.ПризнакиНеисправностей.Добавить();
				СтрокаОборудования.ПризнакНеисправности = ЭлементСписка.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////
// Таблица видов работ

&НаКлиенте
// Обработчик команды "ЗаполнитьВидыРабот".
//
Процедура КомандаЗаполнитьВидыРабот(Команда)
	
	Если Объект.Работы.Количество() > 0 Тогда
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("КомандаЗаполнитьВидыРаботЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОЗакрытии, "Таблица работ будет очищена! Продолжить?", РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуВидовРабот();

КонецПроцедуры

&НаКлиенте
// Процедура обрабатывает ответ пользователя на вопрос об очистке ТЧ "Работы".
//
Процедура КомандаЗаполнитьВидыРаботЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Работы.Очистить();
		ЗаполнитьТаблицуВидовРабот();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура производит заполнение таблицы "Работы".
//
Процедура ЗаполнитьТаблицуВидовРабот()
	
	МассивВидовРабот = ПолучитьМассивВидовРаботНаСервере();
	Для Каждого ТекВидРабот Из МассивВидовРабот Цикл
		НоваяСтрока = Объект.Работы.Добавить();
		НоваяСтрока.ВидРабот   = ТекВидРабот;
		НоваяСтрока.НормаТруда = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекВидРабот, "НормаТрудаРабочих");
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуВидовРабот()

&НаКлиенте
// Обработчик команды "ПодборВидовРабот".
//
Процедура КомандаПодборВидовРабот(Команда)
	
	// Список доступных признаков неисправности.
	СписокДоступныхВидовРабот = Новый СписокЗначений;
	СписокДоступныхВидовРабот.ЗагрузитьЗначения(ПолучитьМассивВидовРаботНаСервере());
	
	// Список уже выбранного оборудования.
	СписокВыбранныхВидовРабот = Новый СписокЗначений;
	Для Каждого ТекСтрока Из Объект.Работы Цикл
		СписокВыбранныхВидовРабот.Добавить(ТекСтрока.ВидРабот);
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СписокДоступныхВидовРабот", СписокДоступныхВидовРабот);
	СтруктураПараметров.Вставить("СписокВыбранныхВидовРабот", СписокВыбранныхВидовРабот);
	
	ОткрытьФорму("Справочник.КВП_ВидыРабот.Форма.ФормаПодбора", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ПодборВидовРаботЗакрытиеФормыВыбора", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Процедура обрабатывает закрытие формы подбора видов работ.
//
Процедура ПодборВидовРаботЗакрытиеФормыВыбора(РезультатПодбора, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатПодбора) = Тип("СписокЗначений") Тогда
		
		Для Каждого ЭлементСписка Из РезультатПодбора Цикл
			Если Объект.Работы.НайтиСтроки(Новый Структура("ВидРабот", ЭлементСписка.Значение)).Количество() = 0 Тогда
				СтрокаОборудования = Объект.Работы.Добавить();
				СтрокаОборудования.ВидРабот   = ЭлементСписка.Значение;
				СтрокаОборудования.НормаТруда = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ЭлементСписка.Значение, "НормаТрудаРабочих");
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПодборВидовРаботЗакрытиеФормыВыбора()

/////////////////////////////////////////////////
// Отражение в регламентированном учете.

&НаКлиенте
// Обработчик команды "ОчиститьРеализациюТоваровУслуг".
//
Процедура КомандаОчиститьРеализациюТоваровУслуг(Команда)
	
	ОповещениеОтветПользователя = Новый ОписаниеОповещения("ОбработатьОтветПользователяОбОчисткеСсылкиРТиУ", ЭтотОбъект);
	ТекстВопроса = "Внимание, связь с документом """ + Объект.РеализацияТоваровУслуг + """ будет очищена.
				   |При этом документ ""Реализация товаров и услуг"" не будет изменен, а восстановление связи с ним станет недоступным.
				   |Продолжить?";
	
	ПоказатьВопрос(ОповещениеОтветПользователя, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
// Процедура обрабатывает ответ пользователя на вопрос об очистке ссылки на документ.
//
Процедура ОбработатьОтветПользователяОбОчисткеСсылкиРТиУ(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.РеализацияТоваровУслуг = ПредопределенноеЗначение("Документ.РеализацияТоваровУслуг.ПустаяСсылка");
		Модифицированность = Истина;
		
		ЗаполнитьТекстПроРеализациюТоваровУслуг();
		
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьОтветПользователяОбОчисткеСсылкиРТиУ()

&НаКлиенте
// Обработчик команды "ОчиститьТребованиеНакладную".
//
Процедура КомандаОчиститьТребованиеНакладную(Команда)
	
	ОповещениеОтветПользователя = Новый ОписаниеОповещения("ОбработатьОтветПользователяОбОчисткеСсылкиТребованиеНакладная", ЭтотОбъект);
	ТекстВопроса = "Внимание, связь с документом """ + Объект.ТребованиеНакладная + """ будет очищена.
				   |При этом документ ""Требование-накладная"" не будет изменен, а восстановление связи с ним станет недоступным.
				   |Продолжить?";
	
	ПоказатьВопрос(ОповещениеОтветПользователя, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
// Процедура обрабатывает ответ пользователя на вопрос об очистке ссылки на документ.
//
Процедура ОбработатьОтветПользователяОбОчисткеСсылкиТребованиеНакладная(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.ТребованиеНакладная = ПредопределенноеЗначение("Документ.ТребованиеНакладная.ПустаяСсылка");
		Модифицированность = Истина;
		
		ЗаполнитьТекстПроТребованиеНакладную();
		
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьОтветПользователяОбОчисткеСсылкиТребованиеНакладная()

&НаКлиенте
// Процедура-обработчик нажатия на подсказку настроек функциональности при отключенном "Производстве".
Процедура ДекорацияПодсказкаНастройкиФункциональностиНажатие(Элемент)
	
	ФормаФункциональности = ПолучитьФорму("Обработка.ФункциональностьПрограммы.Форма.ФормаФункциональностьПрограммы");
	ФормаФункциональности.Открыть();
	ФормаФункциональности.Элементы.Страницы.ТекущаяСтраница = ФормаФункциональности.Элементы.Страницы.ПодчиненныеЭлементы["ГруппаПроизводство"];
	
КонецПроцедуры // ДекорацияПодсказкаНастройкиФункциональностиНажатие()

#КонецОбласти