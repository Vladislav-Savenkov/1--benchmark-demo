////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура формирует и устанавливает текст заголовка формы документа.
//
&НаСервере
Процедура УстановитьЗаголовокФормыДокумента()
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации),
																			Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости.
//
&НаКлиенте
Процедура УстановитьКнопкиПечати()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийРегистрацииПоМестуЖительства.Регистрация") Тогда
		Показать = Истина;
	Иначе		
		Показать = Ложь;
	КонецЕсли;
	
	Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаПечать.ПодчиненныеЭлементы.ФормаДокументКВП_ЗаявлениеОРегистрацииОСнятииСРегистрационногоУчетаПоМестуЖительстваПечатьФ2.Видимость = Показать;
	Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаПечать.ПодчиненныеЭлементы.ФормаДокументКВП_ЗаявлениеОРегистрацииОСнятииСРегистрационногоУчетаПоМестуЖительстваПечатьС_ПР.Видимость = Показать;
	Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаПечать.ПодчиненныеЭлементы.ФормаДокументКВП_ЗаявлениеОРегистрацииОСнятииСРегистрационногоУчетаПоМестуЖительстваПечатьС_ЗП.Видимость = Показать;
	Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаПечать.ПодчиненныеЭлементы.ФормаДокументКВП_ЗаявлениеОРегистрацииОСнятииСРегистрационногоУчетаПоМестуЖительстваПечатьЗ_С.Видимость = Показать;
	Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаПечать.ПодчиненныеЭлементы.ФормаДокументКВП_ЗаявлениеОРегистрацииОСнятииСРегистрационногоУчетаПоМестуЖительстваПечатьРФЛ1.Видимость = Показать;
	
	Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаПечать.ПодчиненныеЭлементы.ФормаДокументКВП_ЗаявлениеОРегистрацииОСнятииСРегистрационногоУчетаПоМестуЖительстваПечатьФ7.Видимость = Не Показать;
	
КонецПроцедуры

// Возвращает массив собственников по лицевому счету.
&НаСервере
Функция ПолучитьМассивСобственников()
	
	ТаблицаСобственников = ПолучитьДанныеОСобственностиПомещения(Объект.ЛицевойСчет.Адрес, Объект.Дата);
	
	Возврат ТаблицаСобственников.ВыгрузитьКолонку("Собственник");
	
КонецФункции

// Процедура устанавливает адрес жильца для просмотра и редактирования из реквизита Проживающий.
//
&НаСервере
Процедура УстановитьЗначениеАдресаИзСсылкиНаПроживающего()
	
	Если ЗначениеЗаполнено(Объект.Проживающий) Тогда
		Элементы.АдресЖильца.Видимость = Истина;
		
		ДопПараметры = Новый Структура("ТолькоПервая", Истина);
		
		Если Объект.ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииПоМестуЖительства.Регистрация Тогда
			Элементы.АдресЖильца.Заголовок = "Адрес прибытия";
			АдресЖильца = УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияПредставлениеКонтактнойИнформацииОбъекта(Объект.Проживающий, Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресПрибытияЖильца,,Объект.Дата, ДопПараметры);
		Иначе
			Элементы.АдресЖильца.Заголовок = "Адрес выбытия";
			АдресЖильца = УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияПредставлениеКонтактнойИнформацииОбъекта(Объект.Проживающий, Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресВыбытияЖильца,,Объект.Дата, ДопПараметры);
		КонецЕсли;
		
		Если ПустаяСтрока(АдресЖильца) Тогда
			АдресЖильца = УПЖКХ_ТиповыеМетодыКлиентСервер.КонтактнаяИнформацияТекстПустогоАдресаВВидеГиперссылки();
		КонецЕсли;
		
	Иначе
		Элементы.АдресЖильца.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает адрес жильца из структуры с адресами.
//
&НаКлиенте
Процедура УстановитьЗначениеАдресаИзСтруктуры(СтруктураСАдресами)
	
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийРегистрацииПоМестуЖительства.Регистрация") Тогда
			АдресЖильца = СтруктураСАдресами.АдресПрибытия;
		Иначе
			АдресЖильца = СтруктураСАдресами.АдресВыбытия;
		КонецЕсли;
		
	КонецПроцедуры

// Процедура открыват форму редактирования адреса жильца.
//
&НаКлиенте
Процедура ОткрытьОкноРедактированияАдресаЖильца()
	
	Если Не ЗначениеЗаполнено(Объект.Проживающий) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", Объект.Проживающий);
	ФормаЖильца = ПолучитьФорму("Справочник.УПЖКХ_Жильцы.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	ИдентификаторФормыЖильца = ФормаЖильца.УникальныйИдентификатор;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийРегистрацииПоМестуЖительства.Регистрация") Тогда
		УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияНачалоВыбора(ФормаЖильца, ФормаЖильца.Элементы.КонтактнаяИнформацияПолеУПЖКХ_АдресПрибытияЖильца,, Истина);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияНачалоВыбора(ФормаЖильца, ФормаЖильца.Элементы.КонтактнаяИнформацияПолеУПЖКХ_АдресВыбытияЖильца,, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Устанавливаем значение по умолчанию.
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
																	УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
	КонецЕсли;
	
	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента();
	
	УстановитьЗначениеАдресаИзСсылкиНаПроживающего();
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

// Процедура - обработчик оповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КонтактнаяИнформацияПредставлениеНачалоВыбораЗавершение" Тогда
		
		Если ТипЗнч(Параметр) = Тип("УправляемаяФорма")
			 И Параметр.УникальныйИдентификатор = ИдентификаторФормыЖильца
			 И Параметр.Модифицированность Тогда
				Параметр.Записать();
				ИдентификаторФормыЖильца = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗаписанЭлементСправочникаУПЖКХ_Жильцы" И Параметр.Ссылка = Объект.Проживающий Тогда
		
		//Обновить представление адресов
		УстановитьЗначениеАдресаИзСтруктуры(Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода проживающего.
&НаКлиенте
Процедура ПроживающийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не Объект.ЛицевойСчет.Пустая() Тогда
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму("Справочник.УПЖКХ_Жильцы.Форма.ФормаВыбора", Новый Структура("ЛицевойСчет", Объект.ЛицевойСчет), Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода проживающего.
&НаКлиенте
Процедура ПроживающийПриИзменении(Элемент)
	
	Объект.ЛицевойСчет = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Проживающий, "Владелец");
	
	Если Не УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Собственник, "Владелец") = Объект.ЛицевойСчет Тогда
		Объект.Собственник = ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка");
	КонецЕсли;
	
	УстановитьЗначениеАдресаИзСсылкиНаПроживающего();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода Лицевой счет.
&НаКлиенте
Процедура ЛицевойСчетПриИзменении(Элемент)
	
	Если УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Проживающий, "Владелец") <> Объект.ЛицевойСчет Тогда
		Объект.Проживающий = ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка");
	КонецЕсли;
	
	УстановитьЗначениеАдресаИзСсылкиНаПроживающего();
	
	Если Не УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Собственник, "Владелец") = Объект.ЛицевойСчет Тогда
		Объект.Собственник = ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ВидОперации.
&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	УстановитьКнопкиПечати();
	
	УстановитьЗначениеАдресаИзСсылкиНаПроживающего();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Собственник.
&НаКлиенте
Процедура СобственникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МассивПараметров = Новый Массив();
	
	МассивСобственников = ПолучитьМассивСобственников();
	
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ФизЛицо",  МассивСобственников));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Объект.ЛицевойСчет));
	
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	Элемент.ПараметрыВыбора = НовыеПараметрыВыбора;
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода ВидОперации.
&НаКлиенте
Процедура ВидОперацииОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Процедура - обработчик события "Нажатие" гиперссылки адреса.
&НаКлиенте
Процедура АдресЖильцаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьОкноРедактированияАдресаЖильца();
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти