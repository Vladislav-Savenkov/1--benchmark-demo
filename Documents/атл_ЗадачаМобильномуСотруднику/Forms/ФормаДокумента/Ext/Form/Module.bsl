
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ПараметрыСеанса.ТекущийПользователь.атл_ИспользоватьКомпактныйРежимОтображения Тогда
		Элементы.НадписьДатаВыезда.Ширина = 10;	
		Элементы.Комментарии.Высота = 3;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьПервоначальнымиДанными();	
	КонецЕсли;
	
	ЗаполнитьДеревоДополнительныхРеквизитов();	
	
	УстановитьОтборПоКомментариям();		
	УстановитьВременныйТекущийстатус();
	
	ОбновитьДанныеВФормеНаСервере();	
	УстановитьДоступностьПолейИКнопок();		
	ЗаполнитьУсловноеОформление();
	
	СчитатьЗначениеРеквизитовДатНазначения();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.ШаблонЗаполнения) Тогда
		ЗаполнитьДеревоДополнительныхРеквизитов(Объект.ШаблонЗаполнения);
		ОбновлениеИтоговТаблицНаСервере();
	Иначе
		ЗаполнитьДеревоДополнительныхРеквизитов();	
	КонецЕсли;
			
	СтарыйШаблонЗаполнения = Объект.ШаблонЗаполнения;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НЕ ЗначениеЗаполнено(Объект.Исполнитель) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Укажите исполнителя!";
		Сообщение.Поле = "Объект.Исполнитель";		
		Сообщение.Сообщить();
	КонецЕсли;		
	
	ЗаполнитьРеквизитыПередЗаписью();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьПолейИКнопок();	
	УстановитьОтборПоКомментариям();
	ОбновитьДанныеВФормеНаСервере();
	
КонецПроцедуры

#КонецОбласти



#Область ОбработчикиЭлементовФормы

&НаКлиенте
Процедура КомментарииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Параметры.Ключ.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сначала запишите задачу!";
		Сообщение.Сообщить();		
		Отказ = Истина;
		Возврат;	
	КонецЕсли;

	Если Не ИсполнительАвторизован(Объект.Исполнитель) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарииПриИзменении(Элемент)
	
	Элементы.Комментарии.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.ДополнительныеРеквизиты.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		ТипЗначенияДополнительногоРеквизита = ПолучитьТипЗначенияДополнительногоРеквизита(ТекущаяСтрока.ДополнительныйРеквизит);
					
		Если ТипЗначенияДополнительногоРеквизита = Неопределено Тогда
			ТекущаяСтрока.ЗначениеРеквизита 	 = Неопределено;
		Иначе		
			Элементы.ДополнительныеРеквизиты.ПодчиненныеЭлементы.ДополнительныеРеквизитыЗначениеРеквизита.ОграничениеТипа = ТипЗначенияДополнительногоРеквизита;
			ТекущаяСтрока.ЗначениеРеквизита = ТипЗначенияДополнительногоРеквизита.ПривестиЗначение(ТекущаяСтрока.ЗначениеРеквизита);
		КонецЕсли;
	
	КонецЕсли;
	
	ОбновлениеИтоговТаблицНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыДополнительныйРеквизитПриИзменении(Элемент)
		
	ТекущаяСтрока = Элементы.ДополнительныеРеквизиты.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда						
		ТипЗначенияДополнительногоРеквизита = ПолучитьТипЗначенияДополнительногоРеквизита(ТекущаяСтрока.ДополнительныйРеквизит);
			
		ЗаполнитьДопПоляДаннымиДополнительногоРеквизита(ТекущаяСтрока.ДополнительныйРеквизит, ТекущаяСтрока.ЗаполняетсяНаМК, ТекущаяСтрока.Обязателен);			
		
		Если ТипЗначенияДополнительногоРеквизита = Неопределено Тогда
			ТекущаяСтрока.ЗначениеРеквизита 	 = Неопределено;
		Иначе		
			Элементы.ДополнительныеРеквизиты.ПодчиненныеЭлементы.ДополнительныеРеквизитыЗначениеРеквизита.ОграничениеТипа = ТипЗначенияДополнительногоРеквизита;
			ТекущаяСтрока.ЗначениеРеквизита = ТипЗначенияДополнительногоРеквизита.ПривестиЗначение(ТекущаяСтрока.ЗначениеРеквизита);
		КонецЕсли;
	КонецЕсли;
	
	ОбновлениеИтоговТаблицНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеКонтрагентаПриИзменении(Элемент)
	
	ПодразделениеКонтрагентаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	//проверяем, является ли выбранный исполнитель пользователем МК и авторизован ли он на сервере
	мНастройка = ПолучитьНастройкуПодключенияМобильныхСотрудников(Объект.Исполнитель);	
	
	Если мНастройка.ЯвляетсяПользователемМК Тогда
		Если Не мНастройка.АвторизованНаСервере Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Исполнитель '" + Объект.Исполнитель + "' не авторизован на сервере. Укажите другого исполнителя, либо авторизуйте указанного!";
			Сообщение.Поле = "Объект.Исполнитель";
			Сообщение.Сообщить();			
		КонецЕсли;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Исполнитель '" + Объект.Исполнитель + "' не является пользователем МК, поэтому отправить ему нельзя отправить задачу. Укажите другого исполнителя!";
		Сообщение.Поле = "Объект.Исполнитель";		
		Сообщение.Сообщить();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьТекущийСтатусНажатие(Элемент)
	
	// Вставить содержимое обработчика.
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Документ новый. Нет информации для просмотра!";	
		Сообщение.Сообщить();		
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);

		ОткрытьФорму("Документ.атл_ЗадачаМобильномуСотруднику.Форма.ИнформацияОХодеВыполнения",ПараметрыФормы, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивДоступныхПользователей = ПолучитьСписокМобильныхСотрудников();
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Ссылка", МассивДоступныхПользователей);
	
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура АдресВыполненияРаботПриИзмененииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		Объект.АдресВыполненияРаботДолгота = "";
		Объект.АдресВыполненияРаботШирота = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыездаДатаПриИзменении(Элемент)
	
	Если НЕ ДатаВыездаДата = Дата("00010101") Тогда
		Объект.ПланируемаяДатаВыполненияРабот = Дата(Формат(ДатаВыездаДата,"ДФ=yyyyMMdd") + Формат(ДатаВыездаВремя,"ДФ=HHmmss"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыездаВремяПриИзменении(Элемент)
	
	Если НЕ ДатаВыездаДата = Дата("00010101") Тогда
		Объект.ПланируемаяДатаВыполненияРабот = Дата(Формат(ДатаВыездаДата,"ДФ=yyyyMMdd") + Формат(ДатаВыездаВремя,"ДФ=HHmmss"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЗаполненияПриИзменении(Элемент)
	
	Если СтарыйШаблонЗаполнения = Объект.ШаблонЗаполнения Тогда
		ПерезаполнитьДеревоДополнительныхРеквизитов(Объект.ШаблонЗаполнения);	
	Иначе
		текОповещение = Новый ОписаниеОповещения("ШаблонЗаполненияПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(текОповещение, "Выбран другой шаблон. Перезаполнить дополнительные реквизиты?", РежимДиалогаВопрос.ДаНет); 				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДатаВыездаНажатие(Элемент)
	
	Если Элементы.ГруппаСтраницДатНазначения.ТекущаяСтраница = Элементы.ГруппаСтраницДатНазначения.ПодчиненныеЭлементы.ГруппаКоВремени Тогда
		Элементы.ГруппаСтраницДатНазначения.ТекущаяСтраница = Элементы.ГруппаСтраницДатНазначения.ПодчиненныеЭлементы.ГруппаИнтервалВТечениеДня;
		ПланируемаяДата = Объект.ПланируемаяДатаВыполненияРабот;
		
	ИначеЕсли Элементы.ГруппаСтраницДатНазначения.ТекущаяСтраница = Элементы.ГруппаСтраницДатНазначения.ПодчиненныеЭлементы.ГруппаИнтервалВТечениеДня Тогда
		Элементы.ГруппаСтраницДатНазначения.ТекущаяСтраница = Элементы.ГруппаСтраницДатНазначения.ПодчиненныеЭлементы.ГруппаИнтервалДат;
		Объект.ПланируемаяДатаВыполненияРабот = ПланируемаяДата;
		Объект.ПланируемаяДатаОкончанияРабот = ПланируемаяДата;
		Если ЗначениеЗаполнено(Объект.ИнтервалВремениВТечениеДня) Тогда
			ДозаполнитьДатыДаннымиИзИнтервалаВремени();
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраницДатНазначения.ТекущаяСтраница = Элементы.ГруппаСтраницДатНазначения.ПодчиненныеЭлементы.ГруппаИнтервалДат Тогда
		Элементы.ГруппаСтраницДатНазначения.ТекущаяСтраница = Элементы.ГруппаСтраницДатНазначения.ПодчиненныеЭлементы.ГруппаКоВремени;		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область КомандыФормы

&НаКлиенте
Процедура ЗаполнитьДополнительныеРеквизиты(Команда)
	
	Если Объект.ДополнительныеРеквизиты.Количество() > 0 Тогда
		
		мОповещение = Новый ОписаниеОповещения("ЗаполнитьТаблицуДополнительныхРеквизитовНаКлиенте", ЭтотОбъект);
		ПоказатьВопрос(мОповещение, "Список дополнительных реквизитов будет перезаполнен. Продолжить?", РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ЗаполнитьТаблицуДополнительныхРеквизитов();
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОКомментарии(Команда)
		
	ТекущаяСтрокаКомментария = Элементы.Комментарии.ТекущиеДанные;
	Если ТекущаяСтрокаКомментария <> Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИдентификаторИнформационнойБазы", ТекущаяСтрокаКомментария.ИдентификаторИнформационнойБазы);
		ПараметрыФормы.Вставить("ИдентификаторКомментария", ТекущаяСтрокаКомментария.ИдентификаторКомментария);
		ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
		
		ОткрытьФорму("Документ.атл_ЗадачаМобильномуСотруднику.Форма.ИнформацияОКомментарии", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сначала запишите задачу!";
		Сообщение.Сообщить();		
		Возврат;
	КонецЕсли;
	
	Если Не ИсполнительАвторизован(Объект.Исполнитель) Тогда
		Возврат;
	КонецЕсли;
	
	мОповещение = Новый ОписаниеОповещения("ОбновитьТаблицуКомментариев", ЭтотОбъект);	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Объект", Объект.Ссылка);
	
	ОткрытьФорму("РегистрСведений.атл_КомментарииКОбъектамУМС.Форма.ФормаЗаписи", ПараметрыФормы, ЭтаФорма,,,,мОповещение);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗадачу(Команда)
	
	мОтправитьЗадачу = Истина;
	
	Если ЭтаФорма.Модифицированность Тогда
		мОповещение = Новый ОписаниеОповещения("ОтправитьЗадачуНаКлиенте", ЭтотОбъект);
		ПоказатьВопрос(мОповещение, "Документ был изменен. Записать и отправить?", РежимДиалогаВопрос.ДаНет);
	Иначе
		ОтправитьЗадачуНаКлиенте();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачу(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Задача не записана. Завершать её не требуется!";
		Сообщение.Сообщить();		
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.Модифицированность Тогда
		мОповещение = Новый ОписаниеОповещения("ЗавершитьЗадачуОповещениеВопроса", ЭтотОбъект);
		ПоказатьВопрос(мОповещение, "Задача была изменена. Перед завершением ее необходимо сохранить. 
									|Сохранить задачу и продолжить операцию?", РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗавершитьЗадачуОповещениеВопроса();								
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПодборИсполнителя(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыФормы.Вставить("ШиротаАдреса", Объект.АдресВыполненияРаботШирота);
	ПараметрыФормы.Вставить("ДолготаАдреса", Объект.АдресВыполненияРаботДолгота);
	
	мОповещение = Новый ОписаниеОповещения("ОбработкаВыбораИсполнителя", ЭтотОбъект);
	ОткрытьФорму("Документ.атл_ЗадачаМобильномуСотруднику.Форма.ФормаПодбораИсполнителя",ПараметрыФормы,ЭтаФорма,,,,мОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьРезультатыРабот(Команда)
	
	мВидСобытияСогласования = ПолучитьВидСобытияСогласования("Отклонение");
					
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Задача не записана. Отклонять её не требуется!";
		Сообщение.Сообщить();		
		Возврат;
	КонецЕсли;
	
	Если Не ИсполнительАвторизован(Объект.Исполнитель) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.Модифицированность Тогда
		мОповещение = Новый ОписаниеОповещения("ОтклонитьРезультатыРаботНаКлиенте", ЭтотОбъект);
		ПоказатьВопрос(мОповещение, "Задача была изменена. Перед отклонением результатов выполнения задачу необходимо сохранить. 
									|Сохранить задачу и продолжить операцию?", РежимДиалогаВопрос.ДаНет);				
	Иначе
		ОтклонитьРезультатыРаботНаКлиенте();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьРезультатыРабот(Команда)
	
	мВидСобытияСогласования = ПолучитьВидСобытияСогласования("Принятие");
					
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Задача не записана. Принимать её не требуется!";		
		Сообщение.Сообщить();		
		Возврат;
	КонецЕсли;
	
	Если Не ИсполнительАвторизован(Объект.Исполнитель) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.Модифицированность Тогда
		мОповещение = Новый ОписаниеОповещения("ПринятьРезультатыРаботНаКлиенте", ЭтотОбъект);
		ПоказатьВопрос(мОповещение, "Задача была изменена. Перед принятием результатов выполнения задачу необходимо сохранить. 
									|Сохранить задачу и продолжить операцию?", РежимДиалогаВопрос.ДаНет);				
	Иначе
		ПринятьРезультатыРаботНаКлиенте();	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсюТаблицу(Команда)
	
	ЗаполнитьДеревоДополнительныхРеквизитов(Объект.ШаблонЗаполнения);
	Элементы.ДеревоДополнительныхРеквизитов.Развернуть(ДеревоДополнительныхРеквизитов.ПолучитьЭлементы().Получить(0).ПолучитьИдентификатор(), Истина);
	ОбновлениеИтоговТаблицНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначенияРеквизитовПоШаблонам(Команда)
	
	ПерезаполнитьДеревоДополнительныхРеквизитов(Объект.ШаблонЗаполнения);
	
КонецПроцедуры

#КонецОбласти


#Область СобытияОбработкиДереваДополнительныхРеквизитов

&НаСервере
Процедура ЗаполнитьДеревоДополнительныхРеквизитов(Шаблон = Неопределено)
		
	ДеревоДополнительныхРеквизитов.ПолучитьЭлементы().Очистить();
	ИдентификаторыРодителей.Очистить();
	
	мСтрокаВерхнегоУровня = ДеревоДополнительныхРеквизитов.ПолучитьЭлементы().Добавить();
	мСтрокаВерхнегоУровня.ДополнительныйРеквизит = "Дополнительные реквизиты";
	мСтрокаВерхнегоУровня.СтрокаВерхнегоУровня = Истина;	

	мСтрокаВерхнегоУровня = мСтрокаВерхнегоУровня.ПолучитьЭлементы();
	
	мДополнительныеРеквизиты = ?(Шаблон = Неопределено, Объект.ДополнительныеРеквизиты, Шаблон.ДополнительныеРеквизиты);
	
	Для Каждого текСтрока Из мДополнительныеРеквизиты Цикл
		Если текСтрока.ДополнительныйРеквизит.ГруппаРеквизитов Тогда
			мНоваяСтрока = мСтрокаВерхнегоУровня.Добавить();	
			мНоваяСтрока.ДополнительныйРеквизит = текСтрока.ДополнительныйРеквизит;
			мНоваяСтрока.ОсобыйВидДополнительногоРеквизита = мНоваяСтрока.ДополнительныйРеквизит.ОсобыйВидДополнительногоРеквизита;
			мНоваяСтрока.Картинка = ПолучитьИндексКартинки(мНоваяСтрока.ДополнительныйРеквизит);
			мНоваяСтрока.ГруппаРеквизитов = Истина;
			
			СтрокаИД = ИдентификаторыРодителей.Добавить();
			СтрокаИД.ДополнительныйРеквизит = текСтрока.ДополнительныйРеквизит;
			СтрокаИД.Идентификатор = мНоваяСтрока.ПолучитьИдентификатор();
		ИначеЕсли ЗначениеЗаполнено(текСтрока.Родитель) Тогда
			НайденныйИД = ИдентификаторыРодителей.НайтиСтроки(Новый Структура("ДополнительныйРеквизит", текСтрока.Родитель));
			Если НайденныйИД.Количество() > 0 Тогда
				мРодитель = ДеревоДополнительныхРеквизитов.НайтиПоИдентификатору(НайденныйИД[0].Идентификатор);
				Если НЕ мРодитель = Неопределено Тогда
					мНоваяСтрока = мРодитель.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(мНоваяСтрока, текСтрока);
					мНоваяСтрока.ОсобыйВидДополнительногоРеквизита = мНоваяСтрока.ДополнительныйРеквизит.ОсобыйВидДополнительногоРеквизита;
					мНоваяСтрока.Картинка = ПолучитьИндексКартинки(мНоваяСтрока.ДополнительныйРеквизит);
					Если НЕ Шаблон = Неопределено И ЗначениеЗаполнено(текСтрока.ШаблонЗаполненияДополнительныхРеквизитов) Тогда
						мНоваяСтрока.Автозаполнение = Истина;
						мНоваяСтрока.ШаблонАвтозаполнения = текСтрока.ШаблонЗаполненияДополнительныхРеквизитов;
						ЗаполнитьДополнительныйРеквизитПоШаблонуЗаполнения(мНоваяСтрока, текСтрока.ШаблонЗаполненияДополнительныхРеквизитов);
					КонецЕсли;					
				КонецЕсли;
			КонецЕсли;			
		Иначе
			мНоваяСтрока = мСтрокаВерхнегоУровня.Добавить();
			ЗаполнитьЗначенияСвойств(мНоваяСтрока, текСтрока);
			мНоваяСтрока.ОсобыйВидДополнительногоРеквизита = мНоваяСтрока.ДополнительныйРеквизит.ОсобыйВидДополнительногоРеквизита;
			мНоваяСтрока.Картинка = ПолучитьИндексКартинки(мНоваяСтрока.ДополнительныйРеквизит);
			Если НЕ Шаблон = Неопределено И ЗначениеЗаполнено(текСтрока.ШаблонЗаполненияДополнительныхРеквизитов) Тогда
				мНоваяСтрока.Автозаполнение = Истина;
				мНоваяСтрока.ШаблонАвтозаполнения = текСтрока.ШаблонЗаполненияДополнительныхРеквизитов;
				ЗаполнитьДополнительныйРеквизитПоШаблонуЗаполнения(мНоваяСтрока, текСтрока.ШаблонЗаполненияДополнительныхРеквизитов);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	                            	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуДополнительныеРеквизиты()
	
	Объект.ДополнительныеРеквизиты.Очистить();
	
	мСтрокиВерхнегоУровня = ДеревоДополнительныхРеквизитов.ПолучитьЭлементы().Получить(0).ПолучитьЭлементы();
	Для Каждого текСтрока Из мСтрокиВерхнегоУровня Цикл
		Если текСтрока.ДополнительныйРеквизит.ГруппаРеквизитов Тогда
			мНоваяСтрока = Объект.ДополнительныеРеквизиты.Добавить();
			ЗаполнитьЗначенияСвойств(мНоваяСтрока, текСтрока);
			ПодчиненныеСтроки = текСтрока.ПолучитьЭлементы();
			Для Каждого текСтрока2 Из ПодчиненныеСтроки Цикл
				мНоваяСтрока = Объект.ДополнительныеРеквизиты.Добавить();
				ЗаполнитьЗначенияСвойств(мНоваяСтрока, текСтрока2);
				мНоваяСтрока.Родитель = текСтрока.ДополнительныйРеквизит;
			КонецЦикла;
		Иначе
			мНоваяСтрока = Объект.ДополнительныеРеквизиты.Добавить();
			ЗаполнитьЗначенияСвойств(мНоваяСтрока, текСтрока);			
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныйРеквизитПоШаблонуЗаполнения(ТекущаяСтрока, Шаблон)
	
	Результат = Неопределено;	
	
	Попытка
		атл_УправлениеМобильнымиСотрудникамиСервер.ВыполнитьТекстШаблона(Шаблон, Результат, Объект, Объект.ЗадачаИсполнителя, Объект.ДокументЗанятостиРесурса);		
		ТекущаяСтрока.ЗначениеРеквизита = Результат;
	Исключение
		Сообщить("Неверное условие шаблона '" + Шаблон.Наименование + "'.", СтатусСообщения.Важное);
	КонецПопытки;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДополнительныхРеквизитовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяФормыОткрытия = "";
	ПараметрыФормы = Новый Структура;
	
	ДеревоДополнительныхРеквизитовВыборНаСервере(ВыбраннаяСтрока, Поле.Имя, ИмяФормыОткрытия, ПараметрыФормы);
	
	Если НЕ ИмяФормыОткрытия = "" Тогда		 			
		ОткрытьФорму("Документ.атл_ЗадачаМобильномуСотруднику.Форма." + ИмяФормыОткрытия, ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ДеревоДополнительныхРеквизитовВыборНаСервере(ИДСтроки, ИмяКолонки, ИмяФормыОткрытия, ПараметрыФормы)
	
	ТекущиеДанные = ДеревоДополнительныхРеквизитов.НайтиПоИдентификатору(ИДСтроки);
	
	Если ИмяКолонки = "ДеревоДополнительныхРеквизитовЗначениеРеквизита" И ЗначениеЗаполнено(ТекущиеДанные.ДополнительныйРеквизит) Тогда
		
		Если ТекущиеДанные.ДополнительныйРеквизит.ОсобыйВидДополнительногоРеквизита = Перечисления.атл_ОсобыеВидыДополнительныхРеквизитов.КоллекцияКартинок Тогда
				
			СписокФайлов = Объект.Файлы.НайтиСтроки(Новый Структура("ДополнительныйРеквизит", ТекущиеДанные.ДополнительныйРеквизит));
			Если СписокФайлов.Количество() = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Для доп. реквизита """ + ТекущиеДанные.ДополнительныйРеквизит.Наименование + """ не загружена ни одна картинка";			
				Сообщение.Сообщить();
				ИмяФормыОткрытия = "";
				Возврат;
			КонецЕсли;

			АдресТаблицы = ПоместитьВоВременноеХранилище(Объект.Файлы.Выгрузить(), УникальныйИдентификатор);
			
			ПараметрыФормы.Вставить("АдресТаблицы", АдресТаблицы);
			ПараметрыФормы.Вставить("ДополнительныйРеквизит", ТекущиеДанные.ДополнительныйРеквизит);
			ИмяФормыОткрытия = "ФормаКартинок";
			
		ИначеЕсли ТекущиеДанные.ДополнительныйРеквизит.ОсобыйВидДополнительногоРеквизита = Перечисления.атл_ОсобыеВидыДополнительныхРеквизитов.Координата Тогда
			
			ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
			ПараметрыФормы.Вставить("ЗначениеДопРеквизита", ТекущиеДанные.ЗначениеРеквизита);
			ИмяФормыОткрытия = "ИнформацияОПолучениеКоординат";
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДополнительныхРеквизитовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	Если Элемент.ТекущиеДанные.СтрокаВерхнегоУровня = Истина Тогда
		Возврат;	
	КонецЕсли;
	
	Если Элементы.ДеревоДополнительныхРеквизитов.ТекущийЭлемент.Имя = "ДеревоДополнительныхРеквизитовЗначениеРеквизита" и ТекущаяСтрока.ЗаполняетсяНаМК Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоДополнительныхРеквизитовПриНачалеРедактированияНаСервере(Элемент.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДополнительныхРеквизитовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	Если Копирование И ТекущаяСтрока.СтрокаВерхнегоУровня = Истина Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	ДеревоДополнительныхРеквизитовПередНачаломДобавленияНаСервере(Элемент.ТекущиеДанные.ПолучитьИдентификатор(), Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДополнительныхРеквизитовПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.СтрокаВерхнегоУровня Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоДополнительныхРеквизитовПередНачаломДобавленияНаСервере(ИДСтроки, Отказ)
	
	ТекущаяСтрока = ДеревоДополнительныхРеквизитов.НайтиПоИдентификатору(ИДСтроки);
	
	Если НЕ ТекущаяСтрока.СтрокаВерхнегоУровня И ЗначениеЗаполнено(ТекущаяСтрока.ДополнительныйРеквизит)
			И ТекущаяСтрока.ДополнительныйРеквизит.ГруппаРеквизитов = Ложь Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Подчиненные доп. реквизиты можно добавлять только в группу!";
		Сообщение.Сообщить();	
		
	ИначеЕсли НЕ ТекущаяСтрока.СтрокаВерхнегоУровня И ОпределениеУровняДерева(ИДСтроки) > 1 Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Доступна только группировки первого уровня. В группу можно добавлять только доп. реквизиты.";
		Сообщение.Сообщить();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДеревоДополнительныхРеквизитовПриНачалеРедактированияНаСервере(ИДСтроки)
	
	ТекущаяСтрока = ДеревоДополнительныхРеквизитов.НайтиПоИдентификатору(ИДСтроки);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ТекущаяСтрока.ЗначениеРеквизита) = Тип("Булево") Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.ДополнительныйРеквизит) Тогда
			ТипЗначенияДополнительногоРеквизита = ТекущаяСтрока.ДополнительныйРеквизит.ТипЗначения;
			Элементы.ДеревоДополнительныхРеквизитов.ПодчиненныеЭлементы.ДеревоДополнительныхРеквизитовЗначениеРеквизита.ОграничениеТипа = ТипЗначенияДополнительногоРеквизита;
			ТекущаяСтрока.ЗначениеРеквизита = ТипЗначенияДополнительногоРеквизита.ПривестиЗначение(ТекущаяСтрока.ЗначениеРеквизита);			
		Иначе
			ТекущаяСтрока.ЗначениеРеквизита = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДополнительныхРеквизитовПриИзменении(Элемент)
	
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДополнительныхРеквизитовЗаполняетсяНаМКПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоДополнительныхРеквизитов.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ДеревоДополнительныхРеквизитовЗаполняетсяНаМКПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДеревоДополнительныхРеквизитовЗаполняетсяНаМКПриИзмененииНаСервере(ИДСтроки)
	
	ТекущаяСтрока = ДеревоДополнительныхРеквизитов.НайтиПоИдентификатору(ИДСтроки);
	
	Если ТекущаяСтрока.ДополнительныйРеквизит.ОсобыйВидДополнительногоРеквизита = Перечисления.атл_ОсобыеВидыДополнительныхРеквизитов.Гиперссылка Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Дополнительный реквизит """ + СокрЛП(ТекущаяСтрока.ДополнительныйРеквизит) + """ с типом данных ""Гиперссылка"" не может заполняться на стороне МК!";
		Сообщение.Сообщить();		
		ТекущаяСтрока.ЗаполняетсяНаМК = Ложь;
		Возврат;
	КонецЕсли;
	Если ТекущаяСтрока.ЗаполняетсяНаМК Тогда
		ТекущаяСтрока.ЗначениеРеквизита = Неопределено;

		ТипЗначенияДополнительногоРеквизита = ТекущаяСтрока.ДополнительныйРеквизит.ТипЗначения;
		Элементы.ДеревоДополнительныхРеквизитов.ПодчиненныеЭлементы.ДеревоДополнительныхРеквизитовЗначениеРеквизита.ОграничениеТипа = ТипЗначенияДополнительногоРеквизита;
		ТекущаяСтрока.ЗначениеРеквизита = ТипЗначенияДополнительногоРеквизита.ПривестиЗначение(ТекущаяСтрока.ЗначениеРеквизита);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДополнительныхРеквизитовДополнительныйРеквизитПриИзменении(Элемент)
	
	ДеревоДополнительныхРеквизитовДополнительныйРеквизитПриИзмененииНаСервере(Элементы.ДеревоДополнительныхРеквизитов.ТекущиеДанные.ПолучитьИдентификатор(),
								?(Элементы.ДеревоДополнительныхРеквизитов.ТекущиеДанные.ПолучитьЭлементы().Количество() > 0, Истина, Ложь));
	
КонецПроцедуры

&НаСервере
Процедура ДеревоДополнительныхРеквизитовДополнительныйРеквизитПриИзмененииНаСервере(ИДСтроки, ЕстьПодчиненные)
	
	ТекущаяСтрока = ДеревоДополнительныхРеквизитов.НайтиПоИдентификатору(ИДСтроки);	
		
	Если ЗначениеЗаполнено(ТекущаяСтрока.ДополнительныйРеквизит) И ТекущаяСтрока.ДополнительныйРеквизит.ГруппаРеквизитов 
			И ОпределениеУровняДерева(ИДСтроки) > 1	Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Доступна только группировки первого уровня. В группу можно добавлять только доп. реквизиты.";		
		Сообщение.Сообщить();
		ТекущаяСтрока.ДополнительныйРеквизит = Неопределено;
		Возврат;
		
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ДополнительныйРеквизит) И ТекущаяСтрока.ДополнительныйРеквизит.ГруппаРеквизитов Тогда
		ТекущаяСтрока.ЗаполняетсяНаМК = Ложь;	
		ТекущаяСтрока.Обязателен = Ложь;
		ТекущаяСтрока.ЗначениеРеквизита = Неопределено;
				
	Иначе
		Если ЕстьПодчиненные Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Нельзя выбрать дополнительный реквизит в качестве группы. Выберите группу или удалите подчиненные элементы.";		
			Сообщение.Сообщить();
			ТекущаяСтрока.ДополнительныйРеквизит = Неопределено;
			Возврат;
		КонецЕсли;
		
		ТипЗначенияДополнительногоРеквизита = ТекущаяСтрока.ДополнительныйРеквизит.ТипЗначения;			
		Если ТипЗначенияДополнительногоРеквизита = Неопределено Тогда
			ТекущаяСтрока.ЗначениеРеквизита 	 = Неопределено;
		Иначе
			Элементы.ДеревоДополнительныхРеквизитов.ПодчиненныеЭлементы.ДеревоДополнительныхРеквизитовЗначениеРеквизита.ОграничениеТипа = ТипЗначенияДополнительногоРеквизита;			
			ТекущаяСтрока.ЗначениеРеквизита = ТипЗначенияДополнительногоРеквизита.ПривестиЗначение(ТекущаяСтрока.ЗначениеРеквизита);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ДополнительныйРеквизит) Тогда
			ТекущаяСтрока.ЗаполняетсяНаМК = ТекущаяСтрока.ДополнительныйРеквизит.ЗаполняетсяНаМК;
			ТекущаяСтрока.Обязателен 	  = ТекущаяСтрока.ДополнительныйРеквизит.Обязателен;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущаяСтрока.ДополнительныйРеквизит) Тогда		
		ТекущаяСтрока.Картинка = ПолучитьИндексКартинки(ТекущаяСтрока.ДополнительныйРеквизит);
		ТекущаяСтрока.ГруппаРеквизитов = ТекущаяСтрока.ДополнительныйРеквизит.ГруппаРеквизитов;
		ТекущаяСтрока.ОсобыйВидДополнительногоРеквизита = ТекущаяСтрока.ДополнительныйРеквизит.ОсобыйВидДополнительногоРеквизита;
	Иначе
		ТекущаяСтрока.ОсобыйВидДополнительногоРеквизита = Перечисления.атл_ОсобыеВидыДополнительныхРеквизитов.ПустаяСсылка();
	КонецЕсли;
	
	ОбновлениеИтоговТаблицНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДополнительныхРеквизитовПослеУдаления(Элемент)
	
	ОбновлениеИтоговТаблицНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ОпределениеУровняДерева(текИДСтроки)
	
	текИндекс = 3;	
	
	мСтрокиВерхнегоУровня = ДеревоДополнительныхРеквизитов.ПолучитьЭлементы().Получить(0).ПолучитьЭлементы();
	Для Каждого текСтрока Из мСтрокиВерхнегоУровня Цикл
		// 1 уровень
		Если текСтрока.ПолучитьИдентификатор() = текИДСтроки Тогда
			текИндекс = 1;
			Прервать;
		КонецЕсли;
		
		// 2 уровень
		ПодчиненныеСтроки = текСтрока.ПолучитьЭлементы();
		Для Каждого текСтрока2 Из ПодчиненныеСтроки Цикл
			Если текСтрока2.ПолучитьИдентификатор() = текИДСтроки Тогда
				текИндекс = 2;
				Прервать;
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;
	
	Возврат текИндекс;
	
КонецФункции

&НаСервере
Функция ПолучитьИндексКартинки(ДопРеквизит)
	
	Если ДопРеквизит.ГруппаРеквизитов И ДопРеквизит.ПометкаУдаления Тогда
		Возврат 1;
	ИначеЕсли ДопРеквизит.ГруппаРеквизитов И ДопРеквизит.ПометкаУдаления = Ложь Тогда
		Возврат 0;
	ИначеЕсли ДопРеквизит.ГруппаРеквизитов = Ложь И ДопРеквизит.ПометкаУдаления Тогда
		Возврат 4;
	Иначе
		Возврат 3;			
	КонецЕсли;
		
КонецФункции

#КонецОбласти


#Область ПрочиеПроцедурыИФункииОбработкиЭлементовФормы

&НаСервере
Процедура ЗаполнитьПервоначальнымиДанными()

	Объект.ТребуетсяОтправкаНаСервер = Истина;
		
	Объект.ПорядковыйНомерЗадачиПоДокументуЗанятости = 0;
	Объект.НомерМК = "";
	
	Объект.ОтправленаДата = Дата("00010101");
	
	Объект.ПолучилДата = Дата("00010101");
	Объект.ПолучилШирота = "";
	Объект.ПолучилДолгота = "";
	
	Объект.ПрочиталДата = Дата("00010101");
	Объект.ПрочиталШирота = "";
	Объект.ПрочиталДолгота = "";
	
	Объект.ВыехалДата = Дата("00010101");
	Объект.ВыехалШирота = "";
	Объект.ВыехалДолгота = "";
	
	Объект.ПриехалДата = Дата("00010101");
	Объект.ПриехалШирота = "";
	Объект.ПриехалДолгота = "";
	
	Объект.ЗавершилДата = Дата("00010101");
	Объект.ЗавершилШирота = "";
	Объект.ЗавершилДолгота = "";
	Объект.ЗавершилАвтор = Справочники.Пользователи.ПустаяСсылка();
	Объект.ПричинаЗавершенияЗадачи = Справочники.атл_ПричиныЗавершенияЗадачМобильнымСотрудникам.ПустаяСсылка();
	Объект.ОписаниеВыполненныхРабот = "";
	
	Объект.ПринялОтклонилДата = Дата("00010101");
	Объект.ПринялОтклонилШирота = "";
	Объект.ПринялОтклонилДолгота = "";
	Объект.Принял = Ложь;
	Объект.ОтклонилПричина = Справочники.атл_ПричиныЗавершенияЗадачМобильнымСотрудникам.ПустаяСсылка();
	Объект.ОтклонилОписаниеПричины = "";
	
	Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.ПустаяСсылка();
	Объект.ИдентификаторыПакетовНаСервере.Очистить();
	
	Объект.Файлы.Очистить();
	
	ЗаполнитьТаблицуДополнительныхРеквизитов();
	
	
	
	ЗаписьНастроек = РегистрыСведений.атл_НастройкиПодсистемыУМС.СоздатьМенеджерЗаписи();
	ЗаписьНастроек.Прочитать();
	
	Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		// выставляем значения по умолчанию о необходимости проведения проверки результатов завершения	
		Объект.ТребуетсяПроверкаДанныхОВыполненныхРаботах = ЗаписьНастроек.ТребуетсяПроверкаДанныхОВыполненныхРаботахВЗадачеМобильномуСотруднику;
	КонецЕсли;
	
	Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь.атл_ОсновнойОтветственный;
	Объект.Подразделение = ПараметрыСеанса.ТекущийПользователь.атл_ОсновноеПодразделение;
	
	Для Каждого Стр из Объект.ДополнительныеРеквизиты Цикл
		Если Стр.ЗаполняетсяНаМК Тогда
			Стр.ЗначениеРеквизита = "";
		КонецЕсли;
	КонецЦикла;
	
	Объект.СогласованиеРезультатовВыполненияЗадачи.Очистить();	

	Если НЕ ЗначениеЗаполнено(Объект.ШаблонЗаполнения) Тогда
		Объект.ШаблонЗаполнения = ЗаписьНастроек.ОсновнойШаблонЗаполненияЗадачМобильнымСотрудникам;
	КонецЕсли;
	
	Объект.СпособУказанияДатыНазначения = ЗаписьНастроек.СпособУказанияДатыНазначенияПоУмолчанию;
	Если НЕ ЗначениеЗаполнено(Объект.СпособУказанияДатыНазначения) Тогда
		Объект.СпособУказанияДатыНазначения = Перечисления.атл_СпособУказанияДатыНазначения.КоВремени;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоКомментариям()
	
	Отборы = Комментарии.Отбор.Элементы;
	
	флНеУстановленОтбор = Истина;
	Для Каждого текОтбор Из Отборы Цикл
		Если текОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект") Тогда
			текОтбор.ПравоеЗначение = Объект.Ссылка;
			флНеУстановленОтбор = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если флНеУстановленОтбор Тогда 
		мНовыйОтбор = Отборы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		мНовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект");
		мНовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		мНовыйОтбор.ПравоеЗначение = Объект.Ссылка;
		мНовыйОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СчитатьЗначениеРеквизитовДатНазначения()

	Если Объект.СпособУказанияДатыНазначения = Перечисления.атл_СпособУказанияДатыНазначения.КоВремени ИЛИ НЕ ЗначениеЗаполнено(Объект.СпособУказанияДатыНазначения) Тогда
		Элементы.ГруппаСтраницДатНазначения.ТекущаяСтраница = Элементы.ГруппаСтраницДатНазначения.ПодчиненныеЭлементы.ГруппаКоВремени;		
	ИначеЕсли Объект.СпособУказанияДатыНазначения = Перечисления.атл_СпособУказанияДатыНазначения.ИнтервалВТечениеДня Тогда
		Элементы.ГруппаСтраницДатНазначения.ТекущаяСтраница = Элементы.ГруппаСтраницДатНазначения.ПодчиненныеЭлементы.ГруппаИнтервалВТечениеДня;
		ПланируемаяДата = Объект.ПланируемаяДатаВыполненияРабот;		
	ИначеЕсли Объект.СпособУказанияДатыНазначения = Перечисления.атл_СпособУказанияДатыНазначения.ИнтервалДат Тогда
		Элементы.ГруппаСтраницДатНазначения.ТекущаяСтраница = Элементы.ГруппаСтраницДатНазначения.ПодчиненныеЭлементы.ГруппаИнтервалДат;			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеКонтрагента) И Объект.ПодразделениеКонтрагента.Владелец <> Объект.Контрагент Тогда
		Объект.ПодразделениеКонтрагента = Справочники.атл_ПодразделенияКонтрагента.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) И Объект.КонтактноеЛицо.Владелец <> Объект.Контрагент Тогда
		Объект.КонтактноеЛицо = Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		// телефон контрагента;
		Объект.КонтактныйТелефон1 = Объект.Контрагент.КонтактныйТелефон1;
		Объект.КонтактныйТелефон2 = Объект.Контрагент.КонтактныйТелефон2;
		Объект.КонтактныйТелефонДляСМС = Объект.Контрагент.КонтактныйТелефонДляСМС;
		
		Объект.ПодразделениеКонтрагента = Объект.Контрагент.ОсновноеПодразделениеКонтрагента;
		Если ЗначениеЗаполнено(Объект.ПодразделениеКонтрагента) Тогда
			// Адрес подразделения;
			Объект.АдресВыполненияРабот = Объект.ПодразделениеКонтрагента.Адрес;
			Объект.КонтактноеЛицо 		 = Объект.ПодразделениеКонтрагента.КонтактноеЛицо;
			Объект.АдресВыполненияРаботШирота = Объект.ПодразделениеКонтрагента.АдресШирота;
			Объект.АдресВыполненияРаботДолгота = Объект.ПодразделениеКонтрагента.АдресДолгота;
		Иначе
			// Адрес контрагента;
			Объект.АдресВыполненияРабот = Объект.Контрагент.Адрес;
			Объект.КонтактноеЛицо 		 = Объект.Контрагент.ОсновноеКонтактноеЛицо;
			Объект.АдресВыполненияРаботШирота = Объект.Контрагент.АдресШирота;
			Объект.АдресВыполненияРаботДолгота = Объект.Контрагент.АдресДолгота;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеКонтрагентаПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеКонтрагента) Тогда
		Объект.КонтактноеЛицо = Объект.ПодразделениеКонтрагента.КонтактноеЛицо;
		Если ЗначениеЗаполнено(Объект.ПодразделениеКонтрагента) Тогда
			// Адрес подразделения контрагента;
			Объект.АдресВыполненияРабот = Объект.ПодразделениеКонтрагента.Адрес;
			Объект.АдресВыполненияРаботШирота = Объект.ПодразделениеКонтрагента.АдресШирота;
			Объект.АдресВыполненияРаботДолгота = Объект.ПодразделениеКонтрагента.АдресДолгота;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.КонтактноеЛицо = Объект.Контрагент.ОсновноеКонтактноеЛицо;
			Объект.АдресВыполненияРабот = Объект.Контрагент.Адрес;
			Объект.АдресВыполненияРаботШирота = Объект.Контрагент.АдресШирота;
			Объект.АдресВыполненияРаботДолгота = Объект.Контрагент.АдресДолгота;
		Иначе
			Объект.КонтактноеЛицо = Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
			Объект.АдресВыполненияРабот = "";
			Объект.АдресВыполненияРаботШирота = "";
			Объект.АдресВыполненияРаботДолгота = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресВыполненияРаботПриИзменении(Элемент)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("АдресВыполненияРаботПриИзмененииЗавершение", ЭтотОбъект), 
					"Был изменен адрес работ. Очистить координаты адреса?", РежимДиалогаВопрос.ДаНет);
					
КонецПроцедуры

&НаСервере
Процедура ПоказатьНомерМК()
	
	Если Объект.НомерМК = "" Тогда
		Элементы.НадписьНомерМКЗначение.Заголовок = "№ МК  не присвоен...";
	Иначе
		Элементы.НадписьНомерМКЗначение.Заголовок = "№ МК  " +  Строка(Объект.НомерМК);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДопПоляДаннымиДополнительногоРеквизита(ДополнительныйРеквизит, ЗаполняетсяНаМК, Обязателен)
	
	Если ЗначениеЗаполнено(ДополнительныйРеквизит) Тогда		
		ЗаполняетсяНаМК = ДополнительныйРеквизит.ЗаполняетсяНаМК;
		Обязателен = ДополнительныйРеквизит.Обязателен;
	Иначе		
		ЗаполняетсяНаМК = Ложь;
		Обязателен = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТипЗначенияДополнительногоРеквизита(ДополнительныйРеквизит)
	
	Если ЗначениеЗаполнено(ДополнительныйРеквизит) Тогда
		ТипЗначенияДополнительногоРеквизита = ДополнительныйРеквизит.ТипЗначения;
	Иначе
		ТипЗначенияДополнительногоРеквизита = Неопределено;	
	КонецЕсли; 
	
	Возврат ТипЗначенияДополнительногоРеквизита;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуДополнительныхРеквизитовНаКлиенте(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТаблицуДополнительныхРеквизитов();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуДополнительныхРеквизитов()
	
	Объект.ДополнительныеРеквизиты.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	атл_ДополнительныеРеквизитыЗадачиМобильномуСотруднику.Ссылка КАК ДополнительныйРеквизит,
	               |	атл_ДополнительныеРеквизитыЗадачиМобильномуСотруднику.ЗаполняетсяНаМК КАК ЗаполняетсяНаМК,
	               |	атл_ДополнительныеРеквизитыЗадачиМобильномуСотруднику.Обязателен,
	               |	атл_ДополнительныеРеквизитыЗадачиМобильномуСотруднику.Порядок КАК Порядок
	               |ИЗ
	               |	ПланВидовХарактеристик.атл_ДополнительныеРеквизитыЗадачиМобильномуСотруднику КАК атл_ДополнительныеРеквизитыЗадачиМобильномуСотруднику
	               |ГДЕ
	               |	атл_ДополнительныеРеквизитыЗадачиМобильномуСотруднику.ПометкаУдаления = ЛОЖЬ
				   |	И атл_ДополнительныеРеквизитыЗадачиМобильномуСотруднику.ГруппаРеквизитов = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗаполняетсяНаМК,
	               |	Порядок,
	               |	атл_ДополнительныеРеквизитыЗадачиМобильномуСотруднику.Наименование
	               |АВТОУПОРЯДОЧИВАНИЕ";	
				   
	Объект.ДополнительныеРеквизиты.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуКомментариев(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Элементы.Комментарии.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВременныйТекущийстатус()
	
	мТекущийСтатус = "";

	Если Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.ПустаяСсылка() или 
		Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Черновик Тогда
		мТекущийСтатус = "Черновик";
		
	ИначеЕсли Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.ГотоваКОтправке Тогда
		мТекущийСтатус = "Готова к отправке";
		
	ИначеЕсли Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Отправлена Тогда
		мТекущийСтатус = "Отправлена (" + Объект.ОтправленаДата + ")";
		
	ИначеЕсли Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Получил Тогда
		мТекущийСтатус = "Получил (" + Объект.ПолучилДата + ")";
		
	ИначеЕсли Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Прочитал Тогда
		мТекущийСтатус = "Прочитал (" + Объект.ПрочиталДата + ")";
		
	ИначеЕсли Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Выехал Тогда
		мТекущийСтатус = "Выехал (" + Объект.ВыехалДата + ")";
		
	ИначеЕсли Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Приехал Тогда
		мТекущийСтатус = "Приехал (" + Объект.ПриехалДата + ")";
		
	ИначеЕсли Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Принял Тогда
		мТекущийСтатус = "Принял (" + Объект.ПринялОтклонилДата + ")";
	
	ИначеЕсли Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Отклонил Тогда
		мТекущийСтатус = "Отклонена (" + Объект.ПринялОтклонилДата + ").";
		мТекущийСтатус = мТекущийСтатус + " Причина: " + Объект.ОтклонилПричина;
		Если ЗначениеЗаполнено(Объект.ОтклонилОписаниеПричины) Тогда
			мТекущийСтатус = мТекущийСтатус + Символы.ПС + " (" + Объект.ОтклонилОписаниеПричины + ")";
		КонецЕсли;
		
		ИначеЕсли Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.ЗавершилНаПроверке Тогда
		
		мТекущийСтатус = "Завершена (" + Объект.ЗавершилДата + "). НА ПРОВЕРКЕ!";
		мТекущийСтатус = мТекущийСтатус + " Автор: " + Объект.ЗавершилАвтор + ".";
		мТекущийСтатус = мТекущийСтатус + " Причина завершения: " + Объект.ПричинаЗавершенияЗадачи + ".";
		
	ИначеЕсли Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.ЗавершилНаДоработке Тогда
		
		мТекущийСтатус = "Завершена (" + Объект.ЗавершилДата + "). НА ДОРАБОТКЕ!";
		мТекущийСтатус = мТекущийСтатус + " Автор: " + Объект.ЗавершилАвтор + ".";
		мТекущийСтатус = мТекущийСтатус + " Причина завершения: " + Объект.ПричинаЗавершенияЗадачи + ".";
		
	ИначеЕсли Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Завершил Тогда
		мТекущийСтатус = "Завершена (" + Объект.ЗавершилДата + ").";
		мТекущийСтатус = мТекущийСтатус + " Автор: " + Объект.ЗавершилАвтор + ".";
		мТекущийСтатус = мТекущийСтатус + " Причина завершения: " + Объект.ПричинаЗавершенияЗадачи + ".";
		
	КонецЕсли;
	
	Элементы.НадписьТекущийСтатус.Заголовок = мТекущийСтатус;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКнопок()
	
	Если НЕ ЗначениеЗаполнено(Объект.ТекущийСтатус) ИЛИ 
		Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Черновик Тогда
		
		Элементы.Записать.Видимость = Истина;
		Элементы.ОтправитьЗадачу.Видимость = Истина;
	Иначе
		
		Элементы.Записать.Видимость = Ложь;
		Элементы.ОтправитьЗадачу.Видимость = Ложь;

	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Объект.ТекущийСтатус) Тогда
		
		//Кнопка завершения задачи
		Если Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Черновик ИЛИ  
				Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.ГотоваКОтправке ИЛИ 
				Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Отправлена ИЛИ 
				Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Получил ИЛИ 
				Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Прочитал ИЛИ 
				Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Принял ИЛИ 
				Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Выехал ИЛИ 
				Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Приехал Тогда
				
			Элементы.ЗавершитьЗадачу.Видимость = Истина;
		Иначе 
			Элементы.ЗавершитьЗадачу.Видимость = Ложь;
		КонецЕсли;
		
		//кнопки принятия и отклонения задачи
		Если Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.ЗавершилНаПроверке Тогда
			Элементы.ОтклонитьРезультатыРабот.Видимость = Истина;
			Элементы.ПринятьРезультатыРабот.Видимость = Истина;									
		Иначе 
			Элементы.ОтклонитьРезультатыРабот.Видимость = Ложь;
			Элементы.ПринятьРезультатыРабот.Видимость = Ложь;
		КонецЕсли;
		
	Иначе
		Элементы.ЗавершитьЗадачу.Видимость = Ложь;
		Элементы.ОтклонитьРезультатыРабот.Видимость = Ложь;
		Элементы.ПринятьРезультатыРабот.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПолейИКнопок()
	
	Если Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Черновик ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка)	
			ИЛИ НЕ ЗначениеЗаполнено(Объект.ТекущийСтатус) Тогда
		ТолькоПросмотрПолейДляРедактирования = Ложь;
	Иначе
		ТолькоПросмотрПолейДляРедактирования = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументЗанятостиРесурса) Тогда		
		Элементы.НеУказанДокументЗанятостиРесурса.Видимость = Ложь;
		Элементы.УказанДокументЗанятостиРесурса.Видимость = Истина;
	Иначе
		Элементы.НеУказанДокументЗанятостиРесурса.Видимость = Истина;
		Элементы.УказанДокументЗанятостиРесурса.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаОсновная.ТолькоПросмотр = ТолькоПросмотрПолейДляРедактирования;
	Элементы.ГруппаДополнительныеРеквизиты.ТолькоПросмотр = ТолькоПросмотрПолейДляРедактирования;
	Элементы.ДополнительныеРеквизитыЗаполнитьДополнительныеРеквизиты.Доступность = НЕ ТолькоПросмотрПолейДляРедактирования;
	Элементы.ГруппаШаблонаЗаполнить.Доступность = НЕ ТолькоПросмотрПолейДляРедактирования;
	Элементы.ГруппаОтветственный.ТолькоПросмотр = ТолькоПросмотрПолейДляРедактирования;
	Элементы.ГруппаНомерДата.ТолькоПросмотр = ТолькоПросмотрПолейДляРедактирования;
	Элементы.Шапка.ТолькоПросмотр = ТолькоПросмотрПолейДляРедактирования;
	Элементы.ТребуетсяПроверкаДанныхОВыполненныхРаботах.Доступность = НЕ ТолькоПросмотрПолейДляРедактирования;
	Элементы.ПодборИсполнителя.Доступность = НЕ ТолькоПросмотрПолейДляРедактирования;
	
	
	УстановитьДоступностьКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеИтоговТаблицНаКлиенте()
	
	//Элементы.ГруппаДополнительныеРеквизиты.Заголовок = "Дополнительные реквизиты" + ?(Объект.ДополнительныеРеквизиты.Количество() = 0, ""," (" + Объект.ДополнительныеРеквизиты.Количество() + " шт.)");
	
КонецПроцедуры

&НаСервере
Процедура ОбновлениеИтоговТаблицНаСервере()
	
	мКоличествоДопРеквизитов = 0;
	
	мСтрокиВерхнегоУровня = ДеревоДополнительныхРеквизитов.ПолучитьЭлементы().Получить(0).ПолучитьЭлементы();
	Для Каждого текСтрока Из мСтрокиВерхнегоУровня Цикл
		Если ЗначениеЗаполнено(текСтрока.ДополнительныйРеквизит) И текСтрока.ДополнительныйРеквизит.ГруппаРеквизитов Тогда			
			мКоличествоДопРеквизитов = мКоличествоДопРеквизитов + текСтрока.ПолучитьЭлементы().Количество();									
		Иначе
			мКоличествоДопРеквизитов = мКоличествоДопРеквизитов + 1;			
		КонецЕсли;
	КонецЦикла;	

	Элементы.ГруппаДополнительныеРеквизиты.Заголовок = "Дополнительные реквизиты" + ?(мКоличествоДопРеквизитов = 0, ""," (" + мКоличествоДопРеквизитов + " шт.)");

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеВФормеНаСервере()
	
	ПоказатьНомерМК();
		
	Элементы.Комментарии.Обновить();		
	ОбновлениеИтоговТаблицНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПередЗаписью()
	
	Если Не мОтправитьЗадачу Тогда
		ОпределитьНомерМК();
	КонецЕсли;
	
	//корректируем текущий статус
	Если ЗначениеЗаполнено(Объект.Исполнитель) Тогда
		Объект.ТекущийСтатус = атл_УправлениеМобильнымиСотрудниками.ПолучитьТекущийСтатусЗадачиУМС(Объект.Ссылка);	
	КонецЕсли;
	
	ЗаполнитьТаблицуДополнительныеРеквизиты();
	ЗаполнитьЗначениеРеквизитовДатНазначения();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначениеРеквизитовДатНазначения()
	
	Если Элементы.ГруппаСтраницДатНазначения.ТекущаяСтраница = Элементы.ГруппаСтраницДатНазначения.ПодчиненныеЭлементы.ГруппаКоВремени Тогда		
		Объект.СпособУказанияДатыНазначения = Перечисления.атл_СпособУказанияДатыНазначения.КоВремени;
		Объект.ИнтервалВремениВТечениеДня = Справочники.атл_ИнтервалыВремениВТечениеДня.ПустаяСсылка();		
		Объект.ПланируемаяДатаОкончанияРабот = Дата("00010101");
	ИначеЕсли Элементы.ГруппаСтраницДатНазначения.ТекущаяСтраница = Элементы.ГруппаСтраницДатНазначения.ПодчиненныеЭлементы.ГруппаИнтервалВТечениеДня Тогда
		Объект.СпособУказанияДатыНазначения = Перечисления.атл_СпособУказанияДатыНазначения.ИнтервалВТечениеДня;		
		Объект.ПланируемаяДатаВыполненияРабот = ПланируемаяДата;
		Объект.ПланируемаяДатаОкончанияРабот = ПланируемаяДата;
		Если ЗначениеЗаполнено(Объект.ИнтервалВремениВТечениеДня) Тогда
			Объект.ПланируемаяДатаВыполненияРабот = Объект.ПланируемаяДатаВыполненияРабот + ПолучитьВремяДляПрибавленияКДате(Объект.ИнтервалВремениВТечениеДня.ВремяНачало);
			Объект.ПланируемаяДатаОкончанияРабот = Объект.ПланируемаяДатаОкончанияРабот + ПолучитьВремяДляПрибавленияКДате(Объект.ИнтервалВремениВТечениеДня.ВремяКонец);			
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницДатНазначения.ТекущаяСтраница = Элементы.ГруппаСтраницДатНазначения.ПодчиненныеЭлементы.ГруппаИнтервалДат Тогда
		Объект.СпособУказанияДатыНазначения = Перечисления.атл_СпособУказанияДатыНазначения.ИнтервалДат;
		Объект.ИнтервалВремениВТечениеДня = Справочники.атл_ИнтервалыВремениВТечениеДня.ПустаяСсылка();
	КонецЕсли;	
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройкуПодключенияМобильныхСотрудников(Исполнитель)
	
	ЗаписьРегистра = РегистрыСведений.атл_НастройкиПодключенияМобильныхСотрудников.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Пользователь = Исполнитель;
	ЗаписьРегистра.Прочитать();
	
	мНастройка = Новый Структура;
	мНастройка.Вставить("ЯвляетсяПользователемМК", ЗаписьРегистра.ЯвляетсяПользователемМК);
	мНастройка.Вставить("АвторизованНаСервере", ЗаписьРегистра.АвторизованНаСервере);		

	Возврат мНастройка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокМобильныхСотрудников()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	атл_НастройкиПодключенияМобильныхСотрудников.Пользователь
	|ИЗ
	|	РегистрСведений.атл_НастройкиПодключенияМобильныхСотрудников КАК атл_НастройкиПодключенияМобильныхСотрудников
	|ГДЕ
	|	атл_НастройкиПодключенияМобильныхСотрудников.АвторизованНаСервере = ИСТИНА
	|	И атл_НастройкиПодключенияМобильныхСотрудников.ЯвляетсяПользователемМК = ИСТИНА";
	
	МассивДоступныхПользователей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
	Возврат МассивДоступныхПользователей;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораИсполнителя(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено И ТипЗнч(РезультатЗакрытия) = Тип("СправочникСсылка.Пользователи") Тогда
		Объект.Исполнитель = РезультатЗакрытия;		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДеревоДополнительныхРеквизитов(Шаблон)
		
	мСтрокиВерхнегоУровня = ДеревоДополнительныхРеквизитов.ПолучитьЭлементы().Получить(0).ПолучитьЭлементы();
	Для Каждого текСтрока Из мСтрокиВерхнегоУровня Цикл
		Если текСтрока.ДополнительныйРеквизит.ГруппаРеквизитов Тогда			
			ПодчиненныеСтроки = текСтрока.ПолучитьЭлементы();
			Для Каждого текСтрока2 Из ПодчиненныеСтроки Цикл
				Если текСтрока2.Автозаполнение И ЗначениеЗаполнено(текСтрока2.ШаблонАвтозаполнения) Тогда
					ЗаполнитьДополнительныйРеквизитПоШаблонуЗаполнения(текСтрока2, текСтрока2.ШаблонАвтозаполнения);
				КОнецЕсли;
			КонецЦикла;
		ИначеЕсли текСтрока.Автозаполнение И ЗначениеЗаполнено(текСтрока.ШаблонАвтозаполнения) Тогда
			ЗаполнитьДополнительныйРеквизитПоШаблонуЗаполнения(текСтрока, текСтрока.ШаблонАвтозаполнения);	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеСтрокиДереваДополнительныхРеквизитов(Стр, ЕстьОшибкаСЗаполнениемПолей)
	
	Если Не Стр.ЗаполняетсяНаМК и Стр.Обязателен и Не ЗначениеЗаполнено(Стр.ЗначениеРеквизита) Тогда
		Сообщить("Для доп. реквизита " + Стр.ДополнительныйРеквизит + " установлен флаг 'Обязателен' и не заполнено поле 'Значение реквизита'! Либо снимите флаг, либо заполните поле 'Значение реквизита'", СтатусСообщения.Внимание);
		ЕстьОшибкаСЗаполнениемПолей = Истина;
	КонецЕсли;
	
	//проверяем заполненность списка возможных значений
	Если ЗначениеЗаполнено(Стр.ДополнительныйРеквизит) Тогда
		Если Строка(Стр.ДополнительныйРеквизит.ТипЗначения) = Строка(Тип("СправочникСсылка.атл_ЗначенияДополнительныхРеквизитов")) Тогда
			Если Стр.ЗаполняетсяНаМК Тогда
				//проверим, есть ли хоть одно значение для выбора...
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	атл_ЗначенияДополнительныхРеквизитов.Ссылка
				|ИЗ
				|	Справочник.атл_ЗначенияДополнительныхРеквизитов КАК атл_ЗначенияДополнительныхРеквизитов
				|ГДЕ
				|	атл_ЗначенияДополнительныхРеквизитов.ПометкаУдаления = ЛОЖЬ
				|	И атл_ЗначенияДополнительныхРеквизитов.Владелец = &Владелец
				|
				|УПОРЯДОЧИТЬ ПО
				|	атл_ЗначенияДополнительныхРеквизитов.Наименование
				|АВТОУПОРЯДОЧИВАНИЕ";
				
				Запрос.УстановитьПараметр("Владелец", Стр.ДополнительныйРеквизит);
				
				Результат = Запрос.Выполнить();
				ВыборкаДопустимыхЗначений = Результат.Выбрать();
				
				Если ВыборкаДопустимыхЗначений.Количество() = 0 Тогда
					//нет значений для выбора, выгружать нельзя
					Сообщить("У дополнительного реквизита '" + Стр.ДополнительныйРеквизит + "' не заданы значения для выбора! Удалите этот дополнительный реквизит из документа, либо заполните список возможных значений реквизита!");
					ЕстьОшибкаСЗаполнениемПолей = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ШаблонЗаполненияПриИзмененииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		ШаблонЗаполненияПриИзмененииНаСервере();	
	КонецЕсли;		
	
	СтарыйШаблонЗаполнения = Объект.ШаблонЗаполнения		
		
КонецПроцедуры

&НаСервере
Процедура ШаблонЗаполненияПриИзмененииНаСервере()
	
	ЗаполнитьДеревоДополнительныхРеквизитов(Объект.ШаблонЗаполнения);	
	ОбновлениеИтоговТаблицНаСервере();
		
КонецПроцедуры

#КонецОбласти


#Область ПрочиеПроцедурыИФункии

&НаСервере
Процедура ЗаполнитьУсловноеОформление()
	
	ЭлементыУФ = УсловноеОформление.Элементы;
	ЭлементыУФ.Очистить();
	
	// Текст Дополнительные реквизиты
	НовыйЭлементУФ = ЭлементыУФ.Добавить();
	
	ПолеЭлемента = НовыйЭлементУФ.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоДополнительныхРеквизитовДополнительныйРеквизит");
	
	ОтборЭлемента = НовыйЭлементУФ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДополнительныхРеквизитов.СтрокаВерхнегоУровня");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	НовыйЭлементУФ.Оформление.УстановитьЗначениеПараметра("Текст", "Дополнительные реквизиты");
	
	// Не доступность строки верхнего уровня
	НовыйЭлементУФ = ЭлементыУФ.Добавить();
	
	ПолеЭлемента = НовыйЭлементУФ.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоДополнительныхРеквизитовДополнительныйРеквизит");
	ПолеЭлемента = НовыйЭлементУФ.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоДополнительныхРеквизитовЗначениеРеквизита");
	ПолеЭлемента = НовыйЭлементУФ.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоДополнительныхРеквизитовЗаполняетсяНаМК");
	ПолеЭлемента = НовыйЭлементУФ.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоДополнительныхРеквизитовОбязателен");
	ПолеЭлемента = НовыйЭлементУФ.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоДополнительныхРеквизитовАвтозаполнение");
		
	ОтборЭлемента = НовыйЭлементУФ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДополнительныхРеквизитов.СтрокаВерхнегоУровня");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	НовыйЭлементУФ.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Не доступность колонок для группы реквизитов
	НовыйЭлементУФ = ЭлементыУФ.Добавить();
	
	ПолеЭлемента = НовыйЭлементУФ.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоДополнительныхРеквизитовЗначениеРеквизита");
	ПолеЭлемента = НовыйЭлементУФ.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоДополнительныхРеквизитовЗаполняетсяНаМК");
	ПолеЭлемента = НовыйЭлементУФ.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоДополнительныхРеквизитовОбязателен");	
	ПолеЭлемента = НовыйЭлементУФ.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоДополнительныхРеквизитовАвтозаполнение");
		
	ОтборЭлемента = НовыйЭлементУФ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДополнительныхРеквизитов.ГруппаРеквизитов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента = НовыйЭлементУФ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДополнительныхРеквизитов.ДополнительныйРеквизит");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		
	НовыйЭлементУФ.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Доступность значения реквизита
	НовыйЭлементУФ = ЭлементыУФ.Добавить();
	
	ПолеЭлемента = НовыйЭлементУФ.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоДополнительныхРеквизитовАвтозаполнение");	
	
	ОтборЭлемента = НовыйЭлементУФ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДополнительныхРеквизитов.ШаблонАвтозаполнения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;    	
	
	НовыйЭлементУФ.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Условие при МК
	НовыйЭлементУФ = ЭлементыУФ.Добавить();
	
	ПолеЭлемента = НовыйЭлементУФ.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоДополнительныхРеквизитовЗначениеРеквизита");
	ПолеЭлемента = НовыйЭлементУФ.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоДополнительныхРеквизитовАвтозаполнение");	
	
	ОтборЭлемента = НовыйЭлементУФ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДополнительныхРеквизитов.ЗаполняетсяНаМК");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;	
		
	НовыйЭлементУФ.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Условия для видов доп. реквизитов Координата и Коллекция картинок
	НовыйЭлементУФ = ЭлементыУФ.Добавить();
	
	ПолеЭлемента = НовыйЭлементУФ.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоДополнительныхРеквизитовЗаполняетсяНаМК");
	ПолеЭлемента = НовыйЭлементУФ.Поля.Элементы.Добавить();
		
	ОтборЭлемента = НовыйЭлементУФ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДополнительныхРеквизитов.ОсобыйВидДополнительногоРеквизита");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокОсобыхВидов = Новый СписокЗначений;
	СписокОсобыхВидов.Добавить(Перечисления.атл_ОсобыеВидыДополнительныхРеквизитов.КоллекцияКартинок);
	СписокОсобыхВидов.Добавить(Перечисления.атл_ОсобыеВидыДополнительныхРеквизитов.Координата);
	ОтборЭлемента.ПравоеЗначение = СписокОсобыхВидов;	
		
	НовыйЭлементУФ.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНомерМК()
			
	Если Не ЗначениеЗаполнено(Объект.НомерМК) Тогда
		Если ЗначениеЗаполнено(Объект.ДокументЗанятостиРесурса) Тогда
			//пытаемся определить, сколько уже документов
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	атл_ЗадачаМобильномуСотруднику.ПорядковыйНомерЗадачиПоДокументуЗанятости КАК ПорядковыйНомерЗадачиПоДокументуЗанятости
			|ИЗ
			|	Документ.атл_ЗадачаМобильномуСотруднику КАК атл_ЗадачаМобильномуСотруднику
			|ГДЕ
			|	атл_ЗадачаМобильномуСотруднику.ДокументЗанятостиРесурса = &ДокументЗанятостиРесурса
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПорядковыйНомерЗадачиПоДокументуЗанятости УБЫВ
			|АВТОУПОРЯДОЧИВАНИЕ";
			
			Запрос.УстановитьПараметр("ДокументЗанятостиРесурса", Объект.ДокументЗанятостиРесурса);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Если Выборка.Количество() = 0 Тогда
				Объект.ПорядковыйНомерЗадачиПоДокументуЗанятости = 1;
			Иначе  //Количество > 0 
				Выборка.Следующий();
				Объект.ПорядковыйНомерЗадачиПоДокументуЗанятости = Выборка.ПорядковыйНомерЗадачиПоДокументуЗанятости + 1;
			КонецЕсли;
			
			Объект.НомерМК = СокрЛП(Объект.ДокументЗанятостиРесурса.Номер) + "/" + Объект.ПорядковыйНомерЗадачиПоДокументуЗанятости;
			
		ИначеЕсли ЗначениеЗаполнено(Объект.ЗаявкаНомер) Тогда
			//пытаемся определить, сколько уже документов
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	атл_ЗадачаМобильномуСотруднику.ПорядковыйНомерЗадачиПоДокументуЗанятости КАК ПорядковыйНомерЗадачиПоДокументуЗанятости
			|ИЗ
			|	Документ.атл_ЗадачаМобильномуСотруднику КАК атл_ЗадачаМобильномуСотруднику
			|ГДЕ
			|	атл_ЗадачаМобильномуСотруднику.ЗаявкаНомер = &ЗаявкаНомер
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПорядковыйНомерЗадачиПоДокументуЗанятости УБЫВ
			|АВТОУПОРЯДОЧИВАНИЕ";
			
			Запрос.УстановитьПараметр("ЗаявкаНомер", Объект.ЗаявкаНомер);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Если Выборка.Количество() = 0 Тогда
				Объект.ПорядковыйНомерЗадачиПоДокументуЗанятости = 1;
			Иначе  //Количество > 0 
				Выборка.Следующий();
				Объект.ПорядковыйНомерЗадачиПоДокументуЗанятости = Выборка.ПорядковыйНомерЗадачиПоДокументуЗанятости + 1;
			КонецЕсли;
			
			Объект.НомерМК = СокрЛП(Объект.ЗаявкаНомер) + "/" + Объект.ПорядковыйНомерЗадачиПоДокументуЗанятости;
		Иначе
			Объект.НомерМК = СокрЛП(Объект.Номер);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗадачуНаКлиенте(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
			Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
				Объект.Дата = ТекущаяДата();
			КонецЕсли;
			ПараметрыЗаписи = Новый Структура;
			ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
			ЭтотОбъект.Записать(ПараметрыЗаписи);
		Иначе
			Возврат;
		КонецЕсли;	
	КонецЕсли;

	ОтправитьЗадачуНаСервере();	
	
	мОтправитьЗадачу = Ложь;
	
КонецПроцедуры 

&НаСервере
Процедура ОтправитьЗадачуНаСервере()
		
	Если ЕстьОшибкиВЗадаче() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отправка задачи мобильному сотруднику прервана!";
		Сообщение.Сообщить();		
		Возврат;
	КонецЕсли;
	
	Если Объект.ТребуетсяОтправкаНаСервер Тогда
				
		Если Объект.ЗавершилДата = Дата("00010101") Тогда
			ВидПакета = "Новая задача";
		Иначе
			//указана дата завершения
			//определяем вид происходящего события
			Если Объект.ТребуетсяПроверкаДанныхОВыполненныхРаботах Тогда
				Если ЗначениеЗаполнено(мВидСобытияСогласования) Тогда
					//производится согласование
					Если мВидСобытияСогласования = Перечисления.атл_ВидыСобытийСогласованияВыполненияРабот.Принятие Тогда
						ВидПакета = "Принятие задачи";
					ИначеЕсли мВидСобытияСогласования = Перечисления.атл_ВидыСобытийСогласованияВыполненияРабот.Отклонение Тогда
						ВидПакета = "Отклонение задачи";
					КонецЕсли;
				Иначе
					ВидПакета = "Завершение задачи"; //это завершение с согласованием...
				КонецЕсли;
			Иначе
				ВидПакета = "Завершение задачи";
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.Проведен Тогда
			Если Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Черновик или
				Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.ПустаяСсылка() Тогда
				
				Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.ГотоваКОтправке;
				ОпределитьНомерМК();
				ПоказатьНомерМК();
			КонецЕсли;
			ПараметрыЗаписи = Новый Структура;
			ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
			ЭтотОбъект.Записать(ПараметрыЗаписи);
		Иначе
			Попытка 
				Если ВидПакета = "Новая задача" Тогда
					Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.ГотоваКОтправке;
					ОпределитьНомерМК();
					ПоказатьНомерМК();
				КонецЕсли;
				ПараметрыЗаписи = Новый Структура;
				ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
				ЭтотОбъект.Записать(ПараметрыЗаписи);
			Исключение
				//не удалось записать/провести
			КонецПопытки;
		КонецЕсли;
		
		НоваяЗапись = РегистрыСведений.атл_ПакетыНаОтправку.СоздатьМенеджерЗаписи();
		НоваяЗапись.ВнутреннийИдентификаторПакета = атл_УправлениеМобильнымиСотрудниками.ПолучитьИдентификаторНовогоПакетаНаОтправку();
		НоваяЗапись.Объект = Объект.Ссылка;
		НоваяЗапись.ВидДанных = "Задача";
		НоваяЗапись.ВидПакета = ВидПакета;
		НоваяЗапись.ДатаСозданияПакета = ТекущаяДата();
		НоваяЗапись.ПолучательПакета = Объект.Исполнитель;
		НоваяЗапись.ТребуетсяПодтверждениеДоставкиДоПолучателя = Истина;
		НоваяЗапись.Записать();
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отправка на сервер не требуется!";
		Сообщение.Сообщить();		
	КонецЕсли;		

	
	//Только на 8.3
	УстановитьВременныйТекущийстатус();
	
	ОбновитьДанныеВФормеНаСервере();
	
	УстановитьДоступностьПолейИКнопок();

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачуОповещениеВопроса(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт	
		
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
			Записать();						
		Иначе
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	
	Если Не ИсполнительАвторизован(Объект.Исполнитель) Тогда
		Возврат;
	КонецЕсли;
	
	мОповещение = Новый ОписаниеОповещения("ЗавершитьЗадачуНаКлиенте", ЭтотОбъект);
	ОткрытьФорму("Документ.атл_ЗадачаМобильномуСотруднику.Форма.ФормаЗавершенияЗадачи",, ЭтаФорма,,,,мОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачуНаКлиенте(РезультатЗавершения, ДополнительныеПараметры) Экспорт	
		
	ЗавершитьЗадачуНаСервере(РезультатЗавершения);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьЗадачуНаСервере(РезультатЗавершения) 	
	
	Если РезультатЗавершения <> Неопределено Тогда
		Если ТипЗнч(РезультатЗавершения) = Тип("Структура") Тогда
			Объект.ПричинаЗавершенияЗадачи = РезультатЗавершения.ПричинаЗавершенияЗадачи;
			Объект.ОписаниеВыполненныхРабот = РезультатЗавершения.ОписаниеВыполненныхРабот;
			Объект.ЗавершилАвтор = ПараметрыСеанса.ТекущийПользователь;
			Объект.ЗавершилДата = ТекущаяДата();
			Объект.ЗавершилДиспетчер = Истина;
			Объект.ТребуетсяОтправкаНаСервер = Истина;
			
			Попытка
				Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Завершил;
				Если Объект.ТребуетсяПроверкаДанныхОВыполненныхРаботах Тогда
					//формируем запись о том, что проведена проверка
					НоваяЗаписьСогласования = Объект.СогласованиеРезультатовВыполненияЗадачи.Добавить();
					НоваяЗаписьСогласования.Автор = Объект.ЗавершилАвтор;
					НоваяЗаписьСогласования.ВидСобытияСогласования = Перечисления.атл_ВидыСобытийСогласованияВыполненияРабот.Принятие;
					НоваяЗаписьСогласования.ДатаСобытия = Объект.ЗавершилДата;
					
					ТекстКомментария = "Задача завершена пользователем '" + Объект.ЗавершилАвтор + "'. Причина завершения '" + 
										РезультатЗавершения.ПричинаЗавершенияЗадачи + "'. Дополнительная проверка задачи не требуется.";
				Иначе
					ТекстКомментария = "Задача завершена пользователем '" + Объект.ЗавершилАвтор + "'. Причина завершения '" + 
										РезультатЗавершения.ПричинаЗавершенияЗадачи + "'.";
				КонецЕсли;
				
				ЭтотОбъект.Записать();
				
				ЗаписьКомментария = РегистрыСведений.атл_КомментарииКОбъектамУМС.СоздатьМенеджерЗаписи();
				ЗаписьКомментария.Объект = Объект.Ссылка;
				ЗаписьКомментария.Автор = ПараметрыСеанса.ТекущийПользователь;
				ЗаписьКомментария.ДатаСоздания = ТекущаяДата();
				ЗаписьКомментария.ДатаРегистрации = ЗаписьКомментария.ДатаСоздания;
				ЗаписьКомментария.ТипКомментария = Перечисления.атл_ТипыКомментариевКОбъектамУМС.КомментарийКЗавершениюЗадачиМобильномуСотруднику;
				ЗаписьКомментария.ИдентификаторИнформационнойБазы = 0;
				ЗаписьКомментария.ИдентификаторКомментария = атл_УправлениеМобильнымиСотрудниками.ПолучитьИдентификаторНовогоКомментария();
				ЗаписьКомментария.Текст = ТекстКомментария; 
				ЗаписьКомментария.Записать();
				
				ОтправитьЗадачуНаСервере();
			Исключение
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не удалось записать изменения в документе!";
				Сообщение.Сообщить();				
				
			КонецПопытки;
			
			УстановитьВременныйТекущийстатус();
		КонецЕсли;
	КонецЕсли;	
	

КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьРезультатыРаботНаКлиенте(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
			ЭтотОбъект.Записать();								
		Иначе
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	
	мОповещение = Новый ОписаниеОповещения("ВыполнитьПроцедуруСогласованияНаКлиенте", ЭтотОбъект);
	ОткрытьФорму("Документ.атл_ЗадачаМобильномуСотруднику.Форма.ОтклонениеРезультатовВыполненияЗадачиМобильномуСотруднику",, ЭтаФорма,,,,мОповещение);		
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьРезультатыРаботНаКлиенте(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
			ЭтотОбъект.Записать();								
		Иначе
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	
	ВыполнитьПроцедуруСогласованияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроцедуруСогласованияНаКлиенте(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ВыполнитьПроцедуруСогласованияНаСервере(РезультатЗакрытия);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроцедуруСогласованияНаСервере(РезультатОтклонения = Неопределено)
		
	Если мВидСобытияСогласования = Перечисления.атл_ВидыСобытийСогласованияВыполненияРабот.Принятие Тогда
		//здесь открывать дополнительную форму открывать не будем
		НоваяЗаписьСогласования = Объект.СогласованиеРезультатовВыполненияЗадачи.Добавить();
		НоваяЗаписьСогласования.Автор = ПараметрыСеанса.ТекущийПользователь;
		НоваяЗаписьСогласования.ВидСобытияСогласования = мВидСобытияСогласования;
		НоваяЗаписьСогласования.ДатаСобытия = ТекущаяДата();
		
		Объект.ТребуетсяОтправкаНаСервер = Истина;
		
		Попытка
			Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.Завершил;
			Записать();
			
			ЗаписьКомментария = РегистрыСведений.атл_КомментарииКОбъектамУМС.СоздатьМенеджерЗаписи();
			ЗаписьКомментария.Объект = Объект.Ссылка;
			ЗаписьКомментария.Автор = ПараметрыСеанса.ТекущийПользователь;
			ЗаписьКомментария.ДатаСоздания = ТекущаяДата();
			ЗаписьКомментария.ДатаРегистрации = ЗаписьКомментария.ДатаСоздания;
			ЗаписьКомментария.ТипКомментария = Перечисления.атл_ТипыКомментариевКОбъектамУМС.КомментарийКПринятиюРезультатовВыполненияЗадачиМобильномуСотруднику;
			ЗаписьКомментария.ИдентификаторИнформационнойБазы = 0;
			ЗаписьКомментария.ИдентификаторКомментария = атл_УправлениеМобильнымиСотрудниками.ПолучитьИдентификаторНовогоКомментария();
			ЗаписьКомментария.Текст = "Принята пользователем '" + ЗаписьКомментария.Автор + "'.";
			ЗаписьКомментария.Записать();
			
			ОтправитьЗадачуНаСервере();
		Исключение
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось записать изменения в документе!";
			Сообщение.Сообщить();			
			
		КонецПопытки;
		
		УстановитьВременныйТекущийстатус();
				
	ИначеЕсли мВидСобытияСогласования = Перечисления.атл_ВидыСобытийСогласованияВыполненияРабот.Отклонение Тогда
				
		Если РезультатОтклонения <> Неопределено Тогда
			Если ТипЗнч(РезультатОтклонения) = Тип("Структура") Тогда
				
				НоваяЗаписьСогласования = Объект.СогласованиеРезультатовВыполненияЗадачи.Добавить();
				НоваяЗаписьСогласования.Автор = ПараметрыСеанса.ТекущийПользователь;
				НоваяЗаписьСогласования.ВидСобытияСогласования = мВидСобытияСогласования;
				НоваяЗаписьСогласования.ДатаСобытия = ТекущаяДата();
				НоваяЗаписьСогласования.ПричинаОтклоненияРезультатовВыполнения = РезультатОтклонения.ПричинаОтклоненияРезультатовВыполнения;
				НоваяЗаписьСогласования.ОписаниеСобытия						   = РезультатОтклонения.ОписаниеПричиныОтклоненияРезультатовВыполнения;
				
				Объект.ТребуетсяОтправкаНаСервер = Истина;
				
				Попытка
					Объект.ТекущийСтатус = Перечисления.атл_СтатусыЗадачМобильнымСотрудникам.ЗавершилНаДоработке;
					Записать();
					
					ЗаписьКомментария = РегистрыСведений.атл_КомментарииКОбъектамУМС.СоздатьМенеджерЗаписи();
					ЗаписьКомментария.Объект = Объект.Ссылка;
					ЗаписьКомментария.Автор = ПараметрыСеанса.ТекущийПользователь;
					ЗаписьКомментария.ДатаСоздания = ТекущаяДата();
					ЗаписьКомментария.ДатаРегистрации = ЗаписьКомментария.ДатаСоздания;
					ЗаписьКомментария.ТипКомментария = Перечисления.атл_ТипыКомментариевКОбъектамУМС.КомментарийКОтклонениюРезультатовВыполненияЗадачиМобильномуСотруднику;
					ЗаписьКомментария.ИдентификаторИнформационнойБазы = 0;
					ЗаписьКомментария.ИдентификаторКомментария = атл_УправлениеМобильнымиСотрудниками.ПолучитьИдентификаторНовогоКомментария();
					ЗаписьКомментария.Текст = "Отклонена пользователем '" + ЗаписьКомментария.Автор 
										+ "'. Причина: '" + НоваяЗаписьСогласования.ПричинаОтклоненияРезультатовВыполнения + "'";
					ЗаписьКомментария.Записать();
					
					ОтправитьЗадачуНаСервере();
				Исключение
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Не удалось записать изменения в документе!";
					Сообщение.Сообщить();					
					
				КонецПопытки;
				
				УстановитьВременныйТекущийстатус();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	//Только на 8.3
	УстановитьВременныйТекущийстатус();
	
	ОбновитьДанныеВФормеНаСервере();
	
	УстановитьДоступностьПолейИКнопок();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВидСобытияСогласования(ИмяСобятия)
	
	Возврат Перечисления.атл_ВидыСобытийСогласованияВыполненияРабот[ИмяСобятия];
	
КонецФункции

&НаСервере
Функция ЕстьОшибкиВЗадаче()
	
	ЕстьОшибкаСЗаполнениемПолей = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Исполнитель) Тогда
		Если Не ИсполнительАвторизован(Объект.Исполнитель) Тогда
			ЕстьОшибкаСЗаполнениемПолей = Истина;
		КонецЕсли;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Укажите исполнителя!";
		Сообщение.Поле = "Объект.Исполнитель";		
		Сообщение.Сообщить();		
		ЕстьОшибкаСЗаполнениемПолей = Истина;
	КонецЕсли;
				
	//для первой отправки проверяем Планируемую дату выполнения работ
	Если ЗначениеЗаполнено(мВидСобытияСогласования) Тогда
		//выполняется согласование, проверяем только исполнителя
	Иначе
		ПроверкаЗаполненияДатНазначения(ЕстьОшибкаСЗаполнениемПолей);
		//Если Объект.ПланируемаяДатаВыполненияРабот <> Дата("00010101") И Объект.ПланируемаяДатаВыполненияРабот < ТекущаяДата() Тогда
		//	Сообщение = Новый СообщениеПользователю;
		//	Сообщение.Текст = "Планируемая дата выполнения работ не может быть меньше текущей даты! Исправьте дату/время планируемого выполнения работ!";
		//	Сообщение.Поле = "ДатаВыездаДата";			
		//	Сообщение.Сообщить();			
		//	ЕстьОшибкаСЗаполнениемПолей = Истина;
		//КонецЕсли;
		
		////проверяем табличную часть дополнительных реквизитов
		//ТаблицаДляПроверки = Объект.ДополнительныеРеквизиты.Выгрузить(,"ДополнительныйРеквизит");
		//ТаблицаДляПроверки.Колонки.Добавить("Количество");
		//ТаблицаДляПроверки.ЗаполнитьЗначения(1, "Количество");
		//ТаблицаДляПроверки.Свернуть("ДополнительныйРеквизит", "Количество");
		//
		//Для Каждого Стр из ТаблицаДляПроверки Цикл
		//	Если Стр.Количество > 1 Тогда
		//		Сообщение = Новый СообщениеПользователю;
		//		Сообщение.Текст = "Дополнительный реквизит '" + Стр.ДополнительныйРеквизит + "' встречается более одного раза. Проверьте заполнение таблицы дополнительных реквизитов!";
		//		Сообщение.Поле = "Объект.ДополнительныеРеквизиты";				
		//		Сообщение.Сообщить();				
		//		ЕстьОшибкаСЗаполнениемПолей = Истина;
		//	КонецЕсли;
		//КонецЦикла;
		//
		//Для Каждого Стр из Объект.ДополнительныеРеквизиты Цикл
		//	Если Не ЗначениеЗаполнено(Стр.ДополнительныйРеквизит) Тогда
		//		Сообщение = Новый СообщениеПользователю;
		//		Сообщение.Текст = "В строке " + Стр.НомерСтроки + " не заполнено поле 'Дополнительный реквизит'!";
		//		Сообщение.Поле = "Объект.ДополнительныеРеквизиты["+ Стр.ПолучитьИдентификатор() + "].ДополнительныйРеквизит";				
		//		Сообщение.Сообщить();				
		//		ЕстьОшибкаСЗаполнениемПолей = Истина;
		//	КонецЕсли;
		//	Если Не Стр.ЗаполняетсяНаМК и Стр.Обязателен и Не ЗначениеЗаполнено(Стр.ЗначениеРеквизита) Тогда
		//		Сообщение = Новый СообщениеПользователю;
		//		Сообщение.Текст = "В строке " + Стр.НомерСтроки + " установлен флаг 'Обязателен' и не заполнено поле 'Значение реквизита'! Либо снимите флаг, либо заполните поле 'Значение реквизита'";
		//		Сообщение.Поле = "Объект.ДополнительныеРеквизиты["+ Стр.ПолучитьИдентификатор() + "].ЗначениеРеквизита";
		//		Сообщение.Сообщить();				
		//		ЕстьОшибкаСЗаполнениемПолей = Истина;
		//	КонецЕсли;
		//	
		//	//проверяем заполненность списка возможных значений
		//	Если ЗначениеЗаполнено(Стр.ДополнительныйРеквизит) Тогда
		//		Если Строка(Стр.ДополнительныйРеквизит.ТипЗначения) = Строка(Тип("СправочникСсылка.атл_ЗначенияДополнительныхРеквизитов")) Тогда
		//			Если Стр.ЗаполняетсяНаМК Тогда
		//				//проверим, есть ли хоть одно значение для выбора...
		//				Запрос = Новый Запрос;
		//				Запрос.Текст = "ВЫБРАТЬ
		//				|	атл_ЗначенияДополнительныхРеквизитов.Ссылка
		//				|ИЗ
		//				|	Справочник.атл_ЗначенияДополнительныхРеквизитов КАК атл_ЗначенияДополнительныхРеквизитов
		//				|ГДЕ
		//				|	атл_ЗначенияДополнительныхРеквизитов.ПометкаУдаления = ЛОЖЬ
		//				|	И атл_ЗначенияДополнительныхРеквизитов.Владелец = &Владелец
		//				|
		//				|УПОРЯДОЧИТЬ ПО
		//				|	атл_ЗначенияДополнительныхРеквизитов.Наименование
		//				|АВТОУПОРЯДОЧИВАНИЕ";
		//				
		//				Запрос.УстановитьПараметр("Владелец", Стр.ДополнительныйРеквизит);
		//				
		//				Результат = Запрос.Выполнить();
		//				ВыборкаДопустимыхЗначений = Результат.Выбрать();
		//				
		//				Если ВыборкаДопустимыхЗначений.Количество() = 0 Тогда
		//					//нет значений для выбора, выгружать нельзя
		//					Сообщение = Новый СообщениеПользователю;
		//					Сообщение.Текст = "У дополнительного реквизита '" + Стр.ДополнительныйРеквизит + "' не заданы значения для выбора! Удалите этот дополнительный реквизит из документа, либо заполните список возможных значений реквизита!";
		//					Сообщение.Поле = "Объект.ДополнительныеРеквизиты["+ Стр.ПолучитьИдентификатор() + "].ДополнительныйРеквизит";							
		//					Сообщение.Сообщить();							
		//					ЕстьОшибкаСЗаполнениемПолей = Истина;
		//				КонецЕсли;
		//			КонецЕсли;
		//		КонецЕсли;			
		//	КонецЕсли;
		//КонецЦикла;
		
		//проверяем табличную часть дополнительных реквизитов
		ТаблицаДляПроверки = Новый ТаблицаЗначений;
		ТаблицаДляПроверки.Колонки.Добавить("ДополнительныйРеквизит");
		ТаблицаДляПроверки.Колонки.Добавить("Количество");
				
		мСтрокиВерхУровня = ДеревоДополнительныхРеквизитов.ПолучитьЭлементы().Получить(0).ПолучитьЭлементы();
		Для Каждого текСтрока Из мСтрокиВерхУровня Цикл
			мНоваяСтрока = ТаблицаДляПроверки.Добавить();
			мНоваяСтрока.ДополнительныйРеквизит = текСтрока.ДополнительныйРеквизит;
			мНоваяСтрока.Количество = 1;
			ПроверитьЗаполнениеСтрокиДереваДополнительныхРеквизитов(текСтрока, ЕстьОшибкаСЗаполнениемПолей);
			ПодчиненныеСтроки = текСтрока.ПолучитьЭлементы();
			Для Каждого текСтрока2 Из ПодчиненныеСтроки Цикл
				мНоваяСтрока = ТаблицаДляПроверки.Добавить();
				мНоваяСтрока.ДополнительныйРеквизит = текСтрока2.ДополнительныйРеквизит;	
				мНоваяСтрока.Количество = 1;
				ПроверитьЗаполнениеСтрокиДереваДополнительныхРеквизитов(текСтрока2, ЕстьОшибкаСЗаполнениемПолей);					
			КонецЦикла;
		КонецЦикла;		
						
		ТаблицаДляПроверки.Свернуть("ДополнительныйРеквизит", "Количество");		
		Для Каждого Стр из ТаблицаДляПроверки Цикл						
			Если Не ЗначениеЗаполнено(Стр.ДополнительныйРеквизит) Тогда
				Сообщить("В таблице ""Дополнительные реквизиты"" есть строки, в которых не заполнено поле 'Дополнительный реквизит'!", СтатусСообщения.Внимание);
				ЕстьОшибкаСЗаполнениемПолей = Истина;
			Иначе
				Если Стр.Количество > 1 Тогда
					Сообщить("Дополнительный реквизит '" + Стр.ДополнительныйРеквизит + "' встречается более одного раза. Проверьте заполнение таблицы дополнительных реквизитов!", СтатусСообщения.Внимание);
					ЕстьОшибкаСЗаполнениемПолей = Истина;
				КонецЕсли;								
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;					
	
	Возврат ЕстьОшибкаСЗаполнениемПолей;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИсполнительАвторизован(Исполнитель)
	
	//проверяем, является ли выбранный исполнитель пользователем МК и авторизован ли он на сервере
	ИсполнительАвторизован = Истина;
	ЗаписьРегистра = РегистрыСведений.атл_НастройкиПодключенияМобильныхСотрудников.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Пользователь = Исполнитель;
	ЗаписьРегистра.Прочитать();
	
	Если ЗаписьРегистра.ЯвляетсяПользователемМК Тогда
		Если Не ЗаписьРегистра.АвторизованНаСервере Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Исполнитель '" + Исполнитель + "' не авторизован на сервере. Укажите другого исполнителя, либо авторизуйте указанного!";
			Сообщение.Поле = "Объект.Исполнитель";			
			Сообщение.Сообщить();			
			ИсполнительАвторизован = Ложь;
		КонецЕсли;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Исполнитель '" + Исполнитель + "' не является пользователем МК, поэтому ему нельзя отправить задачу. Укажите другого исполнителя!";
		Сообщение.Поле = "Объект.Исполнитель";		
		Сообщение.Сообщить();		
		ИсполнительАвторизован = Ложь;
	КонецЕсли;
	
	Возврат ИсполнительАвторизован;
		
КонецФункции

&НаСервере
Процедура ДозаполнитьДатыДаннымиИзИнтервалаВремени()
	
	Объект.ПланируемаяДатаВыполненияРабот = Объект.ПланируемаяДатаВыполненияРабот + ПолучитьВремяДляПрибавленияКДате(Объект.ИнтервалВремениВТечениеДня.ВремяНачало);
	Объект.ПланируемаяДатаОкончанияРабот = Объект.ПланируемаяДатаОкончанияРабот + ПолучитьВремяДляПрибавленияКДате(Объект.ИнтервалВремениВТечениеДня.ВремяКонец);

КонецПроцедуры

&НаСервере
Функция ПолучитьВремяДляПрибавленияКДате(Время)
		
	Возврат Час(Время)*3600 + Минута(Время)*60 + Секунда(Время);
	
КонецФункции

&НаСервере
Процедура ПроверкаЗаполненияДатНазначения(ЕстьОшибкаСЗаполнениемПолей)
	
	Если Элементы.ГруппаСтраницДатНазначения.ТекущаяСтраница = Элементы.ГруппаСтраницДатНазначения.ПодчиненныеЭлементы.ГруппаКоВремени Тогда		
		Если Объект.ПланируемаяДатаВыполненияРабот <> Дата("00010101") И Объект.ПланируемаяДатаВыполненияРабот < ТекущаяДата() Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Планируемая дата выполнения работ не может быть меньше текущей даты! Исправьте дату/время планируемого выполнения работ!";
			Сообщение.Поле = "Объект.ПланируемаяДатаВыполненияРабот";
			Сообщение.Сообщить();			
			ЕстьОшибкаСЗаполнениемПолей = Истина;
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницДатНазначения.ТекущаяСтраница = Элементы.ГруппаСтраницДатНазначения.ПодчиненныеЭлементы.ГруппаИнтервалВТечениеДня Тогда
		мПланируемаяДатаВыполненияРабот = ПланируемаяДата;
		мПланируемаяДатаОкончанияРабот = ПланируемаяДата;
		Если ЗначениеЗаполнено(Объект.ИнтервалВремениВТечениеДня) Тогда
			мПланируемаяДатаВыполненияРабот = мПланируемаяДатаВыполненияРабот + ПолучитьВремяДляПрибавленияКДате(Объект.ИнтервалВремениВТечениеДня.ВремяНачало);
			мПланируемаяДатаОкончанияРабот = мПланируемаяДатаОкончанияРабот + ПолучитьВремяДляПрибавленияКДате(Объект.ИнтервалВремениВТечениеДня.ВремяКонец);			
		КонецЕсли;
		Если ЗначениеЗаполнено(мПланируемаяДатаОкончанияРабот) И ЗначениеЗаполнено(мПланируемаяДатаВыполненияРабот) 
					И мПланируемаяДатаОкончанияРабот < мПланируемаяДатаВыполненияРабот Тогда			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Дата начала планируемого выполнения работ не может быть больше даты окончания! Скорее всего ошибка в заданном времени в интервале времени";
			Сообщение.Поле = "Объект.ИнтервалВремениВТечениеДня";			
			Сообщение.Сообщить();
			ЕстьОшибкаСЗаполнениемПолей = Истина;
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницДатНазначения.ТекущаяСтраница = Элементы.ГруппаСтраницДатНазначения.ПодчиненныеЭлементы.ГруппаИнтервалДат Тогда
		Если ЗначениеЗаполнено(Объект.ПланируемаяДатаОкончанияРабот) И ЗначениеЗаполнено(Объект.ПланируемаяДатаВыполненияРабот) 
					И Объект.ПланируемаяДатаОкончанияРабот < Объект.ПланируемаяДатаВыполненияРабот Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Дата начала планируемого выполнения работ не может быть больше даты окончания!";
			Сообщение.Поле = "Объект.ПланируемаяДатаВыполненияРабот";			
			Сообщение.Сообщить();					
			ЕстьОшибкаСЗаполнениемПолей = Истина;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти




