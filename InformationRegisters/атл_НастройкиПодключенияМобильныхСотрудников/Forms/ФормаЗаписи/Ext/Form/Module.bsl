
#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтображениеЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Запись.ЯвляетсяПользователемМК Тогда
		Если ПроверитьКорректностьЛогина() = Ложь ИЛИ  ПроверитьКорректностьПароля() = Ложь Тогда
			Отказ = Истина;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма") И ВладелецФормы.ИмяФормы = "Обработка.атл_НастройкаОбменаДаннымиУМС.Форма.Форма" Тогда
		ВладелецФормы.Элементы.СписокПользователи.Обновить();
	КонецЕсли;
	
	Оповестить("ОбновитьИнформациюОПодключенииМобильногоСотрудника", Запись.Пользователь);
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура ГрафикРаботыСотрудника(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресОтбораСпискаСотрудников", ПолучитьАдресОтбораКомновкиДанных());
	ПараметрыФормы.Вставить("Месяц", Месяц(ТекущаяДата()));
	ПараметрыФормы.Вставить("Год", Год(ТекущаяДата()));
	ПараметрыФормы.Вставить("НеИнтерактивноеОткрытие", Истина);
	
	ОткрытьФорму("Обработка.атл_ЗаполнениеДетальногоГрафикаРаботыСотрудников.Форма.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛогинМКПриИзменении(Элемент)
	
	ПроверитьКорректностьЛогина();
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольМКПриИзменении(Элемент)
	
	ПроверитьКорректностьПароля();
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаСервере
Процедура ОтображениеЭлементовФормы()
	
	Если Запись.АвторизованНаСервере Тогда
		Элементы.АвторизованНаСервере.Заголовок = "Авторизован на сервере";
		Элементы.АвторизованНаСервере.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	Иначе
		Элементы.АвторизованНаСервере.Заголовок = "Не авторизован на сервере";
		Элементы.АвторизованНаСервере.ЦветТекста = WebЦвета.Красный;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьКорректностьЛогина()
	
	флПроверки = Истина;
	ЛогинМК = Запись.ЛогинМК;
	
	РазрешенныеСимволов = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.-_";
	
	Если СтрДлина(ЛогинМК) < 3 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Длина логина должна быть больше двух символов!";
		Сообщение.Поле = "Запись.ЛогинМК";		
		Сообщение.Сообщить();		
		флПроверки = Ложь;		
	КонецЕсли;
	
	стрНедопустимых = "";
	Для Сч = 1 По СтрДлина(ЛогинМК) Цикл
		текСимвол = Сред(ЛогинМК, Сч, 1);
		найденныйСимвол = Найти(РазрешенныеСимволов, текСимвол);
		Если найденныйСимвол < 1 Тогда
			Если НЕ стрНедопустимых = "" Тогда
				стрНедопустимых = стрНедопустимых + ", ";
			КонецЕсли;
			стрНедопустимых = стрНедопустимых + "'" + текСимвол + "'";
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ стрНедопустимых = "" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Логин содержит не допустимые символы:" + СокрЛП(стрНедопустимых);
		Сообщение.Поле = "Запись.ЛогинМК";		
		Сообщение.Сообщить();		
		флПроверки = Ложь;
	КонецЕсли;
	
	Возврат флПроверки;
	
КонецФункции

&НаКлиенте
Функция ПроверитьКорректностьПароля()
	
	флПроверки = Истина;
	ПарольМК = Запись.ПарольМК;
	
	РазрешенныеСимволов = "!""#$%&'()*+-,.:;<>=?@[]\^_`{}~0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVXYZ";
	
	Если СтрДлина(ПарольМК) < 6 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Длина пароля должна быть больше пяти символов!";
		Сообщение.Поле = "Запись.ПарольМК";		
		Сообщение.Сообщить();		
		флПроверки = Ложь;		
	КонецЕсли;
	
	стрНедопустимых = "";
	Для Сч = 1 По СтрДлина(ПарольМК) Цикл
		текСимвол = Сред(ПарольМК, Сч, 1);
		найденныйСимвол = Найти(РазрешенныеСимволов, текСимвол);
		Если найденныйСимвол < 1 Тогда
			стрНедопустимых = стрНедопустимых + текСимвол + " ";			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ стрНедопустимых = "" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Пароль содержит не допустимые символы:" + СокрЛП(стрНедопустимых);
		Сообщение.Поле = "Запись.ПарольМК";		
		Сообщение.Сообщить();		
		флПроверки = Ложь;
	КонецЕсли;
	
	Возврат флПроверки;
	
КонецФункции

&НаСервере
Функция ПолучитьАдресОтбораКомновкиДанных()
	
	ОтборКомпоновки = Новый ОтборКомпоновкиДанных;
	НовыйОтбор = ОтборКомпоновки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Сотрудник");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение = Запись.Пользователь;
	НовыйОтбор.Использование = Истина;
	
	Возврат ПоместитьВоВременноеХранилище(ОтборКомпоновки, УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

