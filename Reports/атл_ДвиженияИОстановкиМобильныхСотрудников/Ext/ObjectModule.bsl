
Перем Исполнитель, НачалоПериода, КонецПериода, Выгрузка, ВыводитьАдрес;

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	//ПользовательскиеНастройкиМодифицированы = Ложь;
	
	//УстановитьОбязательныеНастройки(ПользовательскиеНастройкиМодифицированы);
	//УстановитьЗаголовкиПолей(ДокументРезультат);
	
	// Подготовим и выведем отчет.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	
	НайденныйПараметр = НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы.Найти("НачалоПериода");
	Если НЕ НайденныйПараметр = Неопределено Тогда
		НачалоПериода = НайденныйПараметр.Значение.Дата;	
	КонецЕсли;
	НайденныйПараметр = НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы.Найти("КонецПериода");
	Если НЕ НайденныйПараметр = Неопределено Тогда
		КонецПериода = НайденныйПараметр.Значение.Дата;	
	КонецЕсли;
	НайденныйПараметр = НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы.Найти("Исполнитель");
	Если НЕ НайденныйПараметр = Неопределено Тогда
		Исполнитель = НайденныйПараметр.Значение;	
	КонецЕсли;
	
	флПроверка = Истина;	
	Если ТипЗнч(Исполнитель) = Тип("СписокЗначений") Тогда
		Если Исполнитель.Количество() = 0 Тогда
			флПроверка = Ложь;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Необходимо выбрать хотя бы одного исполнителя!";
			Сообщение.Сообщить();
		Иначе
			НайденноеЗначение = Исполнитель.НайтиПоЗначению(Справочники.Пользователи.ПустаяСсылка());
			Если НЕ НайденноеЗначение = Неопределено Тогда
				флПроверка = Ложь;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "В списке исполнителей не должно пустых строк!";
				Сообщение.Сообщить();	
			КонецЕсли;
		КонецЕсли;				
	ИначеЕсли НЕ ЗначениеЗаполнено(Исполнитель) Тогда
		флПроверка = Ложь;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан исполнитель!";
		Сообщение.Сообщить();		
	КонецЕсли;
	Если флПроверка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ВыводитьАдрес = Ложь;
	ПолеАдрес = Новый ПолеКомпоновкиДанных("Адрес");
	ВыбранныеПоля = НастройкиКомпоновкиДанных.Выбор.Элементы;
	Для Каждого текПоле Из ВыбранныеПоля Цикл
		Если текПоле.Поле = ПолеАдрес Тогда
			ВыводитьАдрес = текПоле.Использование;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//ЭлементыОтбора = НастройкиКомпоновкиДанных.Отбор.Элементы;
	//флИсп = Ложь;
	//Сч = 0;	
	//Пока флНайден И Сч < ЭлементыОтбора.Количество() Цикл
	//	текОтбор = ЭлементыОтбора[н];
	//	Если текОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнитель") Тогда
	//		флИсп = Истина;
	//		Исполнитель = текОтбор.ПравоеЗначение;
	//	КонецЕсли;
	//	Сч = Сч + 1;
	//КонецЦикла;
		
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных, 
		НастройкиКомпоновкиДанных,
		ДанныеРасшифровки);
		
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;	
	
	ВнешниеНаборыДанных = Новый Структура("ТаблицаОтчета", ПолучитьТаблицуОтчета(200,1000,180,1800,300,400,180));
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.НачатьВывод();
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	ПроцессорВывода.ЗакончитьВывод();
	
	//ФиксацияСтрокСверху = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ФиксацияСтрокСверху");
	//Если ФиксацияСтрокСверху <> Неопределено Тогда
	//	ДокументРезультат.ФиксацияСверху = ФиксацияСтрокСверху.Значение;
	//КонецЕсли;
	//
	//ФиксацияСтрокСлева = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ФиксацияСтрокСлева");
	//Если ФиксацияСтрокСверху <> Неопределено Тогда
	//	ДокументРезультат.ФиксацияСлева = ФиксацияСтрокСлева.Значение;
	//КонецЕсли;
	
	//// Сообщим форме отчета, что настройки модифицированы
	//Если ПользовательскиеНастройкиМодифицированы Тогда
	//	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	//КонецЕсли;

КонецПроцедуры

Функция ПолучитьТаблицуОтчета(РадиусДетекцииОстановки,  // 200 м
	РадиусДетекцииРазрываТрека, // 1000 м
	МинимальноеВремяДетекцииРазрываТрека, // 180 сек (три минуты)
	МаксимальноеВремяОтсутствияДанных, //  1800 сек (пол часа), не используется пока.
	МинимальноеВремяОстановки,  // 300 сек (5 минут)
	ВремяСклеиванияГруппОстановок, // 400 м
	РадиусСклеиванияГруппОстановок) // 180 сек (три минуты)
	
	ТаблицаОтчета.Очистить();
	
	МассивПользователей = Новый Массив;
	Если Исполнитель = Неопределено Тогда
		Возврат ТаблицаОтчета.Выгрузить();
	Иначе
		Если ТипЗнч(Исполнитель) = Тип("СписокЗначений") Тогда
			Для Каждого тек Из Исполнитель Цикл
				МассивПользователей.Добавить(тек.Значение);
			КонецЦикла;
		Иначе
			МассивПользователей.Добавить(Исполнитель);	
		КонецЕсли;
	КонецЕсли;	
	
	Для Каждого текИсполнитель Из МассивПользователей Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	атл_КоординатыТрека.Период КАК Время,
		               |	атл_КоординатыТрека.Широта,
		               |	атл_КоординатыТрека.Долгота,
		               |	РАЗНОСТЬДАТ(&ДатаНач, атл_КоординатыТрека.Период, СЕКУНДА) КАК Секунды,
		               |	атл_КоординатыТрека.Пользователь КАК Пользователь
		               |ИЗ
		               |	РегистрСведений.атл_КоординатыТрека КАК атл_КоординатыТрека
		               |ГДЕ
		               |	атл_КоординатыТрека.Период МЕЖДУ &ДатаНач И &ДатаКон
		               |	И атл_КоординатыТрека.ИсточникКоординат = &Источник";
					   
		//стрУсловие = "";
		//Если НЕ Исполнитель = Неопределено И ТипЗнч(Исполнитель) = Тип("СписокЗначений") Тогда
		//	стрУсловие = "	И атл_КоординатыТрека.Пользователь В(&Пользователь)";
		//	Запрос.УстановитьПараметр("Пользователь", Исполнитель);
		//ИначеЕсли Не Исполнитель = Неопределено Тогда
		//	стрУсловие = "	И атл_КоординатыТрека.Пользователь = &Пользователь";
		//	Запрос.УстановитьПараметр("Пользователь", Исполнитель);	
		//КонецЕсли;
		
		Если НЕ текИсполнитель = Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "	И атл_КоординатыТрека.Пользователь = &Пользователь";
			Запрос.УстановитьПараметр("Пользователь", текИсполнитель);	
		КонецЕсли;
		
		//Если НЕ стрУсловие = "" Тогда
		//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Условие", стрУсловие);	
		//КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаНач", НачалоПериода);
		Запрос.УстановитьПараметр("ДатаКон", КонецПериода);
		Запрос.УстановитьПараметр("Источник", Перечисления.атл_ВидыИсточниковКоординат.GPS);
		Выгрузка = Запрос.Выполнить().Выгрузить();	
		
		Если Выгрузка.Количество() = 0 Тогда
			//Возврат ТаблицаОтчета.Выгрузить();
			Продолжить;
		КонецЕсли;
		

		//ДлМассива = Выгрузка.Количество();
		//МассивШирота = Новый Массив(ДлМассива);
		//МассивДолгота = Новый Массив(ДлМассива);
		//МассивСекунды = Новый Массив(ДлМассива);
		//МассивДельтаВремени = Новый Массив(ДлМассива);
		//МассивДлины = Новый Массив(ДлМассива);
		
		ДлМассива = Выгрузка.Количество();
		МассивШирота = Новый Массив();
		МассивДолгота = Новый Массив();
		МассивСекунды = Новый Массив();
		МассивДельтаВремени = Новый Массив();
		МассивДлины = Новый Массив();
		
		текСтрока = Выгрузка[0];
		ТекТочкаШирота = 0;
		ТекТочкаДолгота = 0;
		ТекТочкаСекунды = 0;
		ПредТочкаШирота = ВРадианы(Число(текСтрока.Широта));
		ПредТочкаДолгота = ВРадианы(Число(текСтрока.Долгота));
		ПредТочкаСекунды = текСтрока.Секунды;
		//МассивШирота[0] = ПредТочкаШирота;
		//МассивДолгота[0] = ПредТочкаДолгота;
		//МассивСекунды[0] = ПредТочкаСекунды;
		//МассивДлины[0] = 0.0;
		//МассивДельтаВремени[0] = 0.0;
		МассивШирота.Добавить(ПредТочкаШирота);
		МассивДолгота.Добавить(ПредТочкаДолгота);
		МассивСекунды.Добавить(ПредТочкаСекунды);
		МассивДлины.Добавить(0.0);
		МассивДельтаВремени.Добавить(0.0);

		
		Для Сч = 1 По ДлМассива - 1 Цикл
			текСтрока = Выгрузка[Сч];
			
			ТекТочкаШирота = ВРадианы(Число(текСтрока.Широта));
			ТекТочкаДолгота = ВРадианы(Число(текСтрока.Долгота));
		    ТекТочкаСекунды = текСтрока.Секунды;

			МассивДлины.Добавить(ДистанцияМеждуТочкамиРадианы(ПредТочкаШирота,ПредТочкаДолгота, ТекТочкаШирота,ТекТочкаДолгота));
			МассивДельтаВремени.Добавить(ТекТочкаСекунды - ПредТочкаСекунды);
			ПредТочкаШирота = ТекТочкаШирота;
			ПредТочкаДолгота = ТекТочкаДолгота;
			ПредТочкаСекунды = ТекТочкаСекунды;
		
			МассивШирота.Добавить(ТекТочкаШирота);
			МассивДолгота.Добавить(ТекТочкаДолгота);
			МассивСекунды.Добавить(текСтрока.Секунды);
			
		КонецЦикла;

		Це=0;
		Сч=0;
		//Для Сч = 0 По Объект.Координаты.Количество() - 1 Цикл
		
		Остановки.Очистить();
		
		
		Пока Сч<=ДлМассива - 1 Цикл
				
			//текСтрока = Объект.Координаты[Сч];
			//stime=vect[i][2];
			текСтрокаШирота=МассивШирота[Сч];
			текСтрокаДолгота=МассивДолгота[Сч];
			
			lamin=текСтрокаШирота;
			lamax=текСтрокаШирота;
			lomin=текСтрокаДолгота;
			lomax=текСтрокаДолгота;
			//надоПересчитать=Истина;
		
			Для Сч1 = Сч+1 По ДлМассива - 1 Цикл
				//текСтрока1 = Объект.Координаты[Сч1];
				текСтрока1Широта=МассивШирота[Сч1];
				текСтрока1Долгота=МассивДолгота[Сч1];
			
			    if(lamin>текСтрока1Широта) then
					lamin=текСтрока1Широта;
				//	надоПересчитать=Истина;
				endif;
				if(lamax<текСтрока1Широта) then
					lamax=текСтрока1Широта;
				//	надоПересчитать=Истина;
				endif;	
				if(lomin>текСтрока1Долгота) then
					lomin=текСтрока1Долгота;
				//	надоПересчитать=Истина;
				endif;
				if(lomax<текСтрока1Долгота) then
					lomax=текСтрока1Долгота;
				//	надоПересчитать=Истина;
				endif;
					
				//Если надоПересчитать Тогда 
					Дистанция = ДистанцияМеждуТочкамиРадианы(lamin,lomin,lamax,lomax);
					//надоПересчитать=Ложь;
				//КонецЕсли;
				if(Дистанция>РадиусДетекцииОстановки) then
					Прервать;
				endif;
				Це=Сч1;
			КонецЦикла;
			//текСтрока1 = Объект.Координаты[Це];
			

			Если МассивСекунды[Це]-МассивСекунды[Сч]>МинимальноеВремяОстановки then
				     //Сообщить("Остановка "+текСтрока.Секунды+" - "+текСтрока1.Секунды);
					НовСтрока = Остановки.Добавить();
					НовСтрока.Широта=(lamin+lamax)/2;
					НовСтрока.Долгота=(lomin+lomax)/2;
					НовСтрока.ВремяНачала=Сч;//текСтрока.Секунды;
					НовСтрока.ВремяОкончания=Це;//текСтрока1.Секунды;
					
		
			endif;
			
			Если Це>Сч then
				Сч=Це
			endif;
			Сч=Сч+1;
			//текСтрока.Дистанция = ДистанцияМеждуТочками(предСтрока.Широта, предСтрока.Долгота, текСтрока.Широта, предСтрока.Долгота);
			
		КонецЦикла;
		Сч=0;
		Пока Сч<Остановки.Количество() - 1 Цикл
			текСтрока = Остановки[Сч];
			текСтрока1 = Остановки[Сч+1];
			
			Если  текСтрока1.ВремяНачала-текСтрока.ВремяОкончания<РадиусСклеиванияГруппОстановок Тогда
				    Дистанция = ДистанцияМеждуТочкамиРадианы(0.0+текСтрока1.Широта, 0.0+текСтрока1.Долгота, 0.0+текСтрока.Широта, 0.0+текСтрока.Долгота);
					Если Дистанция<ВремяСклеиванияГруппОстановок Тогда
						  текСтрока.ВремяОкончания=текСтрока1.ВремяОкончания;
						   Остановки.Удалить(Сч+1);
						   //Сообщить("Удаляем "+(Сч+1));
					  Иначе 
						  Сч=Сч+1;
					  КонецЕсли
					  
			Иначе 
						  Сч=Сч+1;
			КонецЕсли
			
		КонецЦикла;
		
		СчОстановки=0;
		ОстановкиДлинаМассива=Остановки.Количество();
		Путь=0;
		Движение=Ложь;
		Остановка=Ложь;
		ИдНачалаДвижения=0;
		ИдОкончанияДвижения=0;
		ИдНачалаОстановки=0;
		ИдОкончанияОстановки=0;
		Сч=0;
		МаксСкорость=0;
		//ТаблицаРезультат.Очистить();
		Пока Сч<ДлМассива - 1 Цикл
			Если МассивДельтаВремени[Сч]>МинимальноеВремяДетекцииРазрываТрека И МассивДлины[Сч]>РадиусДетекцииРазрываТрека Тогда
				Если Остановка Тогда
					//Сообщить("Остановка с "+МассивСекунды[ИдНачалаОстановки]+" по "+МассивСекунды[Сч-1]);
					ДобавитьОстановку(ИдНачалаОстановки,Сч-1);
					//Сообщить("Разрыв остановки с "+МассивСекунды[Сч-1]+" по "+МассивСекунды[Сч]);
					ДобавитьРазрыв(Сч-1,Сч);
					ИдНачалаОстановки=Сч;
				ИначеЕсли Движение Тогда
					//Сообщить("Путь составил:  "+Путь + " c "+МассивСекунды[ИдНачалаДвижения]+" по "+МассивСекунды[Сч-1]);
					ДельтаВремени=МассивСекунды[Сч-1]-МассивСекунды[ИдНачалаДвижения];
					ДобавитьДвижение(ИдНачалаДвижения,Сч-1,Путь,?(ДельтаВремени>0,Путь*3.6/(ДельтаВремени),0),МаксСкорость);
					
					//Сообщить("Разрыв в движении с "+МассивСекунды[Сч-1]+" по "+МассивСекунды[Сч]);
					ДобавитьРазрыв(Сч-1,Сч);
					ИдНачалаДвижения=Сч;
					Путь=0;
					МаксСкорость=0;
				Иначе
					//Сообщить("Разрыв с "+МассивСекунды[Сч-1]+" по "+МассивСекунды[Сч]);
					ДобавитьРазрыв(Сч-1,Сч);
				КонецЕсли;
				
					
			КонецЕсли;
			Если СчОстановки<ОстановкиДлинаМассива Тогда
				ТекОстановка=Остановки[СчОстановки];
				Если МассивСекунды[Сч]< МассивСекунды[ТекОстановка.ВремяНачала] Тогда
					Если Остановка Тогда
						//Сообщить("Остановка с "+МассивСекунды[ИдНачалаОстановки]+" по "+МассивСекунды[Сч]);
						ДобавитьОстановку(ИдНачалаОстановки,Сч);
					КонецЕсли;

					Путь=Путь+МассивДлины[Сч];
					 
					 Если МассивДельтаВремени[Сч]>0 Тогда
						МС=МассивДлины[Сч]/МассивДельтаВремени[Сч];
						Если МаксСкорость<МС Тогда
							МаксСкорость=МС;
						КонецЕсли;
										
					 КонецЕсли;
					
					Если Не Движение Тогда
						ИдНачалаДвижения=Сч;
					КонецЕсли;
					Движение=Истина;
					Остановка=Ложь;
				ИначеЕсли МассивСекунды[Сч] > МассивСекунды[ТекОстановка.ВремяОкончания] Тогда
					
					Если Движение Тогда
						ДельтаВремени=МассивСекунды[Сч]-МассивСекунды[ИдНачалаДвижения];
						ДобавитьДвижение(ИдНачалаДвижения,Сч,Путь,?(ДельтаВремени>0,Путь*3.6/(ДельтаВремени),0),МаксСкорость);
						//Сообщить("Путь составил:  "+Путь + " c "+МассивСекунды[ИдНачалаДвижения]+" по "+МассивСекунды[Сч]);
					КонецЕсли;
					Движение=Ложь;
					Если Остановка Тогда
						//Сообщить("Остановка с "+МассивСекунды[ИдНачалаОстановки]+" по "+МассивСекунды[Сч]);
						Если ИдНачалаОстановки <> Сч Тогда 
							ДобавитьОстановку(ИдНачалаОстановки,Сч);
						КонецЕсли
						
					КонецЕсли;

					Если Не Движение Тогда
						ИдНачалаДвижения=Сч;
					КонецЕсли;

					Движение=Истина;
					Остановка=Ложь;
					Путь=0;//МассивДлины[Сч];
					Если МассивДельтаВремени[Сч]>0 Тогда
						МаксСкорость=МассивДлины[Сч]/МассивДельтаВремени[Сч];
					Иначе
						МаксСкорость=0;
					КонецЕсли;
					
					СчОстановки=СчОстановки+1;
				Иначе
					Если Движение Тогда
						Путь=Путь+МассивДлины[Сч];
						ДельтаВремени=МассивСекунды[Сч]-МассивСекунды[ИдНачалаДвижения];
						ДобавитьДвижение(ИдНачалаДвижения,Сч,Путь,?(ДельтаВремени>0,Путь*3.6/(ДельтаВремени),0),МаксСкорость);
						//Сообщить("Путь составил:  "+Путь + " c "+МассивСекунды[ИдНачалаДвижения]+" по "+МассивСекунды[Сч]);
					КонецЕсли;
					Движение=Ложь;
					Если Не Остановка Тогда
						ИдНачалаОстановки=Сч;
					КонецЕсли;

					Остановка=Истина;
					
					Путь=0;
					МаксСкорость=0;
				КонецЕсли;
			Иначе
	  			Если Не Движение Тогда
					ИдНачалаДвижения=Сч;
				КонецЕсли;
				Если Остановка Тогда
					//Сообщить("Остановка с "+МассивСекунды[ИдНачалаОстановки]+" по "+МассивСекунды[Сч]);
					ДобавитьОстановку(ИдНачалаОстановки,Сч);
				КонецЕсли;

				 Движение=Истина;
				 Остановка=Ложь;
				
				 Путь=Путь+МассивДлины[Сч];
				 
				 Если МассивДельтаВремени[Сч]>0 Тогда
					МС=МассивДлины[Сч]/МассивДельтаВремени[Сч];
					Если МаксСкорость<МС Тогда
						МаксСкорость=МС;
					КонецЕсли;
									
				 КонецЕсли;
					
			КонецЕсли;
			Сч=Сч+1;
		КонецЦикла;
		Если Движение Тогда
			ДельтаВремени=МассивСекунды[?(Сч<ДлМассива,Сч,ДлМассива-1)]-МассивСекунды[ИдНачалаДвижения];
			ДобавитьДвижение(ИдНачалаДвижения,?(Сч<ДлМассива,Сч,ДлМассива-1),Путь,?(ДельтаВремени>0,Путь*3.6/(ДельтаВремени),0),МаксСкорость);
			//Сообщить("Путь составил:  "+Путь + " c "+МассивСекунды[ИдНачалаДвижения]+" по "+МассивСекунды[?(Сч<ДлМассива,Сч,ДлМассива-1)]);
		КонецЕсли;
		Если Остановка Тогда
			//Сообщить("Остановка с "+МассивСекунды[ИдНачалаОстановки]+" по "+МассивСекунды[?(Сч<ДлМассива,Сч,ДлМассива-1)]);
			ДобавитьОстановку(ИдНачалаОстановки,?(Сч<ДлМассива,Сч,ДлМассива-1));
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТаблицаОтчета.Выгрузить();
	
КонецФункции

Функция ДистанцияМеждуТочкамиРадианы(Широта1, Долгота1, Широта2, Долгота2)
	R = 6371; // km
	dLat = Широта2-Широта1;
		dLon = Долгота2-Долгота1;     
		a = sin(dLat/2) * sin(dLat/2) +
						cos(Широта1) * cos(Широта2) * 
						sin(dLon/2) * sin(dLon/2);   
		c = 2 * atan2 (sqrt(a), sqrt(1-a)); 
		d = R * c * 1000;
	Возврат d;
КонецФункции

Функция ДобавитьОстановку(ИдНачала,ИдОкончания)
		
	стрНачало = Выгрузка[ИдНачала];
	стрОкончание = Выгрузка[ИдОкончания];
	НовСтрока = ТаблицаОтчета.Добавить();
	НовСтрока.Исполнитель = стрНачало.Пользователь;
	НовСтрока.НачалоПериода = стрНачало.Время;
	НовСтрока.КонецПериода = стрОкончание.Время;	
	НовСтрока.Длительность = ВычислитьДлительностьОтрезка(НовСтрока.НачалоПериода, НовСтрока.КонецПериода); 
	НовСтрока.Широта = стрНачало.Широта;
	НовСтрока.Долгота = стрНачало.Долгота;
	НовСтрока.ВидИнтервала = Перечисления.атл_ВидыИнтерваловТрека.Остановка;	
	Если ВыводитьАдрес Тогда
		НовСтрока.Адрес = ПолучитьАдрес(стрНачало.Широта, стрНачало.Долгота);
	КонецЕсли;
	
КонецФункции

Функция ДобавитьДвижение(ИдНачала,ИдОкончания,ПройденныйПуть,СредняяСкорость,МаксимальнаяСкорость)
	
	стрНачало = Выгрузка[ИдНачала];
	стрОкончание = Выгрузка[ИдОкончания];
	НовСтрока = ТаблицаОтчета.Добавить();
	НовСтрока.Исполнитель = стрНачало.Пользователь;
	НовСтрока.НачалоПериода = стрНачало.Время;
	НовСтрока.КонецПериода = стрОкончание.Время;
	НовСтрока.Длительность = ВычислитьДлительностьОтрезка(НовСтрока.НачалоПериода, НовСтрока.КонецПериода); 
	НовСтрока.Расстояние = ПройденныйПуть/1000;
	НовСтрока.СредняяСкорость = СредняяСкорость;
	НовСтрока.МаксимальнаяСкорость = МаксимальнаяСкорость*3.6;
	НовСтрока.ВидИнтервала = Перечисления.атл_ВидыИнтерваловТрека.Движение;
	
КонецФункции

Функция ДобавитьРазрыв(ИдНачала,ИдОкончания)
	
	стрНачало = Выгрузка[ИдНачала];
	стрОкончание = Выгрузка[ИдОкончания];
	НовСтрока = ТаблицаОтчета.Добавить();
	НовСтрока.Исполнитель = стрНачало.Пользователь;
	НовСтрока.НачалоПериода = стрНачало.Время;
	НовСтрока.КонецПериода = стрОкончание.Время;
	НовСтрока.Длительность = ВычислитьДлительностьОтрезка(НовСтрока.НачалоПериода, НовСтрока.КонецПериода); 
	НовСтрока.ВидИнтервала = Перечисления.атл_ВидыИнтерваловТрека.НетДанных;
	
КонецФункции

Функция ВРадианы(degrees) 
    Возврат (degrees * 3.1415) / 180;
	
КонецФункции	

Функция atan2 (y, x)
	if x>0 then
		return atan(y/x);
	иначеесли x=0 then
		if y>0 then
			return 3.1415/2;	
		иначеесли y<0 then
			return -3.1415/2;
		else
			return 0;
		endif			
	else
		if y>=0 then
			return atan(y/x)+3.1415;

		else
			return atan(y/x)-3.1415;

		endif
	endif
КонецФункции

Функция ВычислитьДлительностьОтрезка(НачПериода, КонПериода)
	
	стрДлительность = "";
	
	Если НЕ НачПериода = Дата("00010101") И НЕ КонПериода = Дата("00010101") Тогда
		Разница = КонПериода - НачПериода;
		
		Если Разница > 31104000 Тогда
			текГод = Цел(Разница / 31104000);
			Если текГод > 0 Тогда
				стрДлительность = Строка(текГод) + " г. ";
				Разница = Разница - текГод * 31104000;
			КонецЕсли;
		КонецЕсли;
		
		Если Разница > 2592000 Тогда  // из расчета, что в месяце 30 дней
			текМес = Цел(Разница / 2592000);
			Если текМес > 0 Тогда				
				стрДлительность = стрДлительность + Строка(текМес) + " мес. ";
				Разница = Разница - текМес * 2592000;
			КонецЕсли;
		КонецЕсли;
		
		Если Разница > 86400 Тогда
			текДень = Цел(Разница / 86400);
			Если текДень > 0 Тогда				
				стрДлительность = стрДлительность + Строка(текДень) + " дн. ";
				Разница = Разница - текДень * 86400;
			КонецЕсли;
		КонецЕсли;
		
		Если Разница > 3600 Тогда
			текЧас = Цел(Разница / 3600);
			Если текЧас > 0 Тогда				
				стрДлительность = стрДлительность + Строка(текЧас) + " ч. ";
				Разница = Разница - текЧас * 3600;
			КонецЕсли;
		КонецЕсли;
		
		Если Разница > 60 Тогда
			текМин = Цел(Разница / 60);
			Если текМин > 0 Тогда				
				стрДлительность = стрДлительность + Строка(текМин) + " мин. ";
				Разница = Разница - текМин * 60;
			КонецЕсли;
		КонецЕсли;
		
		Если Разница > 0 Тогда
			стрДлительность = стрДлительность + Строка(Разница) + " сек. ";	
		КонецЕсли;
		
		стрДлительность = СокрЛП(стрДлительность);	
		
	КонецЕсли;
	
	Возврат стрДлительность;
	
КонецФункции

Функция ПолучитьАдрес(Широта, Долгота)
	
	Соединение = Новый HTTPСоединение("nominatim.openstreetmap.org"); 
	имяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
	Соединение.Получить("reverse?format=json&lat=" + Широта +"&lon=" + Долгота + "&zoom=18&addressdetails=1&format=xml", имяВыходногоФайла);
	
	Файл = Новый ЧтениеТекста(имяВыходногоФайла,КодировкаТекста.UTF8);
	ВесьФайлОднойСтрокой = Файл.Прочитать();
	Файл.Закрыть();
	Если НЕ ЗначениеЗаполнено(ВесьФайлОднойСтрокой) Тогда
		Возврат "";	
	КонецЕсли;
	
	ПервыйСимвол = Найти(ВесьФайлОднойСтрокой, "<result");
	ВторойСимвол = Найти(ВесьФайлОднойСтрокой, "</");
	Результат = Сред(ВесьФайлОднойСтрокой, ПервыйСимвол+8, ВторойСимвол-(ПервыйСимвол + 8)); 	
	ПервыйСимвол = Найти(Результат, ">");	
	Результат = Сред(Результат, ПервыйСимвол + 1);
	Если ПервыйСимвол = 0 ИЛИ ВторойСимвол = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	МассивПодстрок = Новый Массив;
	Пока Истина Цикл
		Поз = Найти(Результат,",");
		Если Поз = 0 Тогда
			МассивПодстрок.Добавить(Результат);
			Прервать;
		КонецЕсли;
		МассивПодстрок.Добавить(Лев(Результат, Поз-1));
		Результат = Сред(Результат, Поз + 1);		
	КонецЦикла;
	
	СтрокаРезультат = "";
	Сч = МассивПодстрок.Количество() - 1;
	Пока Сч >= 0 Цикл
		СтрокаРезультат = СтрокаРезультат + МассивПодстрок[Сч] + ",";
		Сч = Сч - 1;
	КонецЦикла;
	
	Если НЕ СтрокаРезультат = "" Тогда
		СтрокаРезультат = Лев(СтрокаРезультат, СтрДлина(СтрокаРезультат) - 1); 		
	КонецЕсли;
	
	Возврат СокрЛП(СтрокаРезультат);
 
КонецФункции


